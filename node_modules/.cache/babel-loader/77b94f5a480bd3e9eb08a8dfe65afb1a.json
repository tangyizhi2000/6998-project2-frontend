{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useState } from 'react';\nimport styles from './styles.css.js';\nimport clsx from 'clsx';\nimport InternalIcon from '../../icon/internal';\nexport function useDropzoneVisible(multiple) {\n  const [isDropzoneVisible, setDropzoneVisible] = useState(false);\n  // Registering global drag events listeners.\n  useEffect(() => {\n    // The timer helps avoiding dropzone blinking.\n    let dragTimer = null;\n    // The file-upload dropzone is shown when the user drags files over to the browser.\n    const onDocumentDragOver = event => {\n      var _a, _b;\n      event.preventDefault();\n      let files = 0;\n      for (let item = 0; item < (((_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.items.length) || 0); item++) {\n        if (((_b = event.dataTransfer) === null || _b === void 0 ? void 0 : _b.items[item].kind) === 'file') {\n          files++;\n        }\n      }\n      if (files > 0 && (multiple || files === 1)) {\n        setDropzoneVisible(true);\n        dragTimer && clearTimeout(dragTimer);\n      }\n    };\n    // When the files are no longer dragged over the browser the state must be reset.\n    const onDocumentDragLeave = event => {\n      event.preventDefault();\n      dragTimer = setTimeout(() => setDropzoneVisible(false), 25);\n    };\n    // If the files were dropped the state must be reset.\n    const onDocumentDrop = event => {\n      event.preventDefault();\n      dragTimer = setTimeout(() => setDropzoneVisible(false), 25);\n    };\n    document.addEventListener('dragover', onDocumentDragOver, false);\n    document.addEventListener('dragleave', onDocumentDragLeave, false);\n    document.addEventListener('drop', onDocumentDrop, false);\n    return () => {\n      dragTimer && clearTimeout(dragTimer);\n      document.removeEventListener('dragover', onDocumentDragOver);\n      document.removeEventListener('dragleave', onDocumentDragLeave);\n      document.removeEventListener('drop', onDocumentDrop);\n    };\n  }, [multiple]);\n  return isDropzoneVisible;\n}\nexport function Dropzone(_ref) {\n  let {\n    onChange,\n    children\n  } = _ref;\n  const [isDropzoneHovered, setDropzoneHovered] = useState(false);\n  const onDragOver = event => {\n    event.preventDefault();\n    if (event.dataTransfer) {\n      setDropzoneHovered(true);\n      event.dataTransfer.dropEffect = 'copy';\n    }\n  };\n  const onDragLeave = event => {\n    event.preventDefault();\n    setDropzoneHovered(false);\n    if (event.dataTransfer) {\n      event.dataTransfer.dropEffect = 'none';\n    }\n  };\n  const onDrop = event => {\n    event.preventDefault();\n    setDropzoneHovered(false);\n    onChange(Array.from(event.dataTransfer.files));\n  };\n  return React.createElement(\"div\", {\n    className: clsx(styles.dropzone, isDropzoneHovered && styles['dropzone-hovered']),\n    onDragOver: onDragOver,\n    onDragLeave: onDragLeave,\n    onDrop: onDrop\n  }, React.createElement(InternalIcon, {\n    name: \"upload\"\n  }), React.createElement(\"span\", null, children));\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","styles","clsx","InternalIcon","useDropzoneVisible","multiple","isDropzoneVisible","setDropzoneVisible","dragTimer","onDocumentDragOver","event","preventDefault","files","item","dataTransfer","items","length","kind","clearTimeout","onDocumentDragLeave","setTimeout","onDocumentDrop","document","addEventListener","removeEventListener","Dropzone","onChange","children","isDropzoneHovered","setDropzoneHovered","onDragOver","dropEffect","onDragLeave","onDrop","Array","from","className","dropzone","name"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/file-upload/dropzone/lib/default/file-upload/dropzone/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useState } from 'react';\nimport styles from './styles.css.js';\nimport clsx from 'clsx';\nimport InternalIcon from '../../icon/internal';\n\ninterface DropzoneProps {\n  onChange: (files: File[]) => void;\n  children: React.ReactNode;\n}\n\nexport function useDropzoneVisible(multiple: boolean) {\n  const [isDropzoneVisible, setDropzoneVisible] = useState(false);\n\n  // Registering global drag events listeners.\n  useEffect(() => {\n    // The timer helps avoiding dropzone blinking.\n    let dragTimer: null | ReturnType<typeof setTimeout> = null;\n\n    // The file-upload dropzone is shown when the user drags files over to the browser.\n    const onDocumentDragOver = (event: DragEvent) => {\n      event.preventDefault();\n\n      let files = 0;\n      for (let item = 0; item < (event.dataTransfer?.items.length || 0); item++) {\n        if (event.dataTransfer?.items[item].kind === 'file') {\n          files++;\n        }\n      }\n      if (files > 0 && (multiple || files === 1)) {\n        setDropzoneVisible(true);\n        dragTimer && clearTimeout(dragTimer);\n      }\n    };\n\n    // When the files are no longer dragged over the browser the state must be reset.\n    const onDocumentDragLeave = (event: DragEvent) => {\n      event.preventDefault();\n\n      dragTimer = setTimeout(() => setDropzoneVisible(false), 25);\n    };\n\n    // If the files were dropped the state must be reset.\n    const onDocumentDrop = (event: DragEvent) => {\n      event.preventDefault();\n\n      dragTimer = setTimeout(() => setDropzoneVisible(false), 25);\n    };\n\n    document.addEventListener('dragover', onDocumentDragOver, false);\n    document.addEventListener('dragleave', onDocumentDragLeave, false);\n    document.addEventListener('drop', onDocumentDrop, false);\n\n    return () => {\n      dragTimer && clearTimeout(dragTimer);\n      document.removeEventListener('dragover', onDocumentDragOver);\n      document.removeEventListener('dragleave', onDocumentDragLeave);\n      document.removeEventListener('drop', onDocumentDrop);\n    };\n  }, [multiple]);\n\n  return isDropzoneVisible;\n}\n\nexport function Dropzone({ onChange, children }: DropzoneProps) {\n  const [isDropzoneHovered, setDropzoneHovered] = useState(false);\n\n  const onDragOver = (event: React.DragEvent) => {\n    event.preventDefault();\n\n    if (event.dataTransfer) {\n      setDropzoneHovered(true);\n      event.dataTransfer.dropEffect = 'copy';\n    }\n  };\n\n  const onDragLeave = (event: React.DragEvent) => {\n    event.preventDefault();\n    setDropzoneHovered(false);\n\n    if (event.dataTransfer) {\n      event.dataTransfer.dropEffect = 'none';\n    }\n  };\n\n  const onDrop = (event: React.DragEvent) => {\n    event.preventDefault();\n    setDropzoneHovered(false);\n\n    onChange(Array.from(event.dataTransfer.files));\n  };\n\n  return (\n    <div\n      className={clsx(styles.dropzone, isDropzoneHovered && styles['dropzone-hovered'])}\n      onDragOver={onDragOver}\n      onDragLeave={onDragLeave}\n      onDrop={onDrop}\n    >\n      <InternalIcon name=\"upload\" />\n      <span>{children}</span>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}