{"ast":null,"code":"import { AceModes } from './ace-modes';\nimport { findUpUntil } from '../internal/utils/dom';\nexport const DEFAULT_LIGHT_THEME = 'dawn';\nexport const DEFAULT_DARK_THEME = 'tomorrow_night_bright';\nconst KEYBOARD_ACCESSIBILITY_MIN_ACE_VERSION = [1, 23];\nexport function supportsKeyboardAccessibility(ace) {\n  var _a;\n  // Split semantic version numbers. We don't need a full semver parser for this.\n  const semanticVersion = (_a = ace === null || ace === void 0 ? void 0 : ace.version) === null || _a === void 0 ? void 0 : _a.split('.').map(part => {\n    const parsed = parseInt(part);\n    return Number.isNaN(parsed) ? part : parsed;\n  });\n  return !!semanticVersion && typeof semanticVersion[0] === 'number' && semanticVersion[0] >= KEYBOARD_ACCESSIBILITY_MIN_ACE_VERSION[0] && typeof semanticVersion[1] === 'number' && semanticVersion[1] >= KEYBOARD_ACCESSIBILITY_MIN_ACE_VERSION[1];\n}\nexport function getDefaultConfig(ace) {\n  return Object.assign({\n    behavioursEnabled: true\n  }, supportsKeyboardAccessibility(ace) ? {\n    enableKeyboardAccessibility: true\n  } : {});\n}\nexport function getDefaultTheme(element) {\n  const isDarkMode = !!findUpUntil(element, node => node.classList.contains('awsui-polaris-dark-mode') || node.classList.contains('awsui-dark-mode'));\n  return isDarkMode ? DEFAULT_DARK_THEME : DEFAULT_LIGHT_THEME;\n}\nexport function getAceTheme(theme) {\n  return `ace/theme/${theme}`;\n}\nexport function getLanguageLabel(language) {\n  var _a;\n  return ((_a = AceModes.filter(mode => mode.value === language)[0]) === null || _a === void 0 ? void 0 : _a.label) || language;\n}","map":{"version":3,"mappings":"AAIA,SAASA,QAAQ,QAAQ,aAAa;AAGtC,SAASC,WAAW,QAAQ,uBAAuB;AAInD,OAAO,MAAMC,mBAAmB,GAAwC,MAAM;AAC9E,OAAO,MAAMC,kBAAkB,GAAuC,uBAAuB;AAE7F,MAAMC,sCAAsC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;AAEtD,OAAM,SAAUC,6BAA6B,CAACC,GAAQ;;EACpD;EACA,MAAMC,eAAe,GAAG,SAAG,aAAHD,GAAG,uBAAHA,GAAG,CAAEE,OAAO,0CAAEC,KAAK,CAAC,GAAG,EAAEC,GAAG,CAAEC,IAAY,IAAI;IACpE,MAAMC,MAAM,GAAGC,QAAQ,CAACF,IAAI,CAAC;IAC7B,OAAOG,MAAM,CAACC,KAAK,CAACH,MAAM,CAAC,GAAGD,IAAI,GAAGC,MAAM;EAC7C,CAAC,CAAC;EAEF,OACE,CAAC,CAACL,eAAe,IACjB,OAAOA,eAAe,CAAC,CAAC,CAAC,KAAK,QAAQ,IACtCA,eAAe,CAAC,CAAC,CAAC,IAAIH,sCAAsC,CAAC,CAAC,CAAC,IAC/D,OAAOG,eAAe,CAAC,CAAC,CAAC,KAAK,QAAQ,IACtCA,eAAe,CAAC,CAAC,CAAC,IAAIH,sCAAsC,CAAC,CAAC,CAAC;AAEnE;AAEA,OAAM,SAAUY,gBAAgB,CAACV,GAAQ;EACvC;IACEW,iBAAiB,EAAE;EAAI,GACnBZ,6BAA6B,CAACC,GAAG,CAAC,GAAG;IAAEY,2BAA2B,EAAE;EAAI,CAAE,GAAG,EAAE,CAAC;AAExF;AAEA,OAAM,SAAUC,eAAe,CAACC,OAAoB;EAClD,MAAMC,UAAU,GAAG,CAAC,CAACpB,WAAW,CAC9BmB,OAAO,EACPE,IAAI,IAAIA,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,yBAAyB,CAAC,IAAIF,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,iBAAiB,CAAC,CACzG;EACD,OAAOH,UAAU,GAAGlB,kBAAkB,GAAGD,mBAAmB;AAC9D;AAEA,OAAM,SAAUuB,WAAW,CAACC,KAA4B;EACtD,OAAO,aAAaA,KAAK,EAAE;AAC7B;AAEA,OAAM,SAAUC,gBAAgB,CAACC,QAAkC;;EACjE,OAAO,eAAQ,CAACC,MAAM,CAAEC,IAAuB,IAAKA,IAAI,CAACC,KAAK,KAAKH,QAAQ,CAAC,CAAC,CAAC,CAAC,0CAAEI,KAAK,KAAIJ,QAAQ;AACpG","names":["AceModes","findUpUntil","DEFAULT_LIGHT_THEME","DEFAULT_DARK_THEME","KEYBOARD_ACCESSIBILITY_MIN_ACE_VERSION","supportsKeyboardAccessibility","ace","semanticVersion","version","split","map","part","parsed","parseInt","Number","isNaN","getDefaultConfig","behavioursEnabled","enableKeyboardAccessibility","getDefaultTheme","element","isDarkMode","node","classList","contains","getAceTheme","theme","getLanguageLabel","language","filter","mode","value","label"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/code-editor/lib/default/code-editor/util.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Ace } from 'ace-builds';\n\nimport { AceModes } from './ace-modes';\nimport { LightThemes, DarkThemes } from './ace-themes';\nimport { CodeEditorProps } from './interfaces';\nimport { findUpUntil } from '../internal/utils/dom';\n\nexport type PaneStatus = 'error' | 'warning' | 'hidden';\n\nexport const DEFAULT_LIGHT_THEME: typeof LightThemes[number]['value'] = 'dawn';\nexport const DEFAULT_DARK_THEME: typeof DarkThemes[number]['value'] = 'tomorrow_night_bright';\n\nconst KEYBOARD_ACCESSIBILITY_MIN_ACE_VERSION = [1, 23];\n\nexport function supportsKeyboardAccessibility(ace: any): boolean {\n  // Split semantic version numbers. We don't need a full semver parser for this.\n  const semanticVersion = ace?.version?.split('.').map((part: string) => {\n    const parsed = parseInt(part);\n    return Number.isNaN(parsed) ? part : parsed;\n  });\n\n  return (\n    !!semanticVersion &&\n    typeof semanticVersion[0] === 'number' &&\n    semanticVersion[0] >= KEYBOARD_ACCESSIBILITY_MIN_ACE_VERSION[0] &&\n    typeof semanticVersion[1] === 'number' &&\n    semanticVersion[1] >= KEYBOARD_ACCESSIBILITY_MIN_ACE_VERSION[1]\n  );\n}\n\nexport function getDefaultConfig(ace: any): Partial<Ace.EditorOptions> {\n  return {\n    behavioursEnabled: true,\n    ...(supportsKeyboardAccessibility(ace) ? { enableKeyboardAccessibility: true } : {}),\n  };\n}\n\nexport function getDefaultTheme(element: HTMLElement): CodeEditorProps.Theme {\n  const isDarkMode = !!findUpUntil(\n    element,\n    node => node.classList.contains('awsui-polaris-dark-mode') || node.classList.contains('awsui-dark-mode')\n  );\n  return isDarkMode ? DEFAULT_DARK_THEME : DEFAULT_LIGHT_THEME;\n}\n\nexport function getAceTheme(theme: CodeEditorProps.Theme) {\n  return `ace/theme/${theme}`;\n}\n\nexport function getLanguageLabel(language: CodeEditorProps.Language): string {\n  return AceModes.filter((mode: { value: string }) => mode.value === language)[0]?.label || language;\n}\n"]},"metadata":{},"sourceType":"module"}