{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport styles from './styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n// A small buffer to make calculations more lenient against browser lag or padding adjustments.\nvar RESPONSIVENESS_BUFFER = 20;\nexport function useTopNavigation(_ref) {\n  var identity = _ref.identity,\n    search = _ref.search,\n    utilities = _ref.utilities;\n  // Refs and breakpoints\n  var mainRef = useRef(null);\n  var virtualRef = useRef(null);\n  var _useContainerBreakpoi = useContainerBreakpoints(['xxs', 's']),\n    _useContainerBreakpoi2 = _slicedToArray(_useContainerBreakpoi, 2),\n    breakpoint = _useContainerBreakpoi2[0],\n    breakpointRef = _useContainerBreakpoi2[1];\n  // Responsiveness state\n  // The component works by calculating the possible resize states that it can\n  // be in, and having a state variable to track which state we're currently in.\n  var hasSearch = !!search;\n  var hasTitleWithLogo = identity && !!identity.logo && !!identity.title;\n  var responsiveStates = useMemo(function () {\n    return generateResponsiveStateKeys(utilities, hasSearch, hasTitleWithLogo);\n  }, [utilities, hasSearch, hasTitleWithLogo]);\n  // To hide/show elements dynamically, we need to know how much space they take up,\n  // even if they're not being rendered. The top navigation elements are hidden/resized\n  // based on the available size or if a search bar is open, and they need to be available\n  // for calculations so we know where to toggle them. So we render a second, more stable\n  // top-nav off screen to do these calculations against.\n  //\n  // We can't \"affix\" these values to pixels because they can depend on spacing tokens.\n  // It's easier to render all of these utilities separately rather than figuring out\n  // spacing token values, icon sizes, text widths, etc.\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    responsiveState = _useState2[0],\n    setResponsiveState = _useState2[1];\n  var recalculateFit = useCallback(function () {\n    var _a, _b, _c, _d;\n    if (!(mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) || !virtualRef.current) {\n      setResponsiveState(responsiveStates[0]);\n      return;\n    }\n    // Get available width from the visible top navigation.\n    var availableWidth = getContentBoxWidth(mainRef.current.querySelector(\".\".concat(styles['padding-box'])));\n    if (availableWidth === 0) {\n      // Likely in an SSR or Jest situation.\n      setResponsiveState(responsiveStates[0]);\n      return;\n    }\n    var sizeConfiguration = {\n      hasSearch: hasSearch,\n      availableWidth: availableWidth,\n      // Get widths from the hidden top navigation\n      fullIdentityWidth: virtualRef.current.querySelector(\".\".concat(styles.identity)).getBoundingClientRect().width,\n      titleWidth: (_b = (_a = virtualRef.current.querySelector(\".\".concat(styles.title))) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width) !== null && _b !== void 0 ? _b : 0,\n      searchSlotWidth: (_d = (_c = virtualRef.current.querySelector(\".\".concat(styles.search))) === null || _c === void 0 ? void 0 : _c.getBoundingClientRect().width) !== null && _d !== void 0 ? _d : 0,\n      searchUtilityWidth: virtualRef.current.querySelector('[data-utility-special=\"search\"]').getBoundingClientRect().width,\n      utilitiesLeftPadding: parseFloat(getComputedStyle(virtualRef.current.querySelector(\".\".concat(styles.utilities))).paddingLeft || '0px'),\n      utilityWithLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(\"[data-utility-hide=\\\"false\\\"]\")).map(function (element) {\n        return element.getBoundingClientRect().width;\n      }),\n      utilityWithoutLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(\"[data-utility-hide=\\\"true\\\"]\")).map(function (element) {\n        return element.getBoundingClientRect().width;\n      }),\n      menuTriggerUtilityWidth: virtualRef.current.querySelector('[data-utility-special=\"menu-trigger\"]').getBoundingClientRect().width\n    };\n    setResponsiveState(determineBestResponsiveState(responsiveStates, sizeConfiguration));\n  }, [responsiveStates, hasSearch]);\n  var _useContainerQuery = useContainerQuery(function () {\n      recalculateFit();\n    }, [recalculateFit]),\n    _useContainerQuery2 = _slicedToArray(_useContainerQuery, 2),\n    containerQueryRef = _useContainerQuery2[1];\n  // Due to being rendered in a portal, the virtual navigation isn't rendered\n  // at the same time as the main one.\n  var onVirtualMount = useCallback(function (element) {\n    virtualRef.current = element;\n    recalculateFit();\n  }, [recalculateFit]);\n  // Search slot expansion on small screens\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isSearchMinimized = _useState4[0],\n    setSearchMinimized = _useState4[1];\n  var isSearchExpanded = !isSearchMinimized && hasSearch && (responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch);\n  // If the search was expanded, and then the screen resized so that the\n  // expansion is no longer necessary. So we implicitly minimize it.\n  useEffect(function () {\n    if (!(responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch)) {\n      setSearchMinimized(true);\n    }\n  }, [responsiveState]);\n  // If the search is expanded after clicking on the search utility, move\n  // the focus to the input. Since this is a user-controlled slot, we're just\n  // assuming that it contains an input, though it's a pretty safe guess.\n  useEffect(function () {\n    var _a, _b;\n    if (isSearchExpanded) {\n      (_b = (_a = mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(\".\".concat(styles.search, \" input\"))) === null || _b === void 0 ? void 0 : _b.focus();\n    }\n  }, [isSearchExpanded, mainRef]);\n  var mergedMainRef = useMergeRefs(mainRef, containerQueryRef, breakpointRef);\n  return {\n    mainRef: mergedMainRef,\n    virtualRef: onVirtualMount,\n    responsiveState: responsiveState !== null && responsiveState !== void 0 ? responsiveState : responsiveStates[0],\n    breakpoint: breakpoint !== null && breakpoint !== void 0 ? breakpoint : 'default',\n    isSearchExpanded: !!isSearchExpanded,\n    onSearchUtilityClick: function onSearchUtilityClick() {\n      return setSearchMinimized(function (isSearchMinimized) {\n        return !isSearchMinimized;\n      });\n    }\n  };\n}\n/**\n * Get the width of the content box (assuming the element's box-sizing is border-box).\n */\nfunction getContentBoxWidth(element) {\n  var style = getComputedStyle(element);\n  return parseFloat(style.width || '0px') - parseFloat(style.paddingLeft || '0px') - parseFloat(style.paddingRight || '0px');\n}\n/**\n * Generates the series of responsive steps that can be performed on the header in order.\n */\nexport function generateResponsiveStateKeys(utilities, canHideSearch, canHideTitle) {\n  var states = [{}];\n  if (utilities.some(function (utility) {\n    return utility.text;\n  })) {\n    states.push({\n      hideUtilityText: true\n    });\n  }\n  if (canHideSearch) {\n    states.push({\n      hideUtilityText: true,\n      hideSearch: true\n    });\n  }\n  var hiddenUtilties = [];\n  for (var i = 0; i < utilities.length; i++) {\n    if (!utilities[i].disableUtilityCollapse) {\n      hiddenUtilties.push(i);\n      states.push({\n        hideUtilityText: true,\n        hideSearch: canHideSearch || undefined,\n        hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : undefined\n      });\n    }\n  }\n  if (canHideTitle) {\n    states.push({\n      hideUtilityText: true,\n      hideSearch: canHideSearch || undefined,\n      hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : undefined,\n      hideTitle: true\n    });\n  }\n  return states;\n}\n/**\n * Determines the best responsive state configuration of the top navigation, based on the given list of possible responsive states\n * and the current sizes of all elements inside the navigation bar.\n */\nexport function determineBestResponsiveState(possibleStates, sizes) {\n  var hasSearch = sizes.hasSearch,\n    availableWidth = sizes.availableWidth,\n    utilitiesLeftPadding = sizes.utilitiesLeftPadding,\n    fullIdentityWidth = sizes.fullIdentityWidth,\n    titleWidth = sizes.titleWidth,\n    searchSlotWidth = sizes.searchSlotWidth,\n    searchUtilityWidth = sizes.searchUtilityWidth,\n    utilityWithLabelWidths = sizes.utilityWithLabelWidths,\n    utilityWithoutLabelWidths = sizes.utilityWithoutLabelWidths,\n    menuTriggerUtilityWidth = sizes.menuTriggerUtilityWidth;\n  // Iterate through each state and calculate its expected required width.\n  var _iterator = _createForOfIteratorHelper(possibleStates),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var state = _step.value;\n      var searchWidth = hasSearch ? state.hideSearch ? searchUtilityWidth : searchSlotWidth : 0;\n      var utilitiesWidth = (state.hideUtilityText ? utilityWithoutLabelWidths : utilityWithLabelWidths).filter(function (_width, i) {\n        return !state.hideUtilities || state.hideUtilities.indexOf(i) === -1;\n      }).reduce(function (sum, width) {\n        return sum + width;\n      }, 0);\n      var menuTriggerWidth = state.hideUtilities ? menuTriggerUtilityWidth : 0;\n      var identityWidth = state.hideTitle ? fullIdentityWidth - titleWidth : fullIdentityWidth;\n      var expectedInnerWidth = identityWidth + searchWidth + utilitiesLeftPadding + utilitiesWidth + menuTriggerWidth;\n      if (expectedInnerWidth <= availableWidth - RESPONSIVENESS_BUFFER) {\n        return {\n          v: state\n        };\n      }\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _ret = _loop();\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n    // If nothing matches, pick the smallest possible state.\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return possibleStates[possibleStates.length - 1];\n}","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useMemo","useRef","useState","useMergeRefs","useContainerBreakpoints","styles","useContainerQuery","RESPONSIVENESS_BUFFER","useTopNavigation","identity","search","utilities","mainRef","virtualRef","breakpoint","breakpointRef","hasSearch","hasTitleWithLogo","logo","title","responsiveStates","generateResponsiveStateKeys","responsiveState","setResponsiveState","recalculateFit","current","availableWidth","getContentBoxWidth","querySelector","sizeConfiguration","fullIdentityWidth","getBoundingClientRect","width","titleWidth","searchSlotWidth","searchUtilityWidth","utilitiesLeftPadding","parseFloat","getComputedStyle","paddingLeft","utilityWithLabelWidths","Array","prototype","slice","call","querySelectorAll","map","element","utilityWithoutLabelWidths","menuTriggerUtilityWidth","determineBestResponsiveState","containerQueryRef","onVirtualMount","isSearchMinimized","setSearchMinimized","isSearchExpanded","hideSearch","focus","mergedMainRef","onSearchUtilityClick","style","paddingRight","canHideSearch","canHideTitle","states","some","utility","text","push","hideUtilityText","hiddenUtilties","i","length","disableUtilityCollapse","undefined","hideUtilities","hideTitle","possibleStates","sizes","state","searchWidth","utilitiesWidth","filter","_width","indexOf","reduce","sum","menuTriggerWidth","identityWidth","expectedInnerWidth"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/top-navigation/lib/default/top-navigation/use-top-navigation.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\n\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { TopNavigationProps } from './interfaces';\nimport styles from './styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nexport interface UseTopNavigationParams {\n  identity: TopNavigationProps['identity'];\n  search: TopNavigationProps['search'];\n  utilities: NonNullable<TopNavigationProps['utilities']>;\n}\n\nexport interface ResponsiveState {\n  hideUtilityText?: boolean;\n  hideSearch?: boolean;\n  hideUtilities?: number[];\n  hideTitle?: boolean;\n}\n\nexport interface TopNavigationSizeConfiguration {\n  hasSearch: boolean;\n  availableWidth: number;\n  utilitiesLeftPadding: number;\n  fullIdentityWidth: number;\n  titleWidth: number;\n  searchSlotWidth: number;\n  searchUtilityWidth: number;\n  utilityWithLabelWidths: number[];\n  utilityWithoutLabelWidths: number[];\n  menuTriggerUtilityWidth: number;\n}\n\nexport interface UseTopNavigation {\n  mainRef: React.Ref<HTMLDivElement>;\n  virtualRef: React.Ref<HTMLDivElement>;\n\n  responsiveState: ResponsiveState;\n  breakpoint: 'default' | 'xxs' | 's';\n  isSearchExpanded: boolean;\n  onSearchUtilityClick: () => void;\n}\n\n// A small buffer to make calculations more lenient against browser lag or padding adjustments.\nconst RESPONSIVENESS_BUFFER = 20;\n\nexport function useTopNavigation({ identity, search, utilities }: UseTopNavigationParams): UseTopNavigation {\n  // Refs and breakpoints\n  const mainRef = useRef<HTMLElement | null>(null);\n  const virtualRef = useRef<HTMLDivElement | null>(null);\n  const [breakpoint, breakpointRef] = useContainerBreakpoints(['xxs', 's']);\n\n  // Responsiveness state\n  // The component works by calculating the possible resize states that it can\n  // be in, and having a state variable to track which state we're currently in.\n  const hasSearch = !!search;\n  const hasTitleWithLogo = identity && !!identity.logo && !!identity.title;\n  const responsiveStates = useMemo<ReadonlyArray<ResponsiveState>>(() => {\n    return generateResponsiveStateKeys(utilities, hasSearch, hasTitleWithLogo);\n  }, [utilities, hasSearch, hasTitleWithLogo]);\n\n  // To hide/show elements dynamically, we need to know how much space they take up,\n  // even if they're not being rendered. The top navigation elements are hidden/resized\n  // based on the available size or if a search bar is open, and they need to be available\n  // for calculations so we know where to toggle them. So we render a second, more stable\n  // top-nav off screen to do these calculations against.\n  //\n  // We can't \"affix\" these values to pixels because they can depend on spacing tokens.\n  // It's easier to render all of these utilities separately rather than figuring out\n  // spacing token values, icon sizes, text widths, etc.\n  const [responsiveState, setResponsiveState] = useState<ResponsiveState | undefined>();\n  const recalculateFit = useCallback(() => {\n    if (!mainRef?.current || !virtualRef.current) {\n      setResponsiveState(responsiveStates[0]);\n      return;\n    }\n\n    // Get available width from the visible top navigation.\n    const availableWidth = getContentBoxWidth(mainRef.current.querySelector(`.${styles['padding-box']}`)!);\n    if (availableWidth === 0) {\n      // Likely in an SSR or Jest situation.\n      setResponsiveState(responsiveStates[0]);\n      return;\n    }\n\n    const sizeConfiguration = {\n      hasSearch,\n      availableWidth,\n\n      // Get widths from the hidden top navigation\n      fullIdentityWidth: virtualRef.current.querySelector(`.${styles.identity}`)!.getBoundingClientRect().width,\n      titleWidth: virtualRef.current.querySelector(`.${styles.title}`)?.getBoundingClientRect().width ?? 0,\n      searchSlotWidth: virtualRef.current.querySelector(`.${styles.search}`)?.getBoundingClientRect().width ?? 0,\n      searchUtilityWidth: virtualRef.current.querySelector('[data-utility-special=\"search\"]')!.getBoundingClientRect()\n        .width,\n      utilitiesLeftPadding: parseFloat(\n        getComputedStyle(virtualRef.current.querySelector(`.${styles.utilities}`)!).paddingLeft || '0px'\n      ),\n      utilityWithLabelWidths: Array.prototype.slice\n        .call(virtualRef.current.querySelectorAll(`[data-utility-hide=\"false\"]`))\n        .map((element: Element) => element.getBoundingClientRect().width),\n      utilityWithoutLabelWidths: Array.prototype.slice\n        .call(virtualRef.current.querySelectorAll(`[data-utility-hide=\"true\"]`))\n        .map((element: Element) => element.getBoundingClientRect().width),\n      menuTriggerUtilityWidth: virtualRef.current\n        .querySelector('[data-utility-special=\"menu-trigger\"]')!\n        .getBoundingClientRect().width,\n    };\n    setResponsiveState(determineBestResponsiveState(responsiveStates, sizeConfiguration));\n  }, [responsiveStates, hasSearch]);\n\n  const [, containerQueryRef] = useContainerQuery(() => {\n    recalculateFit();\n  }, [recalculateFit]);\n\n  // Due to being rendered in a portal, the virtual navigation isn't rendered\n  // at the same time as the main one.\n  const onVirtualMount = useCallback(\n    (element: HTMLDivElement | null) => {\n      virtualRef.current = element;\n      recalculateFit();\n    },\n    [recalculateFit]\n  );\n\n  // Search slot expansion on small screens\n  const [isSearchMinimized, setSearchMinimized] = useState(true);\n  const isSearchExpanded = !isSearchMinimized && hasSearch && responsiveState?.hideSearch;\n\n  // If the search was expanded, and then the screen resized so that the\n  // expansion is no longer necessary. So we implicitly minimize it.\n  useEffect(() => {\n    if (!responsiveState?.hideSearch) {\n      setSearchMinimized(true);\n    }\n  }, [responsiveState]);\n\n  // If the search is expanded after clicking on the search utility, move\n  // the focus to the input. Since this is a user-controlled slot, we're just\n  // assuming that it contains an input, though it's a pretty safe guess.\n  useEffect(() => {\n    if (isSearchExpanded) {\n      mainRef?.current?.querySelector<HTMLInputElement>(`.${styles.search} input`)?.focus();\n    }\n  }, [isSearchExpanded, mainRef]);\n\n  const mergedMainRef = useMergeRefs(mainRef, containerQueryRef, breakpointRef);\n\n  return {\n    mainRef: mergedMainRef,\n    virtualRef: onVirtualMount,\n    responsiveState: responsiveState ?? responsiveStates[0],\n    breakpoint: breakpoint ?? 'default',\n    isSearchExpanded: !!isSearchExpanded,\n    onSearchUtilityClick: () => setSearchMinimized(isSearchMinimized => !isSearchMinimized),\n  };\n}\n\n/**\n * Get the width of the content box (assuming the element's box-sizing is border-box).\n */\nfunction getContentBoxWidth(element: Element): number {\n  const style = getComputedStyle(element);\n  return (\n    parseFloat(style.width || '0px') - parseFloat(style.paddingLeft || '0px') - parseFloat(style.paddingRight || '0px')\n  );\n}\n\n/**\n * Generates the series of responsive steps that can be performed on the header in order.\n */\nexport function generateResponsiveStateKeys(\n  utilities: ReadonlyArray<TopNavigationProps.Utility>,\n  canHideSearch: boolean,\n  canHideTitle: boolean\n): ReadonlyArray<ResponsiveState> {\n  const states: ResponsiveState[] = [{}];\n  if (utilities.some(utility => utility.text)) {\n    states.push({ hideUtilityText: true });\n  }\n  if (canHideSearch) {\n    states.push({\n      hideUtilityText: true,\n      hideSearch: true,\n    });\n  }\n  const hiddenUtilties = [];\n  for (let i = 0; i < utilities.length; i++) {\n    if (!utilities[i].disableUtilityCollapse) {\n      hiddenUtilties.push(i);\n      states.push({\n        hideUtilityText: true,\n        hideSearch: canHideSearch || undefined,\n        hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : undefined,\n      });\n    }\n  }\n  if (canHideTitle) {\n    states.push({\n      hideUtilityText: true,\n      hideSearch: canHideSearch || undefined,\n      hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : undefined,\n      hideTitle: true,\n    });\n  }\n  return states;\n}\n\n/**\n * Determines the best responsive state configuration of the top navigation, based on the given list of possible responsive states\n * and the current sizes of all elements inside the navigation bar.\n */\nexport function determineBestResponsiveState(\n  possibleStates: ReadonlyArray<ResponsiveState>,\n  sizes: TopNavigationSizeConfiguration\n): ResponsiveState {\n  const {\n    hasSearch,\n    availableWidth,\n    utilitiesLeftPadding,\n    fullIdentityWidth,\n    titleWidth,\n    searchSlotWidth,\n    searchUtilityWidth,\n    utilityWithLabelWidths,\n    utilityWithoutLabelWidths,\n    menuTriggerUtilityWidth,\n  } = sizes;\n  // Iterate through each state and calculate its expected required width.\n  for (const state of possibleStates) {\n    const searchWidth = hasSearch ? (state.hideSearch ? searchUtilityWidth : searchSlotWidth) : 0;\n    const utilitiesWidth: number = (state.hideUtilityText ? utilityWithoutLabelWidths : utilityWithLabelWidths)\n      .filter((_width, i) => !state.hideUtilities || state.hideUtilities.indexOf(i) === -1)\n      .reduce((sum, width) => sum + width, 0);\n    const menuTriggerWidth = state.hideUtilities ? menuTriggerUtilityWidth : 0;\n    const identityWidth = state.hideTitle ? fullIdentityWidth - titleWidth : fullIdentityWidth;\n    const expectedInnerWidth = identityWidth + searchWidth + utilitiesLeftPadding + utilitiesWidth + menuTriggerWidth;\n    if (expectedInnerWidth <= availableWidth - RESPONSIVENESS_BUFFER) {\n      return state;\n    }\n  }\n\n  // If nothing matches, pick the smallest possible state.\n  return possibleStates[possibleStates.length - 1];\n}\n"]},"metadata":{},"sourceType":"module"}