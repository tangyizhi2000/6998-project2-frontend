{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport ContentDisplayOption, { getClassName } from './content-display-option';\nimport clsx from 'clsx';\nimport styles from '../styles.css.js';\nexport default function DraggableOption(_ref) {\n  var dragHandleAriaLabel = _ref.dragHandleAriaLabel,\n    _onKeyDown = _ref.onKeyDown,\n    onToggle = _ref.onToggle,\n    option = _ref.option;\n  var _useSortable = useSortable({\n      id: option.id\n    }),\n    isDragging = _useSortable.isDragging,\n    isSorting = _useSortable.isSorting,\n    listeners = _useSortable.listeners,\n    setNodeRef = _useSortable.setNodeRef,\n    transform = _useSortable.transform;\n  var style = {\n    transform: CSS.Translate.toString(transform)\n  };\n  var combinedListeners = Object.assign(Object.assign({}, listeners), {\n    onKeyDown: function onKeyDown(event) {\n      if (_onKeyDown) {\n        _onKeyDown(event);\n      }\n      if (listeners === null || listeners === void 0 ? void 0 : listeners.onKeyDown) {\n        listeners.onKeyDown(event);\n      }\n    }\n  });\n  return React.createElement(\"li\", {\n    className: clsx(getClassName(), isDragging && styles.placeholder, isSorting && styles.sorting),\n    style: style\n  }, React.createElement(ContentDisplayOption, {\n    ref: setNodeRef,\n    listeners: combinedListeners,\n    dragHandleAriaLabel: dragHandleAriaLabel,\n    onToggle: onToggle,\n    option: option\n  }));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,GAAG,QAAQ,oBAAoB;AAExC,OAAOC,oBAAoB,IAAIC,YAAY,QAAQ,0BAA0B;AAC7E,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,kBAAkB;AAErC,eAAc,SAAUC,eAAe,OAUtC;EAAA,IATCC,mBAAmB,QAAnBA,mBAAmB;IACnBC,UAAS,QAATA,SAAS;IACTC,QAAQ,QAARA,QAAQ;IACRC,MAAM,QAANA,MAAM;EAON,mBAAoEV,WAAW,CAAC;MAC9EW,EAAE,EAAED,MAAM,CAACC;KACZ,CAAC;IAFMC,UAAU,gBAAVA,UAAU;IAAEC,SAAS,gBAATA,SAAS;IAAEC,SAAS,gBAATA,SAAS;IAAEC,UAAU,gBAAVA,UAAU;IAAEC,SAAS,gBAATA,SAAS;EAG/D,IAAMC,KAAK,GAAG;IACZD,SAAS,EAAEf,GAAG,CAACiB,SAAS,CAACC,QAAQ,CAACH,SAAS;GAC5C;EAED,IAAMI,iBAAiB,mCAClBN,SAAS;IACZN,SAAS,EAAE,mBAACa,KAA0B,EAAI;MACxC,IAAIb,UAAS,EAAE;QACbA,UAAS,CAACa,KAAK,CAAC;;MAElB,IAAIP,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEN,SAAS,EAAE;QACxBM,SAAS,CAACN,SAAS,CAACa,KAAK,CAAC;;IAE9B;EAAC,EACF;EAED,OACEtB;IAAIuB,SAAS,EAAElB,IAAI,CAACD,YAAY,EAAE,EAAES,UAAU,IAAIP,MAAM,CAACkB,WAAW,EAAEV,SAAS,IAAIR,MAAM,CAACmB,OAAO,CAAC;IAAEP,KAAK,EAAEA;EAAK,GAC9GlB,oBAACG,oBAAoB;IACnBuB,GAAG,EAAEV,UAAU;IACfD,SAAS,EAAEM,iBAAiB;IAC5Bb,mBAAmB,EAAEA,mBAAmB;IACxCE,QAAQ,EAAEA,QAAQ;IAClBC,MAAM,EAAEA;EAAM,EACd,CACC;AAET","names":["React","useSortable","CSS","ContentDisplayOption","getClassName","clsx","styles","DraggableOption","dragHandleAriaLabel","onKeyDown","onToggle","option","id","isDragging","isSorting","listeners","setNodeRef","transform","style","Translate","toString","combinedListeners","event","className","placeholder","sorting","ref"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/collection-preferences/content-display/lib/default/collection-preferences/content-display/draggable-option.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { OptionWithVisibility } from './utils';\nimport ContentDisplayOption, { getClassName } from './content-display-option';\nimport clsx from 'clsx';\nimport styles from '../styles.css.js';\n\nexport default function DraggableOption({\n  dragHandleAriaLabel,\n  onKeyDown,\n  onToggle,\n  option,\n}: {\n  dragHandleAriaLabel?: string;\n  onKeyDown?: (event: React.KeyboardEvent) => void;\n  onToggle: (option: OptionWithVisibility) => void;\n  option: OptionWithVisibility;\n}) {\n  const { isDragging, isSorting, listeners, setNodeRef, transform } = useSortable({\n    id: option.id,\n  });\n  const style = {\n    transform: CSS.Translate.toString(transform),\n  };\n\n  const combinedListeners = {\n    ...listeners,\n    onKeyDown: (event: React.KeyboardEvent) => {\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n      if (listeners?.onKeyDown) {\n        listeners.onKeyDown(event);\n      }\n    },\n  };\n\n  return (\n    <li className={clsx(getClassName(), isDragging && styles.placeholder, isSorting && styles.sorting)} style={style}>\n      <ContentDisplayOption\n        ref={setNodeRef}\n        listeners={combinedListeners}\n        dragHandleAriaLabel={dragHandleAriaLabel}\n        onToggle={onToggle}\n        option={option}\n      />\n    </li>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}