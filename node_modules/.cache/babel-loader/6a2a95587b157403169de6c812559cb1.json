{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { makeCancellable, PromiseCancelledSignal } from '../../internal/utils/promises';\nimport { extractBucketName, validate } from './validation';\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\nexport function useVersionsFetch(fetchVersions) {\n  const [loading, setLoading] = useState(false);\n  const [lastFetchedValue, setLastFetched] = useState('');\n  const [versions, setVersions] = useState([]);\n  const loadVersions = uri => {\n    if (uri === lastFetchedValue) {\n      return;\n    }\n    setLastFetched(uri);\n    const errorCode = validate(uri);\n    const [bucketName, prefix] = extractBucketName(uri);\n    if (errorCode || !bucketName || !prefix || prefix.slice(-1) === '/') {\n      return;\n    }\n    setLoading(true);\n    const result = makeCancellable(fetchVersions(bucketName, prefix));\n    result.promise.then(versions => {\n      setLoading(false);\n      setVersions(versions.map(version => ({\n        value: version.VersionId,\n        label: version.LastModified\n      })));\n    }, err => {\n      if (!(err instanceof PromiseCancelledSignal)) {\n        setLoading(false);\n      }\n    });\n    return result;\n  };\n  return {\n    loading,\n    versions,\n    resetVersions: () => setVersions([]),\n    // this function is a dependency of useEffect\n    loadVersions: useStableCallback(loadVersions)\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,eAAe,EAAEC,sBAAsB,QAAQ,+BAA+B;AAEvF,SAASC,iBAAiB,EAAEC,QAAQ,QAAQ,cAAc;AAE1D,SAASC,iBAAiB,QAAQ,+CAA+C;AAEjF,OAAM,SAAUC,gBAAgB,CAACC,aAAuD;EACtF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,gBAAgB,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACvD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAA4B,EAAE,CAAC;EAEvE,MAAMc,YAAY,GAAIC,GAAW,IAAI;IACnC,IAAIA,GAAG,KAAKL,gBAAgB,EAAE;MAC5B;;IAEFC,cAAc,CAACI,GAAG,CAAC;IACnB,MAAMC,SAAS,GAAGZ,QAAQ,CAACW,GAAG,CAAC;IAC/B,MAAM,CAACE,UAAU,EAAEC,MAAM,CAAC,GAAGf,iBAAiB,CAACY,GAAG,CAAC;IACnD,IAAIC,SAAS,IAAI,CAACC,UAAU,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACnE;;IAEFV,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMW,MAAM,GAAGnB,eAAe,CAACM,aAAa,CAACU,UAAU,EAAEC,MAAM,CAAC,CAAC;IACjEE,MAAM,CAACC,OAAO,CAACC,IAAI,CACjBV,QAAQ,IAAG;MACTH,UAAU,CAAC,KAAK,CAAC;MACjBI,WAAW,CACTD,QAAQ,CAACW,GAAG,CAACC,OAAO,KAAK;QACvBC,KAAK,EAAED,OAAO,CAACE,SAAS;QACxBC,KAAK,EAAEH,OAAO,CAACI;OAChB,CAAC,CAAC,CACJ;IACH,CAAC,EACDC,GAAG,IAAG;MACJ,IAAI,EAAEA,GAAG,YAAY3B,sBAAsB,CAAC,EAAE;QAC5CO,UAAU,CAAC,KAAK,CAAC;;IAErB,CAAC,CACF;IACD,OAAOW,MAAM;EACf,CAAC;EAED,OAAO;IACLZ,OAAO;IACPI,QAAQ;IACRkB,aAAa,EAAE,MAAMjB,WAAW,CAAC,EAAE,CAAC;IACpC;IACAC,YAAY,EAAET,iBAAiB,CAACS,YAAY;GAC7C;AACH","names":["useState","makeCancellable","PromiseCancelledSignal","extractBucketName","validate","useStableCallback","useVersionsFetch","fetchVersions","loading","setLoading","lastFetchedValue","setLastFetched","versions","setVersions","loadVersions","uri","errorCode","bucketName","prefix","slice","result","promise","then","map","version","value","VersionId","label","LastModified","err","resetVersions"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/lib/default/s3-resource-selector/s3-in-context/use-versions-fetch.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { makeCancellable, PromiseCancelledSignal } from '../../internal/utils/promises';\nimport { SelectProps } from '../../select/interfaces';\nimport { extractBucketName, validate } from './validation';\nimport { S3ResourceSelectorProps } from '../interfaces';\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\n\nexport function useVersionsFetch(fetchVersions: S3ResourceSelectorProps['fetchVersions']) {\n  const [loading, setLoading] = useState(false);\n  const [lastFetchedValue, setLastFetched] = useState('');\n  const [versions, setVersions] = useState<Array<SelectProps.Option>>([]);\n\n  const loadVersions = (uri: string) => {\n    if (uri === lastFetchedValue) {\n      return;\n    }\n    setLastFetched(uri);\n    const errorCode = validate(uri);\n    const [bucketName, prefix] = extractBucketName(uri);\n    if (errorCode || !bucketName || !prefix || prefix.slice(-1) === '/') {\n      return;\n    }\n    setLoading(true);\n    const result = makeCancellable(fetchVersions(bucketName, prefix));\n    result.promise.then(\n      versions => {\n        setLoading(false);\n        setVersions(\n          versions.map(version => ({\n            value: version.VersionId,\n            label: version.LastModified,\n          }))\n        );\n      },\n      err => {\n        if (!(err instanceof PromiseCancelledSignal)) {\n          setLoading(false);\n        }\n      }\n    );\n    return result;\n  };\n\n  return {\n    loading,\n    versions,\n    resetVersions: () => setVersions([]),\n    // this function is a dependency of useEffect\n    loadVersions: useStableCallback(loadVersions),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}