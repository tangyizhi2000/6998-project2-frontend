{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport RadioButton from '../radio-group/radio-button';\nimport styles from './styles.css.js';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nexport const Tile = React.forwardRef((_ref, forwardedRef) => {\n  let {\n    item,\n    selected,\n    name,\n    breakpoint,\n    onChange\n  } = _ref;\n  const internalRef = useRef(null);\n  const isVisualRefresh = useVisualRefresh();\n  const mergedRef = useMergeRefs(internalRef, forwardedRef);\n  return React.createElement(\"div\", {\n    className: clsx(styles['tile-container'], {\n      [styles['has-metadata']]: item.description || item.image\n    }, {\n      [styles.selected]: selected\n    }, {\n      [styles.disabled]: !!item.disabled\n    }, {\n      [styles.refresh]: isVisualRefresh\n    }, styles[`breakpoint-${breakpoint}`]),\n    \"data-value\": item.value,\n    onClick: () => {\n      var _a;\n      if (item.disabled) {\n        return;\n      }\n      (_a = internalRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      if (!selected) {\n        fireNonCancelableEvent(onChange, {\n          value: item.value\n        });\n      }\n    }\n  }, React.createElement(\"div\", {\n    className: clsx(styles.control, {\n      [styles['no-image']]: !item.image\n    })\n  }, React.createElement(RadioButton, {\n    checked: selected,\n    ref: mergedRef,\n    name: name,\n    value: item.value,\n    label: item.label,\n    description: item.description,\n    disabled: item.disabled,\n    controlId: item.controlId\n  })), item.image && React.createElement(\"div\", {\n    className: clsx(styles.image, {\n      [styles.disabled]: !!item.disabled\n    })\n  }, item.image));\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,IAAIC,MAAM,QAAQ,OAAO;AAGrC,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,MAAM,MAAM,iBAAiB;AAGpC,SAASC,sBAAsB,QAAQ,oBAAoB;AAC3D,SAASC,YAAY,QAAQ,kCAAkC;AAC/D,SAASC,gBAAgB,QAAQ,mCAAmC;AAUpE,OAAO,MAAMC,IAAI,GAAGP,KAAK,CAACQ,UAAU,CAClC,OAA4DC,YAAyC,KAAI;EAAA,IAAxG;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,IAAI;IAAEC,UAAU;IAAEC;EAAQ,CAAa;EACxD,MAAMC,WAAW,GAAGd,MAAM,CAAmB,IAAI,CAAC;EAClD,MAAMe,eAAe,GAAGV,gBAAgB,EAAE;EAE1C,MAAMW,SAAS,GAAGZ,YAAY,CAACU,WAAW,EAAEN,YAAY,CAAC;EAEzD,OACET;IACEkB,SAAS,EAAEnB,IAAI,CACbI,MAAM,CAAC,gBAAgB,CAAC,EACxB;MAAE,CAACA,MAAM,CAAC,cAAc,CAAC,GAAGO,IAAI,CAACS,WAAW,IAAIT,IAAI,CAACU;IAAK,CAAE,EAC5D;MAAE,CAACjB,MAAM,CAACQ,QAAQ,GAAGA;IAAQ,CAAE,EAC/B;MAAE,CAACR,MAAM,CAACkB,QAAQ,GAAG,CAAC,CAACX,IAAI,CAACW;IAAQ,CAAE,EACtC;MAAE,CAAClB,MAAM,CAACmB,OAAO,GAAGN;IAAe,CAAE,EACrCb,MAAM,CAAC,cAAcU,UAAU,EAAE,CAAC,CACnC;IAAA,cACWH,IAAI,CAACa,KAAK;IACtBC,OAAO,EAAE,MAAK;;MACZ,IAAId,IAAI,CAACW,QAAQ,EAAE;QACjB;;MAEF,iBAAW,CAACI,OAAO,0CAAEC,KAAK,EAAE;MAC5B,IAAI,CAACf,QAAQ,EAAE;QACbP,sBAAsB,CAACU,QAAQ,EAAE;UAAES,KAAK,EAAEb,IAAI,CAACa;QAAK,CAAE,CAAC;;IAE3D;EAAC,GAEDvB;IAAKkB,SAAS,EAAEnB,IAAI,CAACI,MAAM,CAACwB,OAAO,EAAE;MAAE,CAACxB,MAAM,CAAC,UAAU,CAAC,GAAG,CAACO,IAAI,CAACU;IAAK,CAAE;EAAC,GACzEpB,oBAACE,WAAW;IACV0B,OAAO,EAAEjB,QAAQ;IACjBkB,GAAG,EAAEZ,SAAS;IACdL,IAAI,EAAEA,IAAI;IACVW,KAAK,EAAEb,IAAI,CAACa,KAAK;IACjBO,KAAK,EAAEpB,IAAI,CAACoB,KAAK;IACjBX,WAAW,EAAET,IAAI,CAACS,WAAW;IAC7BE,QAAQ,EAAEX,IAAI,CAACW,QAAQ;IACvBU,SAAS,EAAErB,IAAI,CAACqB;EAAS,EACzB,CACE,EACLrB,IAAI,CAACU,KAAK,IAAIpB;IAAKkB,SAAS,EAAEnB,IAAI,CAACI,MAAM,CAACiB,KAAK,EAAE;MAAE,CAACjB,MAAM,CAACkB,QAAQ,GAAG,CAAC,CAACX,IAAI,CAACW;IAAQ,CAAE;EAAC,GAAGX,IAAI,CAACU,KAAK,CAAO,CACzG;AAEV,CAAC,CACF","names":["clsx","React","useRef","RadioButton","styles","fireNonCancelableEvent","useMergeRefs","useVisualRefresh","Tile","forwardRef","forwardedRef","item","selected","name","breakpoint","onChange","internalRef","isVisualRefresh","mergedRef","className","description","image","disabled","refresh","value","onClick","current","focus","control","checked","ref","label","controlId"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/tiles/lib/default/tiles/tile.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\n\nimport { TilesProps } from './interfaces';\nimport RadioButton from '../radio-group/radio-button';\nimport styles from './styles.css.js';\n\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\n\ninterface TileProps {\n  item: TilesProps.TilesDefinition;\n  selected: boolean;\n  name: string;\n  breakpoint: ReturnType<typeof useContainerBreakpoints>[0];\n  onChange: TilesProps['onChange'];\n}\n\nexport const Tile = React.forwardRef(\n  ({ item, selected, name, breakpoint, onChange }: TileProps, forwardedRef: React.Ref<HTMLInputElement>) => {\n    const internalRef = useRef<HTMLInputElement>(null);\n    const isVisualRefresh = useVisualRefresh();\n\n    const mergedRef = useMergeRefs(internalRef, forwardedRef);\n\n    return (\n      <div\n        className={clsx(\n          styles['tile-container'],\n          { [styles['has-metadata']]: item.description || item.image },\n          { [styles.selected]: selected },\n          { [styles.disabled]: !!item.disabled },\n          { [styles.refresh]: isVisualRefresh },\n          styles[`breakpoint-${breakpoint}`]\n        )}\n        data-value={item.value}\n        onClick={() => {\n          if (item.disabled) {\n            return;\n          }\n          internalRef.current?.focus();\n          if (!selected) {\n            fireNonCancelableEvent(onChange, { value: item.value });\n          }\n        }}\n      >\n        <div className={clsx(styles.control, { [styles['no-image']]: !item.image })}>\n          <RadioButton\n            checked={selected}\n            ref={mergedRef}\n            name={name}\n            value={item.value}\n            label={item.label}\n            description={item.description}\n            disabled={item.disabled}\n            controlId={item.controlId}\n          />\n        </div>\n        {item.image && <div className={clsx(styles.image, { [styles.disabled]: !!item.disabled })}>{item.image}</div>}\n      </div>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}