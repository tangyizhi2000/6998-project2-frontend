{"ast":null,"code":"import { isInteractive, isGroupInteractive, isGroup } from '../../internal/components/option/utils/filter-options';\nimport { useEffect, useRef } from 'react';\nimport { useHighlightedOption } from '../../internal/components/options-list/utils/use-highlight-option';\nimport { useOpenState } from '../../internal/components/options-list/utils/use-open-state';\nimport { useMenuKeyboard, useTriggerKeyboard } from '../../internal/components/options-list/utils/use-keyboard';\nimport { getOptionId } from '../../internal/components/options-list/utils/use-ids';\nimport { connectOptionsByValue } from './connect-options';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nexport function useSelect(_ref) {\n  let {\n    selectedOptions,\n    updateSelectedOption,\n    options,\n    filteringType,\n    onBlur,\n    onFocus,\n    externalRef,\n    keepOpen,\n    fireLoadItems,\n    setFilteringValue,\n    useInteractiveGroups = false,\n    statusType\n  } = _ref;\n  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n  const isHighlightable = option => !!option && (useInteractiveGroups || option.type !== 'parent');\n  const filterRef = useRef(null);\n  const triggerRef = useRef(null);\n  const menuRef = useRef(null);\n  const hasFilter = filteringType !== 'none';\n  const activeRef = hasFilter ? filterRef : menuRef;\n  const __selectedOptions = connectOptionsByValue(options, selectedOptions);\n  const __selectedValuesSet = selectedOptions.reduce((selectedValuesSet, item) => {\n    if (item.value) {\n      selectedValuesSet.add(item.value);\n    }\n    return selectedValuesSet;\n  }, new Set());\n  const [{\n    highlightType,\n    highlightedOption,\n    highlightedIndex\n  }, {\n    moveHighlightWithKeyboard,\n    resetHighlightWithKeyboard,\n    setHighlightedIndexWithMouse,\n    highlightOptionWithKeyboard,\n    goHomeWithKeyboard,\n    goEndWithKeyboard\n  }] = useHighlightedOption({\n    options,\n    isHighlightable\n  });\n  const {\n    isOpen,\n    openDropdown,\n    closeDropdown,\n    toggleDropdown\n  } = useOpenState({\n    onOpen: () => fireLoadItems(''),\n    onClose: () => {\n      resetHighlightWithKeyboard();\n      setFilteringValue('');\n    }\n  });\n  const handleFocus = () => {\n    fireNonCancelableEvent(onFocus, {});\n  };\n  const handleBlur = () => {\n    fireNonCancelableEvent(onBlur, {});\n    closeDropdown();\n  };\n  const hasSelectedOption = __selectedOptions.length > 0;\n  const menuId = useUniqueId('option-list');\n  const dialogId = useUniqueId('dialog');\n  const highlightedOptionId = getOptionId(menuId, highlightedIndex);\n  const selectOption = option => {\n    var _a;\n    const optionToSelect = option || highlightedOption;\n    if (!optionToSelect || !interactivityCheck(optionToSelect)) {\n      return;\n    }\n    updateSelectedOption(optionToSelect.option);\n    if (!keepOpen) {\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      closeDropdown();\n    }\n  };\n  const activeKeyDownHandler = useMenuKeyboard({\n    moveHighlight: moveHighlightWithKeyboard,\n    selectOption,\n    goHome: goHomeWithKeyboard,\n    goEnd: goEndWithKeyboard,\n    closeDropdown: () => {\n      var _a;\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      closeDropdown();\n    },\n    preventNativeSpace: !hasFilter\n  });\n  const triggerKeyDownHandler = useTriggerKeyboard({\n    openDropdown,\n    goHome: goHomeWithKeyboard\n  });\n  const getDropdownProps = () => ({\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    dropdownContentId: dialogId,\n    dropdownContentRole: hasFilter ? 'dialog' : undefined\n  });\n  const getTriggerProps = function () {\n    let disabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let autoFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const triggerProps = {\n      ref: triggerRef,\n      onFocus: () => closeDropdown(),\n      autoFocus,\n      ariaHasPopup: hasFilter ? 'dialog' : 'listbox',\n      ariaControls: isOpen ? hasFilter ? dialogId : menuId : undefined\n    };\n    if (!disabled) {\n      triggerProps.onMouseDown = event => {\n        var _a;\n        event.preventDefault(); // prevent current focus from blurring as it immediately closes the dropdown\n        if (isOpen) {\n          (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n        toggleDropdown();\n      };\n      triggerProps.onKeyDown = triggerKeyDownHandler;\n    }\n    return triggerProps;\n  };\n  const getFilterProps = () => {\n    if (!hasFilter) {\n      return {};\n    }\n    return {\n      ref: filterRef,\n      onKeyDown: activeKeyDownHandler,\n      onChange: event => {\n        setFilteringValue(event.detail.value);\n        resetHighlightWithKeyboard();\n      },\n      __onDelayedInput: event => {\n        fireLoadItems(event.detail.value);\n      },\n      __nativeAttributes: {\n        'aria-activedescendant': highlightedOptionId,\n        ['aria-owns']: menuId,\n        ['aria-controls']: menuId\n      }\n    };\n  };\n  const getMenuProps = () => {\n    const menuProps = {\n      id: menuId,\n      ref: menuRef,\n      open: isOpen,\n      onMouseUp: itemIndex => {\n        if (itemIndex > -1) {\n          selectOption(options[itemIndex]);\n        }\n      },\n      onMouseMove: itemIndex => {\n        if (itemIndex > -1) {\n          setHighlightedIndexWithMouse(itemIndex);\n        }\n      },\n      statusType\n    };\n    if (!hasFilter) {\n      menuProps.onKeyDown = activeKeyDownHandler;\n      menuProps.nativeAttributes = {\n        'aria-activedescendant': highlightedOptionId\n      };\n    }\n    return menuProps;\n  };\n  const getGroupState = option => {\n    const totalSelected = option.options.filter(item => !!item.value && __selectedValuesSet.has(item.value)).length;\n    const hasSelected = totalSelected > 0;\n    const allSelected = totalSelected === option.options.length;\n    return {\n      selected: hasSelected && allSelected,\n      indeterminate: hasSelected && !allSelected\n    };\n  };\n  const getOptionProps = (option, index) => {\n    var _a;\n    const highlighted = option === highlightedOption;\n    const groupState = isGroup(option.option) ? getGroupState(option.option) : undefined;\n    const selected = __selectedOptions.indexOf(option) > -1 || !!(groupState === null || groupState === void 0 ? void 0 : groupState.selected);\n    const nextOption = (_a = options[index + 1]) === null || _a === void 0 ? void 0 : _a.option;\n    const isNextSelected = !!nextOption && isGroup(nextOption) ? getGroupState(nextOption).selected : __selectedOptions.indexOf(options[index + 1]) > -1;\n    const optionProps = {\n      key: index,\n      option,\n      highlighted,\n      selected,\n      isNextSelected,\n      indeterminate: !!(groupState === null || groupState === void 0 ? void 0 : groupState.indeterminate),\n      ['data-mouse-target']: isHighlightable(option) ? index : -1,\n      id: getOptionId(menuId, index)\n    };\n    return optionProps;\n  };\n  const prevOpen = usePrevious(isOpen);\n  useEffect(() => {\n    // highlight the first selected option, when opening the Select component without filter input\n    // keep the focus in the filter input when opening, so that screenreader can recognize the combobox\n    if (isOpen && !prevOpen && hasSelectedOption && !hasFilter) {\n      setHighlightedIndexWithMouse(options.indexOf(__selectedOptions[0]));\n    }\n  }, [isOpen, __selectedOptions, hasSelectedOption, setHighlightedIndexWithMouse, options, prevOpen, hasFilter]);\n  useEffect(() => {\n    var _a;\n    if (isOpen) {\n      // dropdown-fit calculations ensure that the dropdown will fit inside the current\n      // viewport, so prevent the browser from trying to scroll it into view (e.g. if\n      // scroll-padding-top is set on a parent)\n      (_a = activeRef.current) === null || _a === void 0 ? void 0 : _a.focus({\n        preventScroll: true\n      });\n    }\n  }, [isOpen, activeRef]);\n  useForwardFocus(externalRef, triggerRef);\n  const highlightedGroupSelected = !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;\n  const announceSelected = !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);\n  return {\n    isOpen,\n    highlightedOption,\n    highlightedIndex,\n    highlightType,\n    getTriggerProps,\n    getDropdownProps,\n    getMenuProps,\n    getFilterProps,\n    getOptionProps,\n    highlightOption: highlightOptionWithKeyboard,\n    selectOption,\n    announceSelected,\n    dialogId\n  };\n}","map":{"version":3,"mappings":"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","names":["isInteractive","isGroupInteractive","isGroup","useEffect","useRef","useHighlightedOption","useOpenState","useMenuKeyboard","useTriggerKeyboard","getOptionId","connectOptionsByValue","useForwardFocus","usePrevious","fireNonCancelableEvent","useUniqueId","useSelect","selectedOptions","updateSelectedOption","options","filteringType","onBlur","onFocus","externalRef","keepOpen","fireLoadItems","setFilteringValue","useInteractiveGroups","statusType","interactivityCheck","isHighlightable","option","type","filterRef","triggerRef","menuRef","hasFilter","activeRef","__selectedOptions","__selectedValuesSet","reduce","selectedValuesSet","item","value","add","Set","highlightType","highlightedOption","highlightedIndex","moveHighlightWithKeyboard","resetHighlightWithKeyboard","setHighlightedIndexWithMouse","highlightOptionWithKeyboard","goHomeWithKeyboard","goEndWithKeyboard","isOpen","openDropdown","closeDropdown","toggleDropdown","onOpen","onClose","handleFocus","handleBlur","hasSelectedOption","length","menuId","dialogId","highlightedOptionId","selectOption","optionToSelect","current","focus","activeKeyDownHandler","moveHighlight","goHome","goEnd","preventNativeSpace","triggerKeyDownHandler","getDropdownProps","dropdownContentId","dropdownContentRole","undefined","getTriggerProps","disabled","autoFocus","triggerProps","ref","ariaHasPopup","ariaControls","onMouseDown","event","preventDefault","onKeyDown","getFilterProps","onChange","detail","__onDelayedInput","__nativeAttributes","getMenuProps","menuProps","id","open","onMouseUp","itemIndex","onMouseMove","nativeAttributes","getGroupState","totalSelected","filter","has","hasSelected","allSelected","selected","indeterminate","getOptionProps","index","highlighted","groupState","indexOf","nextOption","isNextSelected","optionProps","key","prevOpen","preventScroll","highlightedGroupSelected","announceSelected","highlightOption"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/select/utils/lib/default/select/utils/use-select.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { RefObject } from 'react';\nimport { DropdownProps } from '../../internal/components/dropdown/interfaces';\nimport { DropdownOption, OptionDefinition, OptionGroup } from '../../internal/components/option/interfaces';\nimport { isInteractive, isGroupInteractive, isGroup } from '../../internal/components/option/utils/filter-options';\nimport { useEffect, useRef } from 'react';\nimport { useHighlightedOption } from '../../internal/components/options-list/utils/use-highlight-option';\nimport { useOpenState } from '../../internal/components/options-list/utils/use-open-state';\nimport { useMenuKeyboard, useTriggerKeyboard } from '../../internal/components/options-list/utils/use-keyboard';\nimport { getOptionId } from '../../internal/components/options-list/utils/use-ids';\nimport { connectOptionsByValue } from './connect-options';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { OptionsListProps } from '../../internal/components/options-list';\nimport { FilterProps } from '../parts/filter';\nimport { ItemProps } from '../parts/item';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { NonCancelableEventHandler, fireNonCancelableEvent } from '../../internal/events';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { DropdownStatusProps } from '../../internal/components/dropdown-status';\nimport { ButtonTriggerProps } from '../../internal/components/button-trigger';\n\nexport type MenuProps = Omit<OptionsListProps, 'children'> & { ref: React.RefObject<HTMLUListElement> };\nexport type GetOptionProps = (option: DropdownOption, index: number) => ItemProps;\n\ninterface UseSelectProps {\n  selectedOptions: ReadonlyArray<OptionDefinition>;\n  updateSelectedOption: (option: OptionDefinition) => void;\n  options: ReadonlyArray<DropdownOption>;\n  filteringType: string;\n  keepOpen?: boolean;\n  onBlur?: NonCancelableEventHandler;\n  onFocus?: NonCancelableEventHandler;\n  externalRef: React.Ref<any>;\n  fireLoadItems: (filteringText: string) => void;\n  setFilteringValue: (filteringText: string) => void;\n  useInteractiveGroups?: boolean;\n  statusType: DropdownStatusProps.StatusType;\n}\n\nexport interface SelectTriggerProps extends ButtonTriggerProps {\n  ref: RefObject<HTMLButtonElement>;\n}\n\nexport function useSelect({\n  selectedOptions,\n  updateSelectedOption,\n  options,\n  filteringType,\n  onBlur,\n  onFocus,\n  externalRef,\n  keepOpen,\n  fireLoadItems,\n  setFilteringValue,\n  useInteractiveGroups = false,\n  statusType,\n}: UseSelectProps) {\n  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n\n  const isHighlightable = (option?: DropdownOption) => !!option && (useInteractiveGroups || option.type !== 'parent');\n\n  const filterRef = useRef<HTMLInputElement>(null);\n  const triggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLUListElement>(null);\n  const hasFilter = filteringType !== 'none';\n  const activeRef = hasFilter ? filterRef : menuRef;\n  const __selectedOptions = connectOptionsByValue(options, selectedOptions);\n  const __selectedValuesSet = selectedOptions.reduce((selectedValuesSet: Set<string>, item: OptionDefinition) => {\n    if (item.value) {\n      selectedValuesSet.add(item.value);\n    }\n    return selectedValuesSet;\n  }, new Set<string>());\n  const [\n    { highlightType, highlightedOption, highlightedIndex },\n    {\n      moveHighlightWithKeyboard,\n      resetHighlightWithKeyboard,\n      setHighlightedIndexWithMouse,\n      highlightOptionWithKeyboard,\n      goHomeWithKeyboard,\n      goEndWithKeyboard,\n    },\n  ] = useHighlightedOption({ options, isHighlightable });\n\n  const { isOpen, openDropdown, closeDropdown, toggleDropdown } = useOpenState({\n    onOpen: () => fireLoadItems(''),\n    onClose: () => {\n      resetHighlightWithKeyboard();\n      setFilteringValue('');\n    },\n  });\n\n  const handleFocus = () => {\n    fireNonCancelableEvent(onFocus, {});\n  };\n\n  const handleBlur = () => {\n    fireNonCancelableEvent(onBlur, {});\n    closeDropdown();\n  };\n\n  const hasSelectedOption = __selectedOptions.length > 0;\n  const menuId = useUniqueId('option-list');\n  const dialogId = useUniqueId('dialog');\n  const highlightedOptionId = getOptionId(menuId, highlightedIndex);\n\n  const selectOption = (option?: DropdownOption) => {\n    const optionToSelect = option || highlightedOption;\n    if (!optionToSelect || !interactivityCheck(optionToSelect)) {\n      return;\n    }\n    updateSelectedOption(optionToSelect.option);\n    if (!keepOpen) {\n      triggerRef.current?.focus();\n      closeDropdown();\n    }\n  };\n\n  const activeKeyDownHandler = useMenuKeyboard({\n    moveHighlight: moveHighlightWithKeyboard,\n    selectOption,\n    goHome: goHomeWithKeyboard,\n    goEnd: goEndWithKeyboard,\n    closeDropdown: () => {\n      triggerRef.current?.focus();\n      closeDropdown();\n    },\n    preventNativeSpace: !hasFilter,\n  });\n\n  const triggerKeyDownHandler = useTriggerKeyboard({ openDropdown, goHome: goHomeWithKeyboard });\n\n  const getDropdownProps: () => Pick<\n    DropdownProps,\n    'onFocus' | 'onBlur' | 'dropdownContentId' | 'dropdownContentRole'\n  > = () => ({\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    dropdownContentId: dialogId,\n    dropdownContentRole: hasFilter ? 'dialog' : undefined,\n  });\n\n  const getTriggerProps = (disabled = false, autoFocus = false) => {\n    const triggerProps: SelectTriggerProps = {\n      ref: triggerRef,\n      onFocus: () => closeDropdown(),\n      autoFocus,\n      ariaHasPopup: hasFilter ? 'dialog' : 'listbox',\n      ariaControls: isOpen ? (hasFilter ? dialogId : menuId) : undefined,\n    };\n    if (!disabled) {\n      triggerProps.onMouseDown = (event: CustomEvent) => {\n        event.preventDefault(); // prevent current focus from blurring as it immediately closes the dropdown\n        if (isOpen) {\n          triggerRef.current?.focus();\n        }\n        toggleDropdown();\n      };\n      triggerProps.onKeyDown = triggerKeyDownHandler;\n    }\n    return triggerProps;\n  };\n\n  const getFilterProps = (): Partial<FilterProps> => {\n    if (!hasFilter) {\n      return {};\n    }\n\n    return {\n      ref: filterRef,\n      onKeyDown: activeKeyDownHandler,\n      onChange: event => {\n        setFilteringValue(event.detail.value);\n        resetHighlightWithKeyboard();\n      },\n      __onDelayedInput: event => {\n        fireLoadItems(event.detail.value);\n      },\n      __nativeAttributes: {\n        'aria-activedescendant': highlightedOptionId,\n        ['aria-owns']: menuId,\n        ['aria-controls']: menuId,\n      },\n    };\n  };\n\n  const getMenuProps = () => {\n    const menuProps: MenuProps = {\n      id: menuId,\n      ref: menuRef,\n      open: isOpen,\n      onMouseUp: itemIndex => {\n        if (itemIndex > -1) {\n          selectOption(options[itemIndex]);\n        }\n      },\n      onMouseMove: itemIndex => {\n        if (itemIndex > -1) {\n          setHighlightedIndexWithMouse(itemIndex);\n        }\n      },\n      statusType,\n    };\n    if (!hasFilter) {\n      menuProps.onKeyDown = activeKeyDownHandler;\n      menuProps.nativeAttributes = {\n        'aria-activedescendant': highlightedOptionId,\n      };\n    }\n    return menuProps;\n  };\n  const getGroupState = (option: OptionGroup) => {\n    const totalSelected = option.options.filter(item => !!item.value && __selectedValuesSet.has(item.value)).length;\n    const hasSelected = totalSelected > 0;\n    const allSelected = totalSelected === option.options.length;\n    return {\n      selected: hasSelected && allSelected,\n      indeterminate: hasSelected && !allSelected,\n    };\n  };\n\n  const getOptionProps = (option: DropdownOption, index: number) => {\n    const highlighted = option === highlightedOption;\n    const groupState = isGroup(option.option) ? getGroupState(option.option) : undefined;\n    const selected = __selectedOptions.indexOf(option) > -1 || !!groupState?.selected;\n    const nextOption = options[index + 1]?.option;\n    const isNextSelected =\n      !!nextOption && isGroup(nextOption)\n        ? getGroupState(nextOption).selected\n        : __selectedOptions.indexOf(options[index + 1]) > -1;\n\n    const optionProps: any = {\n      key: index,\n      option,\n      highlighted,\n      selected,\n      isNextSelected,\n      indeterminate: !!groupState?.indeterminate,\n      ['data-mouse-target']: isHighlightable(option) ? index : -1,\n      id: getOptionId(menuId, index),\n    };\n\n    return optionProps;\n  };\n\n  const prevOpen = usePrevious<boolean>(isOpen);\n  useEffect(() => {\n    // highlight the first selected option, when opening the Select component without filter input\n    // keep the focus in the filter input when opening, so that screenreader can recognize the combobox\n    if (isOpen && !prevOpen && hasSelectedOption && !hasFilter) {\n      setHighlightedIndexWithMouse(options.indexOf(__selectedOptions[0]));\n    }\n  }, [isOpen, __selectedOptions, hasSelectedOption, setHighlightedIndexWithMouse, options, prevOpen, hasFilter]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // dropdown-fit calculations ensure that the dropdown will fit inside the current\n      // viewport, so prevent the browser from trying to scroll it into view (e.g. if\n      // scroll-padding-top is set on a parent)\n      activeRef.current?.focus({ preventScroll: true });\n    }\n  }, [isOpen, activeRef]);\n\n  useForwardFocus(externalRef, triggerRef as React.RefObject<HTMLElement>);\n  const highlightedGroupSelected =\n    !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;\n  const announceSelected =\n    !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);\n\n  return {\n    isOpen,\n    highlightedOption,\n    highlightedIndex,\n    highlightType,\n    getTriggerProps,\n    getDropdownProps,\n    getMenuProps,\n    getFilterProps,\n    getOptionProps,\n    highlightOption: highlightOptionWithKeyboard,\n    selectOption,\n    announceSelected,\n    dialogId,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}