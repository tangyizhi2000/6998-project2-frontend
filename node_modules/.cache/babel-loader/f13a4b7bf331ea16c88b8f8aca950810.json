{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect } from 'react';\nimport { KeyCode } from '../../keycode';\nexport function isModifierKey(event) {\n  // we do not want to highlight focused element\n  // when special keys are pressed\n  return [KeyCode.shift, KeyCode.alt, KeyCode.control, KeyCode.meta].indexOf(event.keyCode) > -1;\n}\nfunction setIsKeyboard(active) {\n  if (active) {\n    document.body.setAttribute('data-awsui-focus-visible', 'true');\n  } else {\n    document.body.removeAttribute('data-awsui-focus-visible');\n  }\n}\nfunction handleMousedown() {\n  return setIsKeyboard(false);\n}\nfunction handleKeydown(event) {\n  if (!isModifierKey(event)) {\n    setIsKeyboard(true);\n  }\n}\nlet componentsCount = 0;\nfunction addListeners() {\n  document.addEventListener('mousedown', handleMousedown);\n  document.addEventListener('keydown', handleKeydown);\n}\nfunction removeListeners() {\n  document.removeEventListener('mousedown', handleMousedown);\n  document.removeEventListener('keydown', handleKeydown);\n}\nexport default function useFocusVisible() {\n  useEffect(() => {\n    if (componentsCount === 0) {\n      addListeners();\n    }\n    componentsCount++;\n    return () => {\n      componentsCount--;\n      if (componentsCount === 0) {\n        removeListeners();\n      }\n    };\n  }, []);\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,QAAQ,eAAe;AAEvC,OAAM,SAAUC,aAAa,CAACC,KAAoB;EAChD;EACA;EACA,OAAO,CAACF,OAAO,CAACG,KAAK,EAAEH,OAAO,CAACI,GAAG,EAAEJ,OAAO,CAACK,OAAO,EAAEL,OAAO,CAACM,IAAI,CAAC,CAACC,OAAO,CAACL,KAAK,CAACM,OAAO,CAAC,GAAG,CAAC,CAAC;AAChG;AAEA,SAASC,aAAa,CAACC,MAAe;EACpC,IAAIA,MAAM,EAAE;IACVC,QAAQ,CAACC,IAAI,CAACC,YAAY,CAAC,0BAA0B,EAAE,MAAM,CAAC;GAC/D,MAAM;IACLF,QAAQ,CAACC,IAAI,CAACE,eAAe,CAAC,0BAA0B,CAAC;;AAE7D;AAEA,SAASC,eAAe;EACtB,OAAON,aAAa,CAAC,KAAK,CAAC;AAC7B;AAEA,SAASO,aAAa,CAACd,KAAoB;EACzC,IAAI,CAACD,aAAa,CAACC,KAAK,CAAC,EAAE;IACzBO,aAAa,CAAC,IAAI,CAAC;;AAEvB;AAEA,IAAIQ,eAAe,GAAG,CAAC;AAEvB,SAASC,YAAY;EACnBP,QAAQ,CAACQ,gBAAgB,CAAC,WAAW,EAAEJ,eAAe,CAAC;EACvDJ,QAAQ,CAACQ,gBAAgB,CAAC,SAAS,EAAEH,aAAa,CAAC;AACrD;AAEA,SAASI,eAAe;EACtBT,QAAQ,CAACU,mBAAmB,CAAC,WAAW,EAAEN,eAAe,CAAC;EAC1DJ,QAAQ,CAACU,mBAAmB,CAAC,SAAS,EAAEL,aAAa,CAAC;AACxD;AAEA,eAAc,SAAUM,eAAe;EACrCvB,SAAS,CAAC,MAAK;IACb,IAAIkB,eAAe,KAAK,CAAC,EAAE;MACzBC,YAAY,EAAE;;IAEhBD,eAAe,EAAE;IACjB,OAAO,MAAK;MACVA,eAAe,EAAE;MACjB,IAAIA,eAAe,KAAK,CAAC,EAAE;QACzBG,eAAe,EAAE;;IAErB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;AACR","names":["useEffect","KeyCode","isModifierKey","event","shift","alt","control","meta","indexOf","keyCode","setIsKeyboard","active","document","body","setAttribute","removeAttribute","handleMousedown","handleKeydown","componentsCount","addListeners","addEventListener","removeListeners","removeEventListener","useFocusVisible"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/hooks/focus-visible/lib/default/internal/hooks/focus-visible/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect } from 'react';\nimport { KeyCode } from '../../keycode';\n\nexport function isModifierKey(event: KeyboardEvent) {\n  // we do not want to highlight focused element\n  // when special keys are pressed\n  return [KeyCode.shift, KeyCode.alt, KeyCode.control, KeyCode.meta].indexOf(event.keyCode) > -1;\n}\n\nfunction setIsKeyboard(active: boolean) {\n  if (active) {\n    document.body.setAttribute('data-awsui-focus-visible', 'true');\n  } else {\n    document.body.removeAttribute('data-awsui-focus-visible');\n  }\n}\n\nfunction handleMousedown() {\n  return setIsKeyboard(false);\n}\n\nfunction handleKeydown(event: KeyboardEvent) {\n  if (!isModifierKey(event)) {\n    setIsKeyboard(true);\n  }\n}\n\nlet componentsCount = 0;\n\nfunction addListeners() {\n  document.addEventListener('mousedown', handleMousedown);\n  document.addEventListener('keydown', handleKeydown);\n}\n\nfunction removeListeners() {\n  document.removeEventListener('mousedown', handleMousedown);\n  document.removeEventListener('keydown', handleKeydown);\n}\n\nexport default function useFocusVisible() {\n  useEffect(() => {\n    if (componentsCount === 0) {\n      addListeners();\n    }\n    componentsCount++;\n    return () => {\n      componentsCount--;\n      if (componentsCount === 0) {\n        removeListeners();\n      }\n    };\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}