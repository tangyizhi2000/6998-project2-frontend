{"ast":null,"code":"export const getOverflowParents = element => {\n  const parents = [];\n  let node = element;\n  while ((node = node.parentElement) && node !== document.body) {\n    getComputedStyle(node).overflow !== 'visible' && parents.push(node);\n  }\n  return parents;\n};\nexport const getOverflowParentDimensions = _ref => {\n  let {\n    element,\n    excludeClosestParent = false,\n    expandToViewport = false,\n    canExpandOutsideViewport = false\n  } = _ref;\n  const parents = expandToViewport ? [] : getOverflowParents(element).map(el => {\n    const {\n      height,\n      width,\n      top,\n      left\n    } = el.getBoundingClientRect();\n    return {\n      // Treat the whole scrollable area as the available height\n      // if we're allowed to expand past the viewport.\n      height: canExpandOutsideViewport ? el.scrollHeight : height,\n      width,\n      top,\n      left\n    };\n  });\n  if (canExpandOutsideViewport && !expandToViewport) {\n    const documentDimensions = document.documentElement.getBoundingClientRect();\n    parents.push({\n      width: Math.max(documentDimensions.width, document.documentElement.clientWidth),\n      height: Math.max(documentDimensions.height, document.documentElement.clientHeight),\n      top: documentDimensions.top,\n      left: documentDimensions.left\n    });\n  } else {\n    parents.push({\n      height: window.innerHeight,\n      width: window.innerWidth,\n      top: 0,\n      left: 0\n    });\n  }\n  if (excludeClosestParent && !expandToViewport) {\n    parents.shift();\n  }\n  return parents;\n};\n/**\n * Calls `scrollIntoView` on the provided element with sensible defaults. If\n * the element does not existed or does not support the `scrollIntoView`\n * method, it will do nothing. This wrapper is created to support environments\n * where the native function is not available like JSDom (feature request:\n * https://github.com/jsdom/jsdom/issues/1422).\n *\n * @param element to be scrolled into view\n * @param options native options for `scrollIntoView`\n */\nexport function scrollElementIntoView(element) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    block: 'nearest',\n    inline: 'nearest'\n  };\n  var _a;\n  (_a = element === null || element === void 0 ? void 0 : element.scrollIntoView) === null || _a === void 0 ? void 0 : _a.call(element, options);\n}","map":{"version":3,"mappings":"AASA,OAAO,MAAMA,kBAAkB,GAAIC,OAAoB,IAAmB;EACxE,MAAMC,OAAO,GAAG,EAAE;EAClB,IAAIC,IAAI,GAAuBF,OAAO;EAEtC,OAAO,CAACE,IAAI,GAAGA,IAAI,CAACC,aAAa,KAAKD,IAAI,KAAKE,QAAQ,CAACC,IAAI,EAAE;IAC5DC,gBAAgB,CAACJ,IAAI,CAAC,CAACK,QAAQ,KAAK,SAAS,IAAIN,OAAO,CAACO,IAAI,CAACN,IAAI,CAAC;;EAErE,OAAOD,OAAO;AAChB,CAAC;AAED,OAAO,MAAMQ,2BAA2B,GAAG,QAUxB;EAAA,IAVyB;IAC1CT,OAAO;IACPU,oBAAoB,GAAG,KAAK;IAC5BC,gBAAgB,GAAG,KAAK;IACxBC,wBAAwB,GAAG;EAAK,CAMjC;EACC,MAAMX,OAAO,GAAGU,gBAAgB,GAC5B,EAAE,GACFZ,kBAAkB,CAACC,OAAO,CAAC,CAACa,GAAG,CAACC,EAAE,IAAG;IACnC,MAAM;MAAEC,MAAM;MAAEC,KAAK;MAAEC,GAAG;MAAEC;IAAI,CAAE,GAAGJ,EAAE,CAACK,qBAAqB,EAAE;IAC/D,OAAO;MACL;MACA;MACAJ,MAAM,EAAEH,wBAAwB,GAAGE,EAAE,CAACM,YAAY,GAAGL,MAAM;MAC3DC,KAAK;MACLC,GAAG;MACHC;KACD;EACH,CAAC,CAAC;EAEN,IAAIN,wBAAwB,IAAI,CAACD,gBAAgB,EAAE;IACjD,MAAMU,kBAAkB,GAAGjB,QAAQ,CAACkB,eAAe,CAACH,qBAAqB,EAAE;IAC3ElB,OAAO,CAACO,IAAI,CAAC;MACXQ,KAAK,EAAEO,IAAI,CAACC,GAAG,CAACH,kBAAkB,CAACL,KAAK,EAAEZ,QAAQ,CAACkB,eAAe,CAACG,WAAW,CAAC;MAC/EV,MAAM,EAAEQ,IAAI,CAACC,GAAG,CAACH,kBAAkB,CAACN,MAAM,EAAEX,QAAQ,CAACkB,eAAe,CAACI,YAAY,CAAC;MAClFT,GAAG,EAAEI,kBAAkB,CAACJ,GAAG;MAC3BC,IAAI,EAAEG,kBAAkB,CAACH;KAC1B,CAAC;GACH,MAAM;IACLjB,OAAO,CAACO,IAAI,CAAC;MACXO,MAAM,EAAEY,MAAM,CAACC,WAAW;MAC1BZ,KAAK,EAAEW,MAAM,CAACE,UAAU;MACxBZ,GAAG,EAAE,CAAC;MACNC,IAAI,EAAE;KACP,CAAC;;EAGJ,IAAIR,oBAAoB,IAAI,CAACC,gBAAgB,EAAE;IAC7CV,OAAO,CAAC6B,KAAK,EAAE;;EAGjB,OAAO7B,OAAO;AAChB,CAAC;AAID;;;;;;;;;;AAUA,OAAM,SAAU8B,qBAAqB,CACnC/B,OAAgC,EACwC;EAAA,IAAxEgC,8EAAiC;IAAEC,KAAK,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAS,CAAE;;EAExE,aAAO,aAAPlC,OAAO,uBAAPA,OAAO,CAAEmC,cAAc,wDAAGH,OAAO,CAAC;AACpC","names":["getOverflowParents","element","parents","node","parentElement","document","body","getComputedStyle","overflow","push","getOverflowParentDimensions","excludeClosestParent","expandToViewport","canExpandOutsideViewport","map","el","height","width","top","left","getBoundingClientRect","scrollHeight","documentDimensions","documentElement","Math","max","clientWidth","clientHeight","window","innerHeight","innerWidth","shift","scrollElementIntoView","options","block","inline","scrollIntoView"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/utils/lib/default/internal/utils/scrollable-containers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport interface Dimensions {\n  height: number;\n  width: number;\n  top: number;\n  left: number;\n}\n\nexport const getOverflowParents = (element: HTMLElement): HTMLElement[] => {\n  const parents = [];\n  let node: HTMLElement | null = element;\n\n  while ((node = node.parentElement) && node !== document.body) {\n    getComputedStyle(node).overflow !== 'visible' && parents.push(node);\n  }\n  return parents;\n};\n\nexport const getOverflowParentDimensions = ({\n  element,\n  excludeClosestParent = false,\n  expandToViewport = false,\n  canExpandOutsideViewport = false,\n}: {\n  element: HTMLElement;\n  excludeClosestParent: boolean;\n  expandToViewport: boolean;\n  canExpandOutsideViewport: boolean;\n}): Dimensions[] => {\n  const parents = expandToViewport\n    ? []\n    : getOverflowParents(element).map(el => {\n        const { height, width, top, left } = el.getBoundingClientRect();\n        return {\n          // Treat the whole scrollable area as the available height\n          // if we're allowed to expand past the viewport.\n          height: canExpandOutsideViewport ? el.scrollHeight : height,\n          width,\n          top,\n          left,\n        };\n      });\n\n  if (canExpandOutsideViewport && !expandToViewport) {\n    const documentDimensions = document.documentElement.getBoundingClientRect();\n    parents.push({\n      width: Math.max(documentDimensions.width, document.documentElement.clientWidth),\n      height: Math.max(documentDimensions.height, document.documentElement.clientHeight),\n      top: documentDimensions.top,\n      left: documentDimensions.left,\n    });\n  } else {\n    parents.push({\n      height: window.innerHeight,\n      width: window.innerWidth,\n      top: 0,\n      left: 0,\n    });\n  }\n\n  if (excludeClosestParent && !expandToViewport) {\n    parents.shift();\n  }\n\n  return parents;\n};\n\ntype ScrollIntoViewOptions = Parameters<HTMLElement['scrollIntoView']>[0];\n\n/**\n * Calls `scrollIntoView` on the provided element with sensible defaults. If\n * the element does not existed or does not support the `scrollIntoView`\n * method, it will do nothing. This wrapper is created to support environments\n * where the native function is not available like JSDom (feature request:\n * https://github.com/jsdom/jsdom/issues/1422).\n *\n * @param element to be scrolled into view\n * @param options native options for `scrollIntoView`\n */\nexport function scrollElementIntoView(\n  element: HTMLElement | undefined,\n  options: ScrollIntoViewOptions = { block: 'nearest', inline: 'nearest' }\n) {\n  element?.scrollIntoView?.(options);\n}\n"]},"metadata":{},"sourceType":"module"}