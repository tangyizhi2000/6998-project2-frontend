{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport * as React from 'react';\nimport { isDevelopment } from '../../is-development';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n/**\n * This hook allows you to make a component that can be used both in controlled mode and uncontrolled mode.\n * Pass in your component's props, and then implement your component as if it was only controlled.\n * When calling onChange callbacks (or the equivalent for your property), you need to call both the callback returned by this function\n * as well as the callback provided in your component's props.\n *\n * A component determines its mode (either controlled or uncontrolled) on the first render and keeps it for its lifetime. The mode cannot\n * be switched later.\n *\n *\n * Example usage:\n * ```jsx\n * const [checked, setChecked] = useControllable(\n *     props,\n *     props.defaultEnabled ?? false,\n *     {\n *        componentName: 'MyCheckboxComponent',\n *        controlledProp: 'enabled',\n *        changeHandler: 'onCheckedStatusChange'\n *     }\n * )\n *\n * return\n *  <input\n *   type=\"checkbox\"\n *   checked={checked}\n *   onChange={event => {\n *    setChecked(event.target.checked);\n *    fireNonCancelableEvent(props.onCheckedStatusChange, { checked: event.target.checked })\n *   }} />\n * ```\n *\n * @param controlledValue value for the controlled mode\n * @param handler update handler for controlled mode\n * @param defaultValue initial value for uncontrolled mode\n * @param description property metadata\n */\nexport function useControllable(controlledValue, handler, defaultValue, _ref) {\n  var componentName = _ref.componentName,\n    changeHandler = _ref.changeHandler,\n    controlledProp = _ref.controlledProp;\n  // The decision whether a component is controlled or uncontrolled is made on its first render and cannot be changed afterwards.\n  var isControlled = React.useState(controlledValue !== undefined)[0];\n  if (isDevelopment) {\n    // Print a warning if the component switches between controlled and uncontrolled mode.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (isControlled && handler === undefined) {\n        warnOnce(componentName, \"You provided a `\".concat(controlledProp, \"` prop without an `\").concat(changeHandler, \"` handler. This will render a non-interactive component.\"));\n      }\n    }, [handler, isControlled, componentName, changeHandler, controlledProp]);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      var isControlledNow = controlledValue !== undefined;\n      if (isControlled !== isControlledNow) {\n        var initialMode = isControlled ? 'controlled' : 'uncontrolled';\n        var modeNow = isControlledNow ? 'controlled' : 'uncontrolled';\n        warnOnce(componentName, \"A component tried to change \".concat(initialMode, \" '\").concat(controlledProp, \"' property to be \").concat(modeNow, \". \") + \"This is not supported. Properties should not switch from \".concat(initialMode, \" to \").concat(modeNow, \" (or vice versa). \") + \"Decide between using a controlled or uncontrolled mode for the lifetime of the component. \" + \"More info: https://fb.me/react-controlled-components\");\n      }\n    }, [isControlled, controlledProp, componentName, controlledValue]);\n  }\n  // This is the value that is used if the component is uncontrolled.\n  var _React$useState = React.useState(defaultValue),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    valueState = _React$useState2[0],\n    setValue = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    valueHasBeenSet = _React$useState4[0],\n    setValueHasBeenSet = _React$useState4[1];\n  // We track changes to the defaultValue\n  var currentUncontrolledValue = valueHasBeenSet ? valueState : defaultValue;\n  var setUncontrolledValue = React.useCallback(function (newValue) {\n    setValue(newValue);\n    setValueHasBeenSet(true);\n  }, [setValue, setValueHasBeenSet]);\n  if (isControlled) {\n    return [controlledValue, defaultCallback];\n  } else {\n    return [currentUncontrolledValue, setUncontrolledValue];\n  }\n}\nfunction defaultCallback() {\n  return void 0;\n}","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,QAAQ,QAAQ,+CAA+C;AAQxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,OAAM,SAAUC,eAAe,CAC7BC,eAA0B,EAC1BC,OAAkD,EAClDC,YAAuB,QAC8C;EAAA,IAAnEC,aAAa,QAAbA,aAAa;IAAEC,aAAa,QAAbA,aAAa;IAAEC,cAAc,QAAdA,cAAc;EAE9C;EACA,IAAMC,YAAY,GAAGV,KAAK,CAACW,QAAQ,CAACP,eAAe,KAAKQ,SAAS,CAAC,CAAC,CAAC,CAAC;EAErE,IAAIX,aAAa,EAAE;IACjB;IAEA;IACAD,KAAK,CAACa,SAAS,CAAC,YAAK;MACnB,IAAIH,YAAY,IAAIL,OAAO,KAAKO,SAAS,EAAE;QACzCV,QAAQ,CACNK,aAAa,4BACOE,cAAc,gCAAwBD,aAAa,8DACxE;;IAEL,CAAC,EAAE,CAACH,OAAO,EAAEK,YAAY,EAAEH,aAAa,EAAEC,aAAa,EAAEC,cAAc,CAAC,CAAC;IAEzE;IACAT,KAAK,CAACa,SAAS,CAAC,YAAK;MACnB,IAAMC,eAAe,GAAGV,eAAe,KAAKQ,SAAS;MACrD,IAAIF,YAAY,KAAKI,eAAe,EAAE;QACpC,IAAMC,WAAW,GAAGL,YAAY,GAAG,YAAY,GAAG,cAAc;QAChE,IAAMM,OAAO,GAAGF,eAAe,GAAG,YAAY,GAAG,cAAc;QAC/DZ,QAAQ,CACNK,aAAa,EACb,sCAA+BQ,WAAW,eAAKN,cAAc,8BAAoBO,OAAO,6EAC1BD,WAAW,iBAAOC,OAAO,uBAAoB,+FACb,yDACtC,CACzD;;IAEL,CAAC,EAAE,CAACN,YAAY,EAAED,cAAc,EAAEF,aAAa,EAAEH,eAAe,CAAC,CAAC;;EAGpE;EACA,sBAA+BJ,KAAK,CAACW,QAAQ,CAACL,YAAY,CAAC;IAAA;IAApDW,UAAU;IAAEC,QAAQ;EAC3B,uBAA8ClB,KAAK,CAACW,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA5DQ,eAAe;IAAEC,kBAAkB;EAE1C;EACA,IAAMC,wBAAwB,GAAGF,eAAe,GAAGF,UAAU,GAAGX,YAAY;EAE5E,IAAMgB,oBAAoB,GAAGtB,KAAK,CAACuB,WAAW,CAC5C,UAACC,QAAyC,EAAI;IAC5CN,QAAQ,CAACM,QAAQ,CAAC;IAClBJ,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC,EACD,CAACF,QAAQ,EAAEE,kBAAkB,CAAC,CAC/B;EAED,IAAIV,YAAY,EAAE;IAChB,OAAO,CAACN,eAAe,EAAEqB,eAAe,CAAU;GACnD,MAAM;IACL,OAAO,CAACJ,wBAAwB,EAAEC,oBAAoB,CAAU;;AAEpE;AAEA,SAASG,eAAe;EACtB,OAAO,KAAK,CAAC;AACf","names":["React","isDevelopment","warnOnce","useControllable","controlledValue","handler","defaultValue","componentName","changeHandler","controlledProp","isControlled","useState","undefined","useEffect","isControlledNow","initialMode","modeNow","valueState","setValue","valueHasBeenSet","setValueHasBeenSet","currentUncontrolledValue","setUncontrolledValue","useCallback","newValue","defaultCallback"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/hooks/use-controllable/lib/default/internal/hooks/use-controllable/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport * as React from 'react';\nimport { isDevelopment } from '../../is-development';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\ninterface PropertyDescription {\n  componentName: string;\n  controlledProp: string;\n  changeHandler: string;\n}\n\n/**\n * This hook allows you to make a component that can be used both in controlled mode and uncontrolled mode.\n * Pass in your component's props, and then implement your component as if it was only controlled.\n * When calling onChange callbacks (or the equivalent for your property), you need to call both the callback returned by this function\n * as well as the callback provided in your component's props.\n *\n * A component determines its mode (either controlled or uncontrolled) on the first render and keeps it for its lifetime. The mode cannot\n * be switched later.\n *\n *\n * Example usage:\n * ```jsx\n * const [checked, setChecked] = useControllable(\n *     props,\n *     props.defaultEnabled ?? false,\n *     {\n *        componentName: 'MyCheckboxComponent',\n *        controlledProp: 'enabled',\n *        changeHandler: 'onCheckedStatusChange'\n *     }\n * )\n *\n * return\n *  <input\n *   type=\"checkbox\"\n *   checked={checked}\n *   onChange={event => {\n *    setChecked(event.target.checked);\n *    fireNonCancelableEvent(props.onCheckedStatusChange, { checked: event.target.checked })\n *   }} />\n * ```\n *\n * @param controlledValue value for the controlled mode\n * @param handler update handler for controlled mode\n * @param defaultValue initial value for uncontrolled mode\n * @param description property metadata\n */\nexport function useControllable<ValueType>(\n  controlledValue: ValueType,\n  handler: ((...args: any[]) => unknown) | undefined,\n  defaultValue: ValueType,\n  { componentName, changeHandler, controlledProp }: PropertyDescription\n) {\n  // The decision whether a component is controlled or uncontrolled is made on its first render and cannot be changed afterwards.\n  const isControlled = React.useState(controlledValue !== undefined)[0];\n\n  if (isDevelopment) {\n    // Print a warning if the component switches between controlled and uncontrolled mode.\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (isControlled && handler === undefined) {\n        warnOnce(\n          componentName,\n          `You provided a \\`${controlledProp}\\` prop without an \\`${changeHandler}\\` handler. This will render a non-interactive component.`\n        );\n      }\n    }, [handler, isControlled, componentName, changeHandler, controlledProp]);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      const isControlledNow = controlledValue !== undefined;\n      if (isControlled !== isControlledNow) {\n        const initialMode = isControlled ? 'controlled' : 'uncontrolled';\n        const modeNow = isControlledNow ? 'controlled' : 'uncontrolled';\n        warnOnce(\n          componentName,\n          `A component tried to change ${initialMode} '${controlledProp}' property to be ${modeNow}. ` +\n            `This is not supported. Properties should not switch from ${initialMode} to ${modeNow} (or vice versa). ` +\n            `Decide between using a controlled or uncontrolled mode for the lifetime of the component. ` +\n            `More info: https://fb.me/react-controlled-components`\n        );\n      }\n    }, [isControlled, controlledProp, componentName, controlledValue]);\n  }\n\n  // This is the value that is used if the component is uncontrolled.\n  const [valueState, setValue] = React.useState(defaultValue);\n  const [valueHasBeenSet, setValueHasBeenSet] = React.useState(false);\n\n  // We track changes to the defaultValue\n  const currentUncontrolledValue = valueHasBeenSet ? valueState : defaultValue;\n\n  const setUncontrolledValue = React.useCallback(\n    (newValue: React.SetStateAction<ValueType>) => {\n      setValue(newValue);\n      setValueHasBeenSet(true);\n    },\n    [setValue, setValueHasBeenSet]\n  );\n\n  if (isControlled) {\n    return [controlledValue, defaultCallback] as const;\n  } else {\n    return [currentUncontrolledValue, setUncontrolledValue] as const;\n  }\n}\n\nfunction defaultCallback() {\n  return void 0;\n}\n"]},"metadata":{},"sourceType":"module"}