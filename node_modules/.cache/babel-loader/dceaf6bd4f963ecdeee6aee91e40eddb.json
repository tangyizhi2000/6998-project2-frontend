{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState, createContext, useContext } from 'react';\nexport const DEFAULT_COLUMN_WIDTH = 120;\nfunction readWidths(getCell, visibleColumns) {\n  var _a;\n  const result = {};\n  for (let index = 0; index < visibleColumns.length; index++) {\n    const column = visibleColumns[index];\n    let width = column.width || 0;\n    const minWidth = column.minWidth || width || DEFAULT_COLUMN_WIDTH;\n    if (!width &&\n    // read width from the DOM if it is missing in the config\n    index !== visibleColumns.length - 1 // skip reading for the last column, because it expands to fully fit the container\n    ) {\n      const colEl = getCell(column.id);\n      width = (_a = colEl === null || colEl === void 0 ? void 0 : colEl.getBoundingClientRect().width) !== null && _a !== void 0 ? _a : DEFAULT_COLUMN_WIDTH;\n    }\n    result[column.id] = Math.max(width, minWidth);\n  }\n  return result;\n}\nfunction updateWidths(visibleColumns, oldWidths, newWidth, columnId) {\n  const column = visibleColumns.find(column => column.id === columnId);\n  const minWidth = typeof (column === null || column === void 0 ? void 0 : column.minWidth) === 'number' ? column.minWidth : DEFAULT_COLUMN_WIDTH;\n  newWidth = Math.max(newWidth, minWidth);\n  if (oldWidths[columnId] === newWidth) {\n    return oldWidths;\n  }\n  return Object.assign(Object.assign({}, oldWidths), {\n    [columnId]: newWidth\n  });\n}\nconst WidthsContext = createContext({\n  totalWidth: 0,\n  columnWidths: {},\n  updateColumn: () => {},\n  setCell: () => {}\n});\nexport function ColumnWidthsProvider(_ref) {\n  let {\n    visibleColumns,\n    resizableColumns,\n    children\n  } = _ref;\n  const visibleColumnsRef = useRef(null);\n  const [columnWidths, setColumnWidths] = useState({});\n  const cellsRef = useRef({});\n  const getCell = columnId => {\n    var _a;\n    return (_a = cellsRef.current[columnId]) !== null && _a !== void 0 ? _a : null;\n  };\n  const setCell = (columnId, node) => {\n    if (node) {\n      cellsRef.current[columnId] = node;\n    } else {\n      delete cellsRef.current[columnId];\n    }\n  };\n  // The widths of the dynamically added columns (after the first render) if not set explicitly\n  // will default to the DEFAULT_COLUMN_WIDTH.\n  useEffect(() => {\n    if (!resizableColumns) {\n      return;\n    }\n    const updates = {};\n    const lastVisible = visibleColumnsRef.current;\n    if (lastVisible) {\n      for (let index = 0; index < visibleColumns.length; index++) {\n        const column = visibleColumns[index];\n        if (!columnWidths[column.id] && lastVisible.indexOf(column.id) === -1) {\n          updates[column.id] = column.width || DEFAULT_COLUMN_WIDTH;\n        }\n      }\n      if (Object.keys(updates).length > 0) {\n        setColumnWidths(columnWidths => Object.assign(Object.assign({}, columnWidths), updates));\n      }\n    }\n    visibleColumnsRef.current = visibleColumns.map(column => column.id);\n  }, [columnWidths, resizableColumns, visibleColumns]);\n  // Read the actual column widths after the first render to employ the browser defaults for\n  // those columns without explicit width.\n  useEffect(() => {\n    if (!resizableColumns) {\n      return;\n    }\n    setColumnWidths(() => readWidths(getCell, visibleColumns));\n    // This code is intended to run only at the first render and should not re-run when table props change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  function updateColumn(columnId, newWidth) {\n    setColumnWidths(columnWidths => updateWidths(visibleColumns, columnWidths, newWidth, columnId));\n  }\n  const totalWidth = visibleColumns.reduce((total, column) => total + (columnWidths[column.id] || DEFAULT_COLUMN_WIDTH), 0);\n  return React.createElement(WidthsContext.Provider, {\n    value: {\n      columnWidths,\n      totalWidth,\n      updateColumn,\n      setCell\n    }\n  }, children);\n}\nexport function useColumnWidths() {\n  return useContext(WidthsContext);\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","useState","createContext","useContext","DEFAULT_COLUMN_WIDTH","readWidths","getCell","visibleColumns","result","index","length","column","width","minWidth","colEl","id","getBoundingClientRect","Math","max","updateWidths","oldWidths","newWidth","columnId","find","WidthsContext","totalWidth","columnWidths","updateColumn","setCell","ColumnWidthsProvider","resizableColumns","children","visibleColumnsRef","setColumnWidths","cellsRef","current","node","updates","lastVisible","indexOf","Object","keys","map","reduce","total","Provider","value","useColumnWidths"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/table/lib/default/table/use-column-widths.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState, createContext, useContext } from 'react';\n\nexport const DEFAULT_COLUMN_WIDTH = 120;\n\nexport interface ColumnWidthDefinition {\n  id: PropertyKey;\n  minWidth?: string | number;\n  width?: string | number;\n}\n\nfunction readWidths(\n  getCell: (columnId: PropertyKey) => null | HTMLElement,\n  visibleColumns: readonly ColumnWidthDefinition[]\n) {\n  const result: Record<PropertyKey, number> = {};\n  for (let index = 0; index < visibleColumns.length; index++) {\n    const column = visibleColumns[index];\n    let width = (column.width as number) || 0;\n    const minWidth = (column.minWidth as number) || width || DEFAULT_COLUMN_WIDTH;\n    if (\n      !width && // read width from the DOM if it is missing in the config\n      index !== visibleColumns.length - 1 // skip reading for the last column, because it expands to fully fit the container\n    ) {\n      const colEl = getCell(column.id);\n      width = colEl?.getBoundingClientRect().width ?? DEFAULT_COLUMN_WIDTH;\n    }\n    result[column.id] = Math.max(width, minWidth);\n  }\n  return result;\n}\n\nfunction updateWidths(\n  visibleColumns: readonly ColumnWidthDefinition[],\n  oldWidths: Record<PropertyKey, number>,\n  newWidth: number,\n  columnId: PropertyKey\n) {\n  const column = visibleColumns.find(column => column.id === columnId);\n  const minWidth = typeof column?.minWidth === 'number' ? column.minWidth : DEFAULT_COLUMN_WIDTH;\n  newWidth = Math.max(newWidth, minWidth);\n  if (oldWidths[columnId] === newWidth) {\n    return oldWidths;\n  }\n  return { ...oldWidths, [columnId]: newWidth };\n}\n\ninterface WidthsContext {\n  totalWidth: number;\n  columnWidths: Record<PropertyKey, number>;\n  updateColumn: (columnId: PropertyKey, newWidth: number) => void;\n  setCell: (columnId: PropertyKey, node: null | HTMLElement) => void;\n}\n\nconst WidthsContext = createContext<WidthsContext>({\n  totalWidth: 0,\n  columnWidths: {},\n  updateColumn: () => {},\n  setCell: () => {},\n});\n\ninterface WidthProviderProps {\n  visibleColumns: readonly ColumnWidthDefinition[];\n  resizableColumns: boolean | undefined;\n  children: React.ReactNode;\n}\n\nexport function ColumnWidthsProvider({ visibleColumns, resizableColumns, children }: WidthProviderProps) {\n  const visibleColumnsRef = useRef<(PropertyKey | undefined)[] | null>(null);\n  const [columnWidths, setColumnWidths] = useState<Record<PropertyKey, number>>({});\n\n  const cellsRef = useRef<Record<PropertyKey, HTMLElement>>({});\n  const getCell = (columnId: PropertyKey): null | HTMLElement => cellsRef.current[columnId] ?? null;\n  const setCell = (columnId: PropertyKey, node: null | HTMLElement) => {\n    if (node) {\n      cellsRef.current[columnId] = node;\n    } else {\n      delete cellsRef.current[columnId];\n    }\n  };\n\n  // The widths of the dynamically added columns (after the first render) if not set explicitly\n  // will default to the DEFAULT_COLUMN_WIDTH.\n  useEffect(() => {\n    if (!resizableColumns) {\n      return;\n    }\n    const updates: Record<PropertyKey, number> = {};\n    const lastVisible = visibleColumnsRef.current;\n    if (lastVisible) {\n      for (let index = 0; index < visibleColumns.length; index++) {\n        const column = visibleColumns[index];\n        if (!columnWidths[column.id] && lastVisible.indexOf(column.id) === -1) {\n          updates[column.id] = (column.width as number) || DEFAULT_COLUMN_WIDTH;\n        }\n      }\n      if (Object.keys(updates).length > 0) {\n        setColumnWidths(columnWidths => ({ ...columnWidths, ...updates }));\n      }\n    }\n    visibleColumnsRef.current = visibleColumns.map(column => column.id);\n  }, [columnWidths, resizableColumns, visibleColumns]);\n\n  // Read the actual column widths after the first render to employ the browser defaults for\n  // those columns without explicit width.\n  useEffect(() => {\n    if (!resizableColumns) {\n      return;\n    }\n    setColumnWidths(() => readWidths(getCell, visibleColumns));\n    // This code is intended to run only at the first render and should not re-run when table props change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function updateColumn(columnId: PropertyKey, newWidth: number) {\n    setColumnWidths(columnWidths => updateWidths(visibleColumns, columnWidths, newWidth, columnId));\n  }\n\n  const totalWidth = visibleColumns.reduce(\n    (total, column) => total + (columnWidths[column.id] || DEFAULT_COLUMN_WIDTH),\n    0\n  );\n\n  return (\n    <WidthsContext.Provider value={{ columnWidths, totalWidth, updateColumn, setCell }}>\n      {children}\n    </WidthsContext.Provider>\n  );\n}\n\nexport function useColumnWidths() {\n  return useContext(WidthsContext);\n}\n"]},"metadata":{},"sourceType":"module"}