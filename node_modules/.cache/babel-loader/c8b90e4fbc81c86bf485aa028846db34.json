{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\nimport { addMonths, endOfDay, isAfter, isBefore, isSameMonth, startOfDay, startOfMonth } from 'date-fns';\nimport styles from '../styles.css.js';\nimport SpaceBetween from '../../space-between/internal';\nimport CalendarHeader from './header';\nimport { Grids } from './grids';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { getDateLabel, renderTimeLabel } from '../../calendar/utils/intl';\nimport LiveRegion from '../../internal/components/live-region';\nimport { normalizeLocale, normalizeStartOfWeek } from '../../internal/utils/locale';\nimport { parseDate, splitDateTime, formatDateTime } from '../../internal/utils/date-time';\nimport { getBaseDate } from '../../calendar/utils/navigation';\nimport { useMobile } from '../../internal/hooks/use-mobile/index.js';\nimport RangeInputs from './range-inputs.js';\nimport { findDateToFocus, findMonthToDisplay } from './utils';\nimport { useInternalI18n } from '../../i18n/context.js';\nexport default function DateRangePickerCalendar(_ref) {\n  var value = _ref.value,\n    setValue = _ref.setValue,\n    _ref$locale = _ref.locale,\n    locale = _ref$locale === void 0 ? '' : _ref$locale,\n    startOfWeek = _ref.startOfWeek,\n    _ref$isDateEnabled = _ref.isDateEnabled,\n    isDateEnabled = _ref$isDateEnabled === void 0 ? function () {\n      return true;\n    } : _ref$isDateEnabled,\n    i18nStrings = _ref.i18nStrings,\n    _ref$dateOnly = _ref.dateOnly,\n    dateOnly = _ref$dateOnly === void 0 ? false : _ref$dateOnly,\n    _ref$timeInputFormat = _ref.timeInputFormat,\n    timeInputFormat = _ref$timeInputFormat === void 0 ? 'hh:mm:ss' : _ref$timeInputFormat,\n    customAbsoluteRangeControl = _ref.customAbsoluteRangeControl;\n  var isSingleGrid = useMobile();\n  var normalizedLocale = normalizeLocale('DateRangePicker', locale);\n  var normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, normalizedLocale);\n  var i18n = useInternalI18n('date-range-picker');\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    announcement = _useState2[0],\n    setAnnouncement = _useState2[1];\n  var _useState3 = useState(function () {\n      return findMonthToDisplay(value, isSingleGrid);\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentMonth = _useState4[0],\n    setCurrentMonth = _useState4[1];\n  var _useState5 = useState(function () {\n      if (value.start.date) {\n        var startDate = parseDate(value.start.date);\n        if (isSameMonth(startDate, currentMonth)) {\n          return startDate;\n        }\n        if (!isSingleGrid && isSameMonth(startDate, addMonths(currentMonth, -1))) {\n          return startDate;\n        }\n      }\n      return findDateToFocus(parseDate(value.start.date), currentMonth, isDateEnabled);\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    focusedDate = _useState6[0],\n    setFocusedDate = _useState6[1];\n  var updateCurrentMonth = function updateCurrentMonth(startDate) {\n    if (startDate.length >= 8) {\n      var newCurrentMonth = startOfMonth(parseDate(startDate));\n      setCurrentMonth(isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, 1));\n    }\n  };\n  // recommended to include the start/end time announced with the selection\n  // because the user is not aware of the fact that a start/end time is also set as soon as they select a date\n  var announceStart = function announceStart(startDate) {\n    return i18n('i18nStrings.startDateLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startDateLabel) + ', ' + getDateLabel(normalizedLocale, startDate) + ', ' + i18n('i18nStrings.startTimeLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startTimeLabel) + ', ' + renderTimeLabel(normalizedLocale, startDate, timeInputFormat) + '. ';\n  };\n  var announceEnd = function announceEnd(endDate) {\n    return i18n('i18nStrings.endDateLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endDateLabel) + ', ' + getDateLabel(normalizedLocale, endDate) + ', ' + i18n('i18nStrings.endTimeLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endTimeLabel) + ', ' + renderTimeLabel(normalizedLocale, endDate, timeInputFormat) + '. ';\n  };\n  var renderSelectedAbsoluteRangeAriaLive = i18n('i18nStrings.renderSelectedAbsoluteRangeAriaLive', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.renderSelectedAbsoluteRangeAriaLive, function (format) {\n    return function (startDate, endDate) {\n      return format({\n        startDate: startDate,\n        endDate: endDate\n      });\n    };\n  });\n  var announceRange = function announceRange(startDate, endDate) {\n    if (!renderSelectedAbsoluteRangeAriaLive) {\n      return \"\".concat(getDateLabel(normalizedLocale, startDate), \" \\u2013 \").concat(getDateLabel(normalizedLocale, endDate));\n    }\n    return renderSelectedAbsoluteRangeAriaLive(getDateLabel(normalizedLocale, startDate), getDateLabel(normalizedLocale, endDate));\n  };\n  var onSelectDateHandler = function onSelectDateHandler(selectedDate) {\n    var start = value.start,\n      end = value.end;\n    var newStart = undefined;\n    var newEnd = undefined;\n    var announcement = '';\n    // If both fields are empty, we set the start date\n    if (!start.date && !end.date) {\n      newStart = startOfDay(selectedDate);\n      announcement = announceStart(newStart);\n    }\n    // If both fields are set, we start new\n    else if (start.date && end.date) {\n      newStart = startOfDay(selectedDate);\n      newEnd = null;\n      announcement = announceStart(newStart);\n    }\n    // If only the END date is empty, we fill it (and swap dates if needed)\n    else if (start.date && !end.date) {\n      var parsedStartDate = parseDate(start.date);\n      if (isBefore(selectedDate, parsedStartDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        newStart = startOfDay(selectedDate);\n        newEnd = endOfDay(parsedStartDate);\n        announcement = announceStart(newStart) + announceRange(newStart, newEnd);\n      } else {\n        newEnd = endOfDay(selectedDate);\n        announcement = announceEnd(newEnd) + announceRange(parsedStartDate, newEnd);\n      }\n    }\n    // If only the START date is empty, we fill it (and swap dates if needed)\n    else if (!start.date && end.date) {\n      var existingEndDate = parseDate(end.date);\n      if (isAfter(selectedDate, existingEndDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        newStart = startOfDay(existingEndDate);\n        newEnd = endOfDay(selectedDate);\n        announcement = announceEnd(newEnd) + announceRange(newStart, newEnd);\n      } else {\n        newStart = startOfDay(selectedDate);\n        announcement = announceStart(newStart) + announceRange(newStart, existingEndDate);\n      }\n    }\n    var formatValue = function formatValue(date, previous) {\n      if (date === null) {\n        // explicitly reset to empty\n        return {\n          date: '',\n          time: ''\n        };\n      } else if (date === undefined) {\n        // keep old value\n        return previous;\n      }\n      return splitDateTime(formatDateTime(date));\n    };\n    setValue({\n      start: formatValue(newStart, value.start),\n      end: formatValue(newEnd, value.end)\n    });\n    setAnnouncement(announcement);\n  };\n  var onHeaderChangeMonthHandler = function onHeaderChangeMonthHandler(newCurrentMonth) {\n    setCurrentMonth(newCurrentMonth);\n    var newBaseDateMonth = isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, -1);\n    var newBaseDate = getBaseDate(newBaseDateMonth, isDateEnabled);\n    setFocusedDate(newBaseDate);\n  };\n  var onChangeStartDate = function onChangeStartDate(value) {\n    setValue(function (oldValue) {\n      return Object.assign(Object.assign({}, oldValue), {\n        start: Object.assign(Object.assign({}, oldValue.start), {\n          date: value\n        })\n      });\n    });\n    updateCurrentMonth(value);\n  };\n  var interceptedSetValue = function interceptedSetValue(newValue) {\n    setValue(function (oldValue) {\n      var updated = typeof newValue === 'function' ? newValue(oldValue) : newValue;\n      updateCurrentMonth(updated.start.date);\n      return updated;\n    });\n  };\n  var headingIdPrefix = useUniqueId('date-range-picker-calendar-heading');\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: clsx(styles['calendar-container'], _defineProperty({}, styles['one-grid'], isSingleGrid))\n  }, React.createElement(SpaceBetween, {\n    size: \"s\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles.calendar, _defineProperty({}, styles['one-grid'], isSingleGrid))\n  }, React.createElement(CalendarHeader, {\n    baseDate: currentMonth,\n    locale: normalizedLocale,\n    onChangeMonth: onHeaderChangeMonthHandler,\n    previousMonthLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousMonthAriaLabel,\n    nextMonthLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextMonthAriaLabel,\n    isSingleGrid: isSingleGrid,\n    headingIdPrefix: headingIdPrefix\n  }), React.createElement(Grids, {\n    isSingleGrid: isSingleGrid,\n    locale: normalizedLocale,\n    baseDate: currentMonth,\n    focusedDate: focusedDate,\n    onFocusedDateChange: setFocusedDate,\n    isDateEnabled: isDateEnabled,\n    onSelectDate: onSelectDateHandler,\n    onChangeMonth: setCurrentMonth,\n    startOfWeek: normalizedStartOfWeek,\n    todayAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.todayAriaLabel,\n    selectedStartDate: parseDate(value.start.date, true),\n    selectedEndDate: parseDate(value.end.date, true),\n    headingIdPrefix: headingIdPrefix\n  })), React.createElement(RangeInputs, {\n    startDate: value.start.date,\n    onChangeStartDate: onChangeStartDate,\n    startTime: value.start.time,\n    onChangeStartTime: function onChangeStartTime(value) {\n      return setValue(function (oldValue) {\n        return Object.assign(Object.assign({}, oldValue), {\n          start: Object.assign(Object.assign({}, oldValue.start), {\n            time: value\n          })\n        });\n      });\n    },\n    endDate: value.end.date,\n    onChangeEndDate: function onChangeEndDate(value) {\n      return setValue(function (oldValue) {\n        return Object.assign(Object.assign({}, oldValue), {\n          end: Object.assign(Object.assign({}, oldValue.end), {\n            date: value\n          })\n        });\n      });\n    },\n    endTime: value.end.time,\n    onChangeEndTime: function onChangeEndTime(value) {\n      return setValue(function (oldValue) {\n        return Object.assign(Object.assign({}, oldValue), {\n          end: Object.assign(Object.assign({}, oldValue.end), {\n            time: value\n          })\n        });\n      });\n    },\n    i18nStrings: i18nStrings,\n    dateOnly: dateOnly,\n    timeInputFormat: timeInputFormat\n  }), customAbsoluteRangeControl && React.createElement(\"div\", null, customAbsoluteRangeControl(value, interceptedSetValue)))), React.createElement(LiveRegion, {\n    className: styles['calendar-aria-live']\n  }, announcement));\n}","map":{"version":3,"mappings":"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","names":["React","useState","addMonths","endOfDay","isAfter","isBefore","isSameMonth","startOfDay","startOfMonth","styles","SpaceBetween","CalendarHeader","Grids","clsx","useUniqueId","getDateLabel","renderTimeLabel","LiveRegion","normalizeLocale","normalizeStartOfWeek","parseDate","splitDateTime","formatDateTime","getBaseDate","useMobile","RangeInputs","findDateToFocus","findMonthToDisplay","useInternalI18n","DateRangePickerCalendar","value","setValue","locale","startOfWeek","isDateEnabled","i18nStrings","dateOnly","timeInputFormat","customAbsoluteRangeControl","isSingleGrid","normalizedLocale","normalizedStartOfWeek","i18n","announcement","setAnnouncement","currentMonth","setCurrentMonth","start","date","startDate","focusedDate","setFocusedDate","updateCurrentMonth","length","newCurrentMonth","announceStart","startDateLabel","startTimeLabel","announceEnd","endDate","endDateLabel","endTimeLabel","renderSelectedAbsoluteRangeAriaLive","format","announceRange","onSelectDateHandler","selectedDate","end","newStart","undefined","newEnd","parsedStartDate","existingEndDate","formatValue","previous","time","onHeaderChangeMonthHandler","newBaseDateMonth","newBaseDate","onChangeStartDate","oldValue","Object","interceptedSetValue","newValue","updated","headingIdPrefix","className","size","calendar","baseDate","onChangeMonth","previousMonthLabel","previousMonthAriaLabel","nextMonthLabel","nextMonthAriaLabel","onFocusedDateChange","onSelectDate","todayAriaLabel","selectedStartDate","selectedEndDate","startTime","onChangeStartTime","onChangeEndDate","endTime","onChangeEndTime"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/date-range-picker/calendar/lib/default/date-range-picker/calendar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState } from 'react';\nimport { addMonths, endOfDay, isAfter, isBefore, isSameMonth, startOfDay, startOfMonth } from 'date-fns';\nimport styles from '../styles.css.js';\nimport SpaceBetween from '../../space-between/internal';\nimport { BaseComponentProps } from '../../internal/base-component';\nimport { DateRangePickerProps, RangeCalendarI18nStrings } from '../interfaces';\nimport CalendarHeader from './header';\nimport { Grids } from './grids';\nimport { TimeInputProps } from '../../time-input/interfaces';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { getDateLabel, renderTimeLabel } from '../../calendar/utils/intl';\nimport LiveRegion from '../../internal/components/live-region';\nimport { normalizeLocale, normalizeStartOfWeek } from '../../internal/utils/locale';\nimport { parseDate, splitDateTime, formatDateTime } from '../../internal/utils/date-time';\nimport { getBaseDate } from '../../calendar/utils/navigation';\nimport { useMobile } from '../../internal/hooks/use-mobile/index.js';\nimport RangeInputs from './range-inputs.js';\nimport { findDateToFocus, findMonthToDisplay } from './utils';\nimport { useInternalI18n } from '../../i18n/context.js';\n\nexport interface DateRangePickerCalendarProps extends BaseComponentProps {\n  value: DateRangePickerProps.PendingAbsoluteValue;\n  setValue: React.Dispatch<React.SetStateAction<DateRangePickerProps.PendingAbsoluteValue>>;\n  locale?: string;\n  startOfWeek?: number;\n  isDateEnabled?: (date: Date) => boolean;\n  i18nStrings?: RangeCalendarI18nStrings;\n  dateOnly?: boolean;\n  timeInputFormat?: TimeInputProps.Format;\n  customAbsoluteRangeControl: DateRangePickerProps.AbsoluteRangeControl | undefined;\n}\n\nexport default function DateRangePickerCalendar({\n  value,\n  setValue,\n  locale = '',\n  startOfWeek,\n  isDateEnabled = () => true,\n  i18nStrings,\n  dateOnly = false,\n  timeInputFormat = 'hh:mm:ss',\n  customAbsoluteRangeControl,\n}: DateRangePickerCalendarProps) {\n  const isSingleGrid = useMobile();\n  const normalizedLocale = normalizeLocale('DateRangePicker', locale);\n  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, normalizedLocale);\n  const i18n = useInternalI18n('date-range-picker');\n\n  const [announcement, setAnnouncement] = useState('');\n  const [currentMonth, setCurrentMonth] = useState(() => findMonthToDisplay(value, isSingleGrid));\n  const [focusedDate, setFocusedDate] = useState<Date | null>(() => {\n    if (value.start.date) {\n      const startDate = parseDate(value.start.date);\n      if (isSameMonth(startDate, currentMonth)) {\n        return startDate;\n      }\n      if (!isSingleGrid && isSameMonth(startDate, addMonths(currentMonth, -1))) {\n        return startDate;\n      }\n    }\n    return findDateToFocus(parseDate(value.start.date), currentMonth, isDateEnabled);\n  });\n\n  const updateCurrentMonth = (startDate: string) => {\n    if (startDate.length >= 8) {\n      const newCurrentMonth = startOfMonth(parseDate(startDate));\n      setCurrentMonth(isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, 1));\n    }\n  };\n\n  // recommended to include the start/end time announced with the selection\n  // because the user is not aware of the fact that a start/end time is also set as soon as they select a date\n  const announceStart = (startDate: Date) => {\n    return (\n      i18n('i18nStrings.startDateLabel', i18nStrings?.startDateLabel) +\n      ', ' +\n      getDateLabel(normalizedLocale, startDate) +\n      ', ' +\n      i18n('i18nStrings.startTimeLabel', i18nStrings?.startTimeLabel) +\n      ', ' +\n      renderTimeLabel(normalizedLocale, startDate, timeInputFormat) +\n      '. '\n    );\n  };\n\n  const announceEnd = (endDate: Date) => {\n    return (\n      i18n('i18nStrings.endDateLabel', i18nStrings?.endDateLabel) +\n      ', ' +\n      getDateLabel(normalizedLocale, endDate) +\n      ', ' +\n      i18n('i18nStrings.endTimeLabel', i18nStrings?.endTimeLabel) +\n      ', ' +\n      renderTimeLabel(normalizedLocale, endDate, timeInputFormat) +\n      '. '\n    );\n  };\n\n  const renderSelectedAbsoluteRangeAriaLive = i18n(\n    'i18nStrings.renderSelectedAbsoluteRangeAriaLive',\n    i18nStrings?.renderSelectedAbsoluteRangeAriaLive,\n    format => (startDate, endDate) => format({ startDate, endDate })\n  );\n\n  const announceRange = (startDate: Date, endDate: Date) => {\n    if (!renderSelectedAbsoluteRangeAriaLive) {\n      return `${getDateLabel(normalizedLocale, startDate)} – ${getDateLabel(normalizedLocale, endDate)}`;\n    }\n    return renderSelectedAbsoluteRangeAriaLive(\n      getDateLabel(normalizedLocale, startDate),\n      getDateLabel(normalizedLocale, endDate)\n    );\n  };\n\n  const onSelectDateHandler = (selectedDate: Date) => {\n    const { start, end } = value;\n    let newStart: Date | undefined = undefined;\n    let newEnd: Date | null | undefined = undefined;\n    let announcement = '';\n\n    // If both fields are empty, we set the start date\n    if (!start.date && !end.date) {\n      newStart = startOfDay(selectedDate);\n      announcement = announceStart(newStart);\n    }\n    // If both fields are set, we start new\n    else if (start.date && end.date) {\n      newStart = startOfDay(selectedDate);\n      newEnd = null;\n      announcement = announceStart(newStart);\n    }\n    // If only the END date is empty, we fill it (and swap dates if needed)\n    else if (start.date && !end.date) {\n      const parsedStartDate = parseDate(start.date);\n\n      if (isBefore(selectedDate, parsedStartDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        newStart = startOfDay(selectedDate);\n        newEnd = endOfDay(parsedStartDate);\n        announcement = announceStart(newStart) + announceRange(newStart, newEnd);\n      } else {\n        newEnd = endOfDay(selectedDate);\n        announcement = announceEnd(newEnd) + announceRange(parsedStartDate, newEnd);\n      }\n    }\n    // If only the START date is empty, we fill it (and swap dates if needed)\n    else if (!start.date && end.date) {\n      const existingEndDate = parseDate(end.date);\n\n      if (isAfter(selectedDate, existingEndDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        newStart = startOfDay(existingEndDate);\n        newEnd = endOfDay(selectedDate);\n        announcement = announceEnd(newEnd) + announceRange(newStart, newEnd);\n      } else {\n        newStart = startOfDay(selectedDate);\n        announcement = announceStart(newStart) + announceRange(newStart, existingEndDate);\n      }\n    }\n\n    const formatValue = (\n      date: Date | null | undefined,\n      previous: DateRangePickerProps.DateTimeStrings\n    ): DateRangePickerProps.DateTimeStrings => {\n      if (date === null) {\n        // explicitly reset to empty\n        return { date: '', time: '' };\n      } else if (date === undefined) {\n        // keep old value\n        return previous;\n      }\n      return splitDateTime(formatDateTime(date));\n    };\n\n    setValue({\n      start: formatValue(newStart, value.start),\n      end: formatValue(newEnd, value.end),\n    });\n    setAnnouncement(announcement);\n  };\n\n  const onHeaderChangeMonthHandler = (newCurrentMonth: Date) => {\n    setCurrentMonth(newCurrentMonth);\n\n    const newBaseDateMonth = isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, -1);\n    const newBaseDate = getBaseDate(newBaseDateMonth, isDateEnabled);\n    setFocusedDate(newBaseDate);\n  };\n\n  const onChangeStartDate = (value: string) => {\n    setValue((oldValue: DateRangePickerProps.PendingAbsoluteValue) => ({\n      ...oldValue,\n      start: { ...oldValue.start, date: value },\n    }));\n    updateCurrentMonth(value);\n  };\n\n  const interceptedSetValue: DateRangePickerCalendarProps['setValue'] = newValue => {\n    setValue(oldValue => {\n      const updated = typeof newValue === 'function' ? newValue(oldValue) : newValue;\n      updateCurrentMonth(updated.start.date);\n      return updated;\n    });\n  };\n\n  const headingIdPrefix = useUniqueId('date-range-picker-calendar-heading');\n  return (\n    <>\n      <div\n        className={clsx(styles['calendar-container'], {\n          [styles['one-grid']]: isSingleGrid,\n        })}\n      >\n        <SpaceBetween size=\"s\">\n          <div\n            className={clsx(styles.calendar, {\n              [styles['one-grid']]: isSingleGrid,\n            })}\n          >\n            <CalendarHeader\n              baseDate={currentMonth}\n              locale={normalizedLocale}\n              onChangeMonth={onHeaderChangeMonthHandler}\n              previousMonthLabel={i18nStrings?.previousMonthAriaLabel}\n              nextMonthLabel={i18nStrings?.nextMonthAriaLabel}\n              isSingleGrid={isSingleGrid}\n              headingIdPrefix={headingIdPrefix}\n            />\n\n            <Grids\n              isSingleGrid={isSingleGrid}\n              locale={normalizedLocale}\n              baseDate={currentMonth}\n              focusedDate={focusedDate}\n              onFocusedDateChange={setFocusedDate}\n              isDateEnabled={isDateEnabled}\n              onSelectDate={onSelectDateHandler}\n              onChangeMonth={setCurrentMonth}\n              startOfWeek={normalizedStartOfWeek}\n              todayAriaLabel={i18nStrings?.todayAriaLabel}\n              selectedStartDate={parseDate(value.start.date, true)}\n              selectedEndDate={parseDate(value.end.date, true)}\n              headingIdPrefix={headingIdPrefix}\n            />\n          </div>\n\n          <RangeInputs\n            startDate={value.start.date}\n            onChangeStartDate={onChangeStartDate}\n            startTime={value.start.time}\n            onChangeStartTime={value =>\n              setValue(oldValue => ({ ...oldValue, start: { ...oldValue.start, time: value } }))\n            }\n            endDate={value.end.date}\n            onChangeEndDate={value => setValue(oldValue => ({ ...oldValue, end: { ...oldValue.end, date: value } }))}\n            endTime={value.end.time}\n            onChangeEndTime={value => setValue(oldValue => ({ ...oldValue, end: { ...oldValue.end, time: value } }))}\n            i18nStrings={i18nStrings}\n            dateOnly={dateOnly}\n            timeInputFormat={timeInputFormat}\n          />\n          {customAbsoluteRangeControl && <div>{customAbsoluteRangeControl(value, interceptedSetValue)}</div>}\n        </SpaceBetween>\n      </div>\n      <LiveRegion className={styles['calendar-aria-live']}>{announcement}</LiveRegion>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}