{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport styles from './styles.css.js';\nimport { ExpandableSectionContainer } from './expandable-section-container';\nimport { ExpandableSectionHeader } from './expandable-section-header';\nimport { variantSupportsDescription } from './utils';\nexport default function InternalExpandableSection(_a) {\n  var {\n      expanded: controlledExpanded,\n      defaultExpanded,\n      onChange,\n      variant = 'default',\n      children,\n      header,\n      headerText,\n      headerCounter,\n      headerDescription,\n      headerInfo,\n      headerActions,\n      headingTagOverride,\n      disableContentPaddings,\n      headerAriaLabel,\n      __internalRootRef\n    } = _a,\n    props = __rest(_a, [\"expanded\", \"defaultExpanded\", \"onChange\", \"variant\", \"children\", \"header\", \"headerText\", \"headerCounter\", \"headerDescription\", \"headerInfo\", \"headerActions\", \"headingTagOverride\", \"disableContentPaddings\", \"headerAriaLabel\", \"__internalRootRef\"]);\n  const ref = useRef(null);\n  const controlId = useUniqueId();\n  const triggerControlId = `${controlId}-trigger`;\n  const descriptionId = `${controlId}-description`;\n  const baseProps = getBaseProps(props);\n  const [expanded, setExpanded] = useControllable(controlledExpanded, onChange, defaultExpanded, {\n    componentName: 'ExpandableSection',\n    controlledProp: 'expanded',\n    changeHandler: 'onChange'\n  });\n  const onExpandChange = useCallback(expanded => {\n    setExpanded(expanded);\n    fireNonCancelableEvent(onChange, {\n      expanded\n    });\n  }, [onChange, setExpanded]);\n  const onClick = useCallback(() => {\n    onExpandChange(!expanded);\n  }, [onExpandChange, expanded]);\n  const onKeyUp = useCallback(event => {\n    const interactionKeys = [KeyCode.enter, KeyCode.space];\n    if (interactionKeys.indexOf(event.keyCode) !== -1) {\n      onExpandChange(!expanded);\n    }\n  }, [onExpandChange, expanded]);\n  const onKeyDown = useCallback(event => {\n    if (event.keyCode === KeyCode.space) {\n      // Prevent the page from scrolling when toggling the component with the space bar.\n      event.preventDefault();\n    }\n  }, []);\n  const triggerProps = {\n    ariaControls: controlId,\n    ariaLabel: headerAriaLabel,\n    ariaLabelledBy: headerAriaLabel ? undefined : triggerControlId,\n    onKeyUp,\n    onKeyDown,\n    onClick\n  };\n  // Map stacked variant to container to avoid code duplication\n  const baseVariant = variant === 'stacked' ? 'container' : variant;\n  return React.createElement(ExpandableSectionContainer, Object.assign({}, baseProps, {\n    expanded: expanded,\n    className: clsx(baseProps.className, styles.root),\n    variant: variant,\n    disableContentPaddings: disableContentPaddings,\n    header: React.createElement(ExpandableSectionHeader, Object.assign({\n      id: triggerControlId,\n      descriptionId: descriptionId,\n      className: clsx(styles.header, styles[`header-${baseVariant}`]),\n      variant: baseVariant,\n      expanded: !!expanded,\n      header: header,\n      headerText: headerText,\n      headerDescription: headerDescription,\n      headerCounter: headerCounter,\n      headerInfo: headerInfo,\n      headerActions: headerActions,\n      headingTagOverride: headingTagOverride\n    }, triggerProps)),\n    __internalRootRef: __internalRootRef\n  }), React.createElement(CSSTransition, {\n    in: expanded,\n    timeout: 30,\n    classNames: {\n      enter: styles['content-enter']\n    },\n    nodeRef: ref\n  }, React.createElement(\"div\", {\n    id: controlId,\n    ref: ref,\n    className: clsx(styles.content, styles[`content-${baseVariant}`], expanded && styles['content-expanded']),\n    role: \"group\",\n    \"aria-label\": triggerProps.ariaLabel,\n    \"aria-labelledby\": triggerProps.ariaLabelledBy,\n    \"aria-describedby\": variantSupportsDescription(baseVariant) && headerDescription ? descriptionId : undefined\n  }, children)));\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","useRef","CSSTransition","clsx","getBaseProps","useControllable","useUniqueId","KeyCode","fireNonCancelableEvent","styles","ExpandableSectionContainer","ExpandableSectionHeader","variantSupportsDescription","InternalExpandableSection","_a","expanded","controlledExpanded","defaultExpanded","onChange","variant","children","header","headerText","headerCounter","headerDescription","headerInfo","headerActions","headingTagOverride","disableContentPaddings","headerAriaLabel","__internalRootRef","props","ref","controlId","triggerControlId","descriptionId","baseProps","setExpanded","componentName","controlledProp","changeHandler","onExpandChange","onClick","onKeyUp","event","interactionKeys","enter","space","indexOf","keyCode","onKeyDown","preventDefault","triggerProps","ariaControls","ariaLabel","ariaLabelledBy","undefined","baseVariant","className","root","id","in","timeout","classNames","nodeRef","content","role"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/expandable-section/lib/default/expandable-section/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { KeyboardEvent, useCallback, useRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport clsx from 'clsx';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\n\nimport { ExpandableSectionProps } from './interfaces';\n\nimport styles from './styles.css.js';\nimport { ExpandableSectionContainer } from './expandable-section-container';\nimport { ExpandableSectionHeader } from './expandable-section-header';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { variantSupportsDescription } from './utils';\n\nexport type InternalExpandableSectionProps = ExpandableSectionProps & InternalBaseComponentProps;\n\nexport default function InternalExpandableSection({\n  expanded: controlledExpanded,\n  defaultExpanded,\n  onChange,\n  variant = 'default',\n  children,\n  header,\n  headerText,\n  headerCounter,\n  headerDescription,\n  headerInfo,\n  headerActions,\n  headingTagOverride,\n  disableContentPaddings,\n  headerAriaLabel,\n  __internalRootRef,\n  ...props\n}: InternalExpandableSectionProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const controlId = useUniqueId();\n  const triggerControlId = `${controlId}-trigger`;\n  const descriptionId = `${controlId}-description`;\n\n  const baseProps = getBaseProps(props);\n  const [expanded, setExpanded] = useControllable(controlledExpanded, onChange, defaultExpanded, {\n    componentName: 'ExpandableSection',\n    controlledProp: 'expanded',\n    changeHandler: 'onChange',\n  });\n\n  const onExpandChange = useCallback(\n    (expanded: boolean) => {\n      setExpanded(expanded);\n      fireNonCancelableEvent(onChange, { expanded });\n    },\n    [onChange, setExpanded]\n  );\n\n  const onClick = useCallback(() => {\n    onExpandChange(!expanded);\n  }, [onExpandChange, expanded]);\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent<Element>) => {\n      const interactionKeys = [KeyCode.enter, KeyCode.space];\n\n      if (interactionKeys.indexOf(event.keyCode) !== -1) {\n        onExpandChange(!expanded);\n      }\n    },\n    [onExpandChange, expanded]\n  );\n\n  const onKeyDown = useCallback((event: KeyboardEvent<Element>) => {\n    if (event.keyCode === KeyCode.space) {\n      // Prevent the page from scrolling when toggling the component with the space bar.\n      event.preventDefault();\n    }\n  }, []);\n\n  const triggerProps = {\n    ariaControls: controlId,\n    ariaLabel: headerAriaLabel,\n    ariaLabelledBy: headerAriaLabel ? undefined : triggerControlId,\n    onKeyUp,\n    onKeyDown,\n    onClick,\n  };\n\n  // Map stacked variant to container to avoid code duplication\n  const baseVariant: ExpandableSectionProps.Variant = variant === 'stacked' ? 'container' : variant;\n\n  return (\n    <ExpandableSectionContainer\n      {...baseProps}\n      expanded={expanded}\n      className={clsx(baseProps.className, styles.root)}\n      variant={variant}\n      disableContentPaddings={disableContentPaddings}\n      header={\n        <ExpandableSectionHeader\n          id={triggerControlId}\n          descriptionId={descriptionId}\n          className={clsx(styles.header, styles[`header-${baseVariant}`])}\n          variant={baseVariant}\n          expanded={!!expanded}\n          header={header}\n          headerText={headerText}\n          headerDescription={headerDescription}\n          headerCounter={headerCounter}\n          headerInfo={headerInfo}\n          headerActions={headerActions}\n          headingTagOverride={headingTagOverride}\n          {...triggerProps}\n        />\n      }\n      __internalRootRef={__internalRootRef}\n    >\n      <CSSTransition in={expanded} timeout={30} classNames={{ enter: styles['content-enter'] }} nodeRef={ref}>\n        <div\n          id={controlId}\n          ref={ref}\n          className={clsx(styles.content, styles[`content-${baseVariant}`], expanded && styles['content-expanded'])}\n          role=\"group\"\n          aria-label={triggerProps.ariaLabel}\n          aria-labelledby={triggerProps.ariaLabelledBy}\n          aria-describedby={variantSupportsDescription(baseVariant) && headerDescription ? descriptionId : undefined}\n        >\n          {children}\n        </div>\n      </CSSTransition>\n    </ExpandableSectionContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}