{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect, useRef } from 'react';\nexport function useFocusControl(isOpen) {\n  var restoreFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var refs = {\n    toggle: useRef(null),\n    close: useRef(null)\n  };\n  var previousFocusedElement = useRef();\n  var shouldFocus = useRef(false);\n  var doFocus = function doFocus() {\n    var _a, _b;\n    if (!shouldFocus.current) {\n      return;\n    }\n    if (isOpen) {\n      previousFocusedElement.current = document.activeElement !== document.body ? document.activeElement : undefined;\n      (_a = refs.close.current) === null || _a === void 0 ? void 0 : _a.focus();\n    } else {\n      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {\n        previousFocusedElement.current.focus();\n        previousFocusedElement.current = undefined;\n      } else {\n        (_b = refs.toggle.current) === null || _b === void 0 ? void 0 : _b.focus();\n      }\n    }\n    shouldFocus.current = false;\n  };\n  // We explictly want this effect to run when only `isOpen` changes\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(doFocus, [isOpen]);\n  var loseFocus = useCallback(function () {\n    previousFocusedElement.current = undefined;\n  }, []);\n  return {\n    refs: refs,\n    setFocus: function setFocus(force) {\n      shouldFocus.current = true;\n      if (force && isOpen) {\n        doFocus();\n      }\n    },\n    loseFocus: loseFocus\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAAoBA,WAAW,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAcjE,OAAM,SAAUC,eAAe,CAACC,MAAe,EAAsB;EAAA,IAApBC,YAAY,uEAAG,KAAK;EACnE,IAAMC,IAAI,GAAG;IACXC,MAAM,EAAEL,MAAM,CAAkB,IAAI,CAAC;IACrCM,KAAK,EAAEN,MAAM,CAAkB,IAAI;GACpC;EACD,IAAMO,sBAAsB,GAAGP,MAAM,EAAe;EACpD,IAAMQ,WAAW,GAAGR,MAAM,CAAC,KAAK,CAAC;EAEjC,IAAMS,OAAO,GAAG,SAAVA,OAAO,GAAQ;;IACnB,IAAI,CAACD,WAAW,CAACE,OAAO,EAAE;MACxB;;IAEF,IAAIR,MAAM,EAAE;MACVK,sBAAsB,CAACG,OAAO,GAC5BC,QAAQ,CAACC,aAAa,KAAKD,QAAQ,CAACE,IAAI,GAAIF,QAAQ,CAACC,aAA6B,GAAGE,SAAS;MAChG,UAAI,CAACR,KAAK,CAACI,OAAO,0CAAEK,KAAK,EAAE;KAC5B,MAAM;MACL,IAAIZ,YAAY,IAAII,sBAAsB,CAACG,OAAO,IAAIC,QAAQ,CAACK,QAAQ,CAACT,sBAAsB,CAACG,OAAO,CAAC,EAAE;QACvGH,sBAAsB,CAACG,OAAO,CAACK,KAAK,EAAE;QACtCR,sBAAsB,CAACG,OAAO,GAAGI,SAAS;OAC3C,MAAM;QACL,UAAI,CAACT,MAAM,CAACK,OAAO,0CAAEK,KAAK,EAAE;;;IAGhCP,WAAW,CAACE,OAAO,GAAG,KAAK;EAC7B,CAAC;EAED;EACA;EACAX,SAAS,CAACU,OAAO,EAAE,CAACP,MAAM,CAAC,CAAC;EAE5B,IAAMe,SAAS,GAAGnB,WAAW,CAAC,YAAK;IACjCS,sBAAsB,CAACG,OAAO,GAAGI,SAAS;EAC5C,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLV,IAAI,EAAJA,IAAI;IACJc,QAAQ,EAAE,uBAAK,EAAG;MAChBV,WAAW,CAACE,OAAO,GAAG,IAAI;MAC1B,IAAIS,KAAK,IAAIjB,MAAM,EAAE;QACnBO,OAAO,EAAE;;IAEb,CAAC;IACDQ,SAAS,EAATA;GACD;AACH","names":["useCallback","useEffect","useRef","useFocusControl","isOpen","restoreFocus","refs","toggle","close","previousFocusedElement","shouldFocus","doFocus","current","document","activeElement","body","undefined","focus","contains","loseFocus","setFocus","force"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/app-layout/utils/lib/default/app-layout/utils/use-focus-control.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { RefObject, useCallback, useEffect, useRef } from 'react';\nimport { ButtonProps } from '../../button/interfaces';\n\nexport interface FocusControlRefs {\n  toggle: RefObject<ButtonProps.Ref>;\n  close: RefObject<ButtonProps.Ref>;\n}\n\ninterface FocusControlState {\n  refs: FocusControlRefs;\n  setFocus: (force?: boolean) => void;\n  loseFocus: () => void;\n}\n\nexport function useFocusControl(isOpen: boolean, restoreFocus = false): FocusControlState {\n  const refs = {\n    toggle: useRef<ButtonProps.Ref>(null),\n    close: useRef<ButtonProps.Ref>(null),\n  };\n  const previousFocusedElement = useRef<HTMLElement>();\n  const shouldFocus = useRef(false);\n\n  const doFocus = () => {\n    if (!shouldFocus.current) {\n      return;\n    }\n    if (isOpen) {\n      previousFocusedElement.current =\n        document.activeElement !== document.body ? (document.activeElement as HTMLElement) : undefined;\n      refs.close.current?.focus();\n    } else {\n      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {\n        previousFocusedElement.current.focus();\n        previousFocusedElement.current = undefined;\n      } else {\n        refs.toggle.current?.focus();\n      }\n    }\n    shouldFocus.current = false;\n  };\n\n  // We explictly want this effect to run when only `isOpen` changes\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(doFocus, [isOpen]);\n\n  const loseFocus = useCallback(() => {\n    previousFocusedElement.current = undefined;\n  }, []);\n\n  return {\n    refs,\n    setFocus: force => {\n      shouldFocus.current = true;\n      if (force && isOpen) {\n        doFocus();\n      }\n    },\n    loseFocus,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}