{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { getBaseProps } from '../internal/base-component';\nimport { focusFlashById } from './flash';\nimport { isDevelopment } from '../internal/is-development';\nimport { useReducedMotion, warnOnce } from '@cloudscape-design/component-toolkit/internal';\nexport var componentName = 'Flashbar';\n// Common logic for collapsible and non-collapsible Flashbar\nexport function useFlashbar(_a) {\n  var items = _a.items,\n    onItemsAdded = _a.onItemsAdded,\n    onItemsChanged = _a.onItemsChanged,\n    onItemsRemoved = _a.onItemsRemoved,\n    restProps = __rest(_a, [\"items\", \"onItemsAdded\", \"onItemsChanged\", \"onItemsRemoved\"]);\n  var _useBaseComponent = useBaseComponent(componentName),\n    __internalRootRef = _useBaseComponent.__internalRootRef;\n  var allItemsHaveId = useMemo(function () {\n    return items.every(function (item) {\n      return 'id' in item;\n    });\n  }, [items]);\n  var baseProps = getBaseProps(restProps);\n  var ref = useRef(null);\n  var _useContainerBreakpoi = useContainerBreakpoints(['xs']),\n    _useContainerBreakpoi2 = _slicedToArray(_useContainerBreakpoi, 2),\n    breakpoint = _useContainerBreakpoi2[0],\n    breakpointRef = _useContainerBreakpoi2[1];\n  var mergedRef = useMergeRefs(ref, breakpointRef, __internalRootRef);\n  var isReducedMotion = useReducedMotion(breakpointRef);\n  var isVisualRefresh = useVisualRefresh();\n  var _useState = useState(items),\n    _useState2 = _slicedToArray(_useState, 2),\n    previousItems = _useState2[0],\n    setPreviousItems = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    nextFocusId = _useState4[0],\n    setNextFocusId = _useState4[1];\n  if (isDevelopment) {\n    if (items === null || items === void 0 ? void 0 : items.some(function (item) {\n      return item.ariaRole === 'alert' && !item.id;\n    })) {\n      warnOnce('Flashbar', \"You provided `ariaRole=\\\"alert\\\"` for a flashbar item without providing an `id`. Focus will not be moved to the newly added flash message.\");\n    }\n  }\n  // Track new or removed item IDs in state to only trigger focus changes for newly added items.\n  // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n  if (items) {\n    var newItems = items.filter(function (_ref) {\n      var id = _ref.id;\n      return id && !previousItems.some(function (item) {\n        return item.id === id;\n      });\n    });\n    var removedItems = previousItems.filter(function (_ref2) {\n      var id = _ref2.id;\n      return id && !items.some(function (item) {\n        return item.id === id;\n      });\n    });\n    if (newItems.length > 0 || removedItems.length > 0) {\n      setPreviousItems(items);\n      onItemsAdded === null || onItemsAdded === void 0 ? void 0 : onItemsAdded(newItems);\n      onItemsRemoved === null || onItemsRemoved === void 0 ? void 0 : onItemsRemoved(removedItems);\n      onItemsChanged === null || onItemsChanged === void 0 ? void 0 : onItemsChanged({\n        allItemsHaveId: allItemsHaveId,\n        isReducedMotion: isReducedMotion\n      });\n      var newFocusItems = newItems.filter(function (_ref3) {\n        var ariaRole = _ref3.ariaRole;\n        return ariaRole === 'alert';\n      });\n      if (newFocusItems.length > 0) {\n        setNextFocusId(newFocusItems[0].id);\n      }\n    }\n  }\n  useEffect(function () {\n    if (nextFocusId) {\n      focusFlashById(ref.current, nextFocusId);\n    }\n  }, [nextFocusId, ref]);\n  return {\n    allItemsHaveId: allItemsHaveId,\n    baseProps: baseProps,\n    breakpoint: breakpoint,\n    isReducedMotion: isReducedMotion,\n    isVisualRefresh: isVisualRefresh,\n    mergedRef: mergedRef,\n    ref: ref\n  };\n}","map":{"version":3,"mappings":"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","names":["useBaseComponent","useMergeRefs","useEffect","useMemo","useRef","useState","useContainerBreakpoints","useVisualRefresh","getBaseProps","focusFlashById","isDevelopment","useReducedMotion","warnOnce","componentName","useFlashbar","_a","items","onItemsAdded","onItemsChanged","onItemsRemoved","restProps","__internalRootRef","allItemsHaveId","every","item","baseProps","ref","breakpoint","breakpointRef","mergedRef","isReducedMotion","isVisualRefresh","previousItems","setPreviousItems","nextFocusId","setNextFocusId","some","ariaRole","id","newItems","filter","removedItems","length","newFocusItems","current"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/flashbar/lib/default/flashbar/common.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { getBaseProps } from '../internal/base-component';\nimport { FlashbarProps } from './interfaces';\nimport { focusFlashById } from './flash';\nimport { isDevelopment } from '../internal/is-development';\nimport { useReducedMotion, warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nexport const componentName = 'Flashbar';\n\n// Common logic for collapsible and non-collapsible Flashbar\nexport function useFlashbar({\n  items,\n  onItemsAdded,\n  onItemsChanged,\n  onItemsRemoved,\n  ...restProps\n}: FlashbarProps & {\n  onItemsAdded?: (items: FlashbarProps.MessageDefinition[]) => void;\n  onItemsRemoved?: (items: FlashbarProps.MessageDefinition[]) => void;\n  onItemsChanged?: (options?: { allItemsHaveId?: boolean; isReducedMotion?: boolean }) => void;\n}) {\n  const { __internalRootRef } = useBaseComponent(componentName);\n  const allItemsHaveId = useMemo(() => items.every(item => 'id' in item), [items]);\n  const baseProps = getBaseProps(restProps);\n  const ref = useRef<HTMLDivElement | null>(null);\n  const [breakpoint, breakpointRef] = useContainerBreakpoints(['xs']);\n  const mergedRef = useMergeRefs(ref, breakpointRef, __internalRootRef);\n  const isReducedMotion = useReducedMotion(breakpointRef as any);\n  const isVisualRefresh = useVisualRefresh();\n  const [previousItems, setPreviousItems] = useState<ReadonlyArray<FlashbarProps.MessageDefinition>>(items);\n  const [nextFocusId, setNextFocusId] = useState<string | null>(null);\n\n  if (isDevelopment) {\n    if (items?.some(item => item.ariaRole === 'alert' && !item.id)) {\n      warnOnce(\n        'Flashbar',\n        `You provided \\`ariaRole=\"alert\"\\` for a flashbar item without providing an \\`id\\`. Focus will not be moved to the newly added flash message.`\n      );\n    }\n  }\n\n  // Track new or removed item IDs in state to only trigger focus changes for newly added items.\n  // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n  if (items) {\n    const newItems = items.filter(({ id }) => id && !previousItems.some(item => item.id === id));\n    const removedItems = previousItems.filter(({ id }) => id && !items.some(item => item.id === id));\n    if (newItems.length > 0 || removedItems.length > 0) {\n      setPreviousItems(items);\n      onItemsAdded?.(newItems);\n      onItemsRemoved?.(removedItems);\n      onItemsChanged?.({ allItemsHaveId, isReducedMotion });\n\n      const newFocusItems = newItems.filter(({ ariaRole }) => ariaRole === 'alert');\n      if (newFocusItems.length > 0) {\n        setNextFocusId(newFocusItems[0].id!);\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (nextFocusId) {\n      focusFlashById(ref.current, nextFocusId);\n    }\n  }, [nextFocusId, ref]);\n\n  return {\n    allItemsHaveId,\n    baseProps,\n    breakpoint,\n    isReducedMotion,\n    isVisualRefresh,\n    mergedRef,\n    ref,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}