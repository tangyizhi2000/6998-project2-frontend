{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContainerQuery } from \"@cloudscape-design/component-toolkit\";\nimport { useDensityMode } from \"@cloudscape-design/component-toolkit/internal\";\nimport clsx from \"clsx\";\nimport { Children, useRef } from \"react\";\nimport { useMergeRefs } from \"../utils/use-merge-refs\";\nimport { zipTwoArrays } from \"../utils/zip-arrays\";\nimport GridItem from \"./item\";\nimport styles from \"./styles.css.js\";\n/* Matches grid gap in CSS. */\nconst GRID_GAP = {\n  comfortable: 20,\n  compact: 16\n};\n/* Matches grid-auto-rows in CSS. */\nconst ROWSPAN_HEIGHT = {\n  comfortable: 96,\n  compact: 76\n};\nexport default function Grid(_ref) {\n  let {\n    layout,\n    children: render,\n    columns\n  } = _ref;\n  const gridRef = useRef(null);\n  const [gridWidth, containerQueryRef] = useContainerQuery(entry => entry.contentBoxWidth, []);\n  const densityMode = useDensityMode(gridRef);\n  const gridGap = GRID_GAP[densityMode];\n  const rowspanHeight = ROWSPAN_HEIGHT[densityMode];\n  // The below getters translate relative grid units into size/offset values in pixels.\n  const getWidth = colspan => {\n    colspan = Math.min(columns, colspan);\n    const cellWidth = ((gridWidth || 0) - (columns - 1) * gridGap) / columns;\n    return colspan * cellWidth + (colspan - 1) * gridGap;\n  };\n  const getHeight = rowspan => rowspan * rowspanHeight + (rowspan - 1) * gridGap;\n  const getColOffset = x => getWidth(x) + gridGap;\n  const getRowOffset = y => getHeight(y) + gridGap;\n  const gridContext = {\n    getWidth,\n    getHeight,\n    getColOffset,\n    getRowOffset\n  };\n  const children = render === null || render === void 0 ? void 0 : render(gridContext);\n  const zipped = zipTwoArrays(layout, Children.toArray(children));\n  const ref = useMergeRefs(gridRef, containerQueryRef);\n  return _jsx(\"div\", {\n    ref: ref,\n    className: clsx(styles.grid, styles[`grid-${densityMode}`], styles[`columns-${columns}`]),\n    children: zipped.map(_ref2 => {\n      let [item, children] = _ref2;\n      return _jsx(GridItem, {\n        item: item,\n        children: children\n      }, item.id);\n    })\n  });\n}","map":{"version":3,"names":["jsx","_jsx","useContainerQuery","useDensityMode","clsx","Children","useRef","useMergeRefs","zipTwoArrays","GridItem","styles","GRID_GAP","comfortable","compact","ROWSPAN_HEIGHT","Grid","layout","children","render","columns","gridRef","gridWidth","containerQueryRef","entry","contentBoxWidth","densityMode","gridGap","rowspanHeight","getWidth","colspan","Math","min","cellWidth","getHeight","rowspan","getColOffset","x","getRowOffset","y","gridContext","zipped","toArray","ref","className","grid","map","item","id"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/board-components/internal/grid/grid.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContainerQuery } from \"@cloudscape-design/component-toolkit\";\nimport { useDensityMode } from \"@cloudscape-design/component-toolkit/internal\";\nimport clsx from \"clsx\";\nimport { Children, useRef } from \"react\";\nimport { useMergeRefs } from \"../utils/use-merge-refs\";\nimport { zipTwoArrays } from \"../utils/zip-arrays\";\nimport GridItem from \"./item\";\nimport styles from \"./styles.css.js\";\n/* Matches grid gap in CSS. */\nconst GRID_GAP = {\n    comfortable: 20,\n    compact: 16,\n};\n/* Matches grid-auto-rows in CSS. */\nconst ROWSPAN_HEIGHT = {\n    comfortable: 96,\n    compact: 76,\n};\nexport default function Grid({ layout, children: render, columns }) {\n    const gridRef = useRef(null);\n    const [gridWidth, containerQueryRef] = useContainerQuery((entry) => entry.contentBoxWidth, []);\n    const densityMode = useDensityMode(gridRef);\n    const gridGap = GRID_GAP[densityMode];\n    const rowspanHeight = ROWSPAN_HEIGHT[densityMode];\n    // The below getters translate relative grid units into size/offset values in pixels.\n    const getWidth = (colspan) => {\n        colspan = Math.min(columns, colspan);\n        const cellWidth = ((gridWidth || 0) - (columns - 1) * gridGap) / columns;\n        return colspan * cellWidth + (colspan - 1) * gridGap;\n    };\n    const getHeight = (rowspan) => rowspan * rowspanHeight + (rowspan - 1) * gridGap;\n    const getColOffset = (x) => getWidth(x) + gridGap;\n    const getRowOffset = (y) => getHeight(y) + gridGap;\n    const gridContext = { getWidth, getHeight, getColOffset, getRowOffset };\n    const children = render === null || render === void 0 ? void 0 : render(gridContext);\n    const zipped = zipTwoArrays(layout, Children.toArray(children));\n    const ref = useMergeRefs(gridRef, containerQueryRef);\n    return (_jsx(\"div\", { ref: ref, className: clsx(styles.grid, styles[`grid-${densityMode}`], styles[`columns-${columns}`]), children: zipped.map(([item, children]) => (_jsx(GridItem, { item: item, children: children }, item.id))) }));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}