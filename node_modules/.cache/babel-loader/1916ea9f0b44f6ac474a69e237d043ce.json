{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport InternalAttributeEditor from './internal';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nconst AttributeEditor = React.forwardRef((_a, ref) => {\n  var {\n      items = [],\n      isItemRemovable = () => true\n    } = _a,\n    props = __rest(_a, [\"items\", \"isItemRemovable\"]);\n  const baseComponentProps = useBaseComponent('AttributeEditor');\n  return React.createElement(InternalAttributeEditor, Object.assign({\n    items: items,\n    isItemRemovable: isItemRemovable\n  }, props, baseComponentProps, {\n    ref: ref\n  }));\n});\napplyDisplayName(AttributeEditor, 'AttributeEditor');\nexport default AttributeEditor;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAGzB,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,OAAOC,uBAAuB,MAAM,YAAY;AAChD,OAAOC,gBAAgB,MAAM,sCAAsC;AAEnE,MAAMC,eAAe,GAAGJ,KAAK,CAACK,UAAU,CACtC,CACEC,EAA+E,EAC/EC,GAAwC,KACtC;MAFF;MAAEC,KAAK,GAAG,EAAE;MAAEC,eAAe,GAAG,MAAM;IAAI,MAAqC;IAAhCC,KAAK,cAApD,4BAAsD,CAAF;EAGpD,MAAMC,kBAAkB,GAAGR,gBAAgB,CAAC,iBAAiB,CAAC;EAC9D,OACEH,oBAACE,uBAAuB;IACtBM,KAAK,EAAEA,KAAK;IACZC,eAAe,EAAEA;EAAe,GAC5BC,KAAK,EACLC,kBAAkB;IACtBJ,GAAG,EAAEA;EAAG,GACR;AAEN,CAAC,CAC+B;AAElCN,gBAAgB,CAACG,eAAe,EAAE,iBAAiB,CAAC;AAGpD,eAAeA,eAAe","names":["React","applyDisplayName","InternalAttributeEditor","useBaseComponent","AttributeEditor","forwardRef","_a","ref","items","isItemRemovable","props","baseComponentProps"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/attribute-editor/lib/default/attribute-editor/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { AttributeEditorForwardRefType, AttributeEditorProps } from './interfaces';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport InternalAttributeEditor from './internal';\nimport useBaseComponent from '../internal/hooks/use-base-component';\n\nconst AttributeEditor = React.forwardRef(\n  <T,>(\n    { items = [], isItemRemovable = () => true, ...props }: AttributeEditorProps<T>,\n    ref: React.Ref<AttributeEditorProps.Ref>\n  ) => {\n    const baseComponentProps = useBaseComponent('AttributeEditor');\n    return (\n      <InternalAttributeEditor\n        items={items}\n        isItemRemovable={isItemRemovable}\n        {...props}\n        {...baseComponentProps}\n        ref={ref}\n      />\n    );\n  }\n) as AttributeEditorForwardRefType;\n\napplyDisplayName(AttributeEditor, 'AttributeEditor');\n\nexport { AttributeEditorProps };\nexport default AttributeEditor;\n"]},"metadata":{},"sourceType":"module"}