{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useState } from 'react';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * The overlap height has a default set in CSS but can also be dynamically overridden\n * for content types (such as Table and Wizard) that have variable size content in the overlap.\n * If a child component utilizes a sticky header the hasStickyBackground property will determine\n * if the background remains in the same vertical position.\n */\nexport default function useBackgroundOverlap(_ref) {\n  let {\n    contentHeader,\n    disableContentHeaderOverlap,\n    layoutElement\n  } = _ref;\n  const hasContentHeader = !!contentHeader;\n  const [hasBackgroundOverlap, setHasBackgroundOverlap] = useState(hasContentHeader);\n  const updateBackgroundOverlapHeight = useCallback(height => {\n    const hasOverlap = hasContentHeader || height > 0;\n    setHasBackgroundOverlap(hasOverlap);\n    /**\n     * React 18 will trigger a paint before the state is correctly updated\n     * (see https://github.com/facebook/react/issues/24331).\n     * To work around this, we bypass React state updates and imperatively update the custom property on the DOM.\n     * An alternative would be to use `queueMicrotask` and `flushSync` in the ResizeObserver callback,\n     * but that would have some performance impact as it would delay the render.\n     */\n    // Layout component uses RefObject, we don't expect a RefCallback\n    const element = typeof layoutElement !== 'function' && (layoutElement === null || layoutElement === void 0 ? void 0 : layoutElement.current);\n    if (!element) {\n      return;\n    }\n    if (disableContentHeaderOverlap || !hasOverlap || height <= 0) {\n      element.style.removeProperty(customCssProps.overlapHeight);\n    } else {\n      element.style.setProperty(customCssProps.overlapHeight, `${height}px`);\n    }\n  }, [hasContentHeader, layoutElement, disableContentHeaderOverlap]);\n  return {\n    hasBackgroundOverlap,\n    updateBackgroundOverlapHeight\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAAgBA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AACpD,OAAOC,cAAc,MAAM,gDAAgD;AAE3E;;;;;;AAMA,eAAc,SAAUC,oBAAoB,OAQ3C;EAAA,IAR4C;IAC3CC,aAAa;IACbC,2BAA2B;IAC3BC;EAAa,CAKd;EACC,MAAMC,gBAAgB,GAAG,CAAC,CAACH,aAAa;EAExC,MAAM,CAACI,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGR,QAAQ,CAACM,gBAAgB,CAAC;EAElF,MAAMG,6BAA6B,GAAGV,WAAW,CAC9CW,MAAc,IAAI;IACjB,MAAMC,UAAU,GAAGL,gBAAgB,IAAII,MAAM,GAAG,CAAC;IACjDF,uBAAuB,CAACG,UAAU,CAAC;IAEnC;;;;;;;IAOA;IACA,MAAMC,OAAO,GAAG,OAAOP,aAAa,KAAK,UAAU,KAAIA,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEQ,OAAO;IAC7E,IAAI,CAACD,OAAO,EAAE;MACZ;;IAEF,IAAIR,2BAA2B,IAAI,CAACO,UAAU,IAAID,MAAM,IAAI,CAAC,EAAE;MAC7DE,OAAO,CAACE,KAAK,CAACC,cAAc,CAACd,cAAc,CAACe,aAAa,CAAC;KAC3D,MAAM;MACLJ,OAAO,CAACE,KAAK,CAACG,WAAW,CAAChB,cAAc,CAACe,aAAa,EAAE,GAAGN,MAAM,IAAI,CAAC;;EAE1E,CAAC,EACD,CAACJ,gBAAgB,EAAED,aAAa,EAAED,2BAA2B,CAAC,CAC/D;EAED,OAAO;IACLG,oBAAoB;IACpBE;GACD;AACH","names":["useCallback","useState","customCssProps","useBackgroundOverlap","contentHeader","disableContentHeaderOverlap","layoutElement","hasContentHeader","hasBackgroundOverlap","setHasBackgroundOverlap","updateBackgroundOverlapHeight","height","hasOverlap","element","current","style","removeProperty","overlapHeight","setProperty"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh/lib/default/app-layout/visual-refresh/use-background-overlap.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useState } from 'react';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\n/**\n * The overlap height has a default set in CSS but can also be dynamically overridden\n * for content types (such as Table and Wizard) that have variable size content in the overlap.\n * If a child component utilizes a sticky header the hasStickyBackground property will determine\n * if the background remains in the same vertical position.\n */\nexport default function useBackgroundOverlap({\n  contentHeader,\n  disableContentHeaderOverlap,\n  layoutElement,\n}: {\n  contentHeader: React.ReactNode;\n  disableContentHeaderOverlap?: boolean;\n  layoutElement: React.Ref<HTMLElement>;\n}) {\n  const hasContentHeader = !!contentHeader;\n\n  const [hasBackgroundOverlap, setHasBackgroundOverlap] = useState(hasContentHeader);\n\n  const updateBackgroundOverlapHeight = useCallback(\n    (height: number) => {\n      const hasOverlap = hasContentHeader || height > 0;\n      setHasBackgroundOverlap(hasOverlap);\n\n      /**\n       * React 18 will trigger a paint before the state is correctly updated\n       * (see https://github.com/facebook/react/issues/24331).\n       * To work around this, we bypass React state updates and imperatively update the custom property on the DOM.\n       * An alternative would be to use `queueMicrotask` and `flushSync` in the ResizeObserver callback,\n       * but that would have some performance impact as it would delay the render.\n       */\n      // Layout component uses RefObject, we don't expect a RefCallback\n      const element = typeof layoutElement !== 'function' && layoutElement?.current;\n      if (!element) {\n        return;\n      }\n      if (disableContentHeaderOverlap || !hasOverlap || height <= 0) {\n        element.style.removeProperty(customCssProps.overlapHeight);\n      } else {\n        element.style.setProperty(customCssProps.overlapHeight, `${height}px`);\n      }\n    },\n    [hasContentHeader, layoutElement, disableContentHeaderOverlap]\n  );\n\n  return {\n    hasBackgroundOverlap,\n    updateBackgroundOverlapHeight,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}