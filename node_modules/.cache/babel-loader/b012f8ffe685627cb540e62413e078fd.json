{"ast":null,"code":"import { getMatchingBreakpoint } from '../../breakpoints';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n/**\n * Re-renders the component when the breakpoint for the component changes. Scopes the re-renders to the specific\n * breakpoints you want to break at. \"default\" is always included as a fallback, so [\"xs\"] would trigger for\n * \"default\" and \"xs\".\n *\n * @param triggers The relevant breakpoints to trigger for.\n */\nexport function useContainerBreakpoints(triggers) {\n  // triggers.join() gives us a stable value to use for the dependencies argument\n  const triggersDep = triggers === null || triggers === void 0 ? void 0 : triggers.join();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useContainerQuery(rect => getMatchingBreakpoint(rect.contentBoxWidth, triggers), [triggersDep]);\n}","map":{"version":3,"mappings":"AAGA,SAAqBA,qBAAqB,QAAQ,mBAAmB;AACrE,SAASC,iBAAiB,QAAQ,sCAAsC;AAExE;;;;;;;AAOA,OAAM,SAAUC,uBAAuB,CACrCC,QAAY;EAEZ;EACA,MAAMC,WAAW,GAAGD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,IAAI,EAAE;EACpC;EACA,OAAOJ,iBAAiB,CAACK,IAAI,IAAIN,qBAAqB,CAACM,IAAI,CAACC,eAAe,EAAEJ,QAAQ,CAAC,EAAE,CAACC,WAAW,CAAC,CAAC;AACxG","names":["getMatchingBreakpoint","useContainerQuery","useContainerBreakpoints","triggers","triggersDep","join","rect","contentBoxWidth"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/hooks/container-queries/lib/default/internal/hooks/container-queries/use-container-breakpoints.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { Breakpoint, getMatchingBreakpoint } from '../../breakpoints';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\n/**\n * Re-renders the component when the breakpoint for the component changes. Scopes the re-renders to the specific\n * breakpoints you want to break at. \"default\" is always included as a fallback, so [\"xs\"] would trigger for\n * \"default\" and \"xs\".\n *\n * @param triggers The relevant breakpoints to trigger for.\n */\nexport function useContainerBreakpoints<T extends readonly Breakpoint[]>(\n  triggers?: T\n): [T[number] | 'default' | null, React.Ref<any>] {\n  // triggers.join() gives us a stable value to use for the dependencies argument\n  const triggersDep = triggers?.join();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useContainerQuery(rect => getMatchingBreakpoint(rect.contentBoxWidth, triggers), [triggersDep]);\n}\n"]},"metadata":{},"sourceType":"module"}