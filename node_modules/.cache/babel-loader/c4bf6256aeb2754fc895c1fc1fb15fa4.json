{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst stateToAriaSort = {\n  sortable: 'none',\n  ascending: 'ascending',\n  descending: 'descending'\n};\nconst getAriaSort = sortingState => stateToAriaSort[sortingState];\n// Depending on its content the table can have different semantic representation which includes the\n// ARIA role of the table component (\"table\", \"grid\", \"treegrid\") but also roles and other semantic attributes\n// of the child elements. The TableRole helper encapsulates table's semantic structure.\nexport function getTableRoleProps(options) {\n  const nativeProps = {};\n  // Browsers have weird mechanism to guess whether it's a data table or a layout table.\n  // If we state explicitly, they get it always correctly even with low number of rows.\n  nativeProps.role = options.tableRole === 'grid-default' ? 'grid' : options.tableRole;\n  nativeProps['aria-label'] = options.ariaLabel;\n  nativeProps['aria-labelledby'] = options.ariaLabelledBy;\n  // Incrementing the total count by one to account for the header row.\n  nativeProps['aria-rowcount'] = options.totalItemsCount ? options.totalItemsCount + 1 : -1;\n  if (options.tableRole === 'grid') {\n    nativeProps['aria-colcount'] = options.totalColumnsCount;\n  }\n  // Make table component programmatically focusable to attach focusin/focusout for keyboard navigation.\n  if (options.tableRole === 'grid') {\n    nativeProps.tabIndex = -1;\n  }\n  return nativeProps;\n}\nexport function getTableWrapperRoleProps(options) {\n  const nativeProps = {};\n  // When the table is scrollable, the wrapper is made focusable so that keyboard users can scroll it horizontally with arrow keys.\n  if (options.isScrollable && options.tableRole !== 'grid') {\n    nativeProps.role = 'region';\n    nativeProps.tabIndex = 0;\n    nativeProps['aria-label'] = options.ariaLabel;\n  }\n  return nativeProps;\n}\nexport function getTableHeaderRowRoleProps(options) {\n  const nativeProps = {};\n  // For grids headers are treated similar to data rows and are indexed accordingly.\n  if (options.tableRole === 'grid' || options.tableRole === 'grid-default') {\n    nativeProps['aria-rowindex'] = 1;\n  }\n  return nativeProps;\n}\nexport function getTableRowRoleProps(options) {\n  const nativeProps = {};\n  // The data cell indices are incremented by 1 to account for the header cells.\n  if (options.tableRole === 'grid') {\n    nativeProps['aria-rowindex'] = (options.firstIndex || 1) + options.rowIndex + 1;\n  }\n  // For tables indices are only added when the first index is not 0 (not the first page/frame).\n  else if (options.firstIndex !== undefined) {\n    nativeProps['aria-rowindex'] = options.firstIndex + options.rowIndex + 1;\n  }\n  return nativeProps;\n}\nexport function getTableColHeaderRoleProps(options) {\n  const nativeProps = {};\n  nativeProps.scope = 'col';\n  if (options.tableRole === 'grid') {\n    nativeProps['aria-colindex'] = options.colIndex + 1;\n  }\n  if (options.sortingStatus) {\n    nativeProps['aria-sort'] = getAriaSort(options.sortingStatus);\n  }\n  return nativeProps;\n}\nexport function getTableCellRoleProps(options) {\n  const nativeProps = {};\n  if (options.tableRole === 'grid') {\n    nativeProps['aria-colindex'] = options.colIndex + 1;\n  }\n  if (options.isRowHeader) {\n    nativeProps.scope = 'row';\n  }\n  return nativeProps;\n}","map":{"version":3,"mappings":"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","names":["stateToAriaSort","sortable","ascending","descending","getAriaSort","sortingState","getTableRoleProps","options","nativeProps","role","tableRole","ariaLabel","ariaLabelledBy","totalItemsCount","totalColumnsCount","tabIndex","getTableWrapperRoleProps","isScrollable","getTableHeaderRowRoleProps","getTableRowRoleProps","firstIndex","rowIndex","undefined","getTableColHeaderRoleProps","scope","colIndex","sortingStatus","getTableCellRoleProps","isRowHeader"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/table/table-role/lib/default/table/table-role/table-role-helper.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { TableRole } from './interfaces';\n\ntype SortingStatus = 'sortable' | 'ascending' | 'descending';\n\nconst stateToAriaSort = {\n  sortable: 'none',\n  ascending: 'ascending',\n  descending: 'descending',\n} as const;\nconst getAriaSort = (sortingState: SortingStatus) => stateToAriaSort[sortingState];\n\n// Depending on its content the table can have different semantic representation which includes the\n// ARIA role of the table component (\"table\", \"grid\", \"treegrid\") but also roles and other semantic attributes\n// of the child elements. The TableRole helper encapsulates table's semantic structure.\n\nexport function getTableRoleProps(options: {\n  tableRole: TableRole;\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n  totalItemsCount?: number;\n  totalColumnsCount?: number;\n}): React.TableHTMLAttributes<HTMLTableElement> {\n  const nativeProps: React.TableHTMLAttributes<HTMLTableElement> = {};\n\n  // Browsers have weird mechanism to guess whether it's a data table or a layout table.\n  // If we state explicitly, they get it always correctly even with low number of rows.\n  nativeProps.role = options.tableRole === 'grid-default' ? 'grid' : options.tableRole;\n\n  nativeProps['aria-label'] = options.ariaLabel;\n  nativeProps['aria-labelledby'] = options.ariaLabelledBy;\n\n  // Incrementing the total count by one to account for the header row.\n  nativeProps['aria-rowcount'] = options.totalItemsCount ? options.totalItemsCount + 1 : -1;\n\n  if (options.tableRole === 'grid') {\n    nativeProps['aria-colcount'] = options.totalColumnsCount;\n  }\n\n  // Make table component programmatically focusable to attach focusin/focusout for keyboard navigation.\n  if (options.tableRole === 'grid') {\n    nativeProps.tabIndex = -1;\n  }\n\n  return nativeProps;\n}\n\nexport function getTableWrapperRoleProps(options: { tableRole: TableRole; isScrollable: boolean; ariaLabel?: string }) {\n  const nativeProps: React.HTMLAttributes<HTMLDivElement> = {};\n\n  // When the table is scrollable, the wrapper is made focusable so that keyboard users can scroll it horizontally with arrow keys.\n  if (options.isScrollable && options.tableRole !== 'grid') {\n    nativeProps.role = 'region';\n    nativeProps.tabIndex = 0;\n    nativeProps['aria-label'] = options.ariaLabel;\n  }\n\n  return nativeProps;\n}\n\nexport function getTableHeaderRowRoleProps(options: { tableRole: TableRole }) {\n  const nativeProps: React.HTMLAttributes<HTMLTableRowElement> = {};\n\n  // For grids headers are treated similar to data rows and are indexed accordingly.\n  if (options.tableRole === 'grid' || options.tableRole === 'grid-default') {\n    nativeProps['aria-rowindex'] = 1;\n  }\n\n  return nativeProps;\n}\n\nexport function getTableRowRoleProps(options: { tableRole: TableRole; rowIndex: number; firstIndex?: number }) {\n  const nativeProps: React.HTMLAttributes<HTMLTableRowElement> = {};\n\n  // The data cell indices are incremented by 1 to account for the header cells.\n  if (options.tableRole === 'grid') {\n    nativeProps['aria-rowindex'] = (options.firstIndex || 1) + options.rowIndex + 1;\n  }\n  // For tables indices are only added when the first index is not 0 (not the first page/frame).\n  else if (options.firstIndex !== undefined) {\n    nativeProps['aria-rowindex'] = options.firstIndex + options.rowIndex + 1;\n  }\n\n  return nativeProps;\n}\n\nexport function getTableColHeaderRoleProps(options: {\n  tableRole: TableRole;\n  colIndex: number;\n  sortingStatus?: SortingStatus;\n}) {\n  const nativeProps: React.ThHTMLAttributes<HTMLTableCellElement> = {};\n\n  nativeProps.scope = 'col';\n\n  if (options.tableRole === 'grid') {\n    nativeProps['aria-colindex'] = options.colIndex + 1;\n  }\n\n  if (options.sortingStatus) {\n    nativeProps['aria-sort'] = getAriaSort(options.sortingStatus);\n  }\n\n  return nativeProps;\n}\n\nexport function getTableCellRoleProps(options: { tableRole: TableRole; colIndex: number; isRowHeader?: boolean }) {\n  const nativeProps: React.TdHTMLAttributes<HTMLTableCellElement> = {};\n\n  if (options.tableRole === 'grid') {\n    nativeProps['aria-colindex'] = options.colIndex + 1;\n  }\n\n  if (options.isRowHeader) {\n    nativeProps.scope = 'row';\n  }\n\n  return nativeProps;\n}\n"]},"metadata":{},"sourceType":"module"}