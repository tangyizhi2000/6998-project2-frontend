{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireKeyboardEvent, fireNonCancelableEvent } from '../internal/events';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { convertAutoComplete } from '../input/utils';\nconst Textarea = React.forwardRef((_a, ref) => {\n  var {\n      value,\n      autoComplete = true,\n      disabled,\n      readOnly,\n      disableBrowserAutocorrect,\n      disableBrowserSpellcheck,\n      spellcheck,\n      onKeyDown,\n      onKeyUp,\n      onChange,\n      onBlur,\n      onFocus,\n      ariaRequired,\n      name,\n      rows,\n      placeholder,\n      autoFocus,\n      ariaLabel\n    } = _a,\n    rest = __rest(_a, [\"value\", \"autoComplete\", \"disabled\", \"readOnly\", \"disableBrowserAutocorrect\", \"disableBrowserSpellcheck\", \"spellcheck\", \"onKeyDown\", \"onKeyUp\", \"onChange\", \"onBlur\", \"onFocus\", \"ariaRequired\", \"name\", \"rows\", \"placeholder\", \"autoFocus\", \"ariaLabel\"]);\n  const {\n    __internalRootRef\n  } = useBaseComponent('Textarea');\n  const {\n    ariaLabelledby,\n    ariaDescribedby,\n    controlId,\n    invalid\n  } = useFormFieldContext(rest);\n  const baseProps = getBaseProps(rest);\n  const textareaRef = useRef(null);\n  useForwardFocus(ref, textareaRef);\n  const attributes = {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-required': ariaRequired ? 'true' : undefined,\n    'aria-invalid': invalid ? 'true' : undefined,\n    name,\n    placeholder,\n    autoFocus,\n    className: clsx(styles.textarea, {\n      [styles['textarea-readonly']]: readOnly,\n      [styles['textarea-invalid']]: invalid\n    }),\n    autoComplete: convertAutoComplete(autoComplete),\n    spellCheck: spellcheck,\n    disabled,\n    readOnly: readOnly ? true : undefined,\n    rows: rows || 3,\n    onKeyDown: onKeyDown && (event => fireKeyboardEvent(onKeyDown, event)),\n    onKeyUp: onKeyUp && (event => fireKeyboardEvent(onKeyUp, event)),\n    // We set a default value on the component in order to force it into the controlled mode.\n    value: value || '',\n    onChange: onChange && (event => fireNonCancelableEvent(onChange, {\n      value: event.target.value\n    })),\n    onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),\n    onFocus: onFocus && (() => fireNonCancelableEvent(onFocus))\n  };\n  if (disableBrowserAutocorrect) {\n    attributes.autoCorrect = 'off';\n    attributes.autoCapitalize = 'off';\n  }\n  if (disableBrowserSpellcheck) {\n    attributes.spellCheck = 'false';\n  }\n  return React.createElement(\"span\", Object.assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: __internalRootRef\n  }), React.createElement(\"textarea\", Object.assign({\n    ref: textareaRef,\n    id: controlId\n  }, attributes)));\n});\napplyDisplayName(Textarea, 'Textarea');\nexport default Textarea;","map":{"version":3,"mappings":"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","names":["React","useRef","getBaseProps","fireKeyboardEvent","fireNonCancelableEvent","useFormFieldContext","useForwardFocus","clsx","styles","applyDisplayName","useBaseComponent","convertAutoComplete","Textarea","forwardRef","_a","ref","value","autoComplete","disabled","readOnly","disableBrowserAutocorrect","disableBrowserSpellcheck","spellcheck","onKeyDown","onKeyUp","onChange","onBlur","onFocus","ariaRequired","name","rows","placeholder","autoFocus","ariaLabel","rest","__internalRootRef","ariaLabelledby","ariaDescribedby","controlId","invalid","baseProps","textareaRef","attributes","undefined","className","textarea","spellCheck","event","target","autoCorrect","autoCapitalize","root","id"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/textarea/lib/default/textarea/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Ref, useRef } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireKeyboardEvent, fireNonCancelableEvent } from '../internal/events';\nimport { TextareaProps } from './interfaces';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { convertAutoComplete } from '../input/utils';\n\nexport { TextareaProps };\n\nconst Textarea = React.forwardRef(\n  (\n    {\n      value,\n      autoComplete = true,\n      disabled,\n      readOnly,\n      disableBrowserAutocorrect,\n      disableBrowserSpellcheck,\n      spellcheck,\n      onKeyDown,\n      onKeyUp,\n      onChange,\n      onBlur,\n      onFocus,\n      ariaRequired,\n      name,\n      rows,\n      placeholder,\n      autoFocus,\n      ariaLabel,\n      ...rest\n    }: TextareaProps,\n    ref: Ref<TextareaProps.Ref>\n  ) => {\n    const { __internalRootRef } = useBaseComponent('Textarea');\n    const { ariaLabelledby, ariaDescribedby, controlId, invalid } = useFormFieldContext(rest);\n    const baseProps = getBaseProps(rest);\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    useForwardFocus(ref, textareaRef);\n\n    const attributes: React.TextareaHTMLAttributes<HTMLTextAreaElement> = {\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      'aria-describedby': ariaDescribedby,\n      'aria-required': ariaRequired ? 'true' : undefined,\n      'aria-invalid': invalid ? 'true' : undefined,\n      name,\n      placeholder,\n      autoFocus,\n      className: clsx(styles.textarea, {\n        [styles['textarea-readonly']]: readOnly,\n        [styles['textarea-invalid']]: invalid,\n      }),\n      autoComplete: convertAutoComplete(autoComplete),\n      spellCheck: spellcheck,\n      disabled,\n      readOnly: readOnly ? true : undefined,\n      rows: rows || 3,\n      onKeyDown: onKeyDown && (event => fireKeyboardEvent(onKeyDown, event)),\n      onKeyUp: onKeyUp && (event => fireKeyboardEvent(onKeyUp, event)),\n      // We set a default value on the component in order to force it into the controlled mode.\n      value: value || '',\n      onChange: onChange && (event => fireNonCancelableEvent(onChange, { value: event.target.value })),\n      onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),\n      onFocus: onFocus && (() => fireNonCancelableEvent(onFocus)),\n    };\n\n    if (disableBrowserAutocorrect) {\n      attributes.autoCorrect = 'off';\n      attributes.autoCapitalize = 'off';\n    }\n\n    if (disableBrowserSpellcheck) {\n      attributes.spellCheck = 'false';\n    }\n\n    return (\n      <span {...baseProps} className={clsx(styles.root, baseProps.className)} ref={__internalRootRef}>\n        <textarea ref={textareaRef} id={controlId} {...attributes} />\n      </span>\n    );\n  }\n);\n\napplyDisplayName(Textarea, 'Textarea');\nexport default Textarea;\n"]},"metadata":{},"sourceType":"module"}