{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useEffect, useRef } from 'react';\nexport default memo(ResponsiveText);\nfunction ResponsiveText(_ref) {\n  var x = _ref.x,\n    y = _ref.y,\n    rightSide = _ref.rightSide,\n    className = _ref.className,\n    children = _ref.children,\n    containerBoundaries = _ref.containerBoundaries;\n  var actualRef = useRef(null);\n  var virtualRef = useRef(null);\n  // Determine the visible width of the text and if necessary truncate it until it fits.\n  useEffect(function () {\n    // The debouncing is necessary for visual smoothness.\n    var timeoutId = setTimeout(function () {\n      var groupRect = virtualRef.current.getBoundingClientRect();\n      var visibleWidth = containerBoundaries ? getVisibleWidth(groupRect, containerBoundaries) : 0;\n      renderTextContent(actualRef.current, children, visibleWidth);\n    }, 25);\n    return function () {\n      return clearTimeout(timeoutId);\n    };\n  });\n  return React.createElement(React.Fragment, null, React.createElement(\"text\", {\n    ref: virtualRef,\n    x: x,\n    y: y,\n    style: {\n      textAnchor: rightSide ? 'start' : 'end',\n      visibility: 'hidden'\n    },\n    \"aria-hidden\": \"true\",\n    className: className\n  }, children), React.createElement(\"text\", {\n    ref: actualRef,\n    x: x,\n    y: y,\n    style: {\n      textAnchor: rightSide ? 'start' : 'end'\n    },\n    className: className\n  }, children));\n}\nfunction getVisibleWidth(element, container) {\n  if (element.left < container.left) {\n    return element.right - container.left;\n  } else if (element.right > container.right) {\n    return container.right - element.left;\n  } else {\n    return container.right - container.left;\n  }\n}\nfunction renderTextContent(textNode, text, visibleWidth) {\n  var visibleLength = text.length;\n  while (visibleLength >= 0) {\n    textNode.textContent = truncateText(text, visibleLength);\n    if (!textNode.getComputedTextLength || textNode.getComputedTextLength() <= visibleWidth) {\n      return;\n    } else {\n      visibleLength--;\n    }\n  }\n}\nfunction truncateText(text, maxLength) {\n  if (text.length === maxLength) {\n    return text;\n  }\n  return text.slice(0, maxLength) + '…';\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,IAAI,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAWtD,eAAeF,IAAI,CAACG,cAAc,CAAC;AAEnC,SAASA,cAAc,OAAmF;EAAA,IAAhFC,CAAC,QAADA,CAAC;IAAEC,CAAC,QAADA,CAAC;IAAEC,SAAS,QAATA,SAAS;IAAEC,SAAS,QAATA,SAAS;IAAEC,QAAQ,QAARA,QAAQ;IAAEC,mBAAmB,QAAnBA,mBAAmB;EACjF,IAAMC,SAAS,GAAGR,MAAM,CAAiB,IAAI,CAAC;EAC9C,IAAMS,UAAU,GAAGT,MAAM,CAAiB,IAAI,CAAC;EAE/C;EACAD,SAAS,CAAC,YAAK;IACb;IACA,IAAMW,SAAS,GAAGC,UAAU,CAAC,YAAK;MAChC,IAAMC,SAAS,GAAGH,UAAU,CAACI,OAAQ,CAACC,qBAAqB,EAAE;MAC7D,IAAMC,YAAY,GAAGR,mBAAmB,GAAGS,eAAe,CAACJ,SAAS,EAAEL,mBAAmB,CAAC,GAAG,CAAC;MAC9FU,iBAAiB,CAACT,SAAS,CAACK,OAAQ,EAAEP,QAAQ,EAAES,YAAY,CAAC;IAC/D,CAAC,EAAE,EAAE,CAAC;IACN,OAAO;MAAA,OAAMG,YAAY,CAACR,SAAS,CAAC;IAAA;EACtC,CAAC,CAAC;EAEF,OACEb,0CAEEA;IACEsB,GAAG,EAAEV,UAAU;IACfP,CAAC,EAAEA,CAAC;IACJC,CAAC,EAAEA,CAAC;IACJiB,KAAK,EAAE;MAAEC,UAAU,EAAEjB,SAAS,GAAG,OAAO,GAAG,KAAK;MAAEkB,UAAU,EAAE;IAAQ,CAAE;IAAA,eAC5D,MAAM;IAClBjB,SAAS,EAAEA;EAAS,GAEnBC,QAAQ,CACJ,EAGPT;IAAMsB,GAAG,EAAEX,SAAS;IAAEN,CAAC,EAAEA,CAAC;IAAEC,CAAC,EAAEA,CAAC;IAAEiB,KAAK,EAAE;MAAEC,UAAU,EAAEjB,SAAS,GAAG,OAAO,GAAG;IAAK,CAAE;IAAEC,SAAS,EAAEA;EAAS,GACvGC,QAAQ,CACJ,CACN;AAEP;AAEA,SAASU,eAAe,CAACO,OAAwC,EAAEC,SAA0C;EAC3G,IAAID,OAAO,CAACE,IAAI,GAAGD,SAAS,CAACC,IAAI,EAAE;IACjC,OAAOF,OAAO,CAACG,KAAK,GAAGF,SAAS,CAACC,IAAI;GACtC,MAAM,IAAIF,OAAO,CAACG,KAAK,GAAGF,SAAS,CAACE,KAAK,EAAE;IAC1C,OAAOF,SAAS,CAACE,KAAK,GAAGH,OAAO,CAACE,IAAI;GACtC,MAAM;IACL,OAAOD,SAAS,CAACE,KAAK,GAAGF,SAAS,CAACC,IAAI;;AAE3C;AAEA,SAASR,iBAAiB,CAACU,QAAwB,EAAEC,IAAY,EAAEb,YAAoB;EACrF,IAAIc,aAAa,GAAGD,IAAI,CAACE,MAAM;EAC/B,OAAOD,aAAa,IAAI,CAAC,EAAE;IACzBF,QAAQ,CAACI,WAAW,GAAGC,YAAY,CAACJ,IAAI,EAAEC,aAAa,CAAC;IACxD,IAAI,CAACF,QAAQ,CAACM,qBAAqB,IAAIN,QAAQ,CAACM,qBAAqB,EAAE,IAAIlB,YAAY,EAAE;MACvF;KACD,MAAM;MACLc,aAAa,EAAE;;;AAGrB;AAEA,SAASG,YAAY,CAACJ,IAAY,EAAEM,SAAiB;EACnD,IAAIN,IAAI,CAACE,MAAM,KAAKI,SAAS,EAAE;IAC7B,OAAON,IAAI;;EAEb,OAAOA,IAAI,CAACO,KAAK,CAAC,CAAC,EAAED,SAAS,CAAC,GAAG,GAAG;AACvC","names":["React","memo","useEffect","useRef","ResponsiveText","x","y","rightSide","className","children","containerBoundaries","actualRef","virtualRef","timeoutId","setTimeout","groupRect","current","getBoundingClientRect","visibleWidth","getVisibleWidth","renderTextContent","clearTimeout","ref","style","textAnchor","visibility","element","container","left","right","textNode","text","visibleLength","length","textContent","truncateText","getComputedTextLength","maxLength","slice"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/pie-chart/lib/default/pie-chart/responsive-text.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useEffect, useRef } from 'react';\n\ninterface ResponsiveTextProps {\n  x: number;\n  y: number;\n  rightSide?: boolean;\n  className?: string;\n  children: string;\n  containerBoundaries: null | { left: number; right: number };\n}\n\nexport default memo(ResponsiveText);\n\nfunction ResponsiveText({ x, y, rightSide, className, children, containerBoundaries }: ResponsiveTextProps) {\n  const actualRef = useRef<SVGTextElement>(null);\n  const virtualRef = useRef<SVGTextElement>(null);\n\n  // Determine the visible width of the text and if necessary truncate it until it fits.\n  useEffect(() => {\n    // The debouncing is necessary for visual smoothness.\n    const timeoutId = setTimeout(() => {\n      const groupRect = virtualRef.current!.getBoundingClientRect();\n      const visibleWidth = containerBoundaries ? getVisibleWidth(groupRect, containerBoundaries) : 0;\n      renderTextContent(actualRef.current!, children, visibleWidth);\n    }, 25);\n    return () => clearTimeout(timeoutId);\n  });\n\n  return (\n    <>\n      {/* Invisible sample text used for measurement */}\n      <text\n        ref={virtualRef}\n        x={x}\n        y={y}\n        style={{ textAnchor: rightSide ? 'start' : 'end', visibility: 'hidden' }}\n        aria-hidden=\"true\"\n        className={className}\n      >\n        {children}\n      </text>\n\n      {/* Text node to render truncated text into */}\n      <text ref={actualRef} x={x} y={y} style={{ textAnchor: rightSide ? 'start' : 'end' }} className={className}>\n        {children}\n      </text>\n    </>\n  );\n}\n\nfunction getVisibleWidth(element: { left: number; right: number }, container: { left: number; right: number }): number {\n  if (element.left < container.left) {\n    return element.right - container.left;\n  } else if (element.right > container.right) {\n    return container.right - element.left;\n  } else {\n    return container.right - container.left;\n  }\n}\n\nfunction renderTextContent(textNode: SVGTextElement, text: string, visibleWidth: number) {\n  let visibleLength = text.length;\n  while (visibleLength >= 0) {\n    textNode.textContent = truncateText(text, visibleLength);\n    if (!textNode.getComputedTextLength || textNode.getComputedTextLength() <= visibleWidth) {\n      return;\n    } else {\n      visibleLength--;\n    }\n  }\n}\n\nfunction truncateText(text: string, maxLength: number) {\n  if (text.length === maxLength) {\n    return text;\n  }\n  return text.slice(0, maxLength) + '…';\n}\n"]},"metadata":{},"sourceType":"module"}