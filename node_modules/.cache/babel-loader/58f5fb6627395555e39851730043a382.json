{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { applyDefaults } from './defaults';\nimport { Notifications } from './notifications';\nimport { MobileToolbar } from './mobile-toolbar';\nimport { useFocusControl } from './utils/use-focus-control';\nimport useWindowWidth from './utils/use-window-width';\nimport useContentHeight from './utils/use-content-height';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\nimport { findUpUntil } from '../internal/utils/dom';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { CONSTRAINED_MAIN_PANEL_MIN_HEIGHT, CONSTRAINED_PAGE_HEIGHT, getSplitPanelDefaultSize, MAIN_PANEL_MIN_HEIGHT } from '../split-panel/utils/size-utils';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport ContentWrapper from './content-wrapper';\nimport { Drawer, DrawerTriggersBar } from './drawer';\nimport { ResizableDrawer } from './drawer/resizable-drawer';\nimport { SplitPanelProvider, SideSplitPanelDrawer } from './split-panel';\nimport useAppLayoutOffsets from './utils/use-content-width';\nimport { isDevelopment } from '../internal/is-development';\nimport { useStableCallback, warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport RefreshedAppLayout from './visual-refresh';\nimport { useInternalI18n } from '../i18n/context';\nimport { useSplitPanelFocusControl } from './utils/use-split-panel-focus-control';\nimport { useDrawerFocusControl } from './utils/use-drawer-focus-control';\nimport { TOOLS_DRAWER_ID, useDrawers } from './utils/use-drawers';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nconst AppLayout = React.forwardRef((_a, ref) => {\n  var _b, _c, _d, _e, _f, _g, _h;\n  var {\n      contentType = 'default',\n      headerSelector = '#b #h',\n      footerSelector = '#b #f'\n    } = _a,\n    rest = __rest(_a, [\"contentType\", \"headerSelector\", \"footerSelector\"]);\n  const {\n    __internalRootRef\n  } = useBaseComponent('AppLayout');\n  const isRefresh = useVisualRefresh();\n  const i18n = useInternalI18n('app-layout');\n  const ariaLabels = {\n    navigation: i18n('ariaLabels.navigation', (_b = rest.ariaLabels) === null || _b === void 0 ? void 0 : _b.navigation),\n    navigationClose: i18n('ariaLabels.navigationClose', (_c = rest.ariaLabels) === null || _c === void 0 ? void 0 : _c.navigationClose),\n    navigationToggle: i18n('ariaLabels.navigationToggle', (_d = rest.ariaLabels) === null || _d === void 0 ? void 0 : _d.navigationToggle),\n    notifications: i18n('ariaLabels.notifications', (_e = rest.ariaLabels) === null || _e === void 0 ? void 0 : _e.notifications),\n    tools: i18n('ariaLabels.tools', (_f = rest.ariaLabels) === null || _f === void 0 ? void 0 : _f.tools),\n    toolsClose: i18n('ariaLabels.toolsClose', (_g = rest.ariaLabels) === null || _g === void 0 ? void 0 : _g.toolsClose),\n    toolsToggle: i18n('ariaLabels.toolsToggle', (_h = rest.ariaLabels) === null || _h === void 0 ? void 0 : _h.toolsToggle)\n  };\n  // This re-builds the props including the default values\n  const props = Object.assign(Object.assign({\n    contentType,\n    headerSelector,\n    footerSelector\n  }, rest), {\n    ariaLabels\n  });\n  const baseProps = getBaseProps(rest);\n  return React.createElement(\"div\", Object.assign({\n    ref: __internalRootRef\n  }, baseProps), isRefresh ? React.createElement(RefreshedAppLayout, Object.assign({}, props, {\n    ref: ref\n  })) : React.createElement(OldAppLayout, Object.assign({}, props, {\n    ref: ref\n  })));\n});\nconst OldAppLayout = React.forwardRef((_a, ref) => {\n  var _b, _c;\n  var {\n      navigation,\n      navigationWidth = 280,\n      navigationHide,\n      navigationOpen: controlledNavigationOpen,\n      tools,\n      toolsWidth = 290,\n      toolsHide,\n      toolsOpen: controlledToolsOpen,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      contentHeader,\n      disableContentHeaderOverlap,\n      content,\n      contentType = 'default',\n      disableContentPaddings,\n      disableBodyScroll,\n      maxContentWidth,\n      minContentWidth,\n      headerSelector = '#b #h',\n      footerSelector = '#b #f',\n      ariaLabels,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      onSplitPanelResize,\n      onSplitPanelToggle,\n      onNavigationChange,\n      onToolsChange\n    } = _a,\n    props = __rest(_a, [\"navigation\", \"navigationWidth\", \"navigationHide\", \"navigationOpen\", \"tools\", \"toolsWidth\", \"toolsHide\", \"toolsOpen\", \"breadcrumbs\", \"notifications\", \"stickyNotifications\", \"contentHeader\", \"disableContentHeaderOverlap\", \"content\", \"contentType\", \"disableContentPaddings\", \"disableBodyScroll\", \"maxContentWidth\", \"minContentWidth\", \"headerSelector\", \"footerSelector\", \"ariaLabels\", \"splitPanel\", \"splitPanelSize\", \"splitPanelOpen\", \"splitPanelPreferences\", \"onSplitPanelPreferencesChange\", \"onSplitPanelResize\", \"onSplitPanelToggle\", \"onNavigationChange\", \"onToolsChange\"]);\n  if (isDevelopment) {\n    if (controlledToolsOpen && toolsHide) {\n      warnOnce('AppLayout', `You have enabled both the \\`toolsOpen\\` prop and the \\`toolsHide\\` prop. This is not supported. Set \\`toolsOpen\\` to \\`false\\` when you set \\`toolsHide\\` to \\`true\\`.`);\n    }\n  }\n  const rootRef = useRef(null);\n  const isMobile = useMobile();\n  const defaults = applyDefaults(contentType, {\n    maxContentWidth,\n    minContentWidth\n  }, false);\n  const [navigationOpen = false, setNavigationOpen] = useControllable(controlledNavigationOpen, onNavigationChange, isMobile ? false : defaults.navigationOpen, {\n    componentName: 'AppLayout',\n    controlledProp: 'navigationOpen',\n    changeHandler: 'onNavigationChange'\n  });\n  const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, isMobile ? false : defaults.toolsOpen, {\n    componentName: 'AppLayout',\n    controlledProp: 'toolsOpen',\n    changeHandler: 'onToolsChange'\n  });\n  const onToolsToggle = open => {\n    setToolsOpen(open);\n    focusToolsButtons();\n    fireNonCancelableEvent(onToolsChange, {\n      open\n    });\n  };\n  const _d = useDrawers(props, {\n      ariaLabels,\n      tools,\n      toolsOpen,\n      toolsHide,\n      toolsWidth,\n      onToolsToggle\n    }),\n    {\n      drawers,\n      activeDrawer,\n      activeDrawerSize,\n      activeDrawerId,\n      onActiveDrawerChange,\n      onActiveDrawerResize\n    } = _d,\n    drawersProps = __rest(_d, [\"drawers\", \"activeDrawer\", \"activeDrawerSize\", \"activeDrawerId\", \"onActiveDrawerChange\", \"onActiveDrawerResize\"]);\n  const hasDrawers = !!drawers;\n  const {\n    refs: navigationRefs,\n    setFocus: focusNavButtons\n  } = useFocusControl(navigationOpen);\n  const {\n    refs: toolsRefs,\n    setFocus: focusToolsButtons,\n    loseFocus: loseToolsFocus\n  } = useFocusControl(toolsOpen || activeDrawer !== undefined, true);\n  const {\n    refs: drawerRefs,\n    setFocus: focusDrawersButtons,\n    loseFocus: loseDrawersFocus,\n    setLastInteraction: setDrawerLastInteraction\n  } = useDrawerFocusControl([activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable], toolsOpen || activeDrawer !== undefined, true);\n  const onNavigationToggle = useStableCallback(open => {\n    setNavigationOpen(open);\n    focusNavButtons();\n    fireNonCancelableEvent(onNavigationChange, {\n      open\n    });\n  });\n  const onNavigationClick = event => {\n    const hasLink = findUpUntil(event.target, node => node.tagName === 'A' && !!node.href);\n    if (hasLink) {\n      onNavigationToggle(false);\n    }\n  };\n  useEffect(() => {\n    // Close navigation drawer on mobile so that the main content is visible\n    if (isMobile) {\n      onNavigationToggle(false);\n    }\n  }, [isMobile, onNavigationToggle]);\n  const navigationVisible = !navigationHide && navigationOpen;\n  const toolsVisible = !toolsHide && toolsOpen;\n  const {\n    contentHeightStyle,\n    headerHeight,\n    footerHeight\n  } = useContentHeight(headerSelector, footerSelector, disableBodyScroll);\n  const [isSplitpanelForcedPosition, setIsSplitpanelForcedPosition] = useState(false);\n  const [notificationsHeight, notificationsRef] = useContainerQuery(rect => rect.contentBoxHeight);\n  const anyPanelOpen = navigationVisible || toolsVisible || !!activeDrawer;\n  const hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;\n  const stickyNotificationsHeight = stickyNotifications ? notificationsHeight : null;\n  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, undefined, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelPreferences',\n    changeHandler: 'onSplitPanelPreferencesChange'\n  });\n  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelOpen',\n    changeHandler: 'onSplitPanelToggle'\n  });\n  const splitPanelPosition = (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) || 'bottom';\n  const [splitPanelReportedToggle, setSplitPanelReportedToggle] = useState({\n    displayed: false,\n    ariaLabel: undefined\n  });\n  const splitPanelDisplayed = !!(splitPanel && (splitPanelReportedToggle.displayed || splitPanelOpen));\n  const closedDrawerWidth = 40;\n  const effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;\n  const getEffectiveToolsWidth = () => {\n    if (toolsHide && (!splitPanelDisplayed || (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) !== 'side') && (!drawers || drawers.length === 0)) {\n      return 0;\n    }\n    if (activeDrawer && activeDrawerSize) {\n      return activeDrawerSize;\n    }\n    if (toolsOpen) {\n      return toolsWidth;\n    }\n    return closedDrawerWidth;\n  };\n  const effectiveToolsWidth = getEffectiveToolsWidth();\n  const defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);\n  const [splitPanelSize = defaultSplitPanelSize, setSplitPanelSize] = useControllable(controlledSplitPanelSize, onSplitPanelResize, defaultSplitPanelSize, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelSize',\n    changeHandler: 'onSplitPanelResize'\n  });\n  const mainContentRef = useRef(null);\n  const legacyScrollRootRef = useRef(null);\n  const {\n    refs: splitPanelRefs,\n    setLastInteraction: setSplitPanelLastInteraction\n  } = useSplitPanelFocusControl([splitPanelPreferences, splitPanelOpen]);\n  const onSplitPanelPreferencesSet = useCallback(detail => {\n    setSplitPanelPreferences(detail);\n    setSplitPanelLastInteraction({\n      type: 'position'\n    });\n    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n  }, [setSplitPanelPreferences, onSplitPanelPreferencesChange, setSplitPanelLastInteraction]);\n  const onSplitPanelSizeSet = useCallback(newSize => {\n    setSplitPanelSize(newSize);\n    fireNonCancelableEvent(onSplitPanelResize, {\n      size: newSize\n    });\n  }, [setSplitPanelSize, onSplitPanelResize]);\n  const onSplitPanelToggleHandler = useCallback(() => {\n    setSplitPanelOpen(!splitPanelOpen);\n    setSplitPanelLastInteraction({\n      type: splitPanelOpen ? 'close' : 'open'\n    });\n    fireNonCancelableEvent(onSplitPanelToggle, {\n      open: !splitPanelOpen\n    });\n  }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle, setSplitPanelLastInteraction]);\n  const getSplitPanelMaxWidth = useStableCallback(() => {\n    if (!mainContentRef.current || !defaults.minContentWidth) {\n      return NaN;\n    }\n    const width = parseInt(getComputedStyle(mainContentRef.current).width);\n    // when disableContentPaddings is true there is less available space,\n    // so we subtract space-scaled-2x-xxxl * 2 for left and right padding\n    const contentPadding = disableContentPaddings ? 80 : 0;\n    const spaceAvailable = width - defaults.minContentWidth - contentPadding;\n    const spaceTaken = finalSplitPanePosition === 'side' ? splitPanelSize : 0;\n    return Math.max(0, spaceTaken + spaceAvailable);\n  });\n  const getDrawerMaxWidth = useStableCallback(() => {\n    if (!mainContentRef.current || !defaults.minContentWidth) {\n      return NaN;\n    }\n    // Either use the computed width of the drawer or the drawerSize as defined.\n    const width = parseInt(getComputedStyle(mainContentRef.current).width || `${activeDrawerSize}`);\n    // when disableContentPaddings is true there is less available space,\n    // so we subtract space-scaled-2x-xxxl * 2 for left and right padding\n    const contentPadding = disableContentPaddings ? 80 : 0;\n    const spaceAvailable = width - defaults.minContentWidth - contentPadding;\n    return Math.max(0, activeDrawerSize + spaceAvailable);\n  });\n  const getSplitPanelMaxHeight = useStableCallback(() => {\n    if (typeof document === 'undefined') {\n      return 0; // render the split panel in its minimum possible size\n    } else if (disableBodyScroll && legacyScrollRootRef.current) {\n      const availableHeight = legacyScrollRootRef.current.clientHeight;\n      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n    } else {\n      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n    }\n  });\n  const finalSplitPanePosition = isSplitpanelForcedPosition ? 'bottom' : splitPanelPosition;\n  const splitPaneAvailableOnTheSide = splitPanelDisplayed && finalSplitPanePosition === 'side';\n  const splitPanelOpenOnTheSide = splitPaneAvailableOnTheSide && splitPanelOpen;\n  const toggleButtonsBarWidth = 0;\n  const windowWidth = useWindowWidth();\n  const {\n    left: leftOffset,\n    right: rightOffset\n  } = useAppLayoutOffsets(rootRef.current);\n  const contentWidthWithSplitPanel = windowWidth - leftOffset - rightOffset - effectiveToolsWidth - effectiveNavigationWidth - (disableContentPaddings ? 0 : toggleButtonsBarWidth);\n  const isResizeInvalid = isMobile || (defaults.minContentWidth || 0) > contentWidthWithSplitPanel;\n  useEffect(() => {\n    const contentWidth = contentWidthWithSplitPanel - splitPanelSize;\n    setIsSplitpanelForcedPosition(isMobile || (defaults.minContentWidth || 0) > contentWidth);\n    // This is a workaround to avoid a forced position due to splitPanelSize, which is\n    // user controlled variable.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contentWidthWithSplitPanel, activeDrawerSize, defaults.minContentWidth, isMobile]);\n  const navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;\n  const toolsClosedWidth = toolsHide || isMobile || !hasDrawers && toolsHide ? 0 : closedDrawerWidth;\n  const contentMaxWidthStyle = !isMobile ? {\n    maxWidth: defaults.maxContentWidth\n  } : undefined;\n  const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n  const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = useState(0);\n  const getSplitPanelRightOffset = () => {\n    if (isMobile) {\n      return 0;\n    }\n    if (hasDrawers) {\n      if (activeDrawer) {\n        if (drawers.length === 1) {\n          return activeDrawerSize;\n        }\n        if (!isResizeInvalid && activeDrawerSize) {\n          return activeDrawerSize + closedDrawerWidth;\n        }\n        return toolsWidth + closedDrawerWidth;\n      }\n      return drawers.length > 0 ? closedDrawerWidth : 0;\n    }\n    if (!toolsHide && toolsOpen) {\n      return toolsWidth;\n    }\n    return toolsClosedWidth;\n  };\n  const splitPanelContextProps = {\n    topOffset: headerHeight + (finalSplitPanePosition === 'bottom' ? stickyNotificationsHeight || 0 : 0),\n    bottomOffset: footerHeight,\n    leftOffset: leftOffset + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),\n    rightOffset: rightOffset + getSplitPanelRightOffset(),\n    position: finalSplitPanePosition,\n    size: splitPanelSize,\n    getMaxWidth: getSplitPanelMaxWidth,\n    getMaxHeight: getSplitPanelMaxHeight,\n    disableContentPaddings,\n    contentWidthStyles: contentMaxWidthStyle,\n    isOpen: splitPanelOpen,\n    isForcedPosition: isSplitpanelForcedPosition,\n    onResize: onSplitPanelSizeSet,\n    onToggle: onSplitPanelToggleHandler,\n    onPreferencesChange: onSplitPanelPreferencesSet,\n    setSplitPanelToggle: setSplitPanelReportedToggle,\n    reportSize: setSplitPanelReportedSize,\n    reportHeaderHeight: setSplitPanelReportedHeaderHeight,\n    refs: splitPanelRefs\n  };\n  const splitPanelWrapped = splitPanel && React.createElement(SplitPanelProvider, Object.assign({}, splitPanelContextProps), finalSplitPanePosition === 'side' ? React.createElement(SideSplitPanelDrawer, {\n    displayed: splitPanelDisplayed\n  }, splitPanel) : splitPanel);\n  const contentWrapperProps = {\n    contentType,\n    navigationPadding: navigationHide || !!navigationOpen,\n    contentWidthStyles: !isMobile ? {\n      minWidth: defaults.minContentWidth,\n      maxWidth: defaults.maxContentWidth\n    } : undefined,\n    toolsPadding:\n    // tools padding is displayed in one of the three cases\n    // 1. Nothing on the that screen edge (no tools panel and no split panel)\n    toolsHide || hasDrawers && !activeDrawer && (!splitPanelDisplayed || finalSplitPanePosition !== 'side') ||\n    // 2. Tools panel is present and open\n    toolsVisible ||\n    // 3. Split panel is open in side position\n    splitPanelOpenOnTheSide,\n    isMobile\n  };\n  useImperativeHandle(ref, () => ({\n    openTools: () => onToolsToggle(true),\n    closeNavigationIfNecessary: () => {\n      if (isMobile) {\n        onNavigationToggle(false);\n      }\n    },\n    focusToolsClose: () => focusToolsButtons(true),\n    focusSplitPanel: () => {\n      var _a;\n      return (_a = splitPanelRefs.slider.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }));\n  const splitPanelBottomOffset = (_b = !splitPanelDisplayed || finalSplitPanePosition !== 'bottom' ? undefined : splitPanelOpen ? splitPanelReportedSize : splitPanelReportedHeaderHeight) !== null && _b !== void 0 ? _b : undefined;\n  const [mobileBarHeight, mobileBarRef] = useContainerQuery(rect => rect.contentBoxHeight);\n  return React.createElement(\"div\", {\n    className: clsx(styles.root, testutilStyles.root, disableBodyScroll && styles['root-no-scroll']),\n    ref: rootRef,\n    style: contentHeightStyle\n  }, isMobile && (!toolsHide || !navigationHide || breadcrumbs) && React.createElement(MobileToolbar, {\n    anyPanelOpen: anyPanelOpen,\n    toggleRefs: {\n      navigation: navigationRefs.toggle,\n      tools: toolsRefs.toggle\n    },\n    topOffset: headerHeight,\n    ariaLabels: ariaLabels,\n    navigationHide: navigationHide,\n    toolsHide: toolsHide,\n    onNavigationOpen: () => onNavigationToggle(true),\n    onToolsOpen: () => onToolsToggle(true),\n    unfocusable: anyPanelOpen,\n    mobileBarRef: mobileBarRef,\n    drawers: hasDrawers ? {\n      items: drawers,\n      activeDrawerId: activeDrawerId,\n      onChange: changeDetail => {\n        onActiveDrawerChange(changeDetail.activeDrawerId);\n        if (changeDetail.activeDrawerId !== activeDrawerId) {\n          focusToolsButtons();\n          focusDrawersButtons();\n          setDrawerLastInteraction({\n            type: 'open'\n          });\n        }\n      },\n      ariaLabel: drawersProps.ariaLabel,\n      overflowAriaLabel: drawersProps.overflowAriaLabel,\n      overflowWithBadgeAriaLabel: drawersProps.overflowWithBadgeAriaLabel\n    } : undefined\n  }, breadcrumbs), React.createElement(\"div\", {\n    className: clsx(styles.layout, disableBodyScroll && styles['layout-no-scroll'])\n  }, !navigationHide && React.createElement(Drawer, {\n    contentClassName: testutilStyles.navigation,\n    toggleClassName: testutilStyles['navigation-toggle'],\n    closeClassName: testutilStyles['navigation-close'],\n    ariaLabels: ariaLabels,\n    bottomOffset: footerHeight,\n    topOffset: headerHeight,\n    isMobile: isMobile,\n    isOpen: navigationOpen,\n    onClick: isMobile ? onNavigationClick : undefined,\n    onToggle: onNavigationToggle,\n    toggleRefs: navigationRefs,\n    type: \"navigation\",\n    width: navigationWidth\n  }, navigation), React.createElement(\"main\", {\n    ref: legacyScrollRootRef,\n    className: clsx(styles['layout-main'], {\n      [styles['layout-main-scrollable']]: disableBodyScroll,\n      [testutilStyles['disable-body-scroll-root']]: disableBodyScroll,\n      [styles.unfocusable]: isMobile && anyPanelOpen\n    })\n  }, React.createElement(\"div\", {\n    style: {\n      marginBottom: splitPanelBottomOffset\n    }\n  }, notifications && React.createElement(Notifications, {\n    disableContentPaddings: disableContentPaddings,\n    testUtilsClassName: testutilStyles.notifications,\n    labels: ariaLabels,\n    topOffset: disableBodyScroll ? 0 : headerHeight,\n    sticky: !isMobile && stickyNotifications,\n    ref: notificationsRef\n  }, notifications), (!isMobile && breadcrumbs || contentHeader) && React.createElement(ContentWrapper, Object.assign({}, contentWrapperProps), !isMobile && breadcrumbs && React.createElement(\"div\", {\n    className: clsx(testutilStyles.breadcrumbs, styles['breadcrumbs-desktop'])\n  }, breadcrumbs), contentHeader && React.createElement(\"div\", {\n    className: clsx(styles['content-header-wrapper'], !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles['content-extra-top-padding'], !hasRenderedNotifications && !breadcrumbs && styles['content-header-wrapper-first-child'], !disableContentHeaderOverlap && styles['content-header-wrapper-overlapped'])\n  }, contentHeader)), React.createElement(ContentWrapper, Object.assign({}, contentWrapperProps, {\n    ref: mainContentRef,\n    disablePaddings: disableContentPaddings,\n    // eslint-disable-next-line react/forbid-component-props\n    className: clsx(!disableContentPaddings && styles['content-wrapper'], !disableContentPaddings && (isMobile || !breadcrumbs) && !contentHeader && styles['content-extra-top-padding'], testutilStyles.content, !disableContentHeaderOverlap && contentHeader && styles['content-overlapped'], !hasRenderedNotifications && !breadcrumbs && !isMobile && !contentHeader && styles['content-wrapper-first-child'])\n  }), React.createElement(AppLayoutContext.Provider, {\n    value: {\n      stickyOffsetTop:\n      // We don't support the table header being sticky in case the deprecated disableBodyScroll is enabled,\n      // therefore we ensure the table header scrolls out of view by offseting a large enough value (9999px)\n      (disableBodyScroll ? isMobile ? -9999 : 0 : headerHeight) + (isMobile ? 0 : stickyNotificationsHeight !== null ? stickyNotificationsHeight : 0),\n      stickyOffsetBottom: footerHeight + (splitPanelBottomOffset || 0),\n      mobileBarHeight: mobileBarHeight !== null && mobileBarHeight !== void 0 ? mobileBarHeight : 0\n    }\n  }, content))), finalSplitPanePosition === 'bottom' && splitPanelWrapped), finalSplitPanePosition === 'side' && splitPanelWrapped, hasDrawers ? React.createElement(ResizableDrawer, {\n    contentClassName: clsx(activeDrawerId && testutilStyles['active-drawer'], activeDrawerId === TOOLS_DRAWER_ID && testutilStyles.tools),\n    toggleClassName: testutilStyles['tools-toggle'],\n    closeClassName: clsx(testutilStyles['active-drawer-close-button'], activeDrawerId === TOOLS_DRAWER_ID && testutilStyles['tools-close']),\n    ariaLabels: ariaLabels,\n    width: !isResizeInvalid ? activeDrawerSize : toolsWidth,\n    bottomOffset: footerHeight,\n    topOffset: headerHeight,\n    isMobile: isMobile,\n    onToggle: () => {\n      /*noop in this mode*/\n    },\n    isOpen: true,\n    toggleRefs: toolsRefs,\n    type: \"tools\",\n    onLoseFocus: loseDrawersFocus,\n    activeDrawer: activeDrawer,\n    drawers: {\n      items: drawers,\n      activeDrawerId: activeDrawerId,\n      onChange: changeDetail => {\n        focusToolsButtons();\n        setDrawerLastInteraction({\n          type: 'close'\n        });\n        onActiveDrawerChange(changeDetail.activeDrawerId);\n      }\n    },\n    size: !isResizeInvalid ? activeDrawerSize : toolsWidth,\n    onResize: changeDetail => onActiveDrawerResize(changeDetail),\n    refs: drawerRefs,\n    getMaxWidth: getDrawerMaxWidth,\n    toolsContent: (_c = drawers === null || drawers === void 0 ? void 0 : drawers.find(drawer => drawer.id === TOOLS_DRAWER_ID)) === null || _c === void 0 ? void 0 : _c.content\n  }, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content) : !toolsHide && React.createElement(Drawer, {\n    contentClassName: testutilStyles.tools,\n    toggleClassName: testutilStyles['tools-toggle'],\n    closeClassName: testutilStyles['tools-close'],\n    ariaLabels: ariaLabels,\n    width: effectiveToolsWidth,\n    bottomOffset: footerHeight,\n    topOffset: headerHeight,\n    isMobile: isMobile,\n    onToggle: onToolsToggle,\n    isOpen: toolsOpen,\n    toggleRefs: toolsRefs,\n    type: \"tools\",\n    onLoseFocus: loseToolsFocus\n  }, tools), hasDrawers && drawers.length > 0 && React.createElement(DrawerTriggersBar, {\n    bottomOffset: footerHeight,\n    topOffset: headerHeight,\n    isMobile: isMobile,\n    drawers: {\n      items: drawers,\n      activeDrawerId: activeDrawerId,\n      onChange: changeDetail => {\n        if (activeDrawerId !== changeDetail.activeDrawerId) {\n          focusToolsButtons();\n          focusDrawersButtons();\n          setDrawerLastInteraction({\n            type: 'open'\n          });\n        }\n        onActiveDrawerChange(changeDetail.activeDrawerId);\n      },\n      ariaLabel: drawersProps.ariaLabel,\n      overflowAriaLabel: drawersProps.overflowAriaLabel,\n      overflowWithBadgeAriaLabel: drawersProps.overflowWithBadgeAriaLabel\n    }\n  })));\n});\napplyDisplayName(AppLayout, 'AppLayout');\nexport default AppLayout;","map":{"version":3,"mappings":"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","names":["clsx","React","useCallback","useEffect","useImperativeHandle","useRef","useState","getBaseProps","useControllable","useMobile","fireNonCancelableEvent","applyDefaults","Notifications","MobileToolbar","useFocusControl","useWindowWidth","useContentHeight","styles","testutilStyles","findUpUntil","AppLayoutContext","applyDisplayName","CONSTRAINED_MAIN_PANEL_MIN_HEIGHT","CONSTRAINED_PAGE_HEIGHT","getSplitPanelDefaultSize","MAIN_PANEL_MIN_HEIGHT","useBaseComponent","useVisualRefresh","ContentWrapper","Drawer","DrawerTriggersBar","ResizableDrawer","SplitPanelProvider","SideSplitPanelDrawer","useAppLayoutOffsets","isDevelopment","useStableCallback","warnOnce","RefreshedAppLayout","useInternalI18n","useSplitPanelFocusControl","useDrawerFocusControl","TOOLS_DRAWER_ID","useDrawers","useContainerQuery","AppLayout","forwardRef","_a","ref","contentType","headerSelector","footerSelector","rest","__internalRootRef","isRefresh","i18n","ariaLabels","navigation","navigationClose","navigationToggle","notifications","tools","toolsClose","toolsToggle","props","baseProps","OldAppLayout","navigationWidth","navigationHide","navigationOpen","controlledNavigationOpen","toolsWidth","toolsHide","toolsOpen","controlledToolsOpen","breadcrumbs","stickyNotifications","contentHeader","disableContentHeaderOverlap","content","disableContentPaddings","disableBodyScroll","maxContentWidth","minContentWidth","splitPanel","splitPanelSize","controlledSplitPanelSize","splitPanelOpen","controlledSplitPanelOpen","splitPanelPreferences","controlledSplitPanelPreferences","onSplitPanelPreferencesChange","onSplitPanelResize","onSplitPanelToggle","onNavigationChange","onToolsChange","rootRef","isMobile","defaults","setNavigationOpen","componentName","controlledProp","changeHandler","setToolsOpen","onToolsToggle","open","focusToolsButtons","_d","drawers","activeDrawer","activeDrawerSize","activeDrawerId","onActiveDrawerChange","onActiveDrawerResize","drawersProps","hasDrawers","refs","navigationRefs","setFocus","focusNavButtons","toolsRefs","loseFocus","loseToolsFocus","undefined","drawerRefs","focusDrawersButtons","loseDrawersFocus","setLastInteraction","setDrawerLastInteraction","resizable","onNavigationToggle","onNavigationClick","event","hasLink","target","node","tagName","href","navigationVisible","toolsVisible","contentHeightStyle","headerHeight","footerHeight","isSplitpanelForcedPosition","setIsSplitpanelForcedPosition","notificationsHeight","notificationsRef","rect","contentBoxHeight","anyPanelOpen","hasRenderedNotifications","stickyNotificationsHeight","setSplitPanelPreferences","setSplitPanelOpen","splitPanelPosition","position","splitPanelReportedToggle","setSplitPanelReportedToggle","displayed","ariaLabel","splitPanelDisplayed","closedDrawerWidth","effectiveNavigationWidth","getEffectiveToolsWidth","length","effectiveToolsWidth","defaultSplitPanelSize","setSplitPanelSize","mainContentRef","legacyScrollRootRef","splitPanelRefs","setSplitPanelLastInteraction","onSplitPanelPreferencesSet","detail","type","onSplitPanelSizeSet","newSize","size","onSplitPanelToggleHandler","getSplitPanelMaxWidth","current","NaN","width","parseInt","getComputedStyle","contentPadding","spaceAvailable","spaceTaken","finalSplitPanePosition","Math","max","getDrawerMaxWidth","getSplitPanelMaxHeight","document","availableHeight","clientHeight","documentElement","splitPaneAvailableOnTheSide","splitPanelOpenOnTheSide","toggleButtonsBarWidth","windowWidth","left","leftOffset","right","rightOffset","contentWidthWithSplitPanel","isResizeInvalid","contentWidth","navigationClosedWidth","toolsClosedWidth","contentMaxWidthStyle","maxWidth","splitPanelReportedSize","setSplitPanelReportedSize","splitPanelReportedHeaderHeight","setSplitPanelReportedHeaderHeight","getSplitPanelRightOffset","splitPanelContextProps","topOffset","bottomOffset","getMaxWidth","getMaxHeight","contentWidthStyles","isOpen","isForcedPosition","onResize","onToggle","onPreferencesChange","setSplitPanelToggle","reportSize","reportHeaderHeight","splitPanelWrapped","contentWrapperProps","navigationPadding","minWidth","toolsPadding","openTools","closeNavigationIfNecessary","focusToolsClose","focusSplitPanel","slider","focus","splitPanelBottomOffset","mobileBarHeight","mobileBarRef","className","root","style","toggleRefs","toggle","onNavigationOpen","onToolsOpen","unfocusable","items","onChange","changeDetail","overflowAriaLabel","overflowWithBadgeAriaLabel","layout","contentClassName","toggleClassName","closeClassName","onClick","marginBottom","testUtilsClassName","labels","sticky","disablePaddings","Provider","value","stickyOffsetTop","stickyOffsetBottom","onLoseFocus","toolsContent","find","drawer","id"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/app-layout/lib/default/app-layout/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { applyDefaults } from './defaults';\nimport { AppLayoutProps } from './interfaces';\nimport { Notifications } from './notifications';\nimport { MobileToolbar } from './mobile-toolbar';\nimport { useFocusControl } from './utils/use-focus-control';\nimport useWindowWidth from './utils/use-window-width';\nimport useContentHeight from './utils/use-content-height';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\nimport { findUpUntil } from '../internal/utils/dom';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { SplitPanelSideToggleProps } from '../internal/context/split-panel-context';\nimport {\n  CONSTRAINED_MAIN_PANEL_MIN_HEIGHT,\n  CONSTRAINED_PAGE_HEIGHT,\n  getSplitPanelDefaultSize,\n  MAIN_PANEL_MIN_HEIGHT,\n} from '../split-panel/utils/size-utils';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport ContentWrapper, { ContentWrapperProps } from './content-wrapper';\nimport { Drawer, DrawerTriggersBar } from './drawer';\nimport { ResizableDrawer } from './drawer/resizable-drawer';\nimport { SplitPanelProvider, SideSplitPanelDrawer, SplitPanelProviderProps } from './split-panel';\nimport useAppLayoutOffsets from './utils/use-content-width';\nimport { isDevelopment } from '../internal/is-development';\nimport { useStableCallback, warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport RefreshedAppLayout from './visual-refresh';\nimport { useInternalI18n } from '../i18n/context';\nimport { useSplitPanelFocusControl } from './utils/use-split-panel-focus-control';\nimport { useDrawerFocusControl } from './utils/use-drawer-focus-control';\nimport { TOOLS_DRAWER_ID, useDrawers } from './utils/use-drawers';\nimport { InternalDrawerProps } from './drawer/interfaces';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nexport { AppLayoutProps };\n\nconst AppLayout = React.forwardRef(\n  (\n    { contentType = 'default', headerSelector = '#b #h', footerSelector = '#b #f', ...rest }: AppLayoutProps,\n    ref: React.Ref<AppLayoutProps.Ref>\n  ) => {\n    const { __internalRootRef } = useBaseComponent<HTMLDivElement>('AppLayout');\n    const isRefresh = useVisualRefresh();\n\n    const i18n = useInternalI18n('app-layout');\n    const ariaLabels = {\n      navigation: i18n('ariaLabels.navigation', rest.ariaLabels?.navigation),\n      navigationClose: i18n('ariaLabels.navigationClose', rest.ariaLabels?.navigationClose),\n      navigationToggle: i18n('ariaLabels.navigationToggle', rest.ariaLabels?.navigationToggle),\n      notifications: i18n('ariaLabels.notifications', rest.ariaLabels?.notifications),\n      tools: i18n('ariaLabels.tools', rest.ariaLabels?.tools),\n      toolsClose: i18n('ariaLabels.toolsClose', rest.ariaLabels?.toolsClose),\n      toolsToggle: i18n('ariaLabels.toolsToggle', rest.ariaLabels?.toolsToggle),\n    };\n\n    // This re-builds the props including the default values\n    const props = { contentType, headerSelector, footerSelector, ...rest, ariaLabels };\n\n    const baseProps = getBaseProps(rest);\n\n    return (\n      <div ref={__internalRootRef} {...baseProps}>\n        {isRefresh ? <RefreshedAppLayout {...props} ref={ref} /> : <OldAppLayout {...props} ref={ref} />}\n      </div>\n    );\n  }\n);\n\nconst OldAppLayout = React.forwardRef(\n  (\n    {\n      navigation,\n      navigationWidth = 280,\n      navigationHide,\n      navigationOpen: controlledNavigationOpen,\n      tools,\n      toolsWidth = 290,\n      toolsHide,\n      toolsOpen: controlledToolsOpen,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      contentHeader,\n      disableContentHeaderOverlap,\n      content,\n      contentType = 'default',\n      disableContentPaddings,\n      disableBodyScroll,\n      maxContentWidth,\n      minContentWidth,\n      headerSelector = '#b #h',\n      footerSelector = '#b #f',\n      ariaLabels,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      onSplitPanelResize,\n      onSplitPanelToggle,\n      onNavigationChange,\n      onToolsChange,\n      ...props\n    }: AppLayoutProps,\n    ref: React.Ref<AppLayoutProps.Ref>\n  ) => {\n    if (isDevelopment) {\n      if (controlledToolsOpen && toolsHide) {\n        warnOnce(\n          'AppLayout',\n          `You have enabled both the \\`toolsOpen\\` prop and the \\`toolsHide\\` prop. This is not supported. Set \\`toolsOpen\\` to \\`false\\` when you set \\`toolsHide\\` to \\`true\\`.`\n        );\n      }\n    }\n\n    const rootRef = useRef<HTMLDivElement>(null);\n    const isMobile = useMobile();\n\n    const defaults = applyDefaults(contentType, { maxContentWidth, minContentWidth }, false);\n    const [navigationOpen = false, setNavigationOpen] = useControllable(\n      controlledNavigationOpen,\n      onNavigationChange,\n      isMobile ? false : defaults.navigationOpen,\n      { componentName: 'AppLayout', controlledProp: 'navigationOpen', changeHandler: 'onNavigationChange' }\n    );\n\n    const [toolsOpen = false, setToolsOpen] = useControllable(\n      controlledToolsOpen,\n      onToolsChange,\n      isMobile ? false : defaults.toolsOpen,\n      { componentName: 'AppLayout', controlledProp: 'toolsOpen', changeHandler: 'onToolsChange' }\n    );\n    const onToolsToggle = (open: boolean) => {\n      setToolsOpen(open);\n      focusToolsButtons();\n      fireNonCancelableEvent(onToolsChange, { open });\n    };\n\n    const {\n      drawers,\n      activeDrawer,\n      activeDrawerSize,\n      activeDrawerId,\n      onActiveDrawerChange,\n      onActiveDrawerResize,\n      ...drawersProps\n    } = useDrawers(props as InternalDrawerProps, {\n      ariaLabels,\n      tools,\n      toolsOpen,\n      toolsHide,\n      toolsWidth,\n      onToolsToggle,\n    });\n    const hasDrawers = !!drawers;\n\n    const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(navigationOpen);\n    const {\n      refs: toolsRefs,\n      setFocus: focusToolsButtons,\n      loseFocus: loseToolsFocus,\n    } = useFocusControl(toolsOpen || activeDrawer !== undefined, true);\n    const {\n      refs: drawerRefs,\n      setFocus: focusDrawersButtons,\n      loseFocus: loseDrawersFocus,\n      setLastInteraction: setDrawerLastInteraction,\n    } = useDrawerFocusControl([activeDrawer?.resizable], toolsOpen || activeDrawer !== undefined, true);\n\n    const onNavigationToggle = useStableCallback((open: boolean) => {\n      setNavigationOpen(open);\n      focusNavButtons();\n      fireNonCancelableEvent(onNavigationChange, { open });\n    });\n\n    const onNavigationClick = (event: React.MouseEvent) => {\n      const hasLink = findUpUntil(\n        event.target as HTMLElement,\n        node => node.tagName === 'A' && !!(node as HTMLAnchorElement).href\n      );\n      if (hasLink) {\n        onNavigationToggle(false);\n      }\n    };\n\n    useEffect(() => {\n      // Close navigation drawer on mobile so that the main content is visible\n      if (isMobile) {\n        onNavigationToggle(false);\n      }\n    }, [isMobile, onNavigationToggle]);\n\n    const navigationVisible = !navigationHide && navigationOpen;\n    const toolsVisible = !toolsHide && toolsOpen;\n\n    const { contentHeightStyle, headerHeight, footerHeight } = useContentHeight(\n      headerSelector,\n      footerSelector,\n      disableBodyScroll\n    );\n    const [isSplitpanelForcedPosition, setIsSplitpanelForcedPosition] = useState(false);\n\n    const [notificationsHeight, notificationsRef] = useContainerQuery(rect => rect.contentBoxHeight);\n    const anyPanelOpen = navigationVisible || toolsVisible || !!activeDrawer;\n    const hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;\n    const stickyNotificationsHeight = stickyNotifications ? notificationsHeight : null;\n\n    const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(\n      controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      undefined,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelPreferences',\n        changeHandler: 'onSplitPanelPreferencesChange',\n      }\n    );\n    const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(\n      controlledSplitPanelOpen,\n      onSplitPanelToggle,\n      false,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelOpen',\n        changeHandler: 'onSplitPanelToggle',\n      }\n    );\n\n    const splitPanelPosition = splitPanelPreferences?.position || 'bottom';\n    const [splitPanelReportedToggle, setSplitPanelReportedToggle] = useState<SplitPanelSideToggleProps>({\n      displayed: false,\n      ariaLabel: undefined,\n    });\n    const splitPanelDisplayed = !!(splitPanel && (splitPanelReportedToggle.displayed || splitPanelOpen));\n\n    const closedDrawerWidth = 40;\n    const effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;\n\n    const getEffectiveToolsWidth = () => {\n      if (\n        toolsHide &&\n        (!splitPanelDisplayed || splitPanelPreferences?.position !== 'side') &&\n        (!drawers || drawers.length === 0)\n      ) {\n        return 0;\n      }\n\n      if (activeDrawer && activeDrawerSize) {\n        return activeDrawerSize;\n      }\n\n      if (toolsOpen) {\n        return toolsWidth;\n      }\n\n      return closedDrawerWidth;\n    };\n\n    const effectiveToolsWidth = getEffectiveToolsWidth();\n\n    const defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);\n    const [splitPanelSize = defaultSplitPanelSize, setSplitPanelSize] = useControllable(\n      controlledSplitPanelSize,\n      onSplitPanelResize,\n      defaultSplitPanelSize,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelSize',\n        changeHandler: 'onSplitPanelResize',\n      }\n    );\n\n    const mainContentRef = useRef<HTMLDivElement>(null);\n    const legacyScrollRootRef = useRef<HTMLElement>(null);\n\n    const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([\n      splitPanelPreferences,\n      splitPanelOpen,\n    ]);\n\n    const onSplitPanelPreferencesSet = useCallback(\n      (detail: { position: 'side' | 'bottom' }) => {\n        setSplitPanelPreferences(detail);\n        setSplitPanelLastInteraction({ type: 'position' });\n        fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n      },\n      [setSplitPanelPreferences, onSplitPanelPreferencesChange, setSplitPanelLastInteraction]\n    );\n    const onSplitPanelSizeSet = useCallback(\n      (newSize: number) => {\n        setSplitPanelSize(newSize);\n        fireNonCancelableEvent(onSplitPanelResize, { size: newSize });\n      },\n      [setSplitPanelSize, onSplitPanelResize]\n    );\n\n    const onSplitPanelToggleHandler = useCallback(() => {\n      setSplitPanelOpen(!splitPanelOpen);\n      setSplitPanelLastInteraction({ type: splitPanelOpen ? 'close' : 'open' });\n      fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });\n    }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle, setSplitPanelLastInteraction]);\n\n    const getSplitPanelMaxWidth = useStableCallback(() => {\n      if (!mainContentRef.current || !defaults.minContentWidth) {\n        return NaN;\n      }\n\n      const width = parseInt(getComputedStyle(mainContentRef.current).width);\n      // when disableContentPaddings is true there is less available space,\n      // so we subtract space-scaled-2x-xxxl * 2 for left and right padding\n      const contentPadding = disableContentPaddings ? 80 : 0;\n      const spaceAvailable = width - defaults.minContentWidth - contentPadding;\n\n      const spaceTaken = finalSplitPanePosition === 'side' ? splitPanelSize : 0;\n      return Math.max(0, spaceTaken + spaceAvailable);\n    });\n\n    const getDrawerMaxWidth = useStableCallback(() => {\n      if (!mainContentRef.current || !defaults.minContentWidth) {\n        return NaN;\n      }\n\n      // Either use the computed width of the drawer or the drawerSize as defined.\n      const width = parseInt(getComputedStyle(mainContentRef.current).width || `${activeDrawerSize}`);\n\n      // when disableContentPaddings is true there is less available space,\n      // so we subtract space-scaled-2x-xxxl * 2 for left and right padding\n      const contentPadding = disableContentPaddings ? 80 : 0;\n      const spaceAvailable = width - defaults.minContentWidth - contentPadding;\n\n      return Math.max(0, activeDrawerSize + spaceAvailable);\n    });\n\n    const getSplitPanelMaxHeight = useStableCallback(() => {\n      if (typeof document === 'undefined') {\n        return 0; // render the split panel in its minimum possible size\n      } else if (disableBodyScroll && legacyScrollRootRef.current) {\n        const availableHeight = legacyScrollRootRef.current.clientHeight;\n        return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n      } else {\n        const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n        return availableHeight < CONSTRAINED_PAGE_HEIGHT\n          ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT\n          : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n      }\n    });\n\n    const finalSplitPanePosition = isSplitpanelForcedPosition ? 'bottom' : splitPanelPosition;\n\n    const splitPaneAvailableOnTheSide = splitPanelDisplayed && finalSplitPanePosition === 'side';\n    const splitPanelOpenOnTheSide = splitPaneAvailableOnTheSide && splitPanelOpen;\n\n    const toggleButtonsBarWidth = 0;\n\n    const windowWidth = useWindowWidth();\n    const { left: leftOffset, right: rightOffset } = useAppLayoutOffsets(rootRef.current);\n    const contentWidthWithSplitPanel =\n      windowWidth -\n      leftOffset -\n      rightOffset -\n      effectiveToolsWidth -\n      effectiveNavigationWidth -\n      (disableContentPaddings ? 0 : toggleButtonsBarWidth);\n    const isResizeInvalid = isMobile || (defaults.minContentWidth || 0) > contentWidthWithSplitPanel;\n\n    useEffect(() => {\n      const contentWidth = contentWidthWithSplitPanel - splitPanelSize;\n\n      setIsSplitpanelForcedPosition(isMobile || (defaults.minContentWidth || 0) > contentWidth);\n      // This is a workaround to avoid a forced position due to splitPanelSize, which is\n      // user controlled variable.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [contentWidthWithSplitPanel, activeDrawerSize, defaults.minContentWidth, isMobile]);\n\n    const navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;\n    const toolsClosedWidth = toolsHide || isMobile || (!hasDrawers && toolsHide) ? 0 : closedDrawerWidth;\n\n    const contentMaxWidthStyle = !isMobile ? { maxWidth: defaults.maxContentWidth } : undefined;\n\n    const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n    const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = useState(0);\n\n    const getSplitPanelRightOffset = () => {\n      if (isMobile) {\n        return 0;\n      }\n\n      if (hasDrawers) {\n        if (activeDrawer) {\n          if (drawers.length === 1) {\n            return activeDrawerSize;\n          }\n          if (!isResizeInvalid && activeDrawerSize) {\n            return activeDrawerSize + closedDrawerWidth;\n          }\n\n          return toolsWidth + closedDrawerWidth;\n        }\n        return drawers.length > 0 ? closedDrawerWidth : 0;\n      }\n\n      if (!toolsHide && toolsOpen) {\n        return toolsWidth;\n      }\n      return toolsClosedWidth;\n    };\n\n    const splitPanelContextProps: SplitPanelProviderProps = {\n      topOffset: headerHeight + (finalSplitPanePosition === 'bottom' ? stickyNotificationsHeight || 0 : 0),\n      bottomOffset: footerHeight,\n      leftOffset:\n        leftOffset + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),\n      rightOffset: rightOffset + getSplitPanelRightOffset(),\n      position: finalSplitPanePosition,\n      size: splitPanelSize,\n      getMaxWidth: getSplitPanelMaxWidth,\n      getMaxHeight: getSplitPanelMaxHeight,\n      disableContentPaddings,\n      contentWidthStyles: contentMaxWidthStyle,\n      isOpen: splitPanelOpen,\n      isForcedPosition: isSplitpanelForcedPosition,\n      onResize: onSplitPanelSizeSet,\n      onToggle: onSplitPanelToggleHandler,\n      onPreferencesChange: onSplitPanelPreferencesSet,\n      setSplitPanelToggle: setSplitPanelReportedToggle,\n      reportSize: setSplitPanelReportedSize,\n      reportHeaderHeight: setSplitPanelReportedHeaderHeight,\n      refs: splitPanelRefs,\n    };\n    const splitPanelWrapped = splitPanel && (\n      <SplitPanelProvider {...splitPanelContextProps}>\n        {finalSplitPanePosition === 'side' ? (\n          <SideSplitPanelDrawer displayed={splitPanelDisplayed}>{splitPanel}</SideSplitPanelDrawer>\n        ) : (\n          splitPanel\n        )}\n      </SplitPanelProvider>\n    );\n\n    const contentWrapperProps: ContentWrapperProps = {\n      contentType,\n      navigationPadding: navigationHide || !!navigationOpen,\n      contentWidthStyles: !isMobile\n        ? { minWidth: defaults.minContentWidth, maxWidth: defaults.maxContentWidth }\n        : undefined,\n      toolsPadding:\n        // tools padding is displayed in one of the three cases\n        // 1. Nothing on the that screen edge (no tools panel and no split panel)\n        toolsHide ||\n        (hasDrawers && !activeDrawer && (!splitPanelDisplayed || finalSplitPanePosition !== 'side')) ||\n        // 2. Tools panel is present and open\n        toolsVisible ||\n        // 3. Split panel is open in side position\n        splitPanelOpenOnTheSide,\n      isMobile,\n    };\n\n    useImperativeHandle(ref, () => ({\n      openTools: () => onToolsToggle(true),\n      closeNavigationIfNecessary: () => {\n        if (isMobile) {\n          onNavigationToggle(false);\n        }\n      },\n      focusToolsClose: () => focusToolsButtons(true),\n      focusSplitPanel: () => splitPanelRefs.slider.current?.focus(),\n    }));\n\n    const splitPanelBottomOffset =\n      (!splitPanelDisplayed || finalSplitPanePosition !== 'bottom'\n        ? undefined\n        : splitPanelOpen\n        ? splitPanelReportedSize\n        : splitPanelReportedHeaderHeight) ?? undefined;\n\n    const [mobileBarHeight, mobileBarRef] = useContainerQuery(rect => rect.contentBoxHeight);\n\n    return (\n      <div\n        className={clsx(styles.root, testutilStyles.root, disableBodyScroll && styles['root-no-scroll'])}\n        ref={rootRef}\n        style={contentHeightStyle}\n      >\n        {isMobile && (!toolsHide || !navigationHide || breadcrumbs) && (\n          <MobileToolbar\n            anyPanelOpen={anyPanelOpen}\n            toggleRefs={{ navigation: navigationRefs.toggle, tools: toolsRefs.toggle }}\n            topOffset={headerHeight}\n            ariaLabels={ariaLabels}\n            navigationHide={navigationHide}\n            toolsHide={toolsHide}\n            onNavigationOpen={() => onNavigationToggle(true)}\n            onToolsOpen={() => onToolsToggle(true)}\n            unfocusable={anyPanelOpen}\n            mobileBarRef={mobileBarRef}\n            drawers={\n              hasDrawers\n                ? {\n                    items: drawers,\n                    activeDrawerId: activeDrawerId,\n                    onChange: changeDetail => {\n                      onActiveDrawerChange(changeDetail.activeDrawerId);\n                      if (changeDetail.activeDrawerId !== activeDrawerId) {\n                        focusToolsButtons();\n                        focusDrawersButtons();\n                        setDrawerLastInteraction({ type: 'open' });\n                      }\n                    },\n                    ariaLabel: drawersProps.ariaLabel,\n                    overflowAriaLabel: drawersProps.overflowAriaLabel,\n                    overflowWithBadgeAriaLabel: drawersProps.overflowWithBadgeAriaLabel,\n                  }\n                : undefined\n            }\n          >\n            {breadcrumbs}\n          </MobileToolbar>\n        )}\n        <div className={clsx(styles.layout, disableBodyScroll && styles['layout-no-scroll'])}>\n          {!navigationHide && (\n            <Drawer\n              contentClassName={testutilStyles.navigation}\n              toggleClassName={testutilStyles['navigation-toggle']}\n              closeClassName={testutilStyles['navigation-close']}\n              ariaLabels={ariaLabels}\n              bottomOffset={footerHeight}\n              topOffset={headerHeight}\n              isMobile={isMobile}\n              isOpen={navigationOpen}\n              onClick={isMobile ? onNavigationClick : undefined}\n              onToggle={onNavigationToggle}\n              toggleRefs={navigationRefs}\n              type=\"navigation\"\n              width={navigationWidth}\n            >\n              {navigation}\n            </Drawer>\n          )}\n          <main\n            ref={legacyScrollRootRef}\n            className={clsx(styles['layout-main'], {\n              [styles['layout-main-scrollable']]: disableBodyScroll,\n              [testutilStyles['disable-body-scroll-root']]: disableBodyScroll,\n              [styles.unfocusable]: isMobile && anyPanelOpen,\n            })}\n          >\n            <div\n              style={{\n                marginBottom: splitPanelBottomOffset,\n              }}\n            >\n              {notifications && (\n                <Notifications\n                  disableContentPaddings={disableContentPaddings}\n                  testUtilsClassName={testutilStyles.notifications}\n                  labels={ariaLabels}\n                  topOffset={disableBodyScroll ? 0 : headerHeight}\n                  sticky={!isMobile && stickyNotifications}\n                  ref={notificationsRef}\n                >\n                  {notifications}\n                </Notifications>\n              )}\n              {((!isMobile && breadcrumbs) || contentHeader) && (\n                <ContentWrapper {...contentWrapperProps}>\n                  {!isMobile && breadcrumbs && (\n                    <div className={clsx(testutilStyles.breadcrumbs, styles['breadcrumbs-desktop'])}>{breadcrumbs}</div>\n                  )}\n                  {contentHeader && (\n                    <div\n                      className={clsx(\n                        styles['content-header-wrapper'],\n                        !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles['content-extra-top-padding'],\n                        !hasRenderedNotifications && !breadcrumbs && styles['content-header-wrapper-first-child'],\n                        !disableContentHeaderOverlap && styles['content-header-wrapper-overlapped']\n                      )}\n                    >\n                      {contentHeader}\n                    </div>\n                  )}\n                </ContentWrapper>\n              )}\n              <ContentWrapper\n                {...contentWrapperProps}\n                ref={mainContentRef}\n                disablePaddings={disableContentPaddings}\n                // eslint-disable-next-line react/forbid-component-props\n                className={clsx(\n                  !disableContentPaddings && styles['content-wrapper'],\n                  !disableContentPaddings &&\n                    (isMobile || !breadcrumbs) &&\n                    !contentHeader &&\n                    styles['content-extra-top-padding'],\n                  testutilStyles.content,\n                  !disableContentHeaderOverlap && contentHeader && styles['content-overlapped'],\n                  !hasRenderedNotifications &&\n                    !breadcrumbs &&\n                    !isMobile &&\n                    !contentHeader &&\n                    styles['content-wrapper-first-child']\n                )}\n              >\n                <AppLayoutContext.Provider\n                  value={{\n                    stickyOffsetTop:\n                      // We don't support the table header being sticky in case the deprecated disableBodyScroll is enabled,\n                      // therefore we ensure the table header scrolls out of view by offseting a large enough value (9999px)\n                      (disableBodyScroll ? (isMobile ? -9999 : 0) : headerHeight) +\n                      (isMobile ? 0 : stickyNotificationsHeight !== null ? stickyNotificationsHeight : 0),\n                    stickyOffsetBottom: footerHeight + (splitPanelBottomOffset || 0),\n                    mobileBarHeight: mobileBarHeight ?? 0,\n                  }}\n                >\n                  {content}\n                </AppLayoutContext.Provider>\n              </ContentWrapper>\n            </div>\n            {finalSplitPanePosition === 'bottom' && splitPanelWrapped}\n          </main>\n\n          {finalSplitPanePosition === 'side' && splitPanelWrapped}\n\n          {hasDrawers ? (\n            <ResizableDrawer\n              contentClassName={clsx(\n                activeDrawerId && testutilStyles['active-drawer'],\n                activeDrawerId === TOOLS_DRAWER_ID && testutilStyles.tools\n              )}\n              toggleClassName={testutilStyles['tools-toggle']}\n              closeClassName={clsx(\n                testutilStyles['active-drawer-close-button'],\n                activeDrawerId === TOOLS_DRAWER_ID && testutilStyles['tools-close']\n              )}\n              ariaLabels={ariaLabels}\n              width={!isResizeInvalid ? activeDrawerSize : toolsWidth}\n              bottomOffset={footerHeight}\n              topOffset={headerHeight}\n              isMobile={isMobile}\n              onToggle={() => {\n                /*noop in this mode*/\n              }}\n              isOpen={true}\n              toggleRefs={toolsRefs}\n              type=\"tools\"\n              onLoseFocus={loseDrawersFocus}\n              activeDrawer={activeDrawer}\n              drawers={{\n                items: drawers,\n                activeDrawerId: activeDrawerId,\n                onChange: changeDetail => {\n                  focusToolsButtons();\n                  setDrawerLastInteraction({ type: 'close' });\n                  onActiveDrawerChange(changeDetail.activeDrawerId);\n                },\n              }}\n              size={!isResizeInvalid ? activeDrawerSize : toolsWidth}\n              onResize={changeDetail => onActiveDrawerResize(changeDetail)}\n              refs={drawerRefs}\n              getMaxWidth={getDrawerMaxWidth}\n              toolsContent={drawers?.find(drawer => drawer.id === TOOLS_DRAWER_ID)?.content}\n            >\n              {activeDrawer?.content}\n            </ResizableDrawer>\n          ) : (\n            !toolsHide && (\n              <Drawer\n                contentClassName={testutilStyles.tools}\n                toggleClassName={testutilStyles['tools-toggle']}\n                closeClassName={testutilStyles['tools-close']}\n                ariaLabels={ariaLabels}\n                width={effectiveToolsWidth}\n                bottomOffset={footerHeight}\n                topOffset={headerHeight}\n                isMobile={isMobile}\n                onToggle={onToolsToggle}\n                isOpen={toolsOpen}\n                toggleRefs={toolsRefs}\n                type=\"tools\"\n                onLoseFocus={loseToolsFocus}\n              >\n                {tools}\n              </Drawer>\n            )\n          )}\n          {hasDrawers && drawers.length > 0 && (\n            <DrawerTriggersBar\n              bottomOffset={footerHeight}\n              topOffset={headerHeight}\n              isMobile={isMobile}\n              drawers={{\n                items: drawers,\n                activeDrawerId: activeDrawerId,\n                onChange: changeDetail => {\n                  if (activeDrawerId !== changeDetail.activeDrawerId) {\n                    focusToolsButtons();\n                    focusDrawersButtons();\n                    setDrawerLastInteraction({ type: 'open' });\n                  }\n                  onActiveDrawerChange(changeDetail.activeDrawerId);\n                },\n                ariaLabel: drawersProps.ariaLabel,\n                overflowAriaLabel: drawersProps.overflowAriaLabel,\n                overflowWithBadgeAriaLabel: drawersProps.overflowWithBadgeAriaLabel,\n              }}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\napplyDisplayName(AppLayout, 'AppLayout');\nexport default AppLayout;\n"]},"metadata":{},"sourceType":"module"}