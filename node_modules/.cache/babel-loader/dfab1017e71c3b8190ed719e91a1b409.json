{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { SelectionControl, focusMarkers } from './selection';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getColumnKey } from './utils';\nimport { TableHeaderCell } from './header-cell';\nimport { useColumnWidths } from './use-column-widths';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\nimport headerCellStyles from './header-cell/styles.css.js';\nimport ScreenreaderOnly from '../internal/components/screenreader-only';\nimport { getTableHeaderRowRoleProps } from './table-role';\nimport { TableThElement } from './header-cell/th-element';\nimport { findUpUntil } from '@cloudscape-design/component-toolkit/dom';\nconst Thead = React.forwardRef((_ref, outerRef) => {\n  let {\n    containerWidth,\n    selectionType,\n    getSelectAllProps,\n    columnDefinitions,\n    sortingColumn,\n    sortingDisabled,\n    sortingDescending,\n    resizableColumns,\n    variant,\n    wrapLines,\n    onFocusMove,\n    onSortingChange,\n    onResizeFinish,\n    singleSelectionHeaderAriaLabel,\n    stripedRows,\n    sticky = false,\n    hidden = false,\n    stuck = false,\n    stickyState,\n    selectionColumnId,\n    focusedComponent,\n    onFocusedComponentChange,\n    tableRole\n  } = _ref;\n  const isVisualRefresh = useVisualRefresh();\n  const headerCellClass = clsx(headerCellStyles['header-cell'], headerCellStyles[`header-cell-variant-${variant}`], sticky && headerCellStyles['header-cell-sticky'], stuck && headerCellStyles['header-cell-stuck'], stripedRows && headerCellStyles['has-striped-rows'], isVisualRefresh && headerCellStyles['is-visual-refresh']);\n  const selectionCellClass = clsx(styles['selection-control'], styles['selection-control-header'], isVisualRefresh && styles['is-visual-refresh']);\n  const {\n    columnWidths,\n    totalWidth,\n    updateColumn,\n    setCell\n  } = useColumnWidths();\n  return React.createElement(\"thead\", {\n    className: clsx(!hidden && styles['thead-active'])\n  }, React.createElement(\"tr\", Object.assign({}, focusMarkers.all, {\n    ref: outerRef,\n    \"aria-rowindex\": 1\n  }, getTableHeaderRowRoleProps({\n    tableRole\n  }), {\n    onFocus: event => {\n      var _a;\n      const focusControlElement = findUpUntil(event.target, element => !!element.getAttribute('data-focus-id'));\n      const focusId = (_a = focusControlElement === null || focusControlElement === void 0 ? void 0 : focusControlElement.getAttribute('data-focus-id')) !== null && _a !== void 0 ? _a : null;\n      onFocusedComponentChange === null || onFocusedComponentChange === void 0 ? void 0 : onFocusedComponentChange(focusId);\n    },\n    onBlur: () => onFocusedComponentChange === null || onFocusedComponentChange === void 0 ? void 0 : onFocusedComponentChange(null)\n  }), selectionType ? React.createElement(TableThElement, {\n    className: clsx(headerCellClass, selectionCellClass, hidden && headerCellStyles['header-cell-hidden']),\n    hidden: hidden,\n    tableRole: tableRole,\n    colIndex: 0,\n    columnId: selectionColumnId,\n    stickyState: stickyState\n  }, selectionType === 'multi' ? React.createElement(SelectionControl, Object.assign({\n    onFocusDown: event => {\n      onFocusMove(event.target, -1, +1);\n    },\n    focusedComponent: focusedComponent\n  }, getSelectAllProps(), sticky ? {\n    tabIndex: -1\n  } : {})) : React.createElement(ScreenreaderOnly, null, singleSelectionHeaderAriaLabel)) : null, columnDefinitions.map((column, colIndex) => {\n    const columnId = getColumnKey(column, colIndex);\n    let widthOverride;\n    if (resizableColumns) {\n      if (columnWidths) {\n        // use stateful value if available\n        widthOverride = columnWidths[columnId];\n      }\n      if (colIndex === columnDefinitions.length - 1 && containerWidth && containerWidth > totalWidth) {\n        // let the last column grow and fill the container width\n        widthOverride = 'auto';\n      }\n    }\n    return React.createElement(TableHeaderCell, {\n      key: columnId,\n      className: headerCellClass,\n      style: {\n        width: widthOverride || column.width,\n        minWidth: sticky ? undefined : column.minWidth,\n        maxWidth: resizableColumns || sticky ? undefined : column.maxWidth\n      },\n      tabIndex: sticky ? -1 : 0,\n      focusedComponent: focusedComponent,\n      column: column,\n      activeSortingColumn: sortingColumn,\n      sortingDescending: sortingDescending,\n      sortingDisabled: sortingDisabled,\n      wrapLines: wrapLines,\n      hidden: hidden,\n      colIndex: selectionType ? colIndex + 1 : colIndex,\n      columnId: columnId,\n      updateColumn: updateColumn,\n      onResizeFinish: () => onResizeFinish(columnWidths),\n      resizableColumns: resizableColumns,\n      onClick: detail => fireNonCancelableEvent(onSortingChange, detail),\n      isEditable: !!column.editConfig,\n      stickyState: stickyState,\n      cellRef: node => setCell(columnId, node),\n      tableRole: tableRole\n    });\n  })));\n});\nexport default Thead;","map":{"version":3,"mappings":"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","names":["clsx","React","SelectionControl","focusMarkers","fireNonCancelableEvent","getColumnKey","TableHeaderCell","useColumnWidths","useVisualRefresh","styles","headerCellStyles","ScreenreaderOnly","getTableHeaderRowRoleProps","TableThElement","findUpUntil","Thead","forwardRef","outerRef","containerWidth","selectionType","getSelectAllProps","columnDefinitions","sortingColumn","sortingDisabled","sortingDescending","resizableColumns","variant","wrapLines","onFocusMove","onSortingChange","onResizeFinish","singleSelectionHeaderAriaLabel","stripedRows","sticky","hidden","stuck","stickyState","selectionColumnId","focusedComponent","onFocusedComponentChange","tableRole","isVisualRefresh","headerCellClass","selectionCellClass","columnWidths","totalWidth","updateColumn","setCell","className","all","ref","onFocus","event","focusControlElement","target","element","getAttribute","focusId","onBlur","colIndex","columnId","onFocusDown","tabIndex","map","column","widthOverride","length","key","style","width","minWidth","undefined","maxWidth","activeSortingColumn","onClick","detail","isEditable","editConfig","cellRef","node"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/table/lib/default/table/thead.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { TableProps } from './interfaces';\nimport { SelectionControl, focusMarkers, SelectionProps } from './selection';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../internal/events';\nimport { getColumnKey } from './utils';\nimport { TableHeaderCell } from './header-cell';\nimport { useColumnWidths } from './use-column-widths';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\nimport headerCellStyles from './header-cell/styles.css.js';\nimport ScreenreaderOnly from '../internal/components/screenreader-only';\nimport { StickyColumnsModel } from './sticky-columns';\nimport { getTableHeaderRowRoleProps, TableRole } from './table-role';\nimport { TableThElement } from './header-cell/th-element';\nimport { findUpUntil } from '@cloudscape-design/component-toolkit/dom';\n\nexport interface TheadProps {\n  containerWidth: null | number;\n  selectionType: TableProps.SelectionType | undefined;\n  columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>;\n  sortingColumn: TableProps.SortingColumn<any> | undefined;\n  sortingDescending: boolean | undefined;\n  sortingDisabled: boolean | undefined;\n  variant: TableProps.Variant;\n  wrapLines: boolean | undefined;\n  resizableColumns: boolean | undefined;\n  getSelectAllProps: () => SelectionProps;\n  onFocusMove: ((sourceElement: HTMLElement, fromIndex: number, direction: -1 | 1) => void) | undefined;\n  onResizeFinish: (newWidths: Record<string, number>) => void;\n  onSortingChange: NonCancelableEventHandler<TableProps.SortingState<any>> | undefined;\n  sticky?: boolean;\n  hidden?: boolean;\n  stuck?: boolean;\n  singleSelectionHeaderAriaLabel?: string;\n  stripedRows?: boolean;\n  stickyState: StickyColumnsModel;\n  selectionColumnId: PropertyKey;\n  focusedComponent?: null | string;\n  onFocusedComponentChange?: (focusId: null | string) => void;\n  tableRole: TableRole;\n}\n\nconst Thead = React.forwardRef(\n  (\n    {\n      containerWidth,\n      selectionType,\n      getSelectAllProps,\n      columnDefinitions,\n      sortingColumn,\n      sortingDisabled,\n      sortingDescending,\n      resizableColumns,\n      variant,\n      wrapLines,\n      onFocusMove,\n      onSortingChange,\n      onResizeFinish,\n      singleSelectionHeaderAriaLabel,\n      stripedRows,\n      sticky = false,\n      hidden = false,\n      stuck = false,\n      stickyState,\n      selectionColumnId,\n      focusedComponent,\n      onFocusedComponentChange,\n      tableRole,\n    }: TheadProps,\n    outerRef: React.Ref<HTMLTableRowElement>\n  ) => {\n    const isVisualRefresh = useVisualRefresh();\n\n    const headerCellClass = clsx(\n      headerCellStyles['header-cell'],\n      headerCellStyles[`header-cell-variant-${variant}`],\n      sticky && headerCellStyles['header-cell-sticky'],\n      stuck && headerCellStyles['header-cell-stuck'],\n      stripedRows && headerCellStyles['has-striped-rows'],\n      isVisualRefresh && headerCellStyles['is-visual-refresh']\n    );\n\n    const selectionCellClass = clsx(\n      styles['selection-control'],\n      styles['selection-control-header'],\n      isVisualRefresh && styles['is-visual-refresh']\n    );\n\n    const { columnWidths, totalWidth, updateColumn, setCell } = useColumnWidths();\n\n    return (\n      <thead className={clsx(!hidden && styles['thead-active'])}>\n        <tr\n          {...focusMarkers.all}\n          ref={outerRef}\n          aria-rowindex={1}\n          {...getTableHeaderRowRoleProps({ tableRole })}\n          onFocus={event => {\n            const focusControlElement = findUpUntil(event.target, element => !!element.getAttribute('data-focus-id'));\n            const focusId = focusControlElement?.getAttribute('data-focus-id') ?? null;\n            onFocusedComponentChange?.(focusId);\n          }}\n          onBlur={() => onFocusedComponentChange?.(null)}\n        >\n          {selectionType ? (\n            <TableThElement\n              className={clsx(headerCellClass, selectionCellClass, hidden && headerCellStyles['header-cell-hidden'])}\n              hidden={hidden}\n              tableRole={tableRole}\n              colIndex={0}\n              columnId={selectionColumnId}\n              stickyState={stickyState}\n            >\n              {selectionType === 'multi' ? (\n                <SelectionControl\n                  onFocusDown={event => {\n                    onFocusMove!(event.target as HTMLElement, -1, +1);\n                  }}\n                  focusedComponent={focusedComponent}\n                  {...getSelectAllProps()}\n                  {...(sticky ? { tabIndex: -1 } : {})}\n                />\n              ) : (\n                <ScreenreaderOnly>{singleSelectionHeaderAriaLabel}</ScreenreaderOnly>\n              )}\n            </TableThElement>\n          ) : null}\n\n          {columnDefinitions.map((column, colIndex) => {\n            const columnId = getColumnKey(column, colIndex);\n\n            let widthOverride;\n            if (resizableColumns) {\n              if (columnWidths) {\n                // use stateful value if available\n                widthOverride = columnWidths[columnId];\n              }\n              if (colIndex === columnDefinitions.length - 1 && containerWidth && containerWidth > totalWidth) {\n                // let the last column grow and fill the container width\n                widthOverride = 'auto';\n              }\n            }\n            return (\n              <TableHeaderCell\n                key={columnId}\n                className={headerCellClass}\n                style={{\n                  width: widthOverride || column.width,\n                  minWidth: sticky ? undefined : column.minWidth,\n                  maxWidth: resizableColumns || sticky ? undefined : column.maxWidth,\n                }}\n                tabIndex={sticky ? -1 : 0}\n                focusedComponent={focusedComponent}\n                column={column}\n                activeSortingColumn={sortingColumn}\n                sortingDescending={sortingDescending}\n                sortingDisabled={sortingDisabled}\n                wrapLines={wrapLines}\n                hidden={hidden}\n                colIndex={selectionType ? colIndex + 1 : colIndex}\n                columnId={columnId}\n                updateColumn={updateColumn}\n                onResizeFinish={() => onResizeFinish(columnWidths)}\n                resizableColumns={resizableColumns}\n                onClick={detail => fireNonCancelableEvent(onSortingChange, detail)}\n                isEditable={!!column.editConfig}\n                stickyState={stickyState}\n                cellRef={node => setCell(columnId, node)}\n                tableRole={tableRole}\n              />\n            );\n          })}\n        </tr>\n      </thead>\n    );\n  }\n);\n\nexport default Thead;\n"]},"metadata":{},"sourceType":"module"}