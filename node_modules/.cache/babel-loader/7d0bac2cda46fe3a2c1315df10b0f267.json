{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport OptionsList from '../internal/components/options-list';\nimport { scrollElementIntoView } from '../internal/utils/scrollable-containers';\nimport { getBaseProps } from '../internal/base-component';\nimport AutosuggestOption from './autosuggest-option';\nimport styles from './styles.css.js';\nexport const getOptionProps = (index, item, filteredItems, highlightedA11yProps, highlightedOption, hasDropdownStatus) => {\n  const nativeAttributes = item === highlightedOption ? highlightedA11yProps : {};\n  const baseOptionProps = getBaseProps(nativeAttributes);\n  const isLastItem = index === filteredItems.length - 1;\n  const isNotEnteredTextItem = filteredItems.length > 1;\n  const padBottom = !hasDropdownStatus && isNotEnteredTextItem && isLastItem;\n  return Object.assign({\n    nativeAttributes,\n    padBottom\n  }, baseOptionProps);\n};\nconst PlainList = _ref => {\n  let {\n    autosuggestItemsState,\n    handleLoadMore,\n    menuProps,\n    enteredTextLabel,\n    highlightedA11yProps,\n    hasDropdownStatus,\n    highlightText,\n    listBottom,\n    screenReaderContent\n  } = _ref;\n  const listRef = useRef(null);\n  useEffect(() => {\n    var _a;\n    const item = (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`[data-mouse-target=\"${autosuggestItemsState.highlightedIndex}\"]`);\n    if (autosuggestItemsState.highlightType === 'keyboard' && item) {\n      scrollElementIntoView(item);\n    }\n  }, [autosuggestItemsState.highlightType, autosuggestItemsState.highlightedIndex]);\n  return React.createElement(OptionsList, Object.assign({}, menuProps, {\n    onLoadMore: handleLoadMore,\n    open: true,\n    ref: listRef,\n    // to prevent closing the list when clicking the scrollbar on IE11\n    nativeAttributes: {\n      unselectable: 'on'\n    }\n  }), autosuggestItemsState.items.map((item, index) => {\n    const optionProps = getOptionProps(index, item, autosuggestItemsState.items, highlightedA11yProps, autosuggestItemsState.highlightedOption, hasDropdownStatus);\n    return React.createElement(AutosuggestOption, Object.assign({\n      highlightText: highlightText,\n      option: item,\n      highlighted: item === autosuggestItemsState.highlightedOption,\n      current: item.value === highlightText,\n      key: index,\n      \"data-mouse-target\": index,\n      enteredTextLabel: enteredTextLabel,\n      screenReaderContent: screenReaderContent,\n      highlightType: autosuggestItemsState.highlightType\n    }, optionProps));\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n};\nexport default PlainList;","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEhD,OAAOC,WAAiC,MAAM,qCAAqC;AACnF,SAASC,qBAAqB,QAAQ,yCAAyC;AAC/E,SAASC,YAAY,QAAQ,4BAA4B;AAEzD,OAAOC,iBAAiB,MAAM,sBAAsB;AAEpD,OAAOC,MAAM,MAAM,iBAAiB;AAepC,OAAO,MAAMC,cAAc,GAAG,CAC5BC,KAAa,EACbC,IAAqB,EACrBC,aAAyC,EACzCC,oBAAuD,EACvDC,iBAAmC,EACnCC,iBAA2B,KACzB;EACF,MAAMC,gBAAgB,GAAGL,IAAI,KAAKG,iBAAiB,GAAGD,oBAAoB,GAAG,EAAE;EAC/E,MAAMI,eAAe,GAAGX,YAAY,CAACU,gBAAgB,CAAC;EACtD,MAAME,UAAU,GAAGR,KAAK,KAAKE,aAAa,CAACO,MAAM,GAAG,CAAC;EACrD,MAAMC,oBAAoB,GAAGR,aAAa,CAACO,MAAM,GAAG,CAAC;EACrD,MAAME,SAAS,GAAG,CAACN,iBAAiB,IAAIK,oBAAoB,IAAIF,UAAU;EAE1E;IAASF,gBAAgB;IAAEK;EAAS,GAAKJ,eAAe;AAC1D,CAAC;AAED,MAAMK,SAAS,GAAG,QAUF;EAAA,IAVG;IACjBC,qBAAqB;IACrBC,cAAc;IACdC,SAAS;IACTC,gBAAgB;IAChBb,oBAAoB;IACpBE,iBAAiB;IACjBY,aAAa;IACbC,UAAU;IACVC;EAAmB,CACT;EACV,MAAMC,OAAO,GAAG3B,MAAM,CAAmB,IAAI,CAAC;EAC9CD,SAAS,CAAC,MAAK;;IACb,MAAMS,IAAI,GAAG,aAAO,CAACoB,OAAO,0CAAEC,aAAa,CACzC,uBAAuBT,qBAAqB,CAACU,gBAAgB,IAAI,CAClE;IACD,IAAIV,qBAAqB,CAACW,aAAa,KAAK,UAAU,IAAIvB,IAAI,EAAE;MAC9DN,qBAAqB,CAACM,IAAI,CAAC;;EAE/B,CAAC,EAAE,CAACY,qBAAqB,CAACW,aAAa,EAAEX,qBAAqB,CAACU,gBAAgB,CAAC,CAAC;EAEjF,OACEhC,oBAACG,WAAW,oBACNqB,SAAS;IACbU,UAAU,EAAEX,cAAc;IAC1BY,IAAI,EAAE,IAAI;IACVC,GAAG,EAAEP,OAAO;IACZ;IACAd,gBAAgB,EAAE;MAAEsB,YAAY,EAAE;IAAI;EAAE,IAEvCf,qBAAqB,CAACgB,KAAK,CAACC,GAAG,CAAC,CAAC7B,IAAI,EAAED,KAAK,KAAI;IAC/C,MAAM+B,WAAW,GAAGhC,cAAc,CAChCC,KAAK,EACLC,IAAI,EACJY,qBAAqB,CAACgB,KAAK,EAC3B1B,oBAAoB,EACpBU,qBAAqB,CAACT,iBAAiB,EACvCC,iBAAiB,CAClB;IAED,OACEd,oBAACM,iBAAiB;MAChBoB,aAAa,EAAEA,aAAa;MAC5Be,MAAM,EAAE/B,IAAI;MACZgC,WAAW,EAAEhC,IAAI,KAAKY,qBAAqB,CAACT,iBAAiB;MAC7DiB,OAAO,EAAEpB,IAAI,CAACiC,KAAK,KAAKjB,aAAa;MACrCkB,GAAG,EAAEnC,KAAK;MAAA,qBACSA,KAAK;MACxBgB,gBAAgB,EAAEA,gBAAgB;MAClCG,mBAAmB,EAAEA,mBAAmB;MACxCK,aAAa,EAAEX,qBAAqB,CAACW;IAAa,GAC9CO,WAAW,EACf;EAEN,CAAC,CAAC,EACDb,UAAU,GACT3B;IAAI6C,IAAI,EAAC,QAAQ;IAACC,SAAS,EAAEvC,MAAM,CAAC,aAAa;EAAC,GAC/CoB,UAAU,CACR,GACH,IAAI,CACI;AAElB,CAAC;AAED,eAAeN,SAAS","names":["React","useEffect","useRef","OptionsList","scrollElementIntoView","getBaseProps","AutosuggestOption","styles","getOptionProps","index","item","filteredItems","highlightedA11yProps","highlightedOption","hasDropdownStatus","nativeAttributes","baseOptionProps","isLastItem","length","isNotEnteredTextItem","padBottom","PlainList","autosuggestItemsState","handleLoadMore","menuProps","enteredTextLabel","highlightText","listBottom","screenReaderContent","listRef","current","querySelector","highlightedIndex","highlightType","onLoadMore","open","ref","unselectable","items","map","optionProps","option","highlighted","value","key","role","className"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/autosuggest/lib/default/autosuggest/plain-list.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\n\nimport OptionsList, { OptionsListProps } from '../internal/components/options-list';\nimport { scrollElementIntoView } from '../internal/utils/scrollable-containers';\nimport { getBaseProps } from '../internal/base-component';\n\nimport AutosuggestOption from './autosuggest-option';\nimport { AutosuggestProps, AutosuggestItem } from './interfaces';\nimport styles from './styles.css.js';\nimport { AutosuggestItemsState } from './options-controller';\n\nexport interface ListProps {\n  autosuggestItemsState: AutosuggestItemsState;\n  menuProps: Omit<OptionsListProps, 'children'>;\n  handleLoadMore: () => void;\n  enteredTextLabel?: AutosuggestProps.EnteredTextLabel;\n  highlightedA11yProps: Record<string, string | number | boolean>;\n  hasDropdownStatus?: boolean;\n  highlightText: string;\n  listBottom?: React.ReactNode;\n  screenReaderContent?: string;\n}\n\nexport const getOptionProps = (\n  index: number,\n  item: AutosuggestItem,\n  filteredItems: readonly AutosuggestItem[],\n  highlightedA11yProps: ListProps['highlightedA11yProps'],\n  highlightedOption?: AutosuggestItem,\n  hasDropdownStatus?: boolean\n) => {\n  const nativeAttributes = item === highlightedOption ? highlightedA11yProps : {};\n  const baseOptionProps = getBaseProps(nativeAttributes);\n  const isLastItem = index === filteredItems.length - 1;\n  const isNotEnteredTextItem = filteredItems.length > 1;\n  const padBottom = !hasDropdownStatus && isNotEnteredTextItem && isLastItem;\n\n  return { nativeAttributes, padBottom, ...baseOptionProps };\n};\n\nconst PlainList = ({\n  autosuggestItemsState,\n  handleLoadMore,\n  menuProps,\n  enteredTextLabel,\n  highlightedA11yProps,\n  hasDropdownStatus,\n  highlightText,\n  listBottom,\n  screenReaderContent,\n}: ListProps) => {\n  const listRef = useRef<HTMLUListElement>(null);\n  useEffect(() => {\n    const item = listRef.current?.querySelector<HTMLElement>(\n      `[data-mouse-target=\"${autosuggestItemsState.highlightedIndex}\"]`\n    );\n    if (autosuggestItemsState.highlightType === 'keyboard' && item) {\n      scrollElementIntoView(item);\n    }\n  }, [autosuggestItemsState.highlightType, autosuggestItemsState.highlightedIndex]);\n\n  return (\n    <OptionsList\n      {...menuProps}\n      onLoadMore={handleLoadMore}\n      open={true}\n      ref={listRef}\n      // to prevent closing the list when clicking the scrollbar on IE11\n      nativeAttributes={{ unselectable: 'on' }}\n    >\n      {autosuggestItemsState.items.map((item, index) => {\n        const optionProps = getOptionProps(\n          index,\n          item,\n          autosuggestItemsState.items,\n          highlightedA11yProps,\n          autosuggestItemsState.highlightedOption,\n          hasDropdownStatus\n        );\n\n        return (\n          <AutosuggestOption\n            highlightText={highlightText}\n            option={item}\n            highlighted={item === autosuggestItemsState.highlightedOption}\n            current={item.value === highlightText}\n            key={index}\n            data-mouse-target={index}\n            enteredTextLabel={enteredTextLabel}\n            screenReaderContent={screenReaderContent}\n            highlightType={autosuggestItemsState.highlightType}\n            {...optionProps}\n          />\n        );\n      })}\n      {listBottom ? (\n        <li role=\"option\" className={styles['list-bottom']}>\n          {listBottom}\n        </li>\n      ) : null}\n    </OptionsList>\n  );\n};\n\nexport default PlainList;\n"]},"metadata":{},"sourceType":"module"}