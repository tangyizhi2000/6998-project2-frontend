{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport styles from './styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nvar isOdd = function isOdd(value) {\n  return value % 2 !== 0;\n};\nexport function calculcateCssColumnCount(columns, minColumnWidth, containerWidth) {\n  if (!containerWidth) {\n    return columns;\n  }\n  // First, calculate how many columns we can have based on the current container width and minColumnWidth.\n  var targetColumnCount = Math.min(columns, Math.floor(containerWidth / minColumnWidth));\n  // When we start wrapping into fewer columns than desired, we want to keep the number of columns even.\n  return Math.max(1, targetColumnCount < columns && isOdd(targetColumnCount) ? targetColumnCount - 1 : targetColumnCount);\n}\nexport default function FlexibleColumnLayout(_ref) {\n  var _ref$columns = _ref.columns,\n    columns = _ref$columns === void 0 ? 1 : _ref$columns,\n    _ref$minColumnWidth = _ref.minColumnWidth,\n    minColumnWidth = _ref$minColumnWidth === void 0 ? 0 : _ref$minColumnWidth,\n    disableGutters = _ref.disableGutters,\n    variant = _ref.variant,\n    children = _ref.children;\n  var _useContainerQuery = useContainerQuery(function (rect) {\n      return rect.contentBoxWidth;\n    }),\n    _useContainerQuery2 = _slicedToArray(_useContainerQuery, 2),\n    containerWidth = _useContainerQuery2[0],\n    containerRef = _useContainerQuery2[1];\n  var columnCount = calculcateCssColumnCount(columns, minColumnWidth, containerWidth);\n  var shouldDisableGutters = variant !== 'text-grid' && disableGutters;\n  // Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n  var flattenedChildren = flattenChildren(children);\n  return React.createElement(\"div\", {\n    ref: containerRef,\n    className: clsx(styles['css-grid'], styles[\"grid-variant-\".concat(variant)], shouldDisableGutters && [styles['grid-no-gutters']]),\n    style: {\n      gridTemplateColumns: \"repeat(\".concat(columnCount, \", 1fr)\")\n    }\n  }, flattenedChildren.map(function (child, i) {\n    // If this react child is a primitive value, the key will be undefined\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var key = child.key;\n    return React.createElement(\"div\", {\n      key: key,\n      className: clsx(styles.item, _defineProperty({}, styles['first-column'], i % columnCount === 0))\n    }, child);\n  }));\n}","map":{"version":3,"mappings":";;AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,eAAe,MAAM,8BAA8B;AAE1D,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,iBAAiB,QAAQ,sCAAsC;AAExE,IAAMC,KAAK,GAAG,SAARA,KAAK,CAAIC,KAAa;EAAA,OAAcA,KAAK,GAAG,CAAC,KAAK,CAAC;AAAA;AAEzD,OAAM,SAAUC,wBAAwB,CACtCC,OAAe,EACfC,cAAsB,EACtBC,cAA6B;EAE7B,IAAI,CAACA,cAAc,EAAE;IACnB,OAAOF,OAAO;;EAGhB;EACA,IAAMG,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAACL,OAAO,EAAEI,IAAI,CAACE,KAAK,CAACJ,cAAc,GAAGD,cAAc,CAAC,CAAC;EAExF;EACA,OAAOG,IAAI,CAACG,GAAG,CACb,CAAC,EACDJ,iBAAiB,GAAGH,OAAO,IAAIH,KAAK,CAACM,iBAAiB,CAAC,GAAGA,iBAAiB,GAAG,CAAC,GAAGA,iBAAiB,CACpG;AACH;AAOA,eAAc,SAAUK,oBAAoB,OAMhB;EAAA,wBAL1BR,OAAO;IAAPA,OAAO,6BAAG,CAAC;IAAA,2BACXC,cAAc;IAAdA,cAAc,oCAAG,CAAC;IAClBQ,cAAc,QAAdA,cAAc;IACdC,OAAO,QAAPA,OAAO;IACPC,QAAQ,QAARA,QAAQ;EAER,yBAAuCf,iBAAiB,CAAC,cAAI;MAAA,OAAIgB,IAAI,CAACC,eAAe;IAAA,EAAC;IAAA;IAA/EX,cAAc;IAAEY,YAAY;EAEnC,IAAMC,WAAW,GAAGhB,wBAAwB,CAACC,OAAO,EAAEC,cAAc,EAAEC,cAAc,CAAC;EACrF,IAAMc,oBAAoB,GAAGN,OAAO,KAAK,WAAW,IAAID,cAAc;EAEtE;EACA,IAAMQ,iBAAiB,GAAGvB,eAAe,CAACiB,QAAQ,CAAC;EAEnD,OACEnB;IACE0B,GAAG,EAAEJ,YAAY;IACjBK,SAAS,EAAE1B,IAAI,CACbE,MAAM,CAAC,UAAU,CAAC,EAClBA,MAAM,wBAAiBe,OAAO,EAAG,EACjCM,oBAAoB,IAAI,CAACrB,MAAM,CAAC,iBAAiB,CAAC,CAAC,CACpD;IACDyB,KAAK,EAAE;MAAEC,mBAAmB,mBAAYN,WAAW;IAAQ;EAAE,GAE5DE,iBAAiB,CAACK,GAAG,CAAC,UAACC,KAAK,EAAEC,CAAC,EAAI;IAClC;IACA;IACA,IAAMC,GAAG,GAAIF,KAAa,CAACE,GAAG;IAE9B,OACEjC;MACEiC,GAAG,EAAEA,GAAG;MACRN,SAAS,EAAE1B,IAAI,CAACE,MAAM,CAAC+B,IAAI,sBACxB/B,MAAM,CAAC,cAAc,CAAC,EAAG6B,CAAC,GAAGT,WAAW,KAAK,CAAC;IAC/C,GAEDQ,KAAK,CACF;EAEV,CAAC,CAAC,CACE;AAEV","names":["React","clsx","flattenChildren","styles","useContainerQuery","isOdd","value","calculcateCssColumnCount","columns","minColumnWidth","containerWidth","targetColumnCount","Math","min","floor","max","FlexibleColumnLayout","disableGutters","variant","children","rect","contentBoxWidth","containerRef","columnCount","shouldDisableGutters","flattenedChildren","ref","className","style","gridTemplateColumns","map","child","i","key","item"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/lib/default/column-layout/flexible-column-layout/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { InternalColumnLayoutProps } from '../interfaces';\nimport styles from './styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nconst isOdd = (value: number): boolean => value % 2 !== 0;\n\nexport function calculcateCssColumnCount(\n  columns: number,\n  minColumnWidth: number,\n  containerWidth: number | null\n): number {\n  if (!containerWidth) {\n    return columns;\n  }\n\n  // First, calculate how many columns we can have based on the current container width and minColumnWidth.\n  const targetColumnCount = Math.min(columns, Math.floor(containerWidth / minColumnWidth));\n\n  // When we start wrapping into fewer columns than desired, we want to keep the number of columns even.\n  return Math.max(\n    1,\n    targetColumnCount < columns && isOdd(targetColumnCount) ? targetColumnCount - 1 : targetColumnCount\n  );\n}\n\ninterface FlexibleColumnLayoutProps\n  extends Pick<InternalColumnLayoutProps, 'minColumnWidth' | 'columns' | 'variant' | 'borders' | 'disableGutters'> {\n  children: React.ReactNode;\n}\n\nexport default function FlexibleColumnLayout({\n  columns = 1,\n  minColumnWidth = 0,\n  disableGutters,\n  variant,\n  children,\n}: FlexibleColumnLayoutProps) {\n  const [containerWidth, containerRef] = useContainerQuery(rect => rect.contentBoxWidth);\n\n  const columnCount = calculcateCssColumnCount(columns, minColumnWidth, containerWidth);\n  const shouldDisableGutters = variant !== 'text-grid' && disableGutters;\n\n  // Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n  const flattenedChildren = flattenChildren(children);\n\n  return (\n    <div\n      ref={containerRef}\n      className={clsx(\n        styles['css-grid'],\n        styles[`grid-variant-${variant}`],\n        shouldDisableGutters && [styles['grid-no-gutters']]\n      )}\n      style={{ gridTemplateColumns: `repeat(${columnCount}, 1fr)` }}\n    >\n      {flattenedChildren.map((child, i) => {\n        // If this react child is a primitive value, the key will be undefined\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const key = (child as any).key;\n\n        return (\n          <div\n            key={key}\n            className={clsx(styles.item, {\n              [styles['first-column']]: i % columnCount === 0,\n            })}\n          >\n            {child}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}