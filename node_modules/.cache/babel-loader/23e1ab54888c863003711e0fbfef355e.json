{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from 'react';\n/**\n * Ponyfill for Array.prototype.findIndex.\n */\nexport function findIndex(array, condition) {\n  for (let i = 0; i < array.length; i++) {\n    if (condition(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction makeMemoizedArray(prev, next, isEqual) {\n  for (let i = 0; i < Math.max(prev.length, next.length); i++) {\n    // The next array is shorter, but all the items match.\n    if (i === next.length) {\n      return prev.slice(0, i);\n    }\n    // The prev array is shorter, but all the items so far match.\n    if (i === prev.length) {\n      return [...prev.slice(0, i), ...next.slice(i)];\n    }\n    // The item is not equal. Partition at this point.\n    if (!isEqual(prev[i], next[i])) {\n      return [...prev.slice(0, i), next[i], ...makeMemoizedArray(prev.slice(i + 1), next.slice(i + 1), isEqual)];\n    }\n  }\n  // All the references match. Return the old array.\n  return prev;\n}\nexport function useMemoizedArray(array, isEqual) {\n  const ref = useRef(array);\n  const updated = makeMemoizedArray(ref.current, array, isEqual);\n  useEffect(() => {\n    ref.current = updated;\n  }, [updated]);\n  return updated;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC;;;AAGA,OAAM,SAAUC,SAAS,CAAIC,KAAuB,EAAEC,SAA4B;EAChF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAID,SAAS,CAACD,KAAK,CAACE,CAAC,CAAC,CAAC,EAAE;MACvB,OAAOA,CAAC;;;EAGZ,OAAO,CAAC,CAAC;AACX;AAEA,SAASE,iBAAiB,CACxBC,IAAsB,EACtBC,IAAsB,EACtBC,OAAsC;EAEtC,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,IAAI,CAACC,GAAG,CAACJ,IAAI,CAACF,MAAM,EAAEG,IAAI,CAACH,MAAM,CAAC,EAAED,CAAC,EAAE,EAAE;IAC3D;IACA,IAAIA,CAAC,KAAKI,IAAI,CAACH,MAAM,EAAE;MACrB,OAAOE,IAAI,CAACK,KAAK,CAAC,CAAC,EAAER,CAAC,CAAC;;IAEzB;IACA,IAAIA,CAAC,KAAKG,IAAI,CAACF,MAAM,EAAE;MACrB,OAAO,CAAC,GAAGE,IAAI,CAACK,KAAK,CAAC,CAAC,EAAER,CAAC,CAAC,EAAE,GAAGI,IAAI,CAACI,KAAK,CAACR,CAAC,CAAC,CAAC;;IAEhD;IACA,IAAI,CAACK,OAAO,CAACF,IAAI,CAACH,CAAC,CAAC,EAAEI,IAAI,CAACJ,CAAC,CAAC,CAAC,EAAE;MAC9B,OAAO,CAAC,GAAGG,IAAI,CAACK,KAAK,CAAC,CAAC,EAAER,CAAC,CAAC,EAAEI,IAAI,CAACJ,CAAC,CAAC,EAAE,GAAGE,iBAAiB,CAACC,IAAI,CAACK,KAAK,CAACR,CAAC,GAAG,CAAC,CAAC,EAAEI,IAAI,CAACI,KAAK,CAACR,CAAC,GAAG,CAAC,CAAC,EAAEK,OAAO,CAAC,CAAC;;;EAI9G;EACA,OAAOF,IAAI;AACb;AAEA,OAAM,SAAUM,gBAAgB,CAAIX,KAAuB,EAAEO,OAAsC;EACjG,MAAMK,GAAG,GAAGd,MAAM,CAAmBE,KAAK,CAAC;EAC3C,MAAMa,OAAO,GAAGT,iBAAiB,CAACQ,GAAG,CAACE,OAAO,EAAEd,KAAK,EAAEO,OAAO,CAAC;EAC9DV,SAAS,CAAC,MAAK;IACbe,GAAG,CAACE,OAAO,GAAGD,OAAO;EACvB,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EACb,OAAOA,OAAO;AAChB","names":["useEffect","useRef","findIndex","array","condition","i","length","makeMemoizedArray","prev","next","isEqual","Math","max","slice","useMemoizedArray","ref","updated","current"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/tag-editor/lib/default/tag-editor/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from 'react';\n\n/**\n * Ponyfill for Array.prototype.findIndex.\n */\nexport function findIndex<T>(array: ReadonlyArray<T>, condition: (t: T) => unknown): number {\n  for (let i = 0; i < array.length; i++) {\n    if (condition(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction makeMemoizedArray<T>(\n  prev: ReadonlyArray<T>,\n  next: ReadonlyArray<T>,\n  isEqual: (prev: T, next: T) => boolean\n): ReadonlyArray<T> {\n  for (let i = 0; i < Math.max(prev.length, next.length); i++) {\n    // The next array is shorter, but all the items match.\n    if (i === next.length) {\n      return prev.slice(0, i);\n    }\n    // The prev array is shorter, but all the items so far match.\n    if (i === prev.length) {\n      return [...prev.slice(0, i), ...next.slice(i)];\n    }\n    // The item is not equal. Partition at this point.\n    if (!isEqual(prev[i], next[i])) {\n      return [...prev.slice(0, i), next[i], ...makeMemoizedArray(prev.slice(i + 1), next.slice(i + 1), isEqual)];\n    }\n  }\n\n  // All the references match. Return the old array.\n  return prev;\n}\n\nexport function useMemoizedArray<T>(array: ReadonlyArray<T>, isEqual: (prev: T, next: T) => boolean): ReadonlyArray<T> {\n  const ref = useRef<ReadonlyArray<T>>(array);\n  const updated = makeMemoizedArray(ref.current, array, isEqual);\n  useEffect(() => {\n    ref.current = updated;\n  }, [updated]);\n  return updated;\n}\n"]},"metadata":{},"sourceType":"module"}