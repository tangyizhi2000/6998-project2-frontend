{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport styles from './styles.css.js';\nexport default forwardRef(ApplicationController);\nfunction ApplicationController(_ref, ref) {\n  var activeElementKey = _ref.activeElementKey,\n    activeElementRef = _ref.activeElementRef,\n    onFocus = _ref.onFocus,\n    onBlur = _ref.onBlur,\n    onKeyDown = _ref.onKeyDown;\n  var containerRef = useRef(null);\n  var applicationRef = useRef(null);\n  var focusTransitionRef = useRef(false);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFocused = _useState2[0],\n    setFocused = _useState2[1];\n  // Calls provided onFocus handler when the application obtains focus, ignoring internal focus juggling.\n  var onApplicationFocus = useCallback(function (event) {\n    if (focusTransitionRef.current === false) {\n      setFocused(true);\n      onFocus && onFocus(event);\n    } else {\n      focusTransitionRef.current = false;\n    }\n  }, [onFocus]);\n  // Calls provided onBlur handler when the application loses focus, ignoring internal focus juggling.\n  var onApplicationBlur = useCallback(function (event) {\n    if (focusTransitionRef.current === false) {\n      setFocused(false);\n      onBlur && onBlur(event);\n      // The application controller can only be focused programmatically.\n      muteApplication(applicationRef.current);\n    }\n  }, [onBlur]);\n  var onApplicationKeyDown = onKeyDown;\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        return focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null);\n      }\n    };\n  }, [activeElementRef]);\n  // Re-attaches and re-focuses the application for screen readers to treat it as an update.\n  useEffect(function () {\n    // Skip if not focused or if the transition is already happening.\n    if (!isFocused || focusTransitionRef.current === true) {\n      return;\n    }\n    // Delay focus juggle to let the last focus event settle in Firefox.\n    // Without the delay the focus is getting lost.\n    var timeoutId = setTimeout(function () {\n      focusTransitionRef.current = true;\n      containerRef.current.removeChild(applicationRef.current);\n      containerRef.current.appendChild(applicationRef.current);\n      focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null);\n    }, 0);\n    return function () {\n      return clearTimeout(timeoutId);\n    };\n  }, [isFocused, activeElementKey, activeElementRef]);\n  return React.createElement(\"g\", {\n    ref: containerRef\n  }, React.createElement(\"g\", {\n    tabIndex: -1,\n    ref: applicationRef,\n    onFocus: onApplicationFocus,\n    onBlur: onApplicationBlur,\n    onKeyDown: onApplicationKeyDown,\n    className: styles.application\n  }));\n}\n// Focuses application but before copies aria-attributes from the target.\nfunction focusApplication(app, target) {\n  // Remove prev attributes.\n  var _iterator = _createForOfIteratorHelper(getAttributeNames(app)),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _attributeName = _step.value;\n      if (_attributeName === 'role' || _attributeName.slice(0, 4) === 'aria') {\n        app.removeAttribute(_attributeName);\n      }\n    }\n    // Copy new attributes.\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (target) {\n    var _iterator2 = _createForOfIteratorHelper(getAttributeNames(target)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var attributeName = _step2.value;\n        if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n          var attributeValue = target.getAttribute(attributeName);\n          attributeValue && app.setAttribute(attributeName, attributeValue);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  // Make app focusable.\n  app.tabIndex = 0;\n  app.setAttribute('focusable', 'true');\n  app.setAttribute('aria-hidden', 'false');\n  // Focus app.\n  app.focus({\n    preventScroll: true\n  });\n}\n// The application is to be only focused programmatically.\nfunction muteApplication(app) {\n  // Remove prev attributes.\n  var _iterator3 = _createForOfIteratorHelper(getAttributeNames(app)),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var attributeName = _step3.value;\n      if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n        app.removeAttribute(attributeName);\n      }\n    }\n    // Make app non-focusable.\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  app.tabIndex = -1;\n  app.setAttribute('focusable', 'false');\n  app.setAttribute('aria-hidden', 'true');\n}\n// Polyfill for element.getAttributeNames(), IE11\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames#polyfill\nfunction getAttributeNames(element) {\n  var attributes = element.attributes;\n  var result = new Array(attributes.length);\n  for (var i = 0; i < attributes.length; i++) {\n    result[i] = attributes[i].name;\n  }\n  return result;\n}","map":{"version":3,"mappings":"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","names":["React","forwardRef","useCallback","useEffect","useImperativeHandle","useRef","useState","styles","ApplicationController","ref","activeElementKey","activeElementRef","onFocus","onBlur","onKeyDown","containerRef","applicationRef","focusTransitionRef","isFocused","setFocused","onApplicationFocus","event","current","onApplicationBlur","muteApplication","onApplicationKeyDown","focus","focusApplication","timeoutId","setTimeout","removeChild","appendChild","clearTimeout","tabIndex","className","application","app","target","getAttributeNames","attributeName","slice","removeAttribute","attributeValue","getAttribute","setAttribute","preventScroll","element","attributes","result","Array","length","i","name"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/components/chart-plot/lib/default/internal/components/chart-plot/application-controller.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport styles from './styles.css.js';\n\nexport interface ApplicationRef {\n  focus(): void;\n}\n\nexport interface ApplicationControllerProps {\n  activeElementKey: null | string | number | boolean;\n  activeElementRef?: React.RefObject<SVGGElement>;\n  onFocus?: (event: React.FocusEvent<SVGGElement>) => void;\n  onBlur?: (event: React.FocusEvent<SVGGElement>) => void;\n  onKeyDown?: (event: React.KeyboardEvent<SVGGElement>) => void;\n}\n\nexport default forwardRef(ApplicationController);\n\nfunction ApplicationController(\n  { activeElementKey, activeElementRef, onFocus, onBlur, onKeyDown }: ApplicationControllerProps,\n  ref: React.Ref<ApplicationRef>\n) {\n  const containerRef = useRef<SVGGElement>(null);\n  const applicationRef = useRef<SVGGElement>(null);\n  const focusTransitionRef = useRef(false);\n  const [isFocused, setFocused] = useState(false);\n\n  // Calls provided onFocus handler when the application obtains focus, ignoring internal focus juggling.\n  const onApplicationFocus = useCallback(\n    (event: React.FocusEvent<SVGGElement>) => {\n      if (focusTransitionRef.current === false) {\n        setFocused(true);\n        onFocus && onFocus(event);\n      } else {\n        focusTransitionRef.current = false;\n      }\n    },\n    [onFocus]\n  );\n  // Calls provided onBlur handler when the application loses focus, ignoring internal focus juggling.\n  const onApplicationBlur = useCallback(\n    (event: React.FocusEvent<SVGGElement>) => {\n      if (focusTransitionRef.current === false) {\n        setFocused(false);\n        onBlur && onBlur(event);\n        // The application controller can only be focused programmatically.\n        muteApplication(applicationRef.current!);\n      }\n    },\n    [onBlur]\n  );\n  const onApplicationKeyDown = onKeyDown;\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: () => focusApplication(applicationRef.current!, activeElementRef?.current || null),\n    }),\n    [activeElementRef]\n  );\n\n  // Re-attaches and re-focuses the application for screen readers to treat it as an update.\n  useEffect(() => {\n    // Skip if not focused or if the transition is already happening.\n    if (!isFocused || focusTransitionRef.current === true) {\n      return;\n    }\n\n    // Delay focus juggle to let the last focus event settle in Firefox.\n    // Without the delay the focus is getting lost.\n    const timeoutId = setTimeout(() => {\n      focusTransitionRef.current = true;\n      containerRef.current!.removeChild(applicationRef.current!);\n      containerRef.current!.appendChild(applicationRef.current!);\n      focusApplication(applicationRef.current!, activeElementRef?.current || null);\n    }, 0);\n\n    return () => clearTimeout(timeoutId);\n  }, [isFocused, activeElementKey, activeElementRef]);\n\n  return (\n    <g ref={containerRef}>\n      <g\n        tabIndex={-1}\n        ref={applicationRef}\n        onFocus={onApplicationFocus}\n        onBlur={onApplicationBlur}\n        onKeyDown={onApplicationKeyDown}\n        className={styles.application}\n      ></g>\n    </g>\n  );\n}\n\n// Focuses application but before copies aria-attributes from the target.\nfunction focusApplication(app: SVGGElement, target: null | SVGGElement) {\n  // Remove prev attributes.\n  for (const attributeName of getAttributeNames(app)) {\n    if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n      app.removeAttribute(attributeName);\n    }\n  }\n\n  // Copy new attributes.\n  if (target) {\n    for (const attributeName of getAttributeNames(target)) {\n      if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n        const attributeValue = target.getAttribute(attributeName);\n        attributeValue && app.setAttribute(attributeName, attributeValue);\n      }\n    }\n  }\n\n  // Make app focusable.\n  app.tabIndex = 0;\n  app.setAttribute('focusable', 'true');\n  app.setAttribute('aria-hidden', 'false');\n\n  // Focus app.\n  app.focus({ preventScroll: true });\n}\n\n// The application is to be only focused programmatically.\nfunction muteApplication(app: SVGGElement) {\n  // Remove prev attributes.\n  for (const attributeName of getAttributeNames(app)) {\n    if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n      app.removeAttribute(attributeName);\n    }\n  }\n\n  // Make app non-focusable.\n  app.tabIndex = -1;\n  app.setAttribute('focusable', 'false');\n  app.setAttribute('aria-hidden', 'true');\n}\n\n// Polyfill for element.getAttributeNames(), IE11\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames#polyfill\nfunction getAttributeNames(element: Element) {\n  const attributes = element.attributes;\n  const result = new Array(attributes.length);\n  for (let i = 0; i < attributes.length; i++) {\n    result[i] = attributes[i].name;\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}