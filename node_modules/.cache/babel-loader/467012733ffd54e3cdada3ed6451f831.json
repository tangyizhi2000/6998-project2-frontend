{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport AbstractSwitch from '../internal/components/abstract-switch';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport styles from './styles.css.js';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nvar InternalToggle = React.forwardRef(function (_a, ref) {\n  var _clsx, _clsx2;\n  var controlId = _a.controlId,\n    checked = _a.checked,\n    name = _a.name,\n    disabled = _a.disabled,\n    children = _a.children,\n    description = _a.description,\n    ariaLabel = _a.ariaLabel,\n    ariaControls = _a.ariaControls,\n    _onFocus = _a.onFocus,\n    _onBlur = _a.onBlur,\n    onChange = _a.onChange,\n    _a$__internalRootRef = _a.__internalRootRef,\n    __internalRootRef = _a$__internalRootRef === void 0 ? null : _a$__internalRootRef,\n    rest = __rest(_a, [\"controlId\", \"checked\", \"name\", \"disabled\", \"children\", \"description\", \"ariaLabel\", \"ariaControls\", \"onFocus\", \"onBlur\", \"onChange\", \"__internalRootRef\"]);\n  var _useFormFieldContext = useFormFieldContext(rest),\n    ariaDescribedby = _useFormFieldContext.ariaDescribedby,\n    ariaLabelledby = _useFormFieldContext.ariaLabelledby;\n  var baseProps = getBaseProps(rest);\n  var checkboxRef = useRef(null);\n  useForwardFocus(ref, checkboxRef);\n  return React.createElement(AbstractSwitch, Object.assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    controlClassName: clsx(styles['toggle-control'], (_clsx = {}, _defineProperty(_clsx, styles['toggle-control-checked'], checked), _defineProperty(_clsx, styles['toggle-control-disabled'], disabled), _clsx)),\n    outlineClassName: styles.outline,\n    controlId: controlId,\n    disabled: disabled,\n    label: children,\n    description: description,\n    descriptionBottomPadding: true,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescribedby: ariaDescribedby,\n    ariaControls: ariaControls,\n    nativeControl: function nativeControl(nativeControlProps) {\n      return React.createElement(\"input\", Object.assign({}, nativeControlProps, {\n        ref: checkboxRef,\n        type: \"checkbox\",\n        checked: checked,\n        name: name,\n        onFocus: function onFocus() {\n          return fireNonCancelableEvent(_onFocus);\n        },\n        onBlur: function onBlur() {\n          return fireNonCancelableEvent(_onBlur);\n        },\n        // empty handler to suppress React controllability warning\n        onChange: function onChange() {}\n      }));\n    },\n    onClick: function onClick() {\n      var _a;\n      (_a = checkboxRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      fireNonCancelableEvent(onChange, {\n        checked: !checked\n      });\n    },\n    styledControl: /*Using span, not div for HTML validity*/\n    React.createElement(\"span\", {\n      className: clsx(styles['toggle-handle'], (_clsx2 = {}, _defineProperty(_clsx2, styles['toggle-handle-checked'], checked), _defineProperty(_clsx2, styles['toggle-handle-disabled'], disabled), _clsx2))\n    }),\n    __internalRootRef: __internalRootRef\n  }));\n});\nexport default InternalToggle;","map":{"version":3,"mappings":"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","names":["clsx","React","useRef","AbstractSwitch","useForwardFocus","fireNonCancelableEvent","getBaseProps","styles","useFormFieldContext","InternalToggle","forwardRef","_a","ref","controlId","checked","name","disabled","children","description","ariaLabel","ariaControls","onFocus","onBlur","onChange","__internalRootRef","rest","ariaDescribedby","ariaLabelledby","baseProps","checkboxRef","className","root","controlClassName","outlineClassName","outline","label","descriptionBottomPadding","nativeControl","nativeControlProps","type","onClick","current","focus","styledControl"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/toggle/lib/default/toggle/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport AbstractSwitch from '../internal/components/abstract-switch';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport styles from './styles.css.js';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { ToggleProps } from './interfaces';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\n\ntype InternalToggleProps = ToggleProps & InternalBaseComponentProps;\n\nconst InternalToggle = React.forwardRef<ToggleProps.Ref, InternalToggleProps>(\n  (\n    {\n      controlId,\n      checked,\n      name,\n      disabled,\n      children,\n      description,\n      ariaLabel,\n      ariaControls,\n      onFocus,\n      onBlur,\n      onChange,\n      __internalRootRef = null,\n      ...rest\n    },\n    ref\n  ) => {\n    const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);\n    const baseProps = getBaseProps(rest);\n    const checkboxRef = useRef<HTMLInputElement>(null);\n    useForwardFocus(ref, checkboxRef);\n\n    return (\n      <AbstractSwitch\n        {...baseProps}\n        className={clsx(styles.root, baseProps.className)}\n        controlClassName={clsx(styles['toggle-control'], {\n          [styles['toggle-control-checked']]: checked,\n          [styles['toggle-control-disabled']]: disabled,\n        })}\n        outlineClassName={styles.outline}\n        controlId={controlId}\n        disabled={disabled}\n        label={children}\n        description={description}\n        descriptionBottomPadding={true}\n        ariaLabel={ariaLabel}\n        ariaLabelledby={ariaLabelledby}\n        ariaDescribedby={ariaDescribedby}\n        ariaControls={ariaControls}\n        nativeControl={nativeControlProps => (\n          <input\n            {...nativeControlProps}\n            ref={checkboxRef}\n            type=\"checkbox\"\n            checked={checked}\n            name={name}\n            onFocus={() => fireNonCancelableEvent(onFocus)}\n            onBlur={() => fireNonCancelableEvent(onBlur)}\n            // empty handler to suppress React controllability warning\n            onChange={() => {}}\n          />\n        )}\n        onClick={() => {\n          checkboxRef.current?.focus();\n          fireNonCancelableEvent(onChange, { checked: !checked });\n        }}\n        styledControl={\n          /*Using span, not div for HTML validity*/\n          <span\n            className={clsx(styles['toggle-handle'], {\n              [styles['toggle-handle-checked']]: checked,\n              [styles['toggle-handle-disabled']]: disabled,\n            })}\n          />\n        }\n        __internalRootRef={__internalRootRef}\n      />\n    );\n  }\n);\n\nexport default InternalToggle;\n"]},"metadata":{},"sourceType":"module"}