{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport styles from './styles.css.js';\nimport clsx from 'clsx';\nvar splitOnFiltering = function splitOnFiltering(str, highlightText) {\n  // Filtering needs to be case insensitive\n  var filteringPattern = highlightText.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n  var regexp = new RegExp(filteringPattern, 'gi');\n  var noMatches = str.split(regexp);\n  var matches = str.match(regexp);\n  return {\n    noMatches: noMatches,\n    matches: matches\n  };\n};\nvar Highlight = function Highlight(_ref) {\n  var str = _ref.str;\n  return str ? React.createElement(\"span\", {\n    className: clsx(styles['filtering-match-highlight'])\n  }, str) : null;\n};\nexport default function HighlightMatch(_ref2) {\n  var str = _ref2.str,\n    highlightText = _ref2.highlightText;\n  if (!str || !highlightText) {\n    return React.createElement(\"span\", null, str);\n  }\n  if (str === highlightText) {\n    return React.createElement(Highlight, {\n      str: str\n    });\n  }\n  var _splitOnFiltering = splitOnFiltering(str, highlightText),\n    noMatches = _splitOnFiltering.noMatches,\n    matches = _splitOnFiltering.matches;\n  var highlighted = [];\n  noMatches.forEach(function (noMatch, idx) {\n    highlighted.push(React.createElement(\"span\", {\n      key: \"noMatch-\".concat(idx)\n    }, noMatch));\n    if (matches && idx < matches.length) {\n      highlighted.push(React.createElement(Highlight, {\n        key: \"match-\".concat(idx),\n        str: matches[idx]\n      }));\n    }\n  });\n  return React.createElement(\"span\", null, highlighted);\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,IAAI,MAAM,MAAM;AAEvB,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,GAAW,EAAEC,aAAqB,EAAI;EAC9D;EACA,IAAMC,gBAAgB,GAAGD,aAAa,CAACE,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC;EAC/E,IAAMC,MAAM,GAAG,IAAIC,MAAM,CAACH,gBAAgB,EAAE,IAAI,CAAC;EACjD,IAAMI,SAAS,GAAGN,GAAG,CAACO,KAAK,CAACH,MAAM,CAAC;EACnC,IAAMI,OAAO,GAAGR,GAAG,CAACS,KAAK,CAACL,MAAM,CAAC;EAEjC,OAAO;IAAEE,SAAS,EAATA,SAAS;IAAEE,OAAO,EAAPA;EAAO,CAAE;AAC/B,CAAC;AAOD,IAAME,SAAS,GAAG,SAAZA,SAAS;EAAA,IAAMV,GAAG,QAAHA,GAAG;EAAA,OACtBA,GAAG,GAAGJ;IAAMe,SAAS,EAAEb,IAAI,CAACD,MAAM,CAAC,2BAA2B,CAAC;EAAC,GAAGG,GAAG,CAAQ,GAAG,IAAI;AAAA;AAEvF,eAAc,SAAUY,cAAc,QAA4C;EAAA,IAAzCZ,GAAG,SAAHA,GAAG;IAAEC,aAAa,SAAbA,aAAa;EACzD,IAAI,CAACD,GAAG,IAAI,CAACC,aAAa,EAAE;IAC1B,OAAOL,kCAAOI,GAAG,CAAQ;;EAG3B,IAAIA,GAAG,KAAKC,aAAa,EAAE;IACzB,OAAOL,oBAACc,SAAS;MAACV,GAAG,EAAEA;IAAG,EAAI;;EAGhC,wBAA+BD,gBAAgB,CAACC,GAAG,EAAEC,aAAa,CAAC;IAA3DK,SAAS,qBAATA,SAAS;IAAEE,OAAO,qBAAPA,OAAO;EAE1B,IAAMK,WAAW,GAA6B,EAAE;EAEhDP,SAAS,CAACQ,OAAO,CAAC,UAACC,OAAO,EAAEC,GAAG,EAAI;IACjCH,WAAW,CAACI,IAAI,CAACrB;MAAMsB,GAAG,oBAAaF,GAAG;IAAE,GAAGD,OAAO,CAAQ,CAAC;IAE/D,IAAIP,OAAO,IAAIQ,GAAG,GAAGR,OAAO,CAACW,MAAM,EAAE;MACnCN,WAAW,CAACI,IAAI,CAACrB,oBAACc,SAAS;QAACQ,GAAG,kBAAWF,GAAG,CAAE;QAAEhB,GAAG,EAAEQ,OAAO,CAACQ,GAAG;MAAC,EAAI,CAAC;;EAE3E,CAAC,CAAC;EAEF,OAAOpB,kCAAOiB,WAAW,CAAQ;AACnC","names":["React","styles","clsx","splitOnFiltering","str","highlightText","filteringPattern","replace","regexp","RegExp","noMatches","split","matches","match","Highlight","className","HighlightMatch","highlighted","forEach","noMatch","idx","push","key","length"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/components/option/lib/default/internal/components/option/highlight-match.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport styles from './styles.css.js';\nimport clsx from 'clsx';\n\nconst splitOnFiltering = (str: string, highlightText: string) => {\n  // Filtering needs to be case insensitive\n  const filteringPattern = highlightText.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n  const regexp = new RegExp(filteringPattern, 'gi');\n  const noMatches = str.split(regexp);\n  const matches = str.match(regexp);\n\n  return { noMatches, matches };\n};\n\nexport interface HighlightMatchProps {\n  str?: string;\n  highlightText?: string;\n}\n\nconst Highlight = ({ str }: HighlightMatchProps) =>\n  str ? <span className={clsx(styles['filtering-match-highlight'])}>{str}</span> : null;\n\nexport default function HighlightMatch({ str, highlightText }: HighlightMatchProps) {\n  if (!str || !highlightText) {\n    return <span>{str}</span>;\n  }\n\n  if (str === highlightText) {\n    return <Highlight str={str} />;\n  }\n\n  const { noMatches, matches } = splitOnFiltering(str, highlightText);\n\n  const highlighted: (string | JSX.Element)[] = [];\n\n  noMatches.forEach((noMatch, idx) => {\n    highlighted.push(<span key={`noMatch-${idx}`}>{noMatch}</span>);\n\n    if (matches && idx < matches.length) {\n      highlighted.push(<Highlight key={`match-${idx}`} str={matches[idx]} />);\n    }\n  });\n\n  return <span>{highlighted}</span>;\n}\n"]},"metadata":{},"sourceType":"module"}