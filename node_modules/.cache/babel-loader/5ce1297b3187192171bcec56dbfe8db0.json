{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport LiveRegion from '../internal/components/live-region/index';\nimport { TabButton } from './tab-button';\nimport { InternalButton } from '../button/internal';\nimport { useInternalI18n } from '../i18n/context.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nfunction InternalStatusBar(_ref) {\n  let {\n    languageLabel,\n    cursorPosition,\n    paneStatus,\n    onErrorPaneToggle,\n    onWarningPaneToggle,\n    onTabFocus,\n    onTabBlur,\n    errorsTabRef,\n    warningsTabRef,\n    isTabFocused,\n    paneId,\n    onPreferencesOpen,\n    i18nStrings,\n    errorCount,\n    warningCount,\n    leftBarRef,\n    isVirtual,\n    minifyCounters,\n    isRefresh\n  } = _ref;\n  const i18n = useInternalI18n('code-editor');\n  const errorText = `${i18n('i18nStrings.errorsTab', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorsTab)}: ${errorCount}`;\n  const warningText = `${i18n('i18nStrings.warningsTab', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningsTab)}: ${warningCount}`;\n  // Virtual status bar is inaccessible for screen readers and keyboard interactions.\n  return React.createElement(\"div\", {\n    className: clsx(styles['status-bar'], {\n      [styles['status-bar-with-hidden-pane']]: paneStatus === 'hidden',\n      [styles['status-bar-virtual']]: isVirtual\n    }),\n    \"aria-hidden\": isVirtual\n  }, React.createElement(\"div\", {\n    className: clsx(styles['status-bar__left'], {\n      [styles['status-bar__left-virtual']]: isVirtual\n    }),\n    ref: leftBarRef\n  }, React.createElement(\"span\", {\n    className: styles['status-bar__language-mode']\n  }, languageLabel), React.createElement(\"span\", {\n    className: styles['status-bar__cursor-position']\n  }, cursorPosition), React.createElement(\"div\", {\n    role: \"tablist\"\n  }, React.createElement(TabButton, {\n    text: minifyCounters ? ` ${errorCount}` : errorText,\n    className: styles['tab-button--errors'],\n    iconName: \"status-negative\",\n    disabled: errorCount === 0 || isVirtual,\n    active: paneStatus === 'error',\n    onClick: onErrorPaneToggle,\n    onFocus: onTabFocus,\n    onBlur: onTabBlur,\n    ref: errorsTabRef,\n    ariaLabel: errorText,\n    paneId: paneId,\n    isRefresh: isRefresh\n  }), React.createElement(\"span\", {\n    className: styles['tab-button--divider']\n  }), React.createElement(TabButton, {\n    text: minifyCounters ? ` ${warningCount}` : warningText,\n    className: styles['tab-button--warnings'],\n    iconName: \"status-warning\",\n    disabled: warningCount === 0 || isVirtual,\n    active: paneStatus === 'warning',\n    onClick: onWarningPaneToggle,\n    onFocus: onTabFocus,\n    onBlur: onTabBlur,\n    ref: warningsTabRef,\n    tabIndex: paneStatus === 'error' && isTabFocused ? -1 : undefined,\n    ariaHidden: paneStatus === 'error' && isTabFocused ? true : undefined,\n    ariaLabel: warningText,\n    paneId: paneId,\n    isRefresh: isRefresh\n  })), React.createElement(LiveRegion, {\n    assertive: true\n  }, React.createElement(\"span\", null, errorText, \" \"), React.createElement(\"span\", null, warningText))), React.createElement(\"div\", {\n    className: styles['status-bar__right']\n  }, React.createElement(\"div\", {\n    className: styles['status-bar__cog-button']\n  }, React.createElement(InternalButton, {\n    disabled: isVirtual,\n    formAction: \"none\",\n    variant: \"icon\",\n    iconName: \"settings\",\n    iconAlt: \"Settings\",\n    ariaLabel: i18n('i18nStrings.preferencesButtonAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesButtonAriaLabel),\n    onClick: onPreferencesOpen,\n    __nativeAttributes: {\n      tabIndex: paneStatus !== 'hidden' && isTabFocused ? -1 : undefined,\n      'aria-hidden': paneStatus !== 'hidden' && isTabFocused ? true : undefined\n    }\n  }))));\n}\nexport const StatusBar = _a => {\n  var {\n      errorsTabRef,\n      warningsTabRef\n    } = _a,\n    restProps = __rest(_a, [\"errorsTabRef\", \"warningsTabRef\"]);\n  // create a virtual status bar, in order to calculate the width with full tab button text\n  // and decide if tab button text needs to be reduced\n  const [realWidth, statusLeftBarRef] = useContainerQuery(rect => rect.contentBoxWidth);\n  const [virtualWidth, virtualStatusLeftBarRef] = useContainerQuery(rect => rect.contentBoxWidth);\n  const minifyCounters = virtualWidth !== null && realWidth !== null && virtualWidth > realWidth;\n  return React.createElement(React.Fragment, null, React.createElement(InternalStatusBar, Object.assign({}, restProps, {\n    isVirtual: false,\n    leftBarRef: statusLeftBarRef,\n    errorsTabRef: errorsTabRef,\n    warningsTabRef: warningsTabRef,\n    minifyCounters: minifyCounters\n  })), React.createElement(InternalStatusBar, Object.assign({}, restProps, {\n    isVirtual: true,\n    leftBarRef: virtualStatusLeftBarRef,\n    minifyCounters: false\n  })));\n};","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,UAAU,MAAM,0CAA0C;AACjE,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,iBAAiB,QAAQ,sCAAsC;AA8BxE,SAASC,iBAAiB,OAoBD;EAAA,IApBE;IACzBC,aAAa;IACbC,cAAc;IACdC,UAAU;IACVC,iBAAiB;IACjBC,mBAAmB;IACnBC,UAAU;IACVC,SAAS;IACTC,YAAY;IACZC,cAAc;IACdC,YAAY;IACZC,MAAM;IACNC,iBAAiB;IACjBC,WAAW;IACXC,UAAU;IACVC,YAAY;IACZC,UAAU;IACVC,SAAS;IACTC,cAAc;IACdC;EAAS,CACc;EACvB,MAAMC,IAAI,GAAGtB,eAAe,CAAC,aAAa,CAAC;EAC3C,MAAMuB,SAAS,GAAG,GAAGD,IAAI,CAAC,uBAAuB,EAAEP,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAES,SAAS,CAAC,KAAKR,UAAU,EAAE;EAC3F,MAAMS,WAAW,GAAG,GAAGH,IAAI,CAAC,yBAAyB,EAAEP,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEW,WAAW,CAAC,KAAKT,YAAY,EAAE;EAEnG;EAEA,OACEvB;IACEiC,SAAS,EAAEhC,IAAI,CAACC,MAAM,CAAC,YAAY,CAAC,EAAE;MACpC,CAACA,MAAM,CAAC,6BAA6B,CAAC,GAAGS,UAAU,KAAK,QAAQ;MAChE,CAACT,MAAM,CAAC,oBAAoB,CAAC,GAAGuB;KACjC,CAAC;IAAA,eACWA;EAAS,GAEtBzB;IACEiC,SAAS,EAAEhC,IAAI,CAACC,MAAM,CAAC,kBAAkB,CAAC,EAAE;MAC1C,CAACA,MAAM,CAAC,0BAA0B,CAAC,GAAGuB;KACvC,CAAC;IACFS,GAAG,EAAEV;EAAU,GAEfxB;IAAMiC,SAAS,EAAE/B,MAAM,CAAC,2BAA2B;EAAC,GAAGO,aAAa,CAAQ,EAC5ET;IAAMiC,SAAS,EAAE/B,MAAM,CAAC,6BAA6B;EAAC,GAAGQ,cAAc,CAAQ,EAE/EV;IAAKmC,IAAI,EAAC;EAAS,GACjBnC,oBAACI,SAAS;IACRgC,IAAI,EAAEV,cAAc,GAAG,IAAIJ,UAAU,EAAE,GAAGO,SAAS;IACnDI,SAAS,EAAE/B,MAAM,CAAC,oBAAoB,CAAC;IACvCmC,QAAQ,EAAC,iBAAiB;IAC1BC,QAAQ,EAAEhB,UAAU,KAAK,CAAC,IAAIG,SAAS;IACvCc,MAAM,EAAE5B,UAAU,KAAK,OAAO;IAC9B6B,OAAO,EAAE5B,iBAAiB;IAC1B6B,OAAO,EAAE3B,UAAU;IACnB4B,MAAM,EAAE3B,SAAS;IACjBmB,GAAG,EAAElB,YAAY;IACjB2B,SAAS,EAAEd,SAAS;IACpBV,MAAM,EAAEA,MAAM;IACdQ,SAAS,EAAEA;EAAS,EACpB,EACF3B;IAAMiC,SAAS,EAAE/B,MAAM,CAAC,qBAAqB;EAAC,EAAS,EACvDF,oBAACI,SAAS;IACRgC,IAAI,EAAEV,cAAc,GAAG,IAAIH,YAAY,EAAE,GAAGQ,WAAW;IACvDE,SAAS,EAAE/B,MAAM,CAAC,sBAAsB,CAAC;IACzCmC,QAAQ,EAAC,gBAAgB;IACzBC,QAAQ,EAAEf,YAAY,KAAK,CAAC,IAAIE,SAAS;IACzCc,MAAM,EAAE5B,UAAU,KAAK,SAAS;IAChC6B,OAAO,EAAE3B,mBAAmB;IAC5B4B,OAAO,EAAE3B,UAAU;IACnB4B,MAAM,EAAE3B,SAAS;IACjBmB,GAAG,EAAEjB,cAAc;IACnB2B,QAAQ,EAAEjC,UAAU,KAAK,OAAO,IAAIO,YAAY,GAAG,CAAC,CAAC,GAAG2B,SAAS;IACjEC,UAAU,EAAEnC,UAAU,KAAK,OAAO,IAAIO,YAAY,GAAG,IAAI,GAAG2B,SAAS;IACrEF,SAAS,EAAEZ,WAAW;IACtBZ,MAAM,EAAEA,MAAM;IACdQ,SAAS,EAAEA;EAAS,EACpB,CACE,EACN3B,oBAACG,UAAU;IAAC4C,SAAS,EAAE;EAAI,GACzB/C,kCAAO6B,SAAS,MAAS,EACzB7B,kCAAO+B,WAAW,CAAQ,CACf,CACT,EAEN/B;IAAKiC,SAAS,EAAE/B,MAAM,CAAC,mBAAmB;EAAC,GACzCF;IAAKiC,SAAS,EAAE/B,MAAM,CAAC,wBAAwB;EAAC,GAC9CF,oBAACK,cAAc;IACbiC,QAAQ,EAAEb,SAAS;IACnBuB,UAAU,EAAC,MAAM;IACjBC,OAAO,EAAC,MAAM;IACdZ,QAAQ,EAAC,UAAU;IACnBa,OAAO,EAAC,UAAU;IAClBP,SAAS,EAAEf,IAAI,CAAC,wCAAwC,EAAEP,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE8B,0BAA0B,CAAC;IAClGX,OAAO,EAAEpB,iBAAiB;IAC1BgC,kBAAkB,EAAE;MAClBR,QAAQ,EAAEjC,UAAU,KAAK,QAAQ,IAAIO,YAAY,GAAG,CAAC,CAAC,GAAG2B,SAAS;MAClE,aAAa,EAAElC,UAAU,KAAK,QAAQ,IAAIO,YAAY,GAAG,IAAI,GAAG2B;;EACjE,EACD,CACE,CACF,CACF;AAEV;AAEA,OAAO,MAAMQ,SAAS,GAAIC,EAA8D,IAAI;MAAlE;MAAEtC,YAAY;MAAEC;IAAc,MAAgC;IAA3BsC,SAAS,cAA5C,kCAA8C,CAAF;EACpE;EACA;EACA,MAAM,CAACC,SAAS,EAAEC,gBAAgB,CAAC,GAAGlD,iBAAiB,CAACmD,IAAI,IAAIA,IAAI,CAACC,eAAe,CAAC;EACrF,MAAM,CAACC,YAAY,EAAEC,uBAAuB,CAAC,GAAGtD,iBAAiB,CAACmD,IAAI,IAAIA,IAAI,CAACC,eAAe,CAAC;EAE/F,MAAMjC,cAAc,GAAGkC,YAAY,KAAK,IAAI,IAAIJ,SAAS,KAAK,IAAI,IAAII,YAAY,GAAGJ,SAAS;EAE9F,OACExD,0CACEA,oBAACQ,iBAAiB,oBACZ+C,SAAS;IACb9B,SAAS,EAAE,KAAK;IAChBD,UAAU,EAAEiC,gBAAgB;IAC5BzC,YAAY,EAAEA,YAAY;IAC1BC,cAAc,EAAEA,cAAc;IAC9BS,cAAc,EAAEA;EAAc,GAC9B,EACF1B,oBAACQ,iBAAiB,oBAAK+C,SAAS;IAAE9B,SAAS,EAAE,IAAI;IAAED,UAAU,EAAEqC,uBAAuB;IAAEnC,cAAc,EAAE;EAAK,GAAI,CAChH;AAEP,CAAC","names":["React","clsx","styles","LiveRegion","TabButton","InternalButton","useInternalI18n","useContainerQuery","InternalStatusBar","languageLabel","cursorPosition","paneStatus","onErrorPaneToggle","onWarningPaneToggle","onTabFocus","onTabBlur","errorsTabRef","warningsTabRef","isTabFocused","paneId","onPreferencesOpen","i18nStrings","errorCount","warningCount","leftBarRef","isVirtual","minifyCounters","isRefresh","i18n","errorText","errorsTab","warningText","warningsTab","className","ref","role","text","iconName","disabled","active","onClick","onFocus","onBlur","ariaLabel","tabIndex","undefined","ariaHidden","assertive","formAction","variant","iconAlt","preferencesButtonAriaLabel","__nativeAttributes","StatusBar","_a","restProps","realWidth","statusLeftBarRef","rect","contentBoxWidth","virtualWidth","virtualStatusLeftBarRef"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/code-editor/lib/default/code-editor/status-bar.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport LiveRegion from '../internal/components/live-region/index';\nimport { TabButton } from './tab-button';\nimport { InternalButton } from '../button/internal';\nimport { CodeEditorProps } from './interfaces';\nimport { useInternalI18n } from '../i18n/context.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\ninterface StatusBarProps {\n  languageLabel: string;\n  cursorPosition?: string;\n  paneStatus: string;\n  isTabFocused: boolean;\n  paneId?: string;\n  i18nStrings?: CodeEditorProps.I18nStrings;\n  errorCount: number;\n  warningCount: number;\n  isRefresh: boolean;\n\n  errorsTabRef?: React.RefObject<HTMLButtonElement>;\n  warningsTabRef?: React.RefObject<HTMLButtonElement>;\n\n  onErrorPaneToggle: () => void;\n  onWarningPaneToggle: () => void;\n  onTabFocus?: React.FocusEventHandler<HTMLButtonElement>;\n  onTabBlur?: React.FocusEventHandler<HTMLButtonElement>;\n  onPreferencesOpen: () => void;\n  onHeightChange?: (height: number | null) => void;\n}\n\ntype InternalStatusBarProps = StatusBarProps & {\n  leftBarRef: React.Ref<HTMLDivElement>;\n  isVirtual: boolean;\n  minifyCounters: boolean;\n};\n\nfunction InternalStatusBar({\n  languageLabel,\n  cursorPosition,\n  paneStatus,\n  onErrorPaneToggle,\n  onWarningPaneToggle,\n  onTabFocus,\n  onTabBlur,\n  errorsTabRef,\n  warningsTabRef,\n  isTabFocused,\n  paneId,\n  onPreferencesOpen,\n  i18nStrings,\n  errorCount,\n  warningCount,\n  leftBarRef,\n  isVirtual,\n  minifyCounters,\n  isRefresh,\n}: InternalStatusBarProps) {\n  const i18n = useInternalI18n('code-editor');\n  const errorText = `${i18n('i18nStrings.errorsTab', i18nStrings?.errorsTab)}: ${errorCount}`;\n  const warningText = `${i18n('i18nStrings.warningsTab', i18nStrings?.warningsTab)}: ${warningCount}`;\n\n  // Virtual status bar is inaccessible for screen readers and keyboard interactions.\n\n  return (\n    <div\n      className={clsx(styles['status-bar'], {\n        [styles['status-bar-with-hidden-pane']]: paneStatus === 'hidden',\n        [styles['status-bar-virtual']]: isVirtual,\n      })}\n      aria-hidden={isVirtual}\n    >\n      <div\n        className={clsx(styles['status-bar__left'], {\n          [styles['status-bar__left-virtual']]: isVirtual,\n        })}\n        ref={leftBarRef}\n      >\n        <span className={styles['status-bar__language-mode']}>{languageLabel}</span>\n        <span className={styles['status-bar__cursor-position']}>{cursorPosition}</span>\n\n        <div role=\"tablist\">\n          <TabButton\n            text={minifyCounters ? ` ${errorCount}` : errorText}\n            className={styles['tab-button--errors']}\n            iconName=\"status-negative\"\n            disabled={errorCount === 0 || isVirtual}\n            active={paneStatus === 'error'}\n            onClick={onErrorPaneToggle}\n            onFocus={onTabFocus}\n            onBlur={onTabBlur}\n            ref={errorsTabRef}\n            ariaLabel={errorText}\n            paneId={paneId}\n            isRefresh={isRefresh}\n          />\n          <span className={styles['tab-button--divider']}></span>\n          <TabButton\n            text={minifyCounters ? ` ${warningCount}` : warningText}\n            className={styles['tab-button--warnings']}\n            iconName=\"status-warning\"\n            disabled={warningCount === 0 || isVirtual}\n            active={paneStatus === 'warning'}\n            onClick={onWarningPaneToggle}\n            onFocus={onTabFocus}\n            onBlur={onTabBlur}\n            ref={warningsTabRef}\n            tabIndex={paneStatus === 'error' && isTabFocused ? -1 : undefined}\n            ariaHidden={paneStatus === 'error' && isTabFocused ? true : undefined}\n            ariaLabel={warningText}\n            paneId={paneId}\n            isRefresh={isRefresh}\n          />\n        </div>\n        <LiveRegion assertive={true}>\n          <span>{errorText} </span>\n          <span>{warningText}</span>\n        </LiveRegion>\n      </div>\n\n      <div className={styles['status-bar__right']}>\n        <div className={styles['status-bar__cog-button']}>\n          <InternalButton\n            disabled={isVirtual}\n            formAction=\"none\"\n            variant=\"icon\"\n            iconName=\"settings\"\n            iconAlt=\"Settings\"\n            ariaLabel={i18n('i18nStrings.preferencesButtonAriaLabel', i18nStrings?.preferencesButtonAriaLabel)}\n            onClick={onPreferencesOpen}\n            __nativeAttributes={{\n              tabIndex: paneStatus !== 'hidden' && isTabFocused ? -1 : undefined,\n              'aria-hidden': paneStatus !== 'hidden' && isTabFocused ? true : undefined,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport const StatusBar = ({ errorsTabRef, warningsTabRef, ...restProps }: StatusBarProps) => {\n  // create a virtual status bar, in order to calculate the width with full tab button text\n  // and decide if tab button text needs to be reduced\n  const [realWidth, statusLeftBarRef] = useContainerQuery(rect => rect.contentBoxWidth);\n  const [virtualWidth, virtualStatusLeftBarRef] = useContainerQuery(rect => rect.contentBoxWidth);\n\n  const minifyCounters = virtualWidth !== null && realWidth !== null && virtualWidth > realWidth;\n\n  return (\n    <>\n      <InternalStatusBar\n        {...restProps}\n        isVirtual={false}\n        leftBarRef={statusLeftBarRef}\n        errorsTabRef={errorsTabRef}\n        warningsTabRef={warningsTabRef}\n        minifyCounters={minifyCounters}\n      />\n      <InternalStatusBar {...restProps} isVirtual={true} leftBarRef={virtualStatusLeftBarRef} minifyCounters={false} />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}