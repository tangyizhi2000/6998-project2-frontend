{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport { ToggleButton, CloseButton, togglesConfig } from '../toggles';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nimport OverflowMenu from './overflow-menu';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useDensityMode } from '@cloudscape-design/component-toolkit/internal';\nimport { splitItems } from './drawers-helpers';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\n// We are using two landmarks per drawer, i.e. two NAVs and two ASIDEs, because of several\n// known bugs in NVDA that cause focus changes within a container to sometimes not be\n// announced. As a result, we use one region for the open button and one region for the\n// actual drawer content, always hiding the other one when it's not visible.\n// An alternative solution to follow a more classic implementation here to only have one\n// button that triggers the opening/closing of the drawer also did not work due to another\n// series of bugs in NVDA (together with Firefox) which prevent the changed expanded state\n// from being announced.\n// Even with this workaround in place, the announcement of the close button when opening a\n// panel in NVDA is not working correctly. The suspected root cause is one of the bugs below\n// as well.\n// Relevant tickets:\n// * https://github.com/nvaccess/nvda/issues/6606\n// * https://github.com/nvaccess/nvda/issues/5825\n// * https://github.com/nvaccess/nvda/issues/5247\n// * https://github.com/nvaccess/nvda/pull/8869 (reverted PR that was going to fix it)\nexport const Drawer = React.forwardRef((_ref, ref) => {\n  let {\n    contentClassName,\n    toggleClassName,\n    closeClassName,\n    width,\n    type,\n    toggleRefs,\n    topOffset,\n    bottomOffset,\n    ariaLabels,\n    drawersAriaLabels,\n    children,\n    isOpen,\n    isHidden,\n    isMobile,\n    onToggle,\n    onClick,\n    onLoseFocus,\n    drawers,\n    resizeHandle\n  } = _ref;\n  const openButtonWrapperRef = useRef(null);\n  const {\n    TagName,\n    iconName,\n    getLabels\n  } = togglesConfig[type];\n  const {\n    mainLabel,\n    closeLabel,\n    openLabel\n  } = drawersAriaLabels !== null && drawersAriaLabels !== void 0 ? drawersAriaLabels : getLabels(ariaLabels);\n  const drawerContentWidthOpen = isMobile ? undefined : width;\n  const drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;\n  const regularOpenButton = React.createElement(TagName, {\n    ref: openButtonWrapperRef,\n    \"aria-label\": mainLabel,\n    className: styles.toggle,\n    \"aria-hidden\": isOpen\n  }, React.createElement(ToggleButton, {\n    ref: toggleRefs.toggle,\n    className: toggleClassName,\n    iconName: iconName,\n    ariaLabel: openLabel,\n    onClick: () => onToggle(true),\n    ariaExpanded: isOpen ? undefined : false\n  }));\n  return React.createElement(\"div\", {\n    id: drawers === null || drawers === void 0 ? void 0 : drawers.activeDrawerId,\n    ref: ref,\n    className: clsx(styles.drawer, {\n      [styles.hide]: isHidden,\n      [styles['drawer-closed']]: !isOpen,\n      [testutilStyles['drawer-closed']]: !isOpen,\n      [styles['drawer-mobile']]: isMobile\n    }),\n    style: {\n      width: drawerContentWidth\n    },\n    onBlur: onLoseFocus ? e => {\n      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n        onLoseFocus(e);\n      }\n    } : undefined,\n    onClick: event => {\n      var _a;\n      if (onClick) {\n        onClick(event);\n      }\n      if (!isOpen) {\n        // to prevent calling onToggle from the drawer when it's called from the toggle button\n        if (openButtonWrapperRef.current === event.target || !((_a = openButtonWrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {\n          onToggle(true);\n        }\n      }\n    }\n  }, React.createElement(\"div\", {\n    style: {\n      width: drawerContentWidth,\n      top: topOffset,\n      bottom: bottomOffset\n    },\n    className: clsx(styles['drawer-content'], styles['drawer-content-clickable'], contentClassName)\n  }, !isMobile && !drawers && regularOpenButton, resizeHandle, React.createElement(TagName, {\n    \"aria-label\": mainLabel,\n    \"aria-hidden\": !isOpen\n  }, React.createElement(CloseButton, {\n    ref: toggleRefs.close,\n    className: closeClassName,\n    ariaLabel: closeLabel,\n    onClick: () => {\n      onToggle(false);\n      drawers === null || drawers === void 0 ? void 0 : drawers.onChange({\n        activeDrawerId: undefined\n      });\n    }\n  }), children)));\n});\nconst DrawerTrigger = React.forwardRef((_ref2, ref) => {\n  let {\n    testUtilsClassName,\n    ariaLabel,\n    ariaExpanded,\n    ariaControls,\n    badge,\n    itemId,\n    isActive,\n    trigger,\n    onClick\n  } = _ref2;\n  return React.createElement(\"div\", {\n    className: clsx(styles['drawer-trigger'], isActive && styles['drawer-trigger-active']),\n    onClick: onClick\n  }, React.createElement(ToggleButton, {\n    ref: ref,\n    className: testUtilsClassName,\n    iconName: trigger.iconName,\n    iconSvg: trigger.iconSvg,\n    ariaLabel: ariaLabel,\n    ariaExpanded: ariaExpanded,\n    ariaControls: ariaControls,\n    badge: badge,\n    testId: itemId && `awsui-app-layout-trigger-${itemId}`\n  }));\n});\nexport const DrawerTriggersBar = _ref3 => {\n  let {\n    isMobile,\n    topOffset,\n    bottomOffset,\n    drawers\n  } = _ref3;\n  const containerRef = React.useRef(null);\n  const [containerHeight, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxHeight);\n  const isCompactMode = useDensityMode(containerRef) === 'compact';\n  const getIndexOfOverflowItem = () => {\n    if (containerHeight) {\n      const ITEM_HEIGHT = isCompactMode ? 34 : 38;\n      const overflowSpot = containerHeight / 1.5;\n      const index = Math.floor(overflowSpot / ITEM_HEIGHT);\n      return index;\n    }\n    return 0;\n  };\n  const {\n    visibleItems,\n    overflowItems\n  } = splitItems(drawers === null || drawers === void 0 ? void 0 : drawers.items, getIndexOfOverflowItem(), drawers === null || drawers === void 0 ? void 0 : drawers.activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  return React.createElement(\"div\", {\n    className: clsx(styles.drawer, styles['drawer-closed'], testutilStyles['drawer-closed'], {\n      [styles['drawer-mobile']]: isMobile,\n      [styles.hide]: (drawers === null || drawers === void 0 ? void 0 : drawers.items.length) === 1 && drawers.activeDrawerId !== undefined\n    }),\n    ref: containerRef\n  }, React.createElement(\"div\", {\n    ref: triggersContainerRef,\n    style: {\n      top: topOffset,\n      bottom: bottomOffset\n    },\n    className: clsx(styles['drawer-content'], {\n      [styles['drawer-content-clickable']]: (drawers === null || drawers === void 0 ? void 0 : drawers.items.length) === 1\n    }),\n    onClick: () => {\n      (drawers === null || drawers === void 0 ? void 0 : drawers.items.length) === 1 && (drawers === null || drawers === void 0 ? void 0 : drawers.onChange({\n        activeDrawerId: drawers.items[0].id !== drawers.activeDrawerId ? drawers.items[0].id : undefined\n      }));\n    }\n  }, !isMobile && React.createElement(\"aside\", {\n    \"aria-label\": drawers === null || drawers === void 0 ? void 0 : drawers.ariaLabel,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles['drawer-triggers-wrapper']),\n    role: \"toolbar\",\n    \"aria-orientation\": \"vertical\"\n  }, visibleItems.map((item, index) => {\n    var _a;\n    return React.createElement(DrawerTrigger, {\n      key: index,\n      testUtilsClassName: clsx(testutilStyles['drawers-trigger'], item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']),\n      ariaExpanded: (drawers === null || drawers === void 0 ? void 0 : drawers.activeDrawerId) === item.id,\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      ariaControls: (drawers === null || drawers === void 0 ? void 0 : drawers.activeDrawerId) === item.id ? item.id : undefined,\n      trigger: item.trigger,\n      badge: item.badge,\n      itemId: item.id,\n      isActive: (drawers === null || drawers === void 0 ? void 0 : drawers.activeDrawerId) === item.id,\n      onClick: () => {\n        (drawers === null || drawers === void 0 ? void 0 : drawers.items.length) !== 1 && (drawers === null || drawers === void 0 ? void 0 : drawers.onChange({\n          activeDrawerId: item.id !== drawers.activeDrawerId ? item.id : undefined\n        }));\n      }\n    });\n  }), overflowItems.length > 0 && React.createElement(\"div\", {\n    className: clsx(styles['drawer-trigger'])\n  }, React.createElement(OverflowMenu, {\n    ariaLabel: overflowMenuHasBadge ? drawers === null || drawers === void 0 ? void 0 : drawers.overflowWithBadgeAriaLabel : drawers === null || drawers === void 0 ? void 0 : drawers.overflowAriaLabel,\n    items: overflowItems,\n    onItemClick: _ref4 => {\n      let {\n        detail\n      } = _ref4;\n      drawers === null || drawers === void 0 ? void 0 : drawers.onChange({\n        activeDrawerId: detail.id !== drawers.activeDrawerId ? detail.id : undefined\n      });\n    }\n  }))))));\n};","map":{"version":3,"mappings":"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","names":["clsx","React","useRef","ToggleButton","CloseButton","togglesConfig","testutilStyles","styles","OverflowMenu","useContainerQuery","useDensityMode","splitItems","TOOLS_DRAWER_ID","Drawer","forwardRef","ref","contentClassName","toggleClassName","closeClassName","width","type","toggleRefs","topOffset","bottomOffset","ariaLabels","drawersAriaLabels","children","isOpen","isHidden","isMobile","onToggle","onClick","onLoseFocus","drawers","resizeHandle","openButtonWrapperRef","TagName","iconName","getLabels","mainLabel","closeLabel","openLabel","drawerContentWidthOpen","undefined","drawerContentWidth","regularOpenButton","className","toggle","ariaLabel","ariaExpanded","id","activeDrawerId","drawer","hide","style","onBlur","e","relatedTarget","currentTarget","contains","event","current","target","top","bottom","close","onChange","DrawerTrigger","testUtilsClassName","ariaControls","badge","itemId","isActive","trigger","iconSvg","testId","DrawerTriggersBar","containerRef","containerHeight","triggersContainerRef","rect","contentBoxHeight","isCompactMode","getIndexOfOverflowItem","ITEM_HEIGHT","overflowSpot","index","Math","floor","visibleItems","overflowItems","items","overflowMenuHasBadge","find","item","length","role","map","key","triggerButton","overflowWithBadgeAriaLabel","overflowAriaLabel","onItemClick","detail"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/app-layout/drawer/lib/default/app-layout/drawer/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport { ToggleButton, CloseButton, togglesConfig } from '../toggles';\n\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nimport { DesktopDrawerProps, DrawerTriggersBarProps, DrawerItem } from './interfaces';\nimport OverflowMenu from './overflow-menu';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useDensityMode } from '@cloudscape-design/component-toolkit/internal';\nimport { splitItems } from './drawers-helpers';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\n\n// We are using two landmarks per drawer, i.e. two NAVs and two ASIDEs, because of several\n// known bugs in NVDA that cause focus changes within a container to sometimes not be\n// announced. As a result, we use one region for the open button and one region for the\n// actual drawer content, always hiding the other one when it's not visible.\n// An alternative solution to follow a more classic implementation here to only have one\n// button that triggers the opening/closing of the drawer also did not work due to another\n// series of bugs in NVDA (together with Firefox) which prevent the changed expanded state\n// from being announced.\n// Even with this workaround in place, the announcement of the close button when opening a\n// panel in NVDA is not working correctly. The suspected root cause is one of the bugs below\n// as well.\n// Relevant tickets:\n// * https://github.com/nvaccess/nvda/issues/6606\n// * https://github.com/nvaccess/nvda/issues/5825\n// * https://github.com/nvaccess/nvda/issues/5247\n// * https://github.com/nvaccess/nvda/pull/8869 (reverted PR that was going to fix it)\nexport const Drawer = React.forwardRef(\n  (\n    {\n      contentClassName,\n      toggleClassName,\n      closeClassName,\n      width,\n      type,\n      toggleRefs,\n      topOffset,\n      bottomOffset,\n      ariaLabels,\n      drawersAriaLabels,\n      children,\n      isOpen,\n      isHidden,\n      isMobile,\n      onToggle,\n      onClick,\n      onLoseFocus,\n      drawers,\n      resizeHandle,\n    }: DesktopDrawerProps,\n    ref: React.Ref<HTMLDivElement>\n  ) => {\n    const openButtonWrapperRef = useRef<HTMLElement | null>(null);\n    const { TagName, iconName, getLabels } = togglesConfig[type];\n    const { mainLabel, closeLabel, openLabel } = drawersAriaLabels ?? getLabels(ariaLabels);\n    const drawerContentWidthOpen = isMobile ? undefined : width;\n    const drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;\n\n    const regularOpenButton = (\n      <TagName ref={openButtonWrapperRef} aria-label={mainLabel} className={styles.toggle} aria-hidden={isOpen}>\n        <ToggleButton\n          ref={toggleRefs.toggle}\n          className={toggleClassName}\n          iconName={iconName}\n          ariaLabel={openLabel}\n          onClick={() => onToggle(true)}\n          ariaExpanded={isOpen ? undefined : false}\n        />\n      </TagName>\n    );\n\n    return (\n      <div\n        id={drawers?.activeDrawerId}\n        ref={ref}\n        className={clsx(styles.drawer, {\n          [styles.hide]: isHidden,\n          [styles['drawer-closed']]: !isOpen,\n          [testutilStyles['drawer-closed']]: !isOpen,\n          [styles['drawer-mobile']]: isMobile,\n        })}\n        style={{ width: drawerContentWidth }}\n        onBlur={\n          onLoseFocus\n            ? e => {\n                if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n                  onLoseFocus(e);\n                }\n              }\n            : undefined\n        }\n        onClick={event => {\n          if (onClick) {\n            onClick(event);\n          }\n          if (!isOpen) {\n            // to prevent calling onToggle from the drawer when it's called from the toggle button\n            if (\n              openButtonWrapperRef.current === event.target ||\n              !openButtonWrapperRef.current?.contains(event.target as Node)\n            ) {\n              onToggle(true);\n            }\n          }\n        }}\n      >\n        <div\n          style={{ width: drawerContentWidth, top: topOffset, bottom: bottomOffset }}\n          className={clsx(styles['drawer-content'], styles['drawer-content-clickable'], contentClassName)}\n        >\n          {!isMobile && !drawers && regularOpenButton}\n          {resizeHandle}\n          <TagName aria-label={mainLabel} aria-hidden={!isOpen}>\n            <CloseButton\n              ref={toggleRefs.close}\n              className={closeClassName}\n              ariaLabel={closeLabel}\n              onClick={() => {\n                onToggle(false);\n                drawers?.onChange({ activeDrawerId: undefined });\n              }}\n            />\n            {children}\n          </TagName>\n        </div>\n      </div>\n    );\n  }\n);\n\ninterface DrawerTriggerProps {\n  testUtilsClassName?: string;\n  ariaLabel: string | undefined;\n  ariaExpanded: boolean;\n  ariaControls?: string;\n  badge: boolean | undefined;\n  itemId?: string;\n  isActive: boolean;\n  trigger: DrawerItem['trigger'];\n  onClick: () => void;\n}\n\nconst DrawerTrigger = React.forwardRef(\n  (\n    {\n      testUtilsClassName,\n      ariaLabel,\n      ariaExpanded,\n      ariaControls,\n      badge,\n      itemId,\n      isActive,\n      trigger,\n      onClick,\n    }: DrawerTriggerProps,\n    ref: React.Ref<{ focus: () => void }>\n  ) => (\n    <div className={clsx(styles['drawer-trigger'], isActive && styles['drawer-trigger-active'])} onClick={onClick}>\n      <ToggleButton\n        ref={ref}\n        className={testUtilsClassName}\n        iconName={trigger.iconName}\n        iconSvg={trigger.iconSvg}\n        ariaLabel={ariaLabel}\n        ariaExpanded={ariaExpanded}\n        ariaControls={ariaControls}\n        badge={badge}\n        testId={itemId && `awsui-app-layout-trigger-${itemId}`}\n      />\n    </div>\n  )\n);\n\nexport const DrawerTriggersBar = ({ isMobile, topOffset, bottomOffset, drawers }: DrawerTriggersBarProps) => {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const [containerHeight, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxHeight);\n  const isCompactMode = useDensityMode(containerRef) === 'compact';\n\n  const getIndexOfOverflowItem = () => {\n    if (containerHeight) {\n      const ITEM_HEIGHT = isCompactMode ? 34 : 38;\n      const overflowSpot = containerHeight / 1.5;\n\n      const index = Math.floor(overflowSpot / ITEM_HEIGHT);\n\n      return index;\n    }\n    return 0;\n  };\n\n  const { visibleItems, overflowItems } = splitItems(drawers?.items, getIndexOfOverflowItem(), drawers?.activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <div\n      className={clsx(styles.drawer, styles['drawer-closed'], testutilStyles['drawer-closed'], {\n        [styles['drawer-mobile']]: isMobile,\n        [styles.hide]: drawers?.items.length === 1 && drawers.activeDrawerId !== undefined,\n      })}\n      ref={containerRef}\n    >\n      <div\n        ref={triggersContainerRef}\n        style={{ top: topOffset, bottom: bottomOffset }}\n        className={clsx(styles['drawer-content'], {\n          [styles['drawer-content-clickable']]: drawers?.items.length === 1,\n        })}\n        onClick={() => {\n          drawers?.items.length === 1 &&\n            drawers?.onChange({\n              activeDrawerId: drawers.items[0].id !== drawers.activeDrawerId ? drawers.items[0].id : undefined,\n            });\n        }}\n      >\n        {!isMobile && (\n          <aside aria-label={drawers?.ariaLabel} role=\"region\">\n            <div className={clsx(styles['drawer-triggers-wrapper'])} role=\"toolbar\" aria-orientation=\"vertical\">\n              {visibleItems.map((item, index) => {\n                return (\n                  <DrawerTrigger\n                    key={index}\n                    testUtilsClassName={clsx(\n                      testutilStyles['drawers-trigger'],\n                      item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n                    )}\n                    ariaExpanded={drawers?.activeDrawerId === item.id}\n                    ariaLabel={item.ariaLabels?.triggerButton}\n                    ariaControls={drawers?.activeDrawerId === item.id ? item.id : undefined}\n                    trigger={item.trigger}\n                    badge={item.badge}\n                    itemId={item.id}\n                    isActive={drawers?.activeDrawerId === item.id}\n                    onClick={() => {\n                      drawers?.items.length !== 1 &&\n                        drawers?.onChange({\n                          activeDrawerId: item.id !== drawers.activeDrawerId ? item.id : undefined,\n                        });\n                    }}\n                  />\n                );\n              })}\n              {overflowItems.length > 0 && (\n                <div className={clsx(styles['drawer-trigger'])}>\n                  <OverflowMenu\n                    ariaLabel={overflowMenuHasBadge ? drawers?.overflowWithBadgeAriaLabel : drawers?.overflowAriaLabel}\n                    items={overflowItems}\n                    onItemClick={({ detail }) => {\n                      drawers?.onChange({\n                        activeDrawerId: detail.id !== drawers.activeDrawerId ? detail.id : undefined,\n                      });\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </aside>\n        )}\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}