{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/regenerator/index.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter } from \"tslib\";\nimport { useContext } from 'react';\nimport { FunnelContext, FunnelNameSelectorContext, FunnelStepContext, FunnelSubStepContext } from '../context/analytics-context';\nimport { DATA_ATTR_FUNNEL_INTERACTION_ID, DATA_ATTR_FUNNEL_SUBSTEP, getNameFromSelector, getSubStepAllSelector } from '../selectors';\nimport { FunnelMetrics } from '../';\nimport { nodeBelongs } from '../../utils/node-belongs';\n/**\n * Custom React Hook to manage and interact with FunnelSubStep.\n * This hook will provide necessary properties and methods required\n * to track and manage interactions with a FunnelSubStep component.\n *\n * The `onFocus` method is used to track the beginning of interaction with the FunnelSubStep.\n * The `onBlur` method is used to track the completion of interaction with the FunnelSubStep.\n * The subStepId is a unique identifier for the funnel sub-step.\n * The subStepRef is a reference to the DOM element of the funnel sub-step.\n */\nexport var useFunnelSubStep = function useFunnelSubStep() {\n  var _ref;\n  var context = useContext(FunnelSubStepContext);\n  var _useFunnel = useFunnel(),\n    funnelInteractionId = _useFunnel.funnelInteractionId,\n    funnelState = _useFunnel.funnelState,\n    latestFocusCleanupFunction = _useFunnel.latestFocusCleanupFunction;\n  var _useFunnelStep = useFunnelStep(),\n    stepNumber = _useFunnelStep.stepNumber,\n    stepNameSelector = _useFunnelStep.stepNameSelector;\n  var subStepId = context.subStepId,\n    subStepSelector = context.subStepSelector,\n    subStepNameSelector = context.subStepNameSelector,\n    subStepRef = context.subStepRef,\n    isNestedSubStep = context.isNestedSubStep,\n    mousePressed = context.mousePressed,\n    isFocusedSubStep = context.isFocusedSubStep,\n    focusCleanupFunction = context.focusCleanupFunction;\n  if (isNestedSubStep) {\n    return context;\n  }\n  var onFocus = function onFocus(event) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _a, element, subStepName, stepName, cleanupFunctionHasBeenRun;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              element = event.target; // Ignore spurious focus events, such as when the browser window is focused again.\n              _context.next = 3;\n              return new Promise(function (r) {\n                return setTimeout(r, 1);\n              });\n            case 3:\n              if (!(document.activeElement !== element)) {\n                _context.next = 5;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 5:\n              if (!isFocusedSubStep.current) {\n                _context.next = 7;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 7:\n              isFocusedSubStep.current = true;\n              if (funnelInteractionId && subStepId) {\n                /*\n                  If the previously focused substep has provided a cleanup function, we\n                  call it here on behalf of the previously focused substep.\n                */\n                (_a = latestFocusCleanupFunction.current) === null || _a === void 0 ? void 0 : _a.call(latestFocusCleanupFunction);\n                subStepName = getNameFromSelector(subStepNameSelector);\n                stepName = getNameFromSelector(stepNameSelector);\n                FunnelMetrics.funnelSubStepStart({\n                  funnelInteractionId: funnelInteractionId,\n                  subStepSelector: subStepSelector,\n                  subStepNameSelector: subStepNameSelector,\n                  subStepName: subStepName,\n                  stepNumber: stepNumber,\n                  stepName: stepName,\n                  stepNameSelector: stepNameSelector,\n                  subStepAllSelector: getSubStepAllSelector()\n                });\n                /*\n                  This cleanup function will be called when the user leaves this substep.\n                  The function might be called either:\n                           - by the next focused substep as `latestFocusCleanupFunction`\n                      (through a separate instance of the function we're currently in), or\n                           - by the same substep as `focusCleanupFunction`\n                      (through the `onMouseUp` handler or the `onBlur` handler).\n                */\n                cleanupFunctionHasBeenRun = false;\n                focusCleanupFunction.current = function () {\n                  if (cleanupFunctionHasBeenRun) {\n                    return;\n                  }\n                  cleanupFunctionHasBeenRun = true;\n                  if (funnelState.current !== 'cancelled') {\n                    FunnelMetrics.funnelSubStepComplete({\n                      funnelInteractionId: funnelInteractionId,\n                      subStepSelector: subStepSelector,\n                      subStepNameSelector: subStepNameSelector,\n                      subStepName: subStepName,\n                      stepNumber: stepNumber,\n                      stepName: stepName,\n                      stepNameSelector: stepNameSelector,\n                      subStepAllSelector: getSubStepAllSelector()\n                    });\n                  }\n                };\n                latestFocusCleanupFunction.current = focusCleanupFunction.current;\n              }\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n  var onBlur = function onBlur(event) {\n    var _a;\n    if (mousePressed.current) {\n      /*\n       Ignore blur events that are caused by mouse interaction, because these events don't\n       always reflect user intention. For example, clicking the label of an interactive form\n       element will briefly blur it.\n       The mouse-caused events are handled in the global `onMouseUp` handler of the substep\n       context instead.\n       */\n      return;\n    }\n    if (!subStepRef.current || !event.relatedTarget || !nodeBelongs(subStepRef.current, event.relatedTarget)) {\n      isFocusedSubStep.current = false;\n      if (funnelInteractionId && subStepId && funnelState.current !== 'cancelled') {\n        /*\n         Run this substep's own focus cleanup function if another substep\n         hasn't already done it for us.\n         */\n        (_a = focusCleanupFunction.current) === null || _a === void 0 ? void 0 : _a.call(focusCleanupFunction);\n      }\n    }\n  };\n  var funnelSubStepProps = funnelInteractionId ? (_ref = {}, _defineProperty(_ref, DATA_ATTR_FUNNEL_SUBSTEP, subStepId), _defineProperty(_ref, \"onFocus\", onFocus), _defineProperty(_ref, \"onBlur\", onBlur), _ref) : {};\n  return Object.assign({\n    funnelSubStepProps: funnelSubStepProps\n  }, context);\n};\n/**\n * Custom React Hook to manage and interact with FunnelStep.\n * This hook will provide necessary properties required to track\n * and manage interactions with a FunnelStep component.\n *\n * The 'data-analytics-funnel-step' property of funnelStepProps is used to track the index of the current step in the funnel.\n * The context contains additional properties of the FunnelStep.\n */\nexport var useFunnelStep = function useFunnelStep() {\n  var context = useContext(FunnelStepContext);\n  return context;\n};\n/**\n * Custom React Hook to manage and interact with Funnel.\n * This hook will provide necessary properties required to track\n * and manage interactions with a Funnel component.\n *\n * The 'data-analytics-funnel-interaction-id' property of funnelProps is used to track the unique identifier of the current interaction with the funnel.\n */\nexport var useFunnel = function useFunnel() {\n  var context = useContext(FunnelContext);\n  var funnelProps = context.funnelInteractionId ? _defineProperty({}, DATA_ATTR_FUNNEL_INTERACTION_ID, context.funnelInteractionId) : {};\n  return Object.assign({\n    funnelProps: funnelProps\n  }, context);\n};\nexport var useFunnelNameSelector = function useFunnelNameSelector() {\n  var context = useContext(FunnelNameSelectorContext);\n  return context;\n};","map":{"version":3,"mappings":"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","names":["useContext","FunnelContext","FunnelNameSelectorContext","FunnelStepContext","FunnelSubStepContext","DATA_ATTR_FUNNEL_INTERACTION_ID","DATA_ATTR_FUNNEL_SUBSTEP","getNameFromSelector","getSubStepAllSelector","FunnelMetrics","nodeBelongs","useFunnelSubStep","context","useFunnel","funnelInteractionId","funnelState","latestFocusCleanupFunction","useFunnelStep","stepNumber","stepNameSelector","subStepId","subStepSelector","subStepNameSelector","subStepRef","isNestedSubStep","mousePressed","isFocusedSubStep","focusCleanupFunction","onFocus","event","__awaiter","element","target","Promise","setTimeout","r","document","activeElement","current","subStepName","stepName","funnelSubStepStart","subStepAllSelector","cleanupFunctionHasBeenRun","funnelSubStepComplete","onBlur","relatedTarget","funnelSubStepProps","funnelProps","useFunnelNameSelector"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/analytics/hooks/lib/default/internal/analytics/hooks/use-funnel.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useContext } from 'react';\nimport {\n  FunnelContext,\n  FunnelNameSelectorContext,\n  FunnelStepContext,\n  FunnelSubStepContext,\n} from '../context/analytics-context';\nimport {\n  DATA_ATTR_FUNNEL_INTERACTION_ID,\n  DATA_ATTR_FUNNEL_SUBSTEP,\n  getNameFromSelector,\n  getSubStepAllSelector,\n} from '../selectors';\nimport { FunnelMetrics } from '../';\nimport { nodeBelongs } from '../../utils/node-belongs';\n\n/**\n * Custom React Hook to manage and interact with FunnelSubStep.\n * This hook will provide necessary properties and methods required\n * to track and manage interactions with a FunnelSubStep component.\n *\n * The `onFocus` method is used to track the beginning of interaction with the FunnelSubStep.\n * The `onBlur` method is used to track the completion of interaction with the FunnelSubStep.\n * The subStepId is a unique identifier for the funnel sub-step.\n * The subStepRef is a reference to the DOM element of the funnel sub-step.\n */\nexport const useFunnelSubStep = () => {\n  const context = useContext(FunnelSubStepContext);\n  const { funnelInteractionId, funnelState, latestFocusCleanupFunction } = useFunnel();\n  const { stepNumber, stepNameSelector } = useFunnelStep();\n\n  const {\n    subStepId,\n    subStepSelector,\n    subStepNameSelector,\n    subStepRef,\n    isNestedSubStep,\n    mousePressed,\n    isFocusedSubStep,\n    focusCleanupFunction,\n  } = context;\n\n  if (isNestedSubStep) {\n    return context;\n  }\n\n  const onFocus = async (event: React.FocusEvent<HTMLDivElement>) => {\n    const element = event.target;\n    // Ignore spurious focus events, such as when the browser window is focused again.\n    await new Promise(r => setTimeout(r, 1));\n    if (document.activeElement !== element) {\n      return;\n    }\n\n    if (isFocusedSubStep.current) {\n      return;\n    }\n    isFocusedSubStep.current = true;\n\n    if (funnelInteractionId && subStepId) {\n      /*\n        If the previously focused substep has provided a cleanup function, we\n        call it here on behalf of the previously focused substep.\n      */\n      latestFocusCleanupFunction.current?.();\n\n      const subStepName = getNameFromSelector(subStepNameSelector);\n      const stepName = getNameFromSelector(stepNameSelector);\n\n      FunnelMetrics.funnelSubStepStart({\n        funnelInteractionId,\n        subStepSelector,\n        subStepNameSelector,\n        subStepName,\n        stepNumber,\n        stepName,\n        stepNameSelector,\n        subStepAllSelector: getSubStepAllSelector(),\n      });\n\n      /*\n        This cleanup function will be called when the user leaves this substep.\n        The function might be called either:\n\n          - by the next focused substep as `latestFocusCleanupFunction`\n            (through a separate instance of the function we're currently in), or\n\n          - by the same substep as `focusCleanupFunction`\n            (through the `onMouseUp` handler or the `onBlur` handler).\n      */\n      let cleanupFunctionHasBeenRun = false;\n      focusCleanupFunction.current = () => {\n        if (cleanupFunctionHasBeenRun) {\n          return;\n        }\n        cleanupFunctionHasBeenRun = true;\n\n        if (funnelState.current !== 'cancelled') {\n          FunnelMetrics.funnelSubStepComplete({\n            funnelInteractionId,\n            subStepSelector,\n            subStepNameSelector,\n            subStepName,\n            stepNumber,\n            stepName,\n            stepNameSelector,\n            subStepAllSelector: getSubStepAllSelector(),\n          });\n        }\n      };\n      latestFocusCleanupFunction.current = focusCleanupFunction.current;\n    }\n  };\n\n  const onBlur = (event: React.FocusEvent<HTMLDivElement>) => {\n    if (mousePressed.current) {\n      /*\n       Ignore blur events that are caused by mouse interaction, because these events don't\n       always reflect user intention. For example, clicking the label of an interactive form\n       element will briefly blur it.\n       The mouse-caused events are handled in the global `onMouseUp` handler of the substep\n       context instead.\n       */\n      return;\n    }\n\n    if (!subStepRef.current || !event.relatedTarget || !nodeBelongs(subStepRef.current, event.relatedTarget)) {\n      isFocusedSubStep.current = false;\n\n      if (funnelInteractionId && subStepId && funnelState.current !== 'cancelled') {\n        /*\n         Run this substep's own focus cleanup function if another substep\n         hasn't already done it for us.\n         */\n        focusCleanupFunction.current?.();\n      }\n    }\n  };\n\n  const funnelSubStepProps: Record<string, any> = funnelInteractionId\n    ? {\n        [DATA_ATTR_FUNNEL_SUBSTEP]: subStepId,\n        onFocus,\n        onBlur,\n      }\n    : {};\n\n  return { funnelSubStepProps, ...context };\n};\n\n/**\n * Custom React Hook to manage and interact with FunnelStep.\n * This hook will provide necessary properties required to track\n * and manage interactions with a FunnelStep component.\n *\n * The 'data-analytics-funnel-step' property of funnelStepProps is used to track the index of the current step in the funnel.\n * The context contains additional properties of the FunnelStep.\n */\nexport const useFunnelStep = () => {\n  const context = useContext(FunnelStepContext);\n  return context;\n};\n\n/**\n * Custom React Hook to manage and interact with Funnel.\n * This hook will provide necessary properties required to track\n * and manage interactions with a Funnel component.\n *\n * The 'data-analytics-funnel-interaction-id' property of funnelProps is used to track the unique identifier of the current interaction with the funnel.\n */\nexport const useFunnel = () => {\n  const context = useContext(FunnelContext);\n  const funnelProps: Record<string, string | number | boolean | undefined> = context.funnelInteractionId\n    ? {\n        [DATA_ATTR_FUNNEL_INTERACTION_ID]: context.funnelInteractionId,\n      }\n    : {};\n\n  return { funnelProps, ...context };\n};\n\nexport const useFunnelNameSelector = () => {\n  const context = useContext(FunnelNameSelectorContext);\n  return context;\n};\n"]},"metadata":{},"sourceType":"module"}