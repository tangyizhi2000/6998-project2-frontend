{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from \"clsx\";\nimport { useEffect, useRef } from \"react\";\nimport { getDataAttributes } from \"../internal/base-component/get-data-attributes\";\nimport { useContainerColumns } from \"../internal/breakpoints\";\nimport { TRANSITION_DURATION_MS } from \"../internal/constants\";\nimport { useDragSubscription } from \"../internal/dnd-controller/controller\";\nimport { useGlobalDragStateStyles } from \"../internal/global-drag-state-styles\";\nimport Grid from \"../internal/grid\";\nimport { ItemContainer } from \"../internal/item-container\";\nimport LiveRegion from \"../internal/live-region\";\nimport { ScreenReaderGridNavigation } from \"../internal/screenreader-grid-navigation\";\nimport { createPlaceholdersLayout, getDefaultColumnSpan, getDefaultRowSpan, getMinColumnSpan, getMinRowSpan, interpretItems } from \"../internal/utils/layout\";\nimport { Position } from \"../internal/utils/position\";\nimport { useAutoScroll } from \"../internal/utils/use-auto-scroll\";\nimport { useMergeRefs } from \"../internal/utils/use-merge-refs\";\nimport Placeholder from \"./placeholder\";\nimport styles from \"./styles.css.js\";\nimport { selectTransitionRows, useTransition } from \"./transition\";\nimport { announcementToString } from \"./utils/announcements\";\nimport { createTransforms } from \"./utils/create-transforms\";\nimport { createItemsChangeEvent } from \"./utils/events\";\nexport function InternalBoard(_ref) {\n  let {\n    items,\n    renderItem,\n    onItemsChange,\n    empty,\n    i18nStrings,\n    __internalRootRef,\n    ...rest\n  } = _ref;\n  var _a, _b;\n  const containerAccessRef = useRef(null);\n  const [currentColumns, containerQueryRef] = useContainerColumns();\n  const containerRef = useMergeRefs(containerAccessRef, containerQueryRef);\n  const itemContainerRef = useRef({});\n  useGlobalDragStateStyles();\n  const autoScrollHandlers = useAutoScroll();\n  const [transitionState, dispatch] = useTransition();\n  const transition = transitionState.transition;\n  const removeTransition = transitionState.removeTransition;\n  const transitionAnnouncement = transitionState.announcement;\n  const acquiredItem = (_a = transition === null || transition === void 0 ? void 0 : transition.acquiredItem) !== null && _a !== void 0 ? _a : null;\n  const acquiredItemElement = transition === null || transition === void 0 ? void 0 : transition.acquiredItemElement;\n  // Using cached columns from transition to ensure no unexpected changes in the process.\n  const columns = transition ? transition.itemsLayout.columns : currentColumns;\n  // Use previous items while remove transition is in progress.\n  items = (_b = removeTransition === null || removeTransition === void 0 ? void 0 : removeTransition.items) !== null && _b !== void 0 ? _b : items;\n  // The acquired item is the one being inserting at the moment but not submitted yet.\n  // It needs to be included to the layout to be a part of layout shifts and rendering.\n  items = acquiredItem ? [...items, acquiredItem] : items;\n  const itemsLayout = interpretItems(items, columns);\n  const layoutItemById = new Map(itemsLayout.items.map(item => [item.id, item]));\n  const layoutItemIndexById = new Map(itemsLayout.items.map((item, index) => [item.id, index]));\n  // Items and layout items must maintain the same order visually, in the DOM and in the data\n  // to ensure on-change events and tab order work as expected.\n  items = [...items].sort((a, b) => {\n    var _a, _b;\n    return ((_a = layoutItemIndexById.get(a.id)) !== null && _a !== void 0 ? _a : -1) - ((_b = layoutItemIndexById.get(b.id)) !== null && _b !== void 0 ? _b : -1);\n  });\n  // When an item gets acquired or removed the focus needs to be dispatched on the next render.\n  const focusNextRenderIndexRef = useRef(null);\n  const focusNextRenderIdRef = useRef(null);\n  useEffect(() => {\n    var _a, _b, _c;\n    const focusTarget = (_a = focusNextRenderIdRef.current) !== null && _a !== void 0 ? _a : (_c = items[(_b = focusNextRenderIndexRef.current) !== null && _b !== void 0 ? _b : -1]) === null || _c === void 0 ? void 0 : _c.id;\n    if (focusTarget) {\n      itemContainerRef.current[focusTarget].focusDragHandle();\n    }\n    focusNextRenderIndexRef.current = null;\n    focusNextRenderIdRef.current = null;\n  });\n  // Submit scheduled removal after a delay to let animations play.\n  useEffect(() => {\n    if (!removeTransition) {\n      return;\n    }\n    const timeoutId = setTimeout(() => {\n      dispatch({\n        type: \"submit\"\n      });\n      const removedItemIndex = items.findIndex(it => it.id === removeTransition.removedItem.id);\n      const nextIndexToFocus = removedItemIndex !== items.length - 1 ? removedItemIndex : items.length - 2;\n      focusNextRenderIndexRef.current = nextIndexToFocus;\n      onItemsChange(createItemsChangeEvent(items, removeTransition.layoutShift));\n    }, TRANSITION_DURATION_MS);\n    return () => clearTimeout(timeoutId);\n  }, [removeTransition, items, onItemsChange]);\n  const rows = selectTransitionRows(transitionState) || itemsLayout.rows;\n  const placeholdersLayout = createPlaceholdersLayout(rows, itemsLayout.columns);\n  function isElementOverBoard(rect) {\n    const board = containerAccessRef.current;\n    const boardContains = target => board === target || board.contains(target);\n    return boardContains(document.elementFromPoint(rect.left, rect.top)) || boardContains(document.elementFromPoint(rect.right, rect.top)) || boardContains(document.elementFromPoint(rect.right, rect.bottom)) || boardContains(document.elementFromPoint(rect.left, rect.bottom));\n  }\n  useDragSubscription(\"start\", _ref2 => {\n    let {\n      operation,\n      interactionType,\n      draggableItem,\n      collisionRect,\n      collisionIds\n    } = _ref2;\n    dispatch({\n      type: \"init\",\n      operation,\n      interactionType,\n      itemsLayout,\n      // TODO: resolve any\n      // The code only works assuming the board can take any draggable.\n      // If draggables can be of different types a check of some sort is required here.\n      draggableItem: draggableItem,\n      draggableRect: collisionRect,\n      collisionIds: interactionType === \"pointer\" && isElementOverBoard(collisionRect) ? collisionIds : []\n    });\n    autoScrollHandlers.addPointerEventHandlers();\n  });\n  useDragSubscription(\"update\", _ref3 => {\n    let {\n      interactionType,\n      collisionIds,\n      positionOffset,\n      collisionRect\n    } = _ref3;\n    dispatch({\n      type: \"update-with-pointer\",\n      collisionIds: interactionType === \"pointer\" && isElementOverBoard(collisionRect) ? collisionIds : [],\n      positionOffset,\n      draggableRect: collisionRect\n    });\n  });\n  useDragSubscription(\"submit\", () => {\n    dispatch({\n      type: \"submit\"\n    });\n    autoScrollHandlers.removePointerEventHandlers();\n    if (!transition) {\n      throw new Error(\"Invariant violation: no transition.\");\n    }\n    if (!transition.layoutShift || transition.layoutShift.conflicts.length > 0 || transition.layoutShift.moves.length === 0) {\n      return null;\n    }\n    // Commit new layout for insert case.\n    if (transition.operation === \"insert\") {\n      onItemsChange(createItemsChangeEvent([...items, transition.draggableItem], transition.layoutShift));\n    }\n    // Commit new layout for reorder/resize case.\n    else {\n      onItemsChange(createItemsChangeEvent(items, transition.layoutShift));\n    }\n  });\n  useDragSubscription(\"discard\", () => {\n    dispatch({\n      type: \"discard\"\n    });\n    autoScrollHandlers.removePointerEventHandlers();\n  });\n  useDragSubscription(\"acquire\", _ref4 => {\n    let {\n      droppableId,\n      draggableItem,\n      renderAcquiredItem\n    } = _ref4;\n    const placeholder = placeholdersLayout.items.find(it => it.id === droppableId);\n    // If missing then it does not belong to this board.\n    if (!placeholder) {\n      return;\n    }\n    dispatch({\n      type: \"acquire-item\",\n      position: new Position({\n        x: placeholder.x,\n        y: placeholder.y\n      }),\n      layoutElement: containerAccessRef.current,\n      acquiredItemElement: renderAcquiredItem()\n    });\n    focusNextRenderIdRef.current = draggableItem.id;\n  });\n  const removeItemAction = removedItem => {\n    dispatch({\n      type: \"init-remove\",\n      items,\n      itemsLayout,\n      removedItem\n    });\n  };\n  function focusItem(itemId) {\n    itemContainerRef.current[itemId].focusDragHandle();\n  }\n  function onItemMove(direction) {\n    if (transition) {\n      dispatch({\n        type: \"update-with-keyboard\",\n        direction\n      });\n      autoScrollHandlers.scheduleActiveElementScrollIntoView(TRANSITION_DURATION_MS);\n    }\n  }\n  const announcement = transitionAnnouncement ? announcementToString(transitionAnnouncement, items, i18nStrings, itemsLayout.columns) : \"\";\n  return _jsxs(\"div\", {\n    ref: __internalRootRef,\n    ...getDataAttributes(rest),\n    children: [_jsx(ScreenReaderGridNavigation, {\n      items: items,\n      itemsLayout: itemsLayout,\n      ariaLabel: i18nStrings.navigationAriaLabel,\n      ariaDescription: i18nStrings.navigationAriaDescription,\n      itemAriaLabel: i18nStrings.navigationItemAriaLabel,\n      onActivateItem: focusItem\n    }), _jsx(\"div\", {\n      ref: containerRef,\n      className: clsx(styles.root, {\n        [styles.empty]: rows === 0\n      }),\n      children: rows > 0 ? _jsx(Grid, {\n        columns: itemsLayout.columns,\n        layout: [...placeholdersLayout.items, ...itemsLayout.items],\n        children: gridContext => {\n          var _a;\n          const layoutShift = (_a = transition === null || transition === void 0 ? void 0 : transition.layoutShift) !== null && _a !== void 0 ? _a : removeTransition === null || removeTransition === void 0 ? void 0 : removeTransition.layoutShift;\n          const transforms = layoutShift ? createTransforms(itemsLayout, layoutShift.moves, gridContext) : {};\n          // Exclude drag target from transforms.\n          if (transition && transition.interactionType === \"pointer\") {\n            delete transforms[transition.draggableItem.id];\n          }\n          const children = [];\n          /* Placeholders are rendered even when there is no transition to support the first collisions check. */\n          placeholdersLayout.items.forEach(placeholder => {\n            var _a;\n            return children.push(_jsx(Placeholder, {\n              id: placeholder.id,\n              state: transition ? ((_a = transition.collisionIds) === null || _a === void 0 ? void 0 : _a.has(placeholder.id)) ? \"hover\" : \"active\" : \"default\",\n              gridContext: gridContext,\n              columns: itemsLayout.columns\n            }, placeholder.id));\n          });\n          items.forEach(item => {\n            const layoutItem = layoutItemById.get(item.id);\n            const isResizing = (transition === null || transition === void 0 ? void 0 : transition.operation) === \"resize\" && (transition === null || transition === void 0 ? void 0 : transition.draggableItem.id) === item.id;\n            const itemSize = layoutItem !== null && layoutItem !== void 0 ? layoutItem : {\n              width: getDefaultColumnSpan(item, itemsLayout.columns),\n              height: getDefaultRowSpan(item)\n            };\n            const itemMaxSize = isResizing && layoutItem ? {\n              width: itemsLayout.columns - layoutItem.x,\n              height: 999\n            } : itemSize;\n            children.push(_jsx(ItemContainer, {\n              ref: elem => {\n                if (elem) {\n                  itemContainerRef.current[item.id] = elem;\n                } else {\n                  delete itemContainerRef.current[item.id];\n                }\n              },\n              item: item,\n              transform: transforms[item.id],\n              inTransition: !!transition || !!removeTransition,\n              placed: item.id !== (acquiredItem === null || acquiredItem === void 0 ? void 0 : acquiredItem.id),\n              acquired: item.id === (acquiredItem === null || acquiredItem === void 0 ? void 0 : acquiredItem.id),\n              getItemSize: () => ({\n                width: gridContext.getWidth(itemSize.width),\n                minWidth: gridContext.getWidth(getMinColumnSpan(item, itemsLayout.columns)),\n                maxWidth: gridContext.getWidth(itemMaxSize.width),\n                height: gridContext.getHeight(itemSize.height),\n                minHeight: gridContext.getHeight(getMinRowSpan(item)),\n                maxHeight: gridContext.getHeight(itemMaxSize.height)\n              }),\n              onKeyMove: onItemMove,\n              children: item.id === (acquiredItem === null || acquiredItem === void 0 ? void 0 : acquiredItem.id) && acquiredItemElement ? () => acquiredItemElement : () => renderItem(item, {\n                removeItem: () => removeItemAction(item)\n              })\n            }, item.id));\n          });\n          return children;\n        }\n      }) : empty\n    }), _jsx(LiveRegion, {\n      children: announcement\n    })]\n  });\n}","map":{"version":3,"names":["jsx","_jsx","jsxs","_jsxs","clsx","useEffect","useRef","getDataAttributes","useContainerColumns","TRANSITION_DURATION_MS","useDragSubscription","useGlobalDragStateStyles","Grid","ItemContainer","LiveRegion","ScreenReaderGridNavigation","createPlaceholdersLayout","getDefaultColumnSpan","getDefaultRowSpan","getMinColumnSpan","getMinRowSpan","interpretItems","Position","useAutoScroll","useMergeRefs","Placeholder","styles","selectTransitionRows","useTransition","announcementToString","createTransforms","createItemsChangeEvent","InternalBoard","items","renderItem","onItemsChange","empty","i18nStrings","__internalRootRef","rest","_a","_b","containerAccessRef","currentColumns","containerQueryRef","containerRef","itemContainerRef","autoScrollHandlers","transitionState","dispatch","transition","removeTransition","transitionAnnouncement","announcement","acquiredItem","acquiredItemElement","columns","itemsLayout","layoutItemById","Map","map","item","id","layoutItemIndexById","index","sort","a","b","get","focusNextRenderIndexRef","focusNextRenderIdRef","_c","focusTarget","current","focusDragHandle","timeoutId","setTimeout","type","removedItemIndex","findIndex","it","removedItem","nextIndexToFocus","length","layoutShift","clearTimeout","rows","placeholdersLayout","isElementOverBoard","rect","board","boardContains","target","contains","document","elementFromPoint","left","top","right","bottom","operation","interactionType","draggableItem","collisionRect","collisionIds","draggableRect","addPointerEventHandlers","positionOffset","removePointerEventHandlers","Error","conflicts","moves","droppableId","renderAcquiredItem","placeholder","find","position","x","y","layoutElement","removeItemAction","focusItem","itemId","onItemMove","direction","scheduleActiveElementScrollIntoView","ref","children","ariaLabel","navigationAriaLabel","ariaDescription","navigationAriaDescription","itemAriaLabel","navigationItemAriaLabel","onActivateItem","className","root","layout","gridContext","transforms","forEach","push","state","has","layoutItem","isResizing","itemSize","width","height","itemMaxSize","elem","transform","inTransition","placed","acquired","getItemSize","getWidth","minWidth","maxWidth","getHeight","minHeight","maxHeight","onKeyMove","removeItem"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/board-components/board/internal.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from \"clsx\";\nimport { useEffect, useRef } from \"react\";\nimport { getDataAttributes } from \"../internal/base-component/get-data-attributes\";\nimport { useContainerColumns } from \"../internal/breakpoints\";\nimport { TRANSITION_DURATION_MS } from \"../internal/constants\";\nimport { useDragSubscription } from \"../internal/dnd-controller/controller\";\nimport { useGlobalDragStateStyles } from \"../internal/global-drag-state-styles\";\nimport Grid from \"../internal/grid\";\nimport { ItemContainer } from \"../internal/item-container\";\nimport LiveRegion from \"../internal/live-region\";\nimport { ScreenReaderGridNavigation } from \"../internal/screenreader-grid-navigation\";\nimport { createPlaceholdersLayout, getDefaultColumnSpan, getDefaultRowSpan, getMinColumnSpan, getMinRowSpan, interpretItems, } from \"../internal/utils/layout\";\nimport { Position } from \"../internal/utils/position\";\nimport { useAutoScroll } from \"../internal/utils/use-auto-scroll\";\nimport { useMergeRefs } from \"../internal/utils/use-merge-refs\";\nimport Placeholder from \"./placeholder\";\nimport styles from \"./styles.css.js\";\nimport { selectTransitionRows, useTransition } from \"./transition\";\nimport { announcementToString } from \"./utils/announcements\";\nimport { createTransforms } from \"./utils/create-transforms\";\nimport { createItemsChangeEvent } from \"./utils/events\";\nexport function InternalBoard({ items, renderItem, onItemsChange, empty, i18nStrings, __internalRootRef, ...rest }) {\n    var _a, _b;\n    const containerAccessRef = useRef(null);\n    const [currentColumns, containerQueryRef] = useContainerColumns();\n    const containerRef = useMergeRefs(containerAccessRef, containerQueryRef);\n    const itemContainerRef = useRef({});\n    useGlobalDragStateStyles();\n    const autoScrollHandlers = useAutoScroll();\n    const [transitionState, dispatch] = useTransition();\n    const transition = transitionState.transition;\n    const removeTransition = transitionState.removeTransition;\n    const transitionAnnouncement = transitionState.announcement;\n    const acquiredItem = (_a = transition === null || transition === void 0 ? void 0 : transition.acquiredItem) !== null && _a !== void 0 ? _a : null;\n    const acquiredItemElement = transition === null || transition === void 0 ? void 0 : transition.acquiredItemElement;\n    // Using cached columns from transition to ensure no unexpected changes in the process.\n    const columns = transition ? transition.itemsLayout.columns : currentColumns;\n    // Use previous items while remove transition is in progress.\n    items = (_b = removeTransition === null || removeTransition === void 0 ? void 0 : removeTransition.items) !== null && _b !== void 0 ? _b : items;\n    // The acquired item is the one being inserting at the moment but not submitted yet.\n    // It needs to be included to the layout to be a part of layout shifts and rendering.\n    items = acquiredItem ? [...items, acquiredItem] : items;\n    const itemsLayout = interpretItems(items, columns);\n    const layoutItemById = new Map(itemsLayout.items.map((item) => [item.id, item]));\n    const layoutItemIndexById = new Map(itemsLayout.items.map((item, index) => [item.id, index]));\n    // Items and layout items must maintain the same order visually, in the DOM and in the data\n    // to ensure on-change events and tab order work as expected.\n    items = [...items].sort((a, b) => { var _a, _b; return ((_a = layoutItemIndexById.get(a.id)) !== null && _a !== void 0 ? _a : -1) - ((_b = layoutItemIndexById.get(b.id)) !== null && _b !== void 0 ? _b : -1); });\n    // When an item gets acquired or removed the focus needs to be dispatched on the next render.\n    const focusNextRenderIndexRef = useRef(null);\n    const focusNextRenderIdRef = useRef(null);\n    useEffect(() => {\n        var _a, _b, _c;\n        const focusTarget = (_a = focusNextRenderIdRef.current) !== null && _a !== void 0 ? _a : (_c = items[(_b = focusNextRenderIndexRef.current) !== null && _b !== void 0 ? _b : -1]) === null || _c === void 0 ? void 0 : _c.id;\n        if (focusTarget) {\n            itemContainerRef.current[focusTarget].focusDragHandle();\n        }\n        focusNextRenderIndexRef.current = null;\n        focusNextRenderIdRef.current = null;\n    });\n    // Submit scheduled removal after a delay to let animations play.\n    useEffect(() => {\n        if (!removeTransition) {\n            return;\n        }\n        const timeoutId = setTimeout(() => {\n            dispatch({ type: \"submit\" });\n            const removedItemIndex = items.findIndex((it) => it.id === removeTransition.removedItem.id);\n            const nextIndexToFocus = removedItemIndex !== items.length - 1 ? removedItemIndex : items.length - 2;\n            focusNextRenderIndexRef.current = nextIndexToFocus;\n            onItemsChange(createItemsChangeEvent(items, removeTransition.layoutShift));\n        }, TRANSITION_DURATION_MS);\n        return () => clearTimeout(timeoutId);\n    }, [removeTransition, items, onItemsChange]);\n    const rows = selectTransitionRows(transitionState) || itemsLayout.rows;\n    const placeholdersLayout = createPlaceholdersLayout(rows, itemsLayout.columns);\n    function isElementOverBoard(rect) {\n        const board = containerAccessRef.current;\n        const boardContains = (target) => board === target || board.contains(target);\n        return (boardContains(document.elementFromPoint(rect.left, rect.top)) ||\n            boardContains(document.elementFromPoint(rect.right, rect.top)) ||\n            boardContains(document.elementFromPoint(rect.right, rect.bottom)) ||\n            boardContains(document.elementFromPoint(rect.left, rect.bottom)));\n    }\n    useDragSubscription(\"start\", ({ operation, interactionType, draggableItem, collisionRect, collisionIds }) => {\n        dispatch({\n            type: \"init\",\n            operation,\n            interactionType,\n            itemsLayout,\n            // TODO: resolve any\n            // The code only works assuming the board can take any draggable.\n            // If draggables can be of different types a check of some sort is required here.\n            draggableItem: draggableItem,\n            draggableRect: collisionRect,\n            collisionIds: interactionType === \"pointer\" && isElementOverBoard(collisionRect) ? collisionIds : [],\n        });\n        autoScrollHandlers.addPointerEventHandlers();\n    });\n    useDragSubscription(\"update\", ({ interactionType, collisionIds, positionOffset, collisionRect }) => {\n        dispatch({\n            type: \"update-with-pointer\",\n            collisionIds: interactionType === \"pointer\" && isElementOverBoard(collisionRect) ? collisionIds : [],\n            positionOffset,\n            draggableRect: collisionRect,\n        });\n    });\n    useDragSubscription(\"submit\", () => {\n        dispatch({ type: \"submit\" });\n        autoScrollHandlers.removePointerEventHandlers();\n        if (!transition) {\n            throw new Error(\"Invariant violation: no transition.\");\n        }\n        if (!transition.layoutShift ||\n            transition.layoutShift.conflicts.length > 0 ||\n            transition.layoutShift.moves.length === 0) {\n            return null;\n        }\n        // Commit new layout for insert case.\n        if (transition.operation === \"insert\") {\n            onItemsChange(createItemsChangeEvent([...items, transition.draggableItem], transition.layoutShift));\n        }\n        // Commit new layout for reorder/resize case.\n        else {\n            onItemsChange(createItemsChangeEvent(items, transition.layoutShift));\n        }\n    });\n    useDragSubscription(\"discard\", () => {\n        dispatch({ type: \"discard\" });\n        autoScrollHandlers.removePointerEventHandlers();\n    });\n    useDragSubscription(\"acquire\", ({ droppableId, draggableItem, renderAcquiredItem }) => {\n        const placeholder = placeholdersLayout.items.find((it) => it.id === droppableId);\n        // If missing then it does not belong to this board.\n        if (!placeholder) {\n            return;\n        }\n        dispatch({\n            type: \"acquire-item\",\n            position: new Position({ x: placeholder.x, y: placeholder.y }),\n            layoutElement: containerAccessRef.current,\n            acquiredItemElement: renderAcquiredItem(),\n        });\n        focusNextRenderIdRef.current = draggableItem.id;\n    });\n    const removeItemAction = (removedItem) => {\n        dispatch({ type: \"init-remove\", items, itemsLayout, removedItem });\n    };\n    function focusItem(itemId) {\n        itemContainerRef.current[itemId].focusDragHandle();\n    }\n    function onItemMove(direction) {\n        if (transition) {\n            dispatch({ type: \"update-with-keyboard\", direction });\n            autoScrollHandlers.scheduleActiveElementScrollIntoView(TRANSITION_DURATION_MS);\n        }\n    }\n    const announcement = transitionAnnouncement\n        ? announcementToString(transitionAnnouncement, items, i18nStrings, itemsLayout.columns)\n        : \"\";\n    return (_jsxs(\"div\", { ref: __internalRootRef, ...getDataAttributes(rest), children: [_jsx(ScreenReaderGridNavigation, { items: items, itemsLayout: itemsLayout, ariaLabel: i18nStrings.navigationAriaLabel, ariaDescription: i18nStrings.navigationAriaDescription, itemAriaLabel: i18nStrings.navigationItemAriaLabel, onActivateItem: focusItem }), _jsx(\"div\", { ref: containerRef, className: clsx(styles.root, { [styles.empty]: rows === 0 }), children: rows > 0 ? (_jsx(Grid, { columns: itemsLayout.columns, layout: [...placeholdersLayout.items, ...itemsLayout.items], children: (gridContext) => {\n                        var _a;\n                        const layoutShift = (_a = transition === null || transition === void 0 ? void 0 : transition.layoutShift) !== null && _a !== void 0 ? _a : removeTransition === null || removeTransition === void 0 ? void 0 : removeTransition.layoutShift;\n                        const transforms = layoutShift ? createTransforms(itemsLayout, layoutShift.moves, gridContext) : {};\n                        // Exclude drag target from transforms.\n                        if (transition && transition.interactionType === \"pointer\") {\n                            delete transforms[transition.draggableItem.id];\n                        }\n                        const children = [];\n                        /* Placeholders are rendered even when there is no transition to support the first collisions check. */\n                        placeholdersLayout.items.forEach((placeholder) => {\n                            var _a;\n                            return children.push(_jsx(Placeholder, { id: placeholder.id, state: transition ? (((_a = transition.collisionIds) === null || _a === void 0 ? void 0 : _a.has(placeholder.id)) ? \"hover\" : \"active\") : \"default\", gridContext: gridContext, columns: itemsLayout.columns }, placeholder.id));\n                        });\n                        items.forEach((item) => {\n                            const layoutItem = layoutItemById.get(item.id);\n                            const isResizing = (transition === null || transition === void 0 ? void 0 : transition.operation) === \"resize\" && (transition === null || transition === void 0 ? void 0 : transition.draggableItem.id) === item.id;\n                            const itemSize = layoutItem !== null && layoutItem !== void 0 ? layoutItem : {\n                                width: getDefaultColumnSpan(item, itemsLayout.columns),\n                                height: getDefaultRowSpan(item),\n                            };\n                            const itemMaxSize = isResizing && layoutItem ? { width: itemsLayout.columns - layoutItem.x, height: 999 } : itemSize;\n                            children.push(_jsx(ItemContainer, { ref: (elem) => {\n                                    if (elem) {\n                                        itemContainerRef.current[item.id] = elem;\n                                    }\n                                    else {\n                                        delete itemContainerRef.current[item.id];\n                                    }\n                                }, item: item, transform: transforms[item.id], inTransition: !!transition || !!removeTransition, placed: item.id !== (acquiredItem === null || acquiredItem === void 0 ? void 0 : acquiredItem.id), acquired: item.id === (acquiredItem === null || acquiredItem === void 0 ? void 0 : acquiredItem.id), getItemSize: () => ({\n                                    width: gridContext.getWidth(itemSize.width),\n                                    minWidth: gridContext.getWidth(getMinColumnSpan(item, itemsLayout.columns)),\n                                    maxWidth: gridContext.getWidth(itemMaxSize.width),\n                                    height: gridContext.getHeight(itemSize.height),\n                                    minHeight: gridContext.getHeight(getMinRowSpan(item)),\n                                    maxHeight: gridContext.getHeight(itemMaxSize.height),\n                                }), onKeyMove: onItemMove, children: item.id === (acquiredItem === null || acquiredItem === void 0 ? void 0 : acquiredItem.id) && acquiredItemElement\n                                    ? () => acquiredItemElement\n                                    : () => renderItem(item, { removeItem: () => removeItemAction(item) }) }, item.id));\n                        });\n                        return children;\n                    } })) : (empty) }), _jsx(LiveRegion, { children: announcement })] }));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}