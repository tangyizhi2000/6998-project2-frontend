{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport InternalLink from '../../../link/internal';\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport { fireNonCancelableEvent } from '../../events';\nimport { usePrevious } from '../../hooks/use-previous';\nimport styles from './styles.css.js';\nfunction DropdownStatus(_ref) {\n  let {\n    children\n  } = _ref;\n  return React.createElement(\"div\", {\n    className: styles.root\n  }, children);\n}\nexport const useDropdownStatus = _ref2 => {\n  let {\n    statusType,\n    empty,\n    loadingText,\n    finishedText,\n    filteringResultsText,\n    errorText,\n    recoveryText,\n    isEmpty,\n    isNoMatch,\n    isFiltered,\n    noMatch,\n    onRecoveryClick,\n    hasRecoveryCallback = false,\n    errorIconAriaLabel\n  } = _ref2;\n  const previousStatusType = usePrevious(statusType);\n  const statusResult = {\n    isSticky: true,\n    content: null\n  };\n  if (statusType === 'loading') {\n    statusResult.content = React.createElement(InternalStatusIndicator, {\n      type: 'loading'\n    }, loadingText);\n  } else if (statusType === 'error') {\n    statusResult.content = React.createElement(\"span\", null, React.createElement(InternalStatusIndicator, {\n      type: \"error\",\n      __display: \"inline\",\n      __animate: previousStatusType !== 'error',\n      iconAriaLabel: errorIconAriaLabel\n    }, errorText), ' ', !!recoveryText && hasRecoveryCallback && React.createElement(InternalLink, {\n      onFollow: () => fireNonCancelableEvent(onRecoveryClick),\n      variant: \"recovery\",\n      className: styles.recovery\n    }, recoveryText));\n  } else if (isEmpty && empty) {\n    statusResult.content = empty;\n  } else if (isNoMatch && noMatch) {\n    statusResult.content = noMatch;\n  } else if (isFiltered && filteringResultsText) {\n    statusResult.content = filteringResultsText;\n  } else if (statusType === 'finished' && finishedText) {\n    statusResult.content = finishedText;\n    statusResult.isSticky = false;\n  }\n  return statusResult;\n};\nexport default DropdownStatus;","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,wBAAwB;AAEjD,OAAOC,uBAAuB,MAAM,oCAAoC;AACxE,SAAoCC,sBAAsB,QAAQ,cAAc;AAChF,SAASC,WAAW,QAAQ,0BAA0B;AAGtD,OAAOC,MAAM,MAAM,iBAAiB;AAwBpC,SAASC,cAAc,OAA4C;EAAA,IAA3C;IAAEC;EAAQ,CAAiC;EACjE,OAAOP;IAAKQ,SAAS,EAAEH,MAAM,CAACI;EAAI,GAAGF,QAAQ,CAAO;AACtD;AAuBA,OAAO,MAAMG,iBAAiB,GAAsB,SAe/C;EAAA,IAfgD;IACnDC,UAAU;IACVC,KAAK;IACLC,WAAW;IACXC,YAAY;IACZC,oBAAoB;IACpBC,SAAS;IACTC,YAAY;IACZC,OAAO;IACPC,SAAS;IACTC,UAAU;IACVC,OAAO;IACPC,eAAe;IACfC,mBAAmB,GAAG,KAAK;IAC3BC;EAAkB,CACnB;EACC,MAAMC,kBAAkB,GAAGrB,WAAW,CAACO,UAAU,CAAC;EAClD,MAAMe,YAAY,GAAyB;IAAEC,QAAQ,EAAE,IAAI;IAAEC,OAAO,EAAE;EAAI,CAAE;EAE5E,IAAIjB,UAAU,KAAK,SAAS,EAAE;IAC5Be,YAAY,CAACE,OAAO,GAAG5B,oBAACE,uBAAuB;MAAC2B,IAAI,EAAE;IAAS,GAAGhB,WAAW,CAA2B;GACzG,MAAM,IAAIF,UAAU,KAAK,OAAO,EAAE;IACjCe,YAAY,CAACE,OAAO,GAClB5B,kCACEA,oBAACE,uBAAuB;MACtB2B,IAAI,EAAC,OAAO;MACZC,SAAS,EAAC,QAAQ;MAClBC,SAAS,EAAEN,kBAAkB,KAAK,OAAO;MACzCO,aAAa,EAAER;IAAkB,GAEhCR,SAAS,CACc,EAAC,GAAG,EAC7B,CAAC,CAACC,YAAY,IAAIM,mBAAmB,IACpCvB,oBAACC,YAAY;MACXgC,QAAQ,EAAE,MAAM9B,sBAAsB,CAACmB,eAAe,CAAC;MACvDY,OAAO,EAAC,UAAU;MAClB1B,SAAS,EAAEH,MAAM,CAAC8B;IAAQ,GAEzBlB,YAAY,CAEhB,CAEJ;GACF,MAAM,IAAIC,OAAO,IAAIN,KAAK,EAAE;IAC3Bc,YAAY,CAACE,OAAO,GAAGhB,KAAK;GAC7B,MAAM,IAAIO,SAAS,IAAIE,OAAO,EAAE;IAC/BK,YAAY,CAACE,OAAO,GAAGP,OAAO;GAC/B,MAAM,IAAID,UAAU,IAAIL,oBAAoB,EAAE;IAC7CW,YAAY,CAACE,OAAO,GAAGb,oBAAoB;GAC5C,MAAM,IAAIJ,UAAU,KAAK,UAAU,IAAIG,YAAY,EAAE;IACpDY,YAAY,CAACE,OAAO,GAAGd,YAAY;IACnCY,YAAY,CAACC,QAAQ,GAAG,KAAK;;EAG/B,OAAOD,YAAY;AACrB,CAAC;AAED,eAAepB,cAAc","names":["React","InternalLink","InternalStatusIndicator","fireNonCancelableEvent","usePrevious","styles","DropdownStatus","children","className","root","useDropdownStatus","statusType","empty","loadingText","finishedText","filteringResultsText","errorText","recoveryText","isEmpty","isNoMatch","isFiltered","noMatch","onRecoveryClick","hasRecoveryCallback","errorIconAriaLabel","previousStatusType","statusResult","isSticky","content","type","__display","__animate","iconAriaLabel","onFollow","variant","recovery"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/internal/components/dropdown-status/lib/default/internal/components/dropdown-status/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport InternalLink from '../../../link/internal';\n\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport { NonCancelableEventHandler, fireNonCancelableEvent } from '../../events';\nimport { usePrevious } from '../../hooks/use-previous';\n\nimport { DropdownStatusProps } from './interfaces';\nimport styles from './styles.css.js';\n\nexport { DropdownStatusProps };\n\nexport interface DropdownStatusPropsExtended extends DropdownStatusProps {\n  isEmpty?: boolean;\n  isNoMatch?: boolean;\n  isFiltered?: boolean;\n  noMatch?: React.ReactNode;\n  filteringResultsText?: string;\n  /**\n   * Called when the user clicks the recovery button placed at the\n   * bottom of the dropdown list in the error state. Use this to\n   * retry a failed request or provide another option for the user\n   * to recover from the error.\n   */\n  onRecoveryClick?: NonCancelableEventHandler;\n  /**\n   * Determines if retry button should be rendered\n   * in case recoveryText was automatically provided by i18n.\n   */\n  hasRecoveryCallback?: boolean;\n}\n\nfunction DropdownStatus({ children }: { children: React.ReactNode }) {\n  return <div className={styles.root}>{children}</div>;\n}\n\ntype UseDropdownStatus = ({\n  statusType,\n  empty,\n  loadingText,\n  finishedText,\n  filteringResultsText,\n  errorText,\n  recoveryText,\n  isEmpty,\n  isNoMatch,\n  isFiltered,\n  noMatch,\n  hasRecoveryCallback,\n  onRecoveryClick,\n}: DropdownStatusPropsExtended) => DropdownStatusResult;\n\ninterface DropdownStatusResult {\n  isSticky: boolean;\n  content: React.ReactNode | null;\n}\n\nexport const useDropdownStatus: UseDropdownStatus = ({\n  statusType,\n  empty,\n  loadingText,\n  finishedText,\n  filteringResultsText,\n  errorText,\n  recoveryText,\n  isEmpty,\n  isNoMatch,\n  isFiltered,\n  noMatch,\n  onRecoveryClick,\n  hasRecoveryCallback = false,\n  errorIconAriaLabel,\n}) => {\n  const previousStatusType = usePrevious(statusType);\n  const statusResult: DropdownStatusResult = { isSticky: true, content: null };\n\n  if (statusType === 'loading') {\n    statusResult.content = <InternalStatusIndicator type={'loading'}>{loadingText}</InternalStatusIndicator>;\n  } else if (statusType === 'error') {\n    statusResult.content = (\n      <span>\n        <InternalStatusIndicator\n          type=\"error\"\n          __display=\"inline\"\n          __animate={previousStatusType !== 'error'}\n          iconAriaLabel={errorIconAriaLabel}\n        >\n          {errorText}\n        </InternalStatusIndicator>{' '}\n        {!!recoveryText && hasRecoveryCallback && (\n          <InternalLink\n            onFollow={() => fireNonCancelableEvent(onRecoveryClick)}\n            variant=\"recovery\"\n            className={styles.recovery}\n          >\n            {recoveryText}\n          </InternalLink>\n        )}\n      </span>\n    );\n  } else if (isEmpty && empty) {\n    statusResult.content = empty;\n  } else if (isNoMatch && noMatch) {\n    statusResult.content = noMatch;\n  } else if (isFiltered && filteringResultsText) {\n    statusResult.content = filteringResultsText;\n  } else if (statusType === 'finished' && finishedText) {\n    statusResult.content = finishedText;\n    statusResult.isSticky = false;\n  }\n\n  return statusResult;\n};\n\nexport default DropdownStatus;\n"]},"metadata":{},"sourceType":"module"}