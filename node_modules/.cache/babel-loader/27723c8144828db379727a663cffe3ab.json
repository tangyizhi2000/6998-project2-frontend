{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect, useState } from 'react';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { supportsStickyPosition } from '../internal/utils/dom';\nimport styles from './styles.css.js';\nimport LiveRegion from '../internal/components/live-region';\nexport function NoDataCell(_ref) {\n  let {\n    variant,\n    containerWidth,\n    totalColumnsCount,\n    hasFooter,\n    loading,\n    loadingText,\n    empty,\n    tableRef\n  } = _ref;\n  const [tablePaddings, setTablePaddings] = useState(containerWidth);\n  useEffect(() => {\n    if (tableRef.current) {\n      const tablePaddingLeft = parseFloat(getComputedStyle(tableRef.current).paddingLeft) || 0;\n      const tablePaddingRight = parseFloat(getComputedStyle(tableRef.current).paddingRight) || 0;\n      setTablePaddings(tablePaddingLeft + tablePaddingRight);\n    }\n  }, [variant, tableRef]);\n  containerWidth = containerWidth + tablePaddings;\n  return React.createElement(\"td\", {\n    colSpan: totalColumnsCount,\n    className: clsx(styles['cell-merged'], hasFooter && styles['has-footer'])\n  }, React.createElement(\"div\", {\n    className: styles['cell-merged-content'],\n    style: {\n      width: supportsStickyPosition() && containerWidth && Math.floor(containerWidth) || undefined\n    }\n  }, loading ? React.createElement(InternalStatusIndicator, {\n    type: \"loading\",\n    className: styles.loading,\n    wrapText: true\n  }, React.createElement(LiveRegion, {\n    visible: true\n  }, loadingText)) : React.createElement(\"div\", {\n    className: styles.empty\n  }, empty)));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,uBAAuB,MAAM,8BAA8B;AAClE,SAASC,sBAAsB,QAAQ,uBAAuB;AAC9D,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,UAAU,MAAM,oCAAoC;AAc3D,OAAM,SAAUC,UAAU,OASR;EAAA,IATS;IACzBC,OAAO;IACPC,cAAc;IACdC,iBAAiB;IACjBC,SAAS;IACTC,OAAO;IACPC,WAAW;IACXC,KAAK;IACLC;EAAQ,CACQ;EAChB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAACO,cAAc,CAAC;EAElER,SAAS,CAAC,MAAK;IACb,IAAIc,QAAQ,CAACG,OAAO,EAAE;MACpB,MAAMC,gBAAgB,GAAGC,UAAU,CAACC,gBAAgB,CAACN,QAAQ,CAACG,OAAO,CAAC,CAACI,WAAW,CAAC,IAAI,CAAC;MACxF,MAAMC,iBAAiB,GAAGH,UAAU,CAACC,gBAAgB,CAACN,QAAQ,CAACG,OAAO,CAAC,CAACM,YAAY,CAAC,IAAI,CAAC;MAC1FP,gBAAgB,CAACE,gBAAgB,GAAGI,iBAAiB,CAAC;;EAE1D,CAAC,EAAE,CAACf,OAAO,EAAEO,QAAQ,CAAC,CAAC;EAEvBN,cAAc,GAAGA,cAAc,GAAGO,aAAa;EAE/C,OACEhB;IAAIyB,OAAO,EAAEf,iBAAiB;IAAEgB,SAAS,EAAE3B,IAAI,CAACM,MAAM,CAAC,aAAa,CAAC,EAAEM,SAAS,IAAIN,MAAM,CAAC,YAAY,CAAC;EAAC,GACvGL;IACE0B,SAAS,EAAErB,MAAM,CAAC,qBAAqB,CAAC;IACxCsB,KAAK,EAAE;MACLC,KAAK,EAAGxB,sBAAsB,EAAE,IAAIK,cAAc,IAAIoB,IAAI,CAACC,KAAK,CAACrB,cAAc,CAAC,IAAKsB;;EACtF,GAEAnB,OAAO,GACNZ,oBAACG,uBAAuB;IAAC6B,IAAI,EAAC,SAAS;IAACN,SAAS,EAAErB,MAAM,CAACO,OAAO;IAAEqB,QAAQ,EAAE;EAAI,GAC/EjC,oBAACM,UAAU;IAAC4B,OAAO,EAAE;EAAI,GAAGrB,WAAW,CAAc,CAC7B,GAE1Bb;IAAK0B,SAAS,EAAErB,MAAM,CAACS;EAAK,GAAGA,KAAK,CACrC,CACG,CACH;AAET","names":["clsx","React","useEffect","useState","InternalStatusIndicator","supportsStickyPosition","styles","LiveRegion","NoDataCell","variant","containerWidth","totalColumnsCount","hasFooter","loading","loadingText","empty","tableRef","tablePaddings","setTablePaddings","current","tablePaddingLeft","parseFloat","getComputedStyle","paddingLeft","tablePaddingRight","paddingRight","colSpan","className","style","width","Math","floor","undefined","type","wrapText","visible"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/table/lib/default/table/node-data-cell.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect, useState } from 'react';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { supportsStickyPosition } from '../internal/utils/dom';\nimport styles from './styles.css.js';\nimport LiveRegion from '../internal/components/live-region';\nimport { TableProps } from './interfaces';\n\ninterface NoDataCellProps {\n  variant: TableProps.Variant;\n  containerWidth: number;\n  totalColumnsCount: number;\n  hasFooter: boolean;\n  loading?: boolean;\n  loadingText?: string;\n  empty?: React.ReactNode;\n  tableRef: React.RefObject<HTMLTableElement>;\n}\n\nexport function NoDataCell({\n  variant,\n  containerWidth,\n  totalColumnsCount,\n  hasFooter,\n  loading,\n  loadingText,\n  empty,\n  tableRef,\n}: NoDataCellProps) {\n  const [tablePaddings, setTablePaddings] = useState(containerWidth);\n\n  useEffect(() => {\n    if (tableRef.current) {\n      const tablePaddingLeft = parseFloat(getComputedStyle(tableRef.current).paddingLeft) || 0;\n      const tablePaddingRight = parseFloat(getComputedStyle(tableRef.current).paddingRight) || 0;\n      setTablePaddings(tablePaddingLeft + tablePaddingRight);\n    }\n  }, [variant, tableRef]);\n\n  containerWidth = containerWidth + tablePaddings;\n\n  return (\n    <td colSpan={totalColumnsCount} className={clsx(styles['cell-merged'], hasFooter && styles['has-footer'])}>\n      <div\n        className={styles['cell-merged-content']}\n        style={{\n          width: (supportsStickyPosition() && containerWidth && Math.floor(containerWidth)) || undefined,\n        }}\n      >\n        {loading ? (\n          <InternalStatusIndicator type=\"loading\" className={styles.loading} wrapText={true}>\n            <LiveRegion visible={true}>{loadingText}</LiveRegion>\n          </InternalStatusIndicator>\n        ) : (\n          <div className={styles.empty}>{empty}</div>\n        )}\n      </div>\n    </td>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}