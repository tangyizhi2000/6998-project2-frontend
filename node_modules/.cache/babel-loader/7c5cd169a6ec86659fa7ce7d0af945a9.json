{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isMotionDisabled } from '@cloudscape-design/component-toolkit/internal';\nimport isNativeSmoothScrollingSupported from './native-smooth-scroll-supported';\n// The scroll speed depends on the scrolling distance. The equation below is an interpolation of measurements in Chrome.\nvar getScrollSpeed = function getScrollSpeed(pixels) {\n  return 0.0015 * Math.abs(pixels) + 0.558;\n};\nvar getScrollTime = function getScrollTime(pixels) {\n  return Math.round(Math.abs(pixels) / getScrollSpeed(pixels));\n};\nvar now = function now() {\n  return window.performance ? window.performance.now() : Date.now();\n};\nvar ease = function ease(k) {\n  return 0.5 * (1 - Math.cos(Math.PI * k));\n};\nvar step = function step(context) {\n  var time = now();\n  var elapsed = Math.min((time - context.startTime) / context.scrollTime, 1);\n  var value = ease(elapsed);\n  var currentX = context.startX + (context.endX - context.startX) * value;\n  context.scrollable.scrollLeft = currentX;\n  // scroll more if we have not reached our destination\n  if (currentX !== context.endX) {\n    requestAnimationFrame(function () {\n      return step(context);\n    });\n  }\n};\nvar simulateSmoothScroll = function simulateSmoothScroll(element, endX) {\n  var startX = element.scrollLeft;\n  step({\n    scrollable: element,\n    startX: startX,\n    endX: endX,\n    startTime: now(),\n    scrollTime: getScrollTime(endX - startX)\n  });\n};\nvar smoothScroll = function smoothScroll(element, to) {\n  if (isMotionDisabled(element)) {\n    element.scrollLeft = to;\n    return;\n  }\n  if (isNativeSmoothScrollingSupported() && element.scrollTo) {\n    element.scrollTo({\n      left: to,\n      behavior: 'smooth'\n    });\n    return;\n  }\n  simulateSmoothScroll(element, to);\n};\nexport default smoothScroll;","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,gBAAgB,QAAQ,+CAA+C;AAChF,OAAOC,gCAAgC,MAAM,kCAAkC;AAU/E;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,MAAc;EAAA,OAAK,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACF,MAAM,CAAC,GAAG,KAAK;AAAA;AAC5E,IAAMG,aAAa,GAAG,SAAhBA,aAAa,CAAIH,MAAc;EAAA,OAAKC,IAAI,CAACG,KAAK,CAACH,IAAI,CAACC,GAAG,CAACF,MAAM,CAAC,GAAGD,cAAc,CAACC,MAAM,CAAC,CAAC;AAAA;AAE/F,IAAMK,GAAG,GAAG,SAANA,GAAG;EAAA,OAAUC,MAAM,CAACC,WAAW,GAAGD,MAAM,CAACC,WAAW,CAACF,GAAG,EAAE,GAAGG,IAAI,CAACH,GAAG,EAAE;AAAA,CAAC;AAE9E,IAAMI,IAAI,GAAG,SAAPA,IAAI,CAAIC,CAAS,EAAY;EACjC,OAAO,GAAG,IAAI,CAAC,GAAGT,IAAI,CAACU,GAAG,CAACV,IAAI,CAACW,EAAE,GAAGF,CAAC,CAAC,CAAC;AAC1C,CAAC;AAED,IAAMG,IAAI,GAAG,SAAPA,IAAI,CAAIC,OAAsB,EAAU;EAC5C,IAAMC,IAAI,GAAGV,GAAG,EAAE;EAClB,IAAMW,OAAO,GAAGf,IAAI,CAACgB,GAAG,CAAC,CAACF,IAAI,GAAGD,OAAO,CAACI,SAAS,IAAIJ,OAAO,CAACK,UAAU,EAAE,CAAC,CAAC;EAC5E,IAAMC,KAAK,GAAGX,IAAI,CAACO,OAAO,CAAC;EAC3B,IAAMK,QAAQ,GAAGP,OAAO,CAACQ,MAAM,GAAG,CAACR,OAAO,CAACS,IAAI,GAAGT,OAAO,CAACQ,MAAM,IAAIF,KAAK;EACzEN,OAAO,CAACU,UAAU,CAACC,UAAU,GAAGJ,QAAQ;EACxC;EACA,IAAIA,QAAQ,KAAKP,OAAO,CAACS,IAAI,EAAE;IAC7BG,qBAAqB,CAAC;MAAA,OAAMb,IAAI,CAACC,OAAO,CAAC;IAAA,EAAC;;AAE9C,CAAC;AAED,IAAMa,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAIC,OAAoB,EAAEL,IAAY,EAAU;EACxE,IAAMD,MAAM,GAAGM,OAAO,CAACH,UAAU;EACjCZ,IAAI,CAAC;IACHW,UAAU,EAAEI,OAAO;IACnBN,MAAM,EAANA,MAAM;IACNC,IAAI,EAAJA,IAAI;IACJL,SAAS,EAAEb,GAAG,EAAE;IAChBc,UAAU,EAAEhB,aAAa,CAACoB,IAAI,GAAGD,MAAM;GACxC,CAAC;AACJ,CAAC;AAED,IAAMO,YAAY,GAAG,SAAfA,YAAY,CAAID,OAAoB,EAAEE,EAAU,EAAI;EACxD,IAAIjC,gBAAgB,CAAC+B,OAAO,CAAC,EAAE;IAC7BA,OAAO,CAACH,UAAU,GAAGK,EAAE;IACvB;;EAEF,IAAIhC,gCAAgC,EAAE,IAAI8B,OAAO,CAACG,QAAQ,EAAE;IAC1DH,OAAO,CAACG,QAAQ,CAAC;MACfC,IAAI,EAAEF,EAAE;MACRG,QAAQ,EAAE;KACX,CAAC;IACF;;EAEFN,oBAAoB,CAACC,OAAO,EAAEE,EAAE,CAAC;AACnC,CAAC;AAED,eAAeD,YAAY","names":["isMotionDisabled","isNativeSmoothScrollingSupported","getScrollSpeed","pixels","Math","abs","getScrollTime","round","now","window","performance","Date","ease","k","cos","PI","step","context","time","elapsed","min","startTime","scrollTime","value","currentX","startX","endX","scrollable","scrollLeft","requestAnimationFrame","simulateSmoothScroll","element","smoothScroll","to","scrollTo","left","behavior"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/tabs/lib/default/tabs/smooth-scroll.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isMotionDisabled } from '@cloudscape-design/component-toolkit/internal';\nimport isNativeSmoothScrollingSupported from './native-smooth-scroll-supported';\n\ninterface ScrollContext {\n  scrollable: HTMLElement;\n  startX: number;\n  endX: number;\n  startTime: number;\n  scrollTime: number;\n}\n\n// The scroll speed depends on the scrolling distance. The equation below is an interpolation of measurements in Chrome.\nconst getScrollSpeed = (pixels: number) => 0.0015 * Math.abs(pixels) + 0.558;\nconst getScrollTime = (pixels: number) => Math.round(Math.abs(pixels) / getScrollSpeed(pixels));\n\nconst now = () => (window.performance ? window.performance.now() : Date.now());\n\nconst ease = (k: number): number => {\n  return 0.5 * (1 - Math.cos(Math.PI * k));\n};\n\nconst step = (context: ScrollContext): void => {\n  const time = now();\n  const elapsed = Math.min((time - context.startTime) / context.scrollTime, 1);\n  const value = ease(elapsed);\n  const currentX = context.startX + (context.endX - context.startX) * value;\n  context.scrollable.scrollLeft = currentX;\n  // scroll more if we have not reached our destination\n  if (currentX !== context.endX) {\n    requestAnimationFrame(() => step(context));\n  }\n};\n\nconst simulateSmoothScroll = (element: HTMLElement, endX: number): void => {\n  const startX = element.scrollLeft;\n  step({\n    scrollable: element,\n    startX,\n    endX,\n    startTime: now(),\n    scrollTime: getScrollTime(endX - startX),\n  });\n};\n\nconst smoothScroll = (element: HTMLElement, to: number) => {\n  if (isMotionDisabled(element)) {\n    element.scrollLeft = to;\n    return;\n  }\n  if (isNativeSmoothScrollingSupported() && element.scrollTo) {\n    element.scrollTo({\n      left: to,\n      behavior: 'smooth',\n    });\n    return;\n  }\n  simulateSmoothScroll(element, to);\n};\n\nexport default smoothScroll;\n"]},"metadata":{},"sourceType":"module"}