{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { isGroup } from '../internal/components/option/utils/filter-options';\nimport DropdownFooter from '../internal/components/dropdown-footer/index.js';\nimport { prepareOptions } from '../internal/components/option/utils/prepare-options';\nimport Dropdown from '../internal/components/dropdown';\nimport { useDropdownStatus } from '../internal/components/dropdown-status';\nimport { useSelect } from '../select/utils/use-select';\nimport { useNativeSearch } from '../select/utils/use-native-search';\nimport { useLoadItems } from '../select/utils/use-load-items';\nimport { useAnnouncement } from '../select/utils/use-announcement';\nimport { findOptionIndex } from '../select/utils/connect-options';\nimport PlainList from '../select/parts/plain-list';\nimport VirtualList from '../select/parts/virtual-list';\nimport { checkOptionValueField } from '../select/utils/check-option-value-field.js';\nimport Filter from '../select/parts/filter';\nimport Trigger from '../select/parts/trigger';\nimport InternalTokenGroup from '../token-group/internal';\nimport styles from './styles.css.js';\nimport ScreenreaderOnly from '../internal/components/screenreader-only';\nimport { joinStrings } from '../internal/utils/strings';\nimport { useInternalI18n } from '../i18n/context';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nconst InternalMultiselect = React.forwardRef((_a, externalRef) => {\n  var _b;\n  var {\n      options = [],\n      filteringType = 'none',\n      filteringPlaceholder,\n      filteringAriaLabel,\n      filteringClearAriaLabel,\n      filteringResultsText,\n      ariaRequired,\n      placeholder,\n      disabled,\n      ariaLabel,\n      statusType = 'finished',\n      empty,\n      loadingText,\n      finishedText,\n      errorText,\n      noMatch,\n      renderHighlightedAriaLive,\n      selectedOptions = [],\n      deselectAriaLabel,\n      keepOpen = true,\n      tokenLimit,\n      i18nStrings,\n      onBlur,\n      onFocus,\n      onLoadItems,\n      onChange,\n      virtualScroll,\n      inlineTokens = false,\n      hideTokens = false,\n      expandToViewport,\n      __internalRootRef = null,\n      autoFocus\n    } = _a,\n    restProps = __rest(_a, [\"options\", \"filteringType\", \"filteringPlaceholder\", \"filteringAriaLabel\", \"filteringClearAriaLabel\", \"filteringResultsText\", \"ariaRequired\", \"placeholder\", \"disabled\", \"ariaLabel\", \"statusType\", \"empty\", \"loadingText\", \"finishedText\", \"errorText\", \"noMatch\", \"renderHighlightedAriaLive\", \"selectedOptions\", \"deselectAriaLabel\", \"keepOpen\", \"tokenLimit\", \"i18nStrings\", \"onBlur\", \"onFocus\", \"onLoadItems\", \"onChange\", \"virtualScroll\", \"inlineTokens\", \"hideTokens\", \"expandToViewport\", \"__internalRootRef\", \"autoFocus\"]);\n  checkOptionValueField('Multiselect', 'options', options);\n  const baseProps = getBaseProps(restProps);\n  const formFieldContext = useFormFieldContext(restProps);\n  const i18n = useInternalI18n('multiselect');\n  const i18nCommon = useInternalI18n('select');\n  const recoveryText = i18nCommon('recoveryText', restProps.recoveryText);\n  const errorIconAriaLabel = i18nCommon('errorIconAriaLabel', restProps.errorIconAriaLabel);\n  const selectedAriaLabel = i18nCommon('selectedAriaLabel', restProps.selectedAriaLabel);\n  if (restProps.recoveryText && !onLoadItems) {\n    warnOnce('Multiselect', '`onLoadItems` must be provided for `recoveryText` to be displayed.');\n  }\n  const {\n    handleLoadMore,\n    handleRecoveryClick,\n    fireLoadItems\n  } = useLoadItems({\n    onLoadItems,\n    options,\n    statusType\n  });\n  const useInteractiveGroups = true;\n  const [filteringValue, setFilteringValue] = useState('');\n  const {\n    filteredOptions,\n    parentMap,\n    totalCount,\n    matchesCount\n  } = prepareOptions(options, filteringType, filteringValue);\n  const updateSelectedOption = useCallback(option => {\n    const filtered = filteredOptions.filter(item => item.type !== 'parent').map(item => item.option);\n    // switch between selection and deselection behavior, ignores disabled options to prevent\n    // getting stuck on one behavior when an option is disabled and its state cannot be changed\n    const isAllChildrenSelected = optionsArray => optionsArray.every(item => findOptionIndex(selectedOptions, item) > -1 || item.disabled);\n    const intersection = (visibleOptions, options) => visibleOptions.filter(item => findOptionIndex(options, item) > -1 && !item.disabled);\n    const union = (visibleOptions, options) => visibleOptions.filter(item => findOptionIndex(options, item) === -1).concat(options);\n    const select = (options, selectedOptions) => {\n      return union(selectedOptions, options);\n    };\n    const unselect = (options, selectedOptions) => {\n      return selectedOptions.filter(option => findOptionIndex(options, option) === -1);\n    };\n    let newSelectedOptions = [...selectedOptions];\n    if (isGroup(option)) {\n      const visibleOptions = intersection([...option.options], filtered);\n      newSelectedOptions = isAllChildrenSelected(visibleOptions) ? unselect(visibleOptions, newSelectedOptions) : select(visibleOptions, newSelectedOptions);\n    } else {\n      newSelectedOptions = isAllChildrenSelected([option]) ? unselect([option], newSelectedOptions) : select([option], newSelectedOptions);\n    }\n    fireNonCancelableEvent(onChange, {\n      selectedOptions: newSelectedOptions\n    });\n  }, [onChange, selectedOptions, filteredOptions]);\n  const rootRef = useRef(null);\n  const selfControlId = useUniqueId('trigger');\n  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;\n  const multiSelectAriaLabelId = useUniqueId('multiselect-arialabel-');\n  const footerId = useUniqueId('footer');\n  const scrollToIndex = useRef(null);\n  const {\n    isOpen,\n    highlightType,\n    highlightedOption,\n    highlightedIndex,\n    getTriggerProps,\n    getDropdownProps,\n    getFilterProps,\n    getMenuProps,\n    getOptionProps,\n    highlightOption,\n    announceSelected\n  } = useSelect({\n    selectedOptions,\n    updateSelectedOption,\n    options: filteredOptions,\n    filteringType,\n    onFocus,\n    onBlur,\n    externalRef,\n    keepOpen,\n    fireLoadItems,\n    setFilteringValue,\n    useInteractiveGroups,\n    statusType\n  });\n  const handleNativeSearch = useNativeSearch({\n    isEnabled: filteringType === 'none' && isOpen,\n    options: filteredOptions,\n    highlightOption: highlightOption,\n    highlightedOption: highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option,\n    useInteractiveGroups\n  });\n  const isEmpty = !options || options.length === 0;\n  const isNoMatch = filteredOptions && filteredOptions.length === 0;\n  const isFiltered = filteringType !== 'none' && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;\n  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(matchesCount, totalCount) : undefined;\n  const dropdownStatus = useDropdownStatus({\n    statusType,\n    empty,\n    loadingText,\n    finishedText,\n    errorText,\n    recoveryText,\n    isEmpty,\n    isNoMatch,\n    noMatch,\n    isFiltered,\n    filteringResultsText: filteredText,\n    onRecoveryClick: handleRecoveryClick,\n    errorIconAriaLabel: errorIconAriaLabel,\n    hasRecoveryCallback: !!onLoadItems\n  });\n  const filter = React.createElement(Filter, Object.assign({\n    clearAriaLabel: filteringClearAriaLabel,\n    filteringType: filteringType,\n    placeholder: filteringPlaceholder,\n    ariaLabel: filteringAriaLabel,\n    ariaRequired: ariaRequired,\n    value: filteringValue\n  }, getFilterProps()));\n  const trigger = React.createElement(Trigger, Object.assign({\n    placeholder: placeholder,\n    disabled: disabled,\n    triggerProps: getTriggerProps(disabled, autoFocus),\n    selectedOption: null,\n    selectedOptions: selectedOptions,\n    triggerVariant: inlineTokens ? 'tokens' : 'placeholder',\n    isOpen: isOpen\n  }, formFieldContext, {\n    controlId: controlId,\n    ariaLabelledby: joinStrings(formFieldContext.ariaLabelledby, multiSelectAriaLabelId)\n  }));\n  const menuProps = Object.assign(Object.assign({}, getMenuProps()), {\n    onLoadMore: handleLoadMore,\n    ariaLabelledby: joinStrings(multiSelectAriaLabelId, controlId),\n    ariaDescribedby: dropdownStatus.content ? footerId : undefined\n  });\n  const announcement = useAnnouncement({\n    announceSelected,\n    highlightedOption,\n    getParent: option => {\n      var _a;\n      return (_a = parentMap.get(option)) === null || _a === void 0 ? void 0 : _a.option;\n    },\n    selectedAriaLabel,\n    renderHighlightedAriaLive\n  });\n  const tokens = selectedOptions.map(option => ({\n    label: option.label,\n    disabled: disabled || option.disabled,\n    labelTag: option.labelTag,\n    description: option.description,\n    iconAlt: option.iconAlt,\n    iconName: option.iconName,\n    iconUrl: option.iconUrl,\n    iconSvg: option.iconSvg,\n    tags: option.tags,\n    dismissLabel: i18n('deselectAriaLabel', deselectAriaLabel === null || deselectAriaLabel === void 0 ? void 0 : deselectAriaLabel(option), format => {\n      var _a;\n      return format({\n        option__label: (_a = option.label) !== null && _a !== void 0 ? _a : ''\n      });\n    })\n  }));\n  useEffect(() => {\n    var _a;\n    (_a = scrollToIndex.current) === null || _a === void 0 ? void 0 : _a.call(scrollToIndex, highlightedIndex);\n  }, [highlightedIndex]);\n  const ListComponent = virtualScroll ? VirtualList : PlainList;\n  const handleMouseDown = event => {\n    const target = event.target;\n    if (target !== document.activeElement) {\n      // prevent currently focused element from losing it\n      event.preventDefault();\n    }\n  };\n  const showTokens = !hideTokens && !inlineTokens && tokens.length > 0;\n  const handleTokenDismiss = _ref => {\n    let {\n      detail\n    } = _ref;\n    const optionToDeselect = selectedOptions[detail.itemIndex];\n    updateSelectedOption(optionToDeselect);\n    const targetRef = getTriggerProps().ref;\n    if (targetRef.current) {\n      targetRef.current.focus();\n    }\n  };\n  const tokenGroupI18nStrings = {\n    limitShowFewer: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowFewer,\n    limitShowMore: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowMore\n  };\n  const mergedRef = useMergeRefs(rootRef, __internalRootRef);\n  const dropdownProps = getDropdownProps();\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    ref: mergedRef,\n    className: clsx(styles.root, baseProps.className),\n    onKeyPress: handleNativeSearch\n  }), React.createElement(Dropdown, Object.assign({}, dropdownProps, {\n    ariaLabelledby: dropdownProps.dropdownContentRole ? joinStrings(multiSelectAriaLabelId, controlId) : undefined,\n    ariaDescribedby: dropdownProps.dropdownContentRole ? dropdownStatus.content ? footerId : undefined : undefined,\n    open: isOpen,\n    trigger: trigger,\n    header: filter,\n    onMouseDown: handleMouseDown,\n    footer: dropdownStatus.isSticky ? React.createElement(DropdownFooter, {\n      content: isOpen ? dropdownStatus.content : null,\n      id: footerId\n    }) : null,\n    expandToViewport: expandToViewport,\n    stretchBeyondTriggerWidth: true\n  }), React.createElement(ListComponent, {\n    listBottom: !dropdownStatus.isSticky ? React.createElement(DropdownFooter, {\n      content: isOpen ? dropdownStatus.content : null,\n      id: footerId\n    }) : null,\n    menuProps: menuProps,\n    getOptionProps: getOptionProps,\n    filteredOptions: filteredOptions,\n    filteringValue: filteringValue,\n    ref: scrollToIndex,\n    hasDropdownStatus: dropdownStatus.content !== null,\n    checkboxes: true,\n    useInteractiveGroups: useInteractiveGroups,\n    screenReaderContent: announcement,\n    highlightType: highlightType\n  })), showTokens && React.createElement(InternalTokenGroup, {\n    alignment: \"horizontal\",\n    limit: tokenLimit,\n    items: tokens,\n    onDismiss: handleTokenDismiss,\n    i18nStrings: tokenGroupI18nStrings\n  }), React.createElement(ScreenreaderOnly, {\n    id: multiSelectAriaLabelId\n  }, ariaLabel));\n});\nexport default InternalMultiselect;","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useRef","useState","clsx","useMergeRefs","useFormFieldContext","getBaseProps","fireNonCancelableEvent","useUniqueId","isGroup","DropdownFooter","prepareOptions","Dropdown","useDropdownStatus","useSelect","useNativeSearch","useLoadItems","useAnnouncement","findOptionIndex","PlainList","VirtualList","checkOptionValueField","Filter","Trigger","InternalTokenGroup","styles","ScreenreaderOnly","joinStrings","useInternalI18n","warnOnce","InternalMultiselect","forwardRef","_a","externalRef","options","filteringType","filteringPlaceholder","filteringAriaLabel","filteringClearAriaLabel","filteringResultsText","ariaRequired","placeholder","disabled","ariaLabel","statusType","empty","loadingText","finishedText","errorText","noMatch","renderHighlightedAriaLive","selectedOptions","deselectAriaLabel","keepOpen","tokenLimit","i18nStrings","onBlur","onFocus","onLoadItems","onChange","virtualScroll","inlineTokens","hideTokens","expandToViewport","__internalRootRef","autoFocus","restProps","baseProps","formFieldContext","i18n","i18nCommon","recoveryText","errorIconAriaLabel","selectedAriaLabel","handleLoadMore","handleRecoveryClick","fireLoadItems","useInteractiveGroups","filteringValue","setFilteringValue","filteredOptions","parentMap","totalCount","matchesCount","updateSelectedOption","option","filtered","filter","item","type","map","isAllChildrenSelected","optionsArray","every","intersection","visibleOptions","union","concat","select","unselect","newSelectedOptions","rootRef","selfControlId","controlId","multiSelectAriaLabelId","footerId","scrollToIndex","isOpen","highlightType","highlightedOption","highlightedIndex","getTriggerProps","getDropdownProps","getFilterProps","getMenuProps","getOptionProps","highlightOption","announceSelected","handleNativeSearch","isEnabled","isEmpty","length","isNoMatch","isFiltered","filteredText","undefined","dropdownStatus","onRecoveryClick","hasRecoveryCallback","clearAriaLabel","value","trigger","triggerProps","selectedOption","triggerVariant","ariaLabelledby","menuProps","onLoadMore","ariaDescribedby","content","announcement","getParent","get","tokens","label","labelTag","description","iconAlt","iconName","iconUrl","iconSvg","tags","dismissLabel","format","option__label","current","ListComponent","handleMouseDown","event","target","document","activeElement","preventDefault","showTokens","handleTokenDismiss","detail","optionToDeselect","itemIndex","targetRef","ref","focus","tokenGroupI18nStrings","limitShowFewer","tokenLimitShowFewer","limitShowMore","tokenLimitShowMore","mergedRef","dropdownProps","className","root","onKeyPress","dropdownContentRole","open","header","onMouseDown","footer","isSticky","id","stretchBeyondTriggerWidth","listBottom","hasDropdownStatus","checkboxes","screenReaderContent","alignment","limit","items","onDismiss"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/multiselect/lib/default/multiselect/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\n\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component/index.js';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { isGroup } from '../internal/components/option/utils/filter-options';\n\nimport DropdownFooter from '../internal/components/dropdown-footer/index.js';\nimport { prepareOptions } from '../internal/components/option/utils/prepare-options';\nimport { OptionDefinition, OptionGroup } from '../internal/components/option/interfaces';\nimport Dropdown from '../internal/components/dropdown';\nimport { useDropdownStatus } from '../internal/components/dropdown-status';\n\nimport { useSelect, MenuProps } from '../select/utils/use-select';\nimport { useNativeSearch } from '../select/utils/use-native-search';\nimport { useLoadItems } from '../select/utils/use-load-items';\nimport { useAnnouncement } from '../select/utils/use-announcement';\nimport { findOptionIndex } from '../select/utils/connect-options';\nimport PlainList, { SelectListProps } from '../select/parts/plain-list';\nimport VirtualList from '../select/parts/virtual-list';\nimport { checkOptionValueField } from '../select/utils/check-option-value-field.js';\nimport Filter from '../select/parts/filter';\nimport Trigger from '../select/parts/trigger';\n\nimport InternalTokenGroup from '../token-group/internal';\nimport { TokenGroupProps } from '../token-group/interfaces';\n\nimport { MultiselectProps } from './interfaces';\nimport styles from './styles.css.js';\nimport ScreenreaderOnly from '../internal/components/screenreader-only';\nimport { joinStrings } from '../internal/utils/strings';\nimport { useInternalI18n } from '../i18n/context';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\ntype InternalMultiselectProps = MultiselectProps & InternalBaseComponentProps & { inlineTokens?: boolean };\n\nconst InternalMultiselect = React.forwardRef(\n  (\n    {\n      options = [],\n      filteringType = 'none',\n      filteringPlaceholder,\n      filteringAriaLabel,\n      filteringClearAriaLabel,\n      filteringResultsText,\n      ariaRequired,\n      placeholder,\n      disabled,\n      ariaLabel,\n      statusType = 'finished',\n      empty,\n      loadingText,\n      finishedText,\n      errorText,\n      noMatch,\n      renderHighlightedAriaLive,\n      selectedOptions = [],\n      deselectAriaLabel,\n      keepOpen = true,\n      tokenLimit,\n      i18nStrings,\n      onBlur,\n      onFocus,\n      onLoadItems,\n      onChange,\n      virtualScroll,\n      inlineTokens = false,\n      hideTokens = false,\n      expandToViewport,\n      __internalRootRef = null,\n      autoFocus,\n      ...restProps\n    }: InternalMultiselectProps,\n    externalRef: React.Ref<MultiselectProps.Ref>\n  ) => {\n    checkOptionValueField('Multiselect', 'options', options);\n\n    const baseProps = getBaseProps(restProps);\n    const formFieldContext = useFormFieldContext(restProps);\n    const i18n = useInternalI18n('multiselect');\n\n    const i18nCommon = useInternalI18n('select');\n    const recoveryText = i18nCommon('recoveryText', restProps.recoveryText);\n    const errorIconAriaLabel = i18nCommon('errorIconAriaLabel', restProps.errorIconAriaLabel);\n    const selectedAriaLabel = i18nCommon('selectedAriaLabel', restProps.selectedAriaLabel);\n\n    if (restProps.recoveryText && !onLoadItems) {\n      warnOnce('Multiselect', '`onLoadItems` must be provided for `recoveryText` to be displayed.');\n    }\n\n    const { handleLoadMore, handleRecoveryClick, fireLoadItems } = useLoadItems({\n      onLoadItems,\n      options,\n      statusType,\n    });\n    const useInteractiveGroups = true;\n    const [filteringValue, setFilteringValue] = useState('');\n    const { filteredOptions, parentMap, totalCount, matchesCount } = prepareOptions(\n      options,\n      filteringType,\n      filteringValue\n    );\n\n    const updateSelectedOption = useCallback(\n      (option: OptionDefinition | OptionGroup) => {\n        const filtered = filteredOptions.filter(item => item.type !== 'parent').map(item => item.option);\n\n        // switch between selection and deselection behavior, ignores disabled options to prevent\n        // getting stuck on one behavior when an option is disabled and its state cannot be changed\n        const isAllChildrenSelected = (optionsArray: OptionDefinition[]) =>\n          optionsArray.every(item => findOptionIndex(selectedOptions, item) > -1 || item.disabled);\n        const intersection = (visibleOptions: OptionDefinition[], options: OptionDefinition[]) =>\n          visibleOptions.filter(item => findOptionIndex(options, item) > -1 && !item.disabled);\n        const union = (visibleOptions: OptionDefinition[], options: OptionDefinition[]) =>\n          visibleOptions.filter(item => findOptionIndex(options, item) === -1).concat(options);\n        const select = (options: OptionDefinition[], selectedOptions: OptionDefinition[]) => {\n          return union(selectedOptions, options);\n        };\n        const unselect = (options: OptionDefinition[], selectedOptions: OptionDefinition[]) => {\n          return selectedOptions.filter(option => findOptionIndex(options, option) === -1);\n        };\n        let newSelectedOptions = [...selectedOptions];\n\n        if (isGroup(option)) {\n          const visibleOptions = intersection([...option.options], filtered);\n          newSelectedOptions = isAllChildrenSelected(visibleOptions)\n            ? unselect(visibleOptions, newSelectedOptions)\n            : select(visibleOptions, newSelectedOptions);\n        } else {\n          newSelectedOptions = isAllChildrenSelected([option])\n            ? unselect([option], newSelectedOptions)\n            : select([option], newSelectedOptions);\n        }\n\n        fireNonCancelableEvent(onChange, {\n          selectedOptions: newSelectedOptions,\n        });\n      },\n      [onChange, selectedOptions, filteredOptions]\n    );\n\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const selfControlId = useUniqueId('trigger');\n    const controlId = formFieldContext.controlId ?? selfControlId;\n\n    const multiSelectAriaLabelId = useUniqueId('multiselect-arialabel-');\n\n    const footerId = useUniqueId('footer');\n\n    const scrollToIndex = useRef<SelectListProps.SelectListRef>(null);\n    const {\n      isOpen,\n      highlightType,\n      highlightedOption,\n      highlightedIndex,\n      getTriggerProps,\n      getDropdownProps,\n      getFilterProps,\n      getMenuProps,\n      getOptionProps,\n      highlightOption,\n      announceSelected,\n    } = useSelect({\n      selectedOptions,\n      updateSelectedOption,\n      options: filteredOptions,\n      filteringType,\n      onFocus,\n      onBlur,\n      externalRef,\n      keepOpen,\n      fireLoadItems,\n      setFilteringValue,\n      useInteractiveGroups,\n      statusType,\n    });\n\n    const handleNativeSearch = useNativeSearch({\n      isEnabled: filteringType === 'none' && isOpen,\n      options: filteredOptions,\n      highlightOption: highlightOption,\n      highlightedOption: highlightedOption?.option,\n      useInteractiveGroups,\n    });\n\n    const isEmpty = !options || options.length === 0;\n    const isNoMatch = filteredOptions && filteredOptions.length === 0;\n    const isFiltered =\n      filteringType !== 'none' && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;\n    const filteredText = isFiltered ? filteringResultsText?.(matchesCount, totalCount) : undefined;\n    const dropdownStatus = useDropdownStatus({\n      statusType,\n      empty,\n      loadingText,\n      finishedText,\n      errorText,\n      recoveryText,\n      isEmpty,\n      isNoMatch,\n      noMatch,\n      isFiltered,\n      filteringResultsText: filteredText,\n      onRecoveryClick: handleRecoveryClick,\n      errorIconAriaLabel: errorIconAriaLabel,\n      hasRecoveryCallback: !!onLoadItems,\n    });\n\n    const filter = (\n      <Filter\n        clearAriaLabel={filteringClearAriaLabel}\n        filteringType={filteringType}\n        placeholder={filteringPlaceholder}\n        ariaLabel={filteringAriaLabel}\n        ariaRequired={ariaRequired}\n        value={filteringValue}\n        {...getFilterProps()}\n      />\n    );\n\n    const trigger = (\n      <Trigger\n        placeholder={placeholder}\n        disabled={disabled}\n        triggerProps={getTriggerProps(disabled, autoFocus)}\n        selectedOption={null}\n        selectedOptions={selectedOptions}\n        triggerVariant={inlineTokens ? 'tokens' : 'placeholder'}\n        isOpen={isOpen}\n        {...formFieldContext}\n        controlId={controlId}\n        ariaLabelledby={joinStrings(formFieldContext.ariaLabelledby, multiSelectAriaLabelId)}\n      />\n    );\n\n    const menuProps: MenuProps = {\n      ...getMenuProps(),\n      onLoadMore: handleLoadMore,\n      ariaLabelledby: joinStrings(multiSelectAriaLabelId, controlId),\n      ariaDescribedby: dropdownStatus.content ? footerId : undefined,\n    };\n\n    const announcement = useAnnouncement({\n      announceSelected,\n      highlightedOption,\n      getParent: option => parentMap.get(option)?.option as undefined | OptionGroup,\n      selectedAriaLabel,\n      renderHighlightedAriaLive,\n    });\n\n    const tokens: TokenGroupProps['items'] = selectedOptions.map(option => ({\n      label: option.label,\n      disabled: disabled || option.disabled,\n      labelTag: option.labelTag,\n      description: option.description,\n      iconAlt: option.iconAlt,\n      iconName: option.iconName,\n      iconUrl: option.iconUrl,\n      iconSvg: option.iconSvg,\n      tags: option.tags,\n      dismissLabel: i18n('deselectAriaLabel', deselectAriaLabel?.(option), format =>\n        format({ option__label: option.label ?? '' })\n      ),\n    }));\n\n    useEffect(() => {\n      scrollToIndex.current?.(highlightedIndex);\n    }, [highlightedIndex]);\n\n    const ListComponent = virtualScroll ? VirtualList : PlainList;\n\n    const handleMouseDown = (event: React.MouseEvent) => {\n      const target = event.target as HTMLElement;\n\n      if (target !== document.activeElement) {\n        // prevent currently focused element from losing it\n        event.preventDefault();\n      }\n    };\n\n    const showTokens = !hideTokens && !inlineTokens && tokens.length > 0;\n    const handleTokenDismiss: TokenGroupProps['onDismiss'] = ({ detail }) => {\n      const optionToDeselect = selectedOptions[detail.itemIndex];\n      updateSelectedOption(optionToDeselect);\n      const targetRef = getTriggerProps().ref;\n      if (targetRef.current) {\n        targetRef.current.focus();\n      }\n    };\n\n    const tokenGroupI18nStrings: TokenGroupProps.I18nStrings = {\n      limitShowFewer: i18nStrings?.tokenLimitShowFewer,\n      limitShowMore: i18nStrings?.tokenLimitShowMore,\n    };\n\n    const mergedRef = useMergeRefs(rootRef, __internalRootRef);\n\n    const dropdownProps = getDropdownProps();\n\n    return (\n      <div\n        {...baseProps}\n        ref={mergedRef}\n        className={clsx(styles.root, baseProps.className)}\n        onKeyPress={handleNativeSearch}\n      >\n        <Dropdown\n          {...dropdownProps}\n          ariaLabelledby={\n            dropdownProps.dropdownContentRole ? joinStrings(multiSelectAriaLabelId, controlId) : undefined\n          }\n          ariaDescribedby={\n            dropdownProps.dropdownContentRole ? (dropdownStatus.content ? footerId : undefined) : undefined\n          }\n          open={isOpen}\n          trigger={trigger}\n          header={filter}\n          onMouseDown={handleMouseDown}\n          footer={\n            dropdownStatus.isSticky ? (\n              <DropdownFooter content={isOpen ? dropdownStatus.content : null} id={footerId} />\n            ) : null\n          }\n          expandToViewport={expandToViewport}\n          stretchBeyondTriggerWidth={true}\n        >\n          <ListComponent\n            listBottom={\n              !dropdownStatus.isSticky ? (\n                <DropdownFooter content={isOpen ? dropdownStatus.content : null} id={footerId} />\n              ) : null\n            }\n            menuProps={menuProps}\n            getOptionProps={getOptionProps}\n            filteredOptions={filteredOptions}\n            filteringValue={filteringValue}\n            ref={scrollToIndex}\n            hasDropdownStatus={dropdownStatus.content !== null}\n            checkboxes={true}\n            useInteractiveGroups={useInteractiveGroups}\n            screenReaderContent={announcement}\n            highlightType={highlightType}\n          />\n        </Dropdown>\n        {showTokens && (\n          <InternalTokenGroup\n            alignment=\"horizontal\"\n            limit={tokenLimit}\n            items={tokens}\n            onDismiss={handleTokenDismiss}\n            i18nStrings={tokenGroupI18nStrings}\n          />\n        )}\n        <ScreenreaderOnly id={multiSelectAriaLabelId}>{ariaLabel}</ScreenreaderOnly>\n      </div>\n    );\n  }\n);\n\nexport default InternalMultiselect;\n"]},"metadata":{},"sourceType":"module"}