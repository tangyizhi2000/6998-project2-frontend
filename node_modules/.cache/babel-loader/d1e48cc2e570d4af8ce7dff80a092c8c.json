{"ast":null,"code":"const isGroup = option => 'type' in option && option.type === 'parent';\nconst popLastGroup = options => {\n  if (options.length) {\n    const lastOption = options[options.length - 1];\n    if (isGroup(lastOption)) {\n      options.pop();\n    }\n  }\n};\nexport const filterOptions = (options, text) => {\n  const filteredOptions = options.reduce((filteredIn, option) => {\n    if (isGroup(option)) {\n      popLastGroup(filteredIn);\n      filteredIn.push(option);\n    } else if (matchSingleOption(option, text)) {\n      filteredIn.push(option);\n    }\n    return filteredIn;\n  }, []);\n  popLastGroup(filteredOptions);\n  return filteredOptions;\n};\nconst matchSingleOption = (option, text) => {\n  const searchableFields = ['value', 'label', 'description', 'labelTag'];\n  const searchableTagFields = ['tags', 'filteringTags'];\n  const searchText = text.toLowerCase();\n  const searchStrFieldsFn = attr => matchString(option[attr], searchText);\n  const searchTagsFieldsFn = attr => {\n    var _a;\n    return (_a = option[attr]) === null || _a === void 0 ? void 0 : _a.some(value => matchString(value, searchText));\n  };\n  return searchableFields.some(searchStrFieldsFn) || searchableTagFields.some(searchTagsFieldsFn);\n};\nconst matchString = (value, searchText) => {\n  return value && value.toLowerCase().indexOf(searchText) !== -1;\n};","map":{"version":3,"mappings":"AAOA,MAAMA,OAAO,GAAIC,MAAuB,IAAK,MAAM,IAAIA,MAAM,IAAIA,MAAM,CAACC,IAAI,KAAK,QAAQ;AAEzF,MAAMC,YAAY,GAAIC,OAA0B,IAAI;EAClD,IAAIA,OAAO,CAACC,MAAM,EAAE;IAClB,MAAMC,UAAU,GAAGF,OAAO,CAACA,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC;IAC9C,IAAIL,OAAO,CAACM,UAAU,CAAC,EAAE;MACvBF,OAAO,CAACG,GAAG,EAAE;;;AAGnB,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,CAACJ,OAA0B,EAAEK,IAAY,KAAuB;EAC3F,MAAMC,eAAe,GAAGN,OAAO,CAACO,MAAM,CAAoB,CAACC,UAAU,EAAEX,MAAM,KAAI;IAC/E,IAAID,OAAO,CAACC,MAAM,CAAC,EAAE;MACnBE,YAAY,CAACS,UAAU,CAAC;MACxBA,UAAU,CAACC,IAAI,CAACZ,MAAM,CAAC;KACxB,MAAM,IAAIa,iBAAiB,CAACb,MAAM,EAAEQ,IAAI,CAAC,EAAE;MAC1CG,UAAU,CAACC,IAAI,CAACZ,MAAM,CAAC;;IAEzB,OAAOW,UAAU;EACnB,CAAC,EAAE,EAAE,CAAC;EACNT,YAAY,CAACO,eAAe,CAAC;EAC7B,OAAOA,eAAe;AACxB,CAAC;AAED,MAAMI,iBAAiB,GAAG,CAACb,MAAuB,EAAEQ,IAAY,KAAa;EAC3E,MAAMM,gBAAgB,GAAuB,CAAC,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,UAAU,CAAC;EAC1F,MAAMC,mBAAmB,GAA0B,CAAC,MAAM,EAAE,eAAe,CAAC;EAE5E,MAAMC,UAAU,GAAGR,IAAI,CAACS,WAAW,EAAE;EAErC,MAAMC,iBAAiB,GAAIC,IAAsB,IAAKC,WAAW,CAACpB,MAAM,CAACmB,IAAI,CAAC,EAAEH,UAAU,CAAC;EAC3F,MAAMK,kBAAkB,GAAIF,IAAyB,IAAI;IAAA;IAAC,mBAAM,CAACA,IAAI,CAAC,0CAAEG,IAAI,CAACC,KAAK,IAAIH,WAAW,CAACG,KAAK,EAAEP,UAAU,CAAC,CAAC;EAAA;EAErH,OAAOF,gBAAgB,CAACQ,IAAI,CAACJ,iBAAiB,CAAC,IAAIH,mBAAmB,CAACO,IAAI,CAACD,kBAAkB,CAAC;AACjG,CAAC;AAED,MAAMD,WAAW,GAAG,CAACG,KAAyB,EAAEP,UAAkB,KAAI;EACpE,OAAOO,KAAK,IAAIA,KAAK,CAACN,WAAW,EAAE,CAACO,OAAO,CAACR,UAAU,CAAC,KAAK,CAAC,CAAC;AAChE,CAAC","names":["isGroup","option","type","popLastGroup","options","length","lastOption","pop","filterOptions","text","filteredOptions","reduce","filteredIn","push","matchSingleOption","searchableFields","searchableTagFields","searchText","toLowerCase","searchStrFieldsFn","attr","matchString","searchTagsFieldsFn","some","value","indexOf"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/autosuggest/utils/lib/default/autosuggest/utils/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AutosuggestItem } from '../interfaces';\n\ntype SearchableFields = 'value' | 'label' | 'description' | 'labelTag';\ntype SearchableTagFields = 'tags' | 'filteringTags';\n\nconst isGroup = (option: AutosuggestItem) => 'type' in option && option.type === 'parent';\n\nconst popLastGroup = (options: AutosuggestItem[]) => {\n  if (options.length) {\n    const lastOption = options[options.length - 1];\n    if (isGroup(lastOption)) {\n      options.pop();\n    }\n  }\n};\n\nexport const filterOptions = (options: AutosuggestItem[], text: string): AutosuggestItem[] => {\n  const filteredOptions = options.reduce<AutosuggestItem[]>((filteredIn, option) => {\n    if (isGroup(option)) {\n      popLastGroup(filteredIn);\n      filteredIn.push(option);\n    } else if (matchSingleOption(option, text)) {\n      filteredIn.push(option);\n    }\n    return filteredIn;\n  }, []);\n  popLastGroup(filteredOptions);\n  return filteredOptions;\n};\n\nconst matchSingleOption = (option: AutosuggestItem, text: string): boolean => {\n  const searchableFields: SearchableFields[] = ['value', 'label', 'description', 'labelTag'];\n  const searchableTagFields: SearchableTagFields[] = ['tags', 'filteringTags'];\n\n  const searchText = text.toLowerCase();\n\n  const searchStrFieldsFn = (attr: SearchableFields) => matchString(option[attr], searchText);\n  const searchTagsFieldsFn = (attr: SearchableTagFields) => option[attr]?.some(value => matchString(value, searchText));\n\n  return searchableFields.some(searchStrFieldsFn) || searchableTagFields.some(searchTagsFieldsFn);\n};\n\nconst matchString = (value: string | undefined, searchText: string) => {\n  return value && value.toLowerCase().indexOf(searchText) !== -1;\n};\n"]},"metadata":{},"sourceType":"module"}