{"ast":null,"code":"var WIDTHS = [1920, 1400, 1200, 992, 768];\n// Transform the array of widths into a valid cardsPerRow property that is used as default\nvar defaultCardsPerRow = WIDTHS.map(function (value, index, widths) {\n  return {\n    minWidth: value,\n    cards: widths.length + 1 - index\n  };\n});\nexport var getCardsPerRow = function getCardsPerRow(width, config) {\n  if (config.length === 0) {\n    config = defaultCardsPerRow;\n  }\n  var cardsPerRow = 1;\n  // sort them by descending order of minWidth\n  var sortedConfig = config.slice().map(function (value) {\n    return {\n      minWidth: value.minWidth || 0,\n      cards: value.cards\n    };\n  }).sort(function (a, b) {\n    return b.minWidth - a.minWidth;\n  });\n  sortedConfig.some(function (layout) {\n    if (width >= layout.minWidth) {\n      cardsPerRow = layout.cards;\n      return true;\n    }\n  });\n  return cardsPerRow;\n};","map":{"version":3,"mappings":"AAIA,IAAMA,MAAM,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC;AAE3C;AACA,IAAMC,kBAAkB,GAAGD,MAAM,CAACE,GAAG,CAAC,UAACC,KAAK,EAAEC,KAAK,EAAEC,MAAM;EAAA,OAAM;IAC/DC,QAAQ,EAAEH,KAAK;IACfI,KAAK,EAAEF,MAAM,CAACG,MAAM,GAAG,CAAC,GAAGJ;GAC5B;AAAA,CAAC,CAAC;AAEH,OAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAc,CAAIC,KAAa,EAAEC,MAA6C,EAAI;EAC7F,IAAIA,MAAM,CAACH,MAAM,KAAK,CAAC,EAAE;IACvBG,MAAM,GAAGV,kBAAkB;;EAE7B,IAAIW,WAAW,GAAG,CAAC;EACnB;EACA,IAAMC,YAAY,GAAuCF,MAAM,CAC5DG,KAAK,EAAE,CACPZ,GAAG,CAAC,eAAK;IAAA,OAAK;MACbI,QAAQ,EAAEH,KAAK,CAACG,QAAQ,IAAI,CAAC;MAC7BC,KAAK,EAAEJ,KAAK,CAACI;KACd;EAAA,CAAC,CAAC,CACFQ,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKA,CAAC,CAACX,QAAQ,GAAGU,CAAC,CAACV,QAAQ;EAAA,EAAC;EAE1CO,YAAY,CAACK,IAAI,CAAC,gBAAM,EAAG;IACzB,IAAIR,KAAK,IAAIS,MAAM,CAACb,QAAQ,EAAE;MAC5BM,WAAW,GAAGO,MAAM,CAACZ,KAAK;MAC1B,OAAO,IAAI;;EAEf,CAAC,CAAC;EACF,OAAOK,WAAW;AACpB,CAAC","names":["WIDTHS","defaultCardsPerRow","map","value","index","widths","minWidth","cards","length","getCardsPerRow","width","config","cardsPerRow","sortedConfig","slice","sort","a","b","some","layout"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/cards/lib/default/cards/cards-layout-helper.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CardsProps } from './interfaces';\n\nconst WIDTHS = [1920, 1400, 1200, 992, 768];\n\n// Transform the array of widths into a valid cardsPerRow property that is used as default\nconst defaultCardsPerRow = WIDTHS.map((value, index, widths) => ({\n  minWidth: value,\n  cards: widths.length + 1 - index,\n}));\n\nexport const getCardsPerRow = (width: number, config: ReadonlyArray<CardsProps.CardsLayout>) => {\n  if (config.length === 0) {\n    config = defaultCardsPerRow;\n  }\n  let cardsPerRow = 1;\n  // sort them by descending order of minWidth\n  const sortedConfig: Required<CardsProps.CardsLayout>[] = config\n    .slice()\n    .map(value => ({\n      minWidth: value.minWidth || 0,\n      cards: value.cards,\n    }))\n    .sort((a, b) => b.minWidth - a.minWidth);\n\n  sortedConfig.some(layout => {\n    if (width >= layout.minWidth) {\n      cardsPerRow = layout.cards;\n      return true;\n    }\n  });\n  return cardsPerRow;\n};\n"]},"metadata":{},"sourceType":"module"}