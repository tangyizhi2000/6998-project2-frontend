{"ast":null,"code":"import React from 'react';\nimport InternalIcon from '../icon/internal';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport InternalHeader, { Description as HeaderDescription } from '../header/internal';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { variantSupportsDescription } from './utils';\nexport const componentName = 'ExpandableSection';\nconst ExpandableDeprecatedHeader = _ref => {\n  let {\n    id,\n    className,\n    onClick,\n    ariaLabel,\n    ariaControls,\n    expanded,\n    children,\n    icon,\n    onKeyUp,\n    onKeyDown,\n    variant\n  } = _ref;\n  return React.createElement(\"div\", {\n    id: id,\n    role: \"button\",\n    className: clsx(className, styles['expand-button'], styles['click-target'], styles['header-deprecated']),\n    tabIndex: 0,\n    onKeyUp: onKeyUp,\n    onKeyDown: onKeyDown,\n    onClick: onClick,\n    \"aria-label\": ariaLabel,\n    \"aria-controls\": ariaControls,\n    \"aria-expanded\": expanded\n  }, React.createElement(\"div\", {\n    className: clsx(styles['icon-container'], styles[`icon-container-${variant}`])\n  }, icon), children);\n};\nconst ExpandableNavigationHeader = _ref2 => {\n  let {\n    id,\n    className,\n    onClick,\n    ariaLabelledBy,\n    ariaLabel,\n    ariaControls,\n    expanded,\n    children,\n    icon\n  } = _ref2;\n  return React.createElement(\"div\", {\n    id: id,\n    className: clsx(className, styles['click-target'])\n  }, React.createElement(\"button\", {\n    className: clsx(styles['icon-container'], styles['expand-button']),\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-label\": ariaLabel,\n    \"aria-controls\": ariaControls,\n    \"aria-expanded\": expanded,\n    type: \"button\",\n    onClick: onClick\n  }, icon), children);\n};\nconst ExpandableHeaderTextWrapper = _ref3 => {\n  let {\n    id,\n    descriptionId,\n    className,\n    onClick,\n    ariaLabel,\n    ariaControls,\n    expanded,\n    children,\n    icon,\n    headerDescription,\n    headerCounter,\n    headerInfo,\n    headerActions,\n    variant,\n    headingTagOverride,\n    onKeyUp,\n    onKeyDown\n  } = _ref3;\n  const isContainer = variant === 'container';\n  const HeadingTag = headingTagOverride || 'div';\n  const hasInteractiveElements = isContainer && (headerInfo || headerActions);\n  const listeners = {\n    onClick,\n    onKeyDown,\n    onKeyUp\n  };\n  const description = variantSupportsDescription(variant) && headerDescription && React.createElement(\"span\", {\n    id: descriptionId,\n    className: styles[`description-${variant}`]\n  }, headerDescription);\n  // If interactive elements are present, constrain the clickable area to only the icon and the header text\n  // to prevent nesting interactive elements.\n  const headerButtonListeners = hasInteractiveElements ? listeners : undefined;\n  // For the default and footer variants with description,\n  // include also the immediate wrapper around it to include the entire row for backwards compatibility,\n  // but exclude the description.\n  const headingTagListeners = !headerButtonListeners && !isContainer && description ? listeners : undefined;\n  // For all other cases, make the entire header clickable for backwards compatibility.\n  const wrapperListeners = !headerButtonListeners && !headingTagListeners ? listeners : undefined;\n  const headerButton = React.createElement(\"span\", Object.assign({\n    className: clsx(styles['expand-button'], isContainer ? styles['header-container-button'] : styles['header-button'], headerButtonListeners && styles['click-target']),\n    role: \"button\",\n    tabIndex: 0,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": !ariaLabel && description ? id : undefined,\n    \"aria-describedby\": description ? descriptionId : undefined,\n    \"aria-controls\": ariaControls,\n    \"aria-expanded\": expanded\n  }, headerButtonListeners), React.createElement(\"span\", {\n    className: clsx(styles['icon-container'], styles[`icon-container-${variant}`])\n  }, icon), React.createElement(\"span\", {\n    id: id,\n    className: styles['header-text']\n  }, children));\n  return React.createElement(\"div\", Object.assign({\n    className: clsx(className, wrapperListeners && styles['click-target'])\n  }, wrapperListeners), isContainer ? React.createElement(InternalHeader, {\n    variant: \"h2\",\n    description: description,\n    counter: headerCounter,\n    info: headerInfo,\n    actions: headerActions,\n    headingTagOverride: headingTagOverride\n  }, headerButton) : React.createElement(React.Fragment, null, React.createElement(HeadingTag, Object.assign({\n    className: clsx(styles['header-wrapper'], headingTagListeners && styles['click-target'])\n  }, headingTagListeners), headerButton), description && React.createElement(HeaderDescription, {\n    variantOverride: \"h3\"\n  }, description)));\n};\nexport const ExpandableSectionHeader = _ref4 => {\n  let {\n    id,\n    descriptionId,\n    className,\n    variant,\n    header,\n    headerText,\n    headerDescription,\n    headerCounter,\n    headerInfo,\n    headerActions,\n    headingTagOverride,\n    expanded,\n    ariaControls,\n    ariaLabel,\n    ariaLabelledBy,\n    onKeyUp,\n    onKeyDown,\n    onClick\n  } = _ref4;\n  const icon = React.createElement(InternalIcon, {\n    size: variant === 'container' ? 'medium' : 'normal',\n    className: clsx(styles.icon, expanded && styles.expanded),\n    name: \"caret-down-filled\"\n  });\n  const defaultHeaderProps = {\n    id: id,\n    icon: icon,\n    expanded: expanded,\n    ariaControls: ariaControls,\n    ariaLabel: ariaLabel,\n    onClick: onClick,\n    variant\n  };\n  if ((headerCounter || headerInfo || headerActions) && variant !== 'container' && isDevelopment) {\n    warnOnce(componentName, 'The `headerCounter`, `headerInfo` and `headerActions` props are only supported for the \"container\" variant.');\n  }\n  if (headerDescription && !variantSupportsDescription(variant) && isDevelopment) {\n    warnOnce(componentName, `The \\`headerDescription\\` prop is not supported for the ${variant} variant.`);\n  }\n  const wrapperClassName = clsx(styles.wrapper, styles[`wrapper-${variant}`], expanded && styles['wrapper-expanded']);\n  if (variant === 'navigation') {\n    return React.createElement(ExpandableNavigationHeader, Object.assign({\n      className: clsx(className, wrapperClassName),\n      ariaLabelledBy: ariaLabelledBy\n    }, defaultHeaderProps), headerText !== null && headerText !== void 0 ? headerText : header);\n  }\n  if (headerText) {\n    return React.createElement(ExpandableHeaderTextWrapper, Object.assign({\n      className: clsx(className, wrapperClassName, expanded && styles.expanded),\n      descriptionId: descriptionId,\n      headerDescription: headerDescription,\n      headerCounter: headerCounter,\n      headerInfo: headerInfo,\n      headerActions: headerActions,\n      headingTagOverride: headingTagOverride,\n      onKeyUp: onKeyUp,\n      onKeyDown: onKeyDown\n    }, defaultHeaderProps), headerText);\n  }\n  if (variant === 'container' && header && isDevelopment) {\n    warnOnce(componentName, 'Use `headerText` instead of `header` to provide the button within the heading for a11y.');\n  }\n  return React.createElement(ExpandableDeprecatedHeader, Object.assign({\n    className: clsx(className, wrapperClassName, styles.focusable, expanded && styles.expanded),\n    onKeyUp: onKeyUp,\n    onKeyDown: onKeyDown\n  }, defaultHeaderProps), header);\n};","map":{"version":3,"mappings":"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","names":["React","InternalIcon","clsx","styles","InternalHeader","Description","HeaderDescription","isDevelopment","warnOnce","variantSupportsDescription","componentName","ExpandableDeprecatedHeader","id","className","onClick","ariaLabel","ariaControls","expanded","children","icon","onKeyUp","onKeyDown","variant","role","tabIndex","ExpandableNavigationHeader","ariaLabelledBy","type","ExpandableHeaderTextWrapper","descriptionId","headerDescription","headerCounter","headerInfo","headerActions","headingTagOverride","isContainer","HeadingTag","hasInteractiveElements","listeners","description","headerButtonListeners","undefined","headingTagListeners","wrapperListeners","headerButton","counter","info","actions","variantOverride","ExpandableSectionHeader","header","headerText","size","name","defaultHeaderProps","wrapperClassName","wrapper","focusable"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/expandable-section/lib/default/expandable-section/expandable-section-header.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ExpandableSectionProps } from './interfaces';\nimport React, { KeyboardEventHandler, MouseEventHandler, ReactNode } from 'react';\nimport InternalIcon from '../icon/internal';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport InternalHeader, { Description as HeaderDescription } from '../header/internal';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { variantSupportsDescription } from './utils';\n\nexport const componentName = 'ExpandableSection';\n\ninterface ExpandableDefaultHeaderProps {\n  id: string;\n  descriptionId?: string;\n  className?: string;\n  children?: ReactNode;\n  expanded: boolean;\n  ariaControls: string;\n  ariaLabel?: string;\n  onKeyUp: KeyboardEventHandler;\n  onKeyDown: KeyboardEventHandler;\n  onClick: MouseEventHandler;\n  icon: JSX.Element;\n  variant: ExpandableSectionProps.Variant;\n}\n\ninterface ExpandableNavigationHeaderProps extends Omit<ExpandableDefaultHeaderProps, 'onKeyUp' | 'onKeyDown'> {\n  ariaLabelledBy?: string;\n}\n\ninterface ExpandableHeaderTextWrapperProps extends ExpandableDefaultHeaderProps {\n  headerDescription?: ReactNode;\n  headerCounter?: string;\n  headerInfo?: ReactNode;\n  headerActions?: ReactNode;\n  headingTagOverride?: ExpandableSectionProps.HeadingTag;\n}\n\ninterface ExpandableSectionHeaderProps extends Omit<ExpandableDefaultHeaderProps, 'children' | 'icon'> {\n  variant: ExpandableSectionProps.Variant;\n  header?: ReactNode;\n  headerText?: ReactNode;\n  headerDescription?: ReactNode;\n  headerCounter?: string;\n  headerInfo?: ReactNode;\n  headerActions?: ReactNode;\n  headingTagOverride?: ExpandableSectionProps.HeadingTag;\n  ariaLabelledBy?: string;\n}\n\nconst ExpandableDeprecatedHeader = ({\n  id,\n  className,\n  onClick,\n  ariaLabel,\n  ariaControls,\n  expanded,\n  children,\n  icon,\n  onKeyUp,\n  onKeyDown,\n  variant,\n}: ExpandableDefaultHeaderProps) => {\n  return (\n    <div\n      id={id}\n      role=\"button\"\n      className={clsx(className, styles['expand-button'], styles['click-target'], styles['header-deprecated'])}\n      tabIndex={0}\n      onKeyUp={onKeyUp}\n      onKeyDown={onKeyDown}\n      onClick={onClick}\n      aria-label={ariaLabel}\n      aria-controls={ariaControls}\n      aria-expanded={expanded}\n    >\n      <div className={clsx(styles['icon-container'], styles[`icon-container-${variant}`])}>{icon}</div>\n      {children}\n    </div>\n  );\n};\n\nconst ExpandableNavigationHeader = ({\n  id,\n  className,\n  onClick,\n  ariaLabelledBy,\n  ariaLabel,\n  ariaControls,\n  expanded,\n  children,\n  icon,\n}: ExpandableNavigationHeaderProps) => {\n  return (\n    <div id={id} className={clsx(className, styles['click-target'])}>\n      <button\n        className={clsx(styles['icon-container'], styles['expand-button'])}\n        aria-labelledby={ariaLabelledBy}\n        aria-label={ariaLabel}\n        aria-controls={ariaControls}\n        aria-expanded={expanded}\n        type=\"button\"\n        onClick={onClick}\n      >\n        {icon}\n      </button>\n      {children}\n    </div>\n  );\n};\n\nconst ExpandableHeaderTextWrapper = ({\n  id,\n  descriptionId,\n  className,\n  onClick,\n  ariaLabel,\n  ariaControls,\n  expanded,\n  children,\n  icon,\n  headerDescription,\n  headerCounter,\n  headerInfo,\n  headerActions,\n  variant,\n  headingTagOverride,\n  onKeyUp,\n  onKeyDown,\n}: ExpandableHeaderTextWrapperProps) => {\n  const isContainer = variant === 'container';\n  const HeadingTag = headingTagOverride || 'div';\n  const hasInteractiveElements = isContainer && (headerInfo || headerActions);\n  const listeners = { onClick, onKeyDown, onKeyUp };\n\n  const description = variantSupportsDescription(variant) && headerDescription && (\n    <span id={descriptionId} className={styles[`description-${variant}`]}>\n      {headerDescription}\n    </span>\n  );\n\n  // If interactive elements are present, constrain the clickable area to only the icon and the header text\n  // to prevent nesting interactive elements.\n  const headerButtonListeners = hasInteractiveElements ? listeners : undefined;\n  // For the default and footer variants with description,\n  // include also the immediate wrapper around it to include the entire row for backwards compatibility,\n  // but exclude the description.\n  const headingTagListeners = !headerButtonListeners && !isContainer && description ? listeners : undefined;\n  // For all other cases, make the entire header clickable for backwards compatibility.\n  const wrapperListeners = !headerButtonListeners && !headingTagListeners ? listeners : undefined;\n\n  const headerButton = (\n    <span\n      className={clsx(\n        styles['expand-button'],\n        isContainer ? styles['header-container-button'] : styles['header-button'],\n        headerButtonListeners && styles['click-target']\n      )}\n      role=\"button\"\n      tabIndex={0}\n      aria-label={ariaLabel}\n      aria-labelledby={!ariaLabel && description ? id : undefined}\n      aria-describedby={description ? descriptionId : undefined}\n      aria-controls={ariaControls}\n      aria-expanded={expanded}\n      {...headerButtonListeners}\n    >\n      <span className={clsx(styles['icon-container'], styles[`icon-container-${variant}`])}>{icon}</span>\n      <span id={id} className={styles['header-text']}>\n        {children}\n      </span>\n    </span>\n  );\n\n  return (\n    <div className={clsx(className, wrapperListeners && styles['click-target'])} {...wrapperListeners}>\n      {isContainer ? (\n        <InternalHeader\n          variant=\"h2\"\n          description={description}\n          counter={headerCounter}\n          info={headerInfo}\n          actions={headerActions}\n          headingTagOverride={headingTagOverride}\n        >\n          {headerButton}\n        </InternalHeader>\n      ) : (\n        <>\n          <HeadingTag\n            className={clsx(styles['header-wrapper'], headingTagListeners && styles['click-target'])}\n            {...headingTagListeners}\n          >\n            {headerButton}\n          </HeadingTag>\n          {description && <HeaderDescription variantOverride=\"h3\">{description}</HeaderDescription>}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport const ExpandableSectionHeader = ({\n  id,\n  descriptionId,\n  className,\n  variant,\n  header,\n  headerText,\n  headerDescription,\n  headerCounter,\n  headerInfo,\n  headerActions,\n  headingTagOverride,\n  expanded,\n  ariaControls,\n  ariaLabel,\n  ariaLabelledBy,\n  onKeyUp,\n  onKeyDown,\n  onClick,\n}: ExpandableSectionHeaderProps) => {\n  const icon = (\n    <InternalIcon\n      size={variant === 'container' ? 'medium' : 'normal'}\n      className={clsx(styles.icon, expanded && styles.expanded)}\n      name=\"caret-down-filled\"\n    />\n  );\n  const defaultHeaderProps = {\n    id: id,\n    icon: icon,\n    expanded: expanded,\n    ariaControls: ariaControls,\n    ariaLabel: ariaLabel,\n    onClick: onClick,\n    variant,\n  };\n\n  if ((headerCounter || headerInfo || headerActions) && variant !== 'container' && isDevelopment) {\n    warnOnce(\n      componentName,\n      'The `headerCounter`, `headerInfo` and `headerActions` props are only supported for the \"container\" variant.'\n    );\n  }\n\n  if (headerDescription && !variantSupportsDescription(variant) && isDevelopment) {\n    warnOnce(componentName, `The \\`headerDescription\\` prop is not supported for the ${variant} variant.`);\n  }\n\n  const wrapperClassName = clsx(styles.wrapper, styles[`wrapper-${variant}`], expanded && styles['wrapper-expanded']);\n  if (variant === 'navigation') {\n    return (\n      <ExpandableNavigationHeader\n        className={clsx(className, wrapperClassName)}\n        ariaLabelledBy={ariaLabelledBy}\n        {...defaultHeaderProps}\n      >\n        {headerText ?? header}\n      </ExpandableNavigationHeader>\n    );\n  }\n\n  if (headerText) {\n    return (\n      <ExpandableHeaderTextWrapper\n        className={clsx(className, wrapperClassName, expanded && styles.expanded)}\n        descriptionId={descriptionId}\n        headerDescription={headerDescription}\n        headerCounter={headerCounter}\n        headerInfo={headerInfo}\n        headerActions={headerActions}\n        headingTagOverride={headingTagOverride}\n        onKeyUp={onKeyUp}\n        onKeyDown={onKeyDown}\n        {...defaultHeaderProps}\n      >\n        {headerText}\n      </ExpandableHeaderTextWrapper>\n    );\n  }\n\n  if (variant === 'container' && header && isDevelopment) {\n    warnOnce(componentName, 'Use `headerText` instead of `header` to provide the button within the heading for a11y.');\n  }\n\n  return (\n    <ExpandableDeprecatedHeader\n      className={clsx(className, wrapperClassName, styles.focusable, expanded && styles.expanded)}\n      onKeyUp={onKeyUp}\n      onKeyDown={onKeyDown}\n      {...defaultHeaderProps}\n    >\n      {header}\n    </ExpandableDeprecatedHeader>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}