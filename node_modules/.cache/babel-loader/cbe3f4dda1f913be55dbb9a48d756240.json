{"ast":null,"code":"import { findUpUntil } from '../../internal/utils/dom';\nimport selectionStyles from './styles.css.js';\nimport { SELECTION_ITEM } from './utils';\n// The hooks moves focus between multi-selection checkboxes.\n// Not eligible for tables with grid navigation.\nexport function useSelectionFocusMove(selectionType, totalItems) {\n  if (selectionType !== 'multi') {\n    return {};\n  }\n  function moveFocus(sourceElement, fromIndex, direction) {\n    let index = fromIndex;\n    const rootContainer = findRootContainer(sourceElement);\n    while (index >= -1 && index < totalItems) {\n      index += direction;\n      const control = findSelectionControlByIndex(rootContainer, index);\n      if (control && !control.disabled) {\n        control.focus();\n        break;\n      }\n    }\n  }\n  const [moveFocusDown, moveFocusUp] = [1, -1].map(direction => {\n    return event => {\n      const target = event.currentTarget;\n      const itemNode = findUpUntil(target, node => node.dataset.selectionItem === 'item');\n      const fromIndex = Array.prototype.indexOf.call(itemNode.parentElement.children, itemNode);\n      moveFocus(target, fromIndex, direction);\n    };\n  });\n  return {\n    moveFocusDown,\n    moveFocusUp,\n    moveFocus\n  };\n}\nfunction findSelectionControlByIndex(rootContainer, index) {\n  if (index === -1) {\n    // find \"select all\" checkbox\n    return rootContainer.querySelector(`[data-${SELECTION_ITEM}=\"all\"] .${selectionStyles.root} input`);\n  }\n  return rootContainer.querySelectorAll(`[data-${SELECTION_ITEM}=\"item\"] .${selectionStyles.root} input`)[index];\n}\nfunction findRootContainer(element) {\n  return findUpUntil(element, node => node.dataset.selectionRoot === 'true');\n}","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,0BAA0B;AAEtD,OAAOC,eAAe,MAAM,iBAAiB;AAC7C,SAASC,cAAc,QAAQ,SAAS;AAExC;AACA;AACA,OAAM,SAAUC,qBAAqB,CAACC,aAA0C,EAAEC,UAAkB;EAClG,IAAID,aAAa,KAAK,OAAO,EAAE;IAC7B,OAAO,EAAE;;EAEX,SAASE,SAAS,CAACC,aAA0B,EAAEC,SAAiB,EAAEC,SAAiB;IACjF,IAAIC,KAAK,GAAGF,SAAS;IACrB,MAAMG,aAAa,GAAGC,iBAAiB,CAACL,aAAa,CAAC;IAEtD,OAAOG,KAAK,IAAI,CAAC,CAAC,IAAIA,KAAK,GAAGL,UAAU,EAAE;MACxCK,KAAK,IAAID,SAAS;MAClB,MAAMI,OAAO,GAAGC,2BAA2B,CAACH,aAAa,EAAED,KAAK,CAAC;MACjE,IAAIG,OAAO,IAAI,CAACA,OAAO,CAACE,QAAQ,EAAE;QAChCF,OAAO,CAACG,KAAK,EAAE;QACf;;;EAGN;EACA,MAAM,CAACC,aAAa,EAAEC,WAAW,CAAC,GAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAW,CAACC,GAAG,CAACV,SAAS,IAAG;IACtE,OAAQW,KAAoB,IAAI;MAC9B,MAAMC,MAAM,GAAGD,KAAK,CAACE,aAA4B;MACjD,MAAMC,QAAQ,GAAGvB,WAAW,CAACqB,MAAM,EAAEG,IAAI,IAAIA,IAAI,CAACC,OAAO,CAACC,aAAa,KAAK,MAAM,CAAE;MACpF,MAAMlB,SAAS,GAAGmB,KAAK,CAACC,SAAS,CAACC,OAAO,CAACC,IAAI,CAACP,QAAQ,CAACQ,aAAc,CAACC,QAAQ,EAAET,QAAQ,CAAC;MAC1FjB,SAAS,CAACe,MAAM,EAAEb,SAAS,EAAEC,SAAS,CAAC;IACzC,CAAC;EACH,CAAC,CAAC;EACF,OAAO;IACLQ,aAAa;IACbC,WAAW;IACXZ;GACD;AACH;AAEA,SAASQ,2BAA2B,CAACH,aAA0B,EAAED,KAAa;EAC5E,IAAIA,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB;IACA,OAAOC,aAAa,CAACsB,aAAa,CAChC,SAAS/B,cAAc,YAAYD,eAAe,CAACiC,IAAI,QAAQ,CAChE;;EAEH,OAAOvB,aAAa,CAACwB,gBAAgB,CACnC,SAASjC,cAAc,aAAaD,eAAe,CAACiC,IAAI,QAAQ,CACjE,CAACxB,KAAK,CAAC;AACV;AAEA,SAASE,iBAAiB,CAACwB,OAAoB;EAC7C,OAAOpC,WAAW,CAACoC,OAAO,EAAEZ,IAAI,IAAIA,IAAI,CAACC,OAAO,CAACY,aAAa,KAAK,MAAM,CAAE;AAC7E","names":["findUpUntil","selectionStyles","SELECTION_ITEM","useSelectionFocusMove","selectionType","totalItems","moveFocus","sourceElement","fromIndex","direction","index","rootContainer","findRootContainer","control","findSelectionControlByIndex","disabled","focus","moveFocusDown","moveFocusUp","map","event","target","currentTarget","itemNode","node","dataset","selectionItem","Array","prototype","indexOf","call","parentElement","children","querySelector","root","querySelectorAll","element","selectionRoot"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/table/selection/lib/default/table/selection/use-selection-focus-move.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { KeyboardEvent } from 'react';\nimport { findUpUntil } from '../../internal/utils/dom';\nimport { TableProps } from '../interfaces';\nimport selectionStyles from './styles.css.js';\nimport { SELECTION_ITEM } from './utils';\n\n// The hooks moves focus between multi-selection checkboxes.\n// Not eligible for tables with grid navigation.\nexport function useSelectionFocusMove(selectionType: TableProps['selectionType'], totalItems: number) {\n  if (selectionType !== 'multi') {\n    return {};\n  }\n  function moveFocus(sourceElement: HTMLElement, fromIndex: number, direction: -1 | 1) {\n    let index = fromIndex;\n    const rootContainer = findRootContainer(sourceElement);\n\n    while (index >= -1 && index < totalItems) {\n      index += direction;\n      const control = findSelectionControlByIndex(rootContainer, index);\n      if (control && !control.disabled) {\n        control.focus();\n        break;\n      }\n    }\n  }\n  const [moveFocusDown, moveFocusUp] = ([1, -1] as const).map(direction => {\n    return (event: KeyboardEvent) => {\n      const target = event.currentTarget as HTMLElement;\n      const itemNode = findUpUntil(target, node => node.dataset.selectionItem === 'item')!;\n      const fromIndex = Array.prototype.indexOf.call(itemNode.parentElement!.children, itemNode);\n      moveFocus(target, fromIndex, direction);\n    };\n  });\n  return {\n    moveFocusDown,\n    moveFocusUp,\n    moveFocus,\n  };\n}\n\nfunction findSelectionControlByIndex(rootContainer: HTMLElement, index: number) {\n  if (index === -1) {\n    // find \"select all\" checkbox\n    return rootContainer.querySelector<HTMLInputElement>(\n      `[data-${SELECTION_ITEM}=\"all\"] .${selectionStyles.root} input`\n    );\n  }\n  return rootContainer.querySelectorAll<HTMLInputElement>(\n    `[data-${SELECTION_ITEM}=\"item\"] .${selectionStyles.root} input`\n  )[index];\n}\n\nfunction findRootContainer(element: HTMLElement) {\n  return findUpUntil(element, node => node.dataset.selectionRoot === 'true')!;\n}\n"]},"metadata":{},"sourceType":"module"}