{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { useUniqueId } from '../../hooks/use-unique-id';\nimport { KeyCode } from '../../keycode';\nimport LiveRegion from '../live-region/index';\nimport ApplicationController from './application-controller';\nimport FocusOutline from './focus-outline';\nimport { useInternalI18n } from '../../../i18n/context';\nvar DEFAULT_PLOT_FOCUS_OFFSET = 3;\nvar DEFAULT_ELEMENT_FOCUS_OFFSET = 3;\n/**\n  An extension for the SVG to be used for charts. It includes a controller element to\n  handle the focus and keyboard interactions in a way that is supported by screen readers.\n\n  The application mimics the aria-activedescendant behavior which is unsupported by Safari. The\n  activeElementRef is the pointer to the secondary-focus element and activeElementKey denotes when\n  the focus transition was made.\n\n  Alternatively, ariaLiveRegion can be used to make announcements.\n*/\nexport default forwardRef(ChartPlot);\nfunction ChartPlot(_a, ref) {\n  var _clsx;\n  var width = _a.width,\n    height = _a.height,\n    transform = _a.transform,\n    offsetTop = _a.offsetTop,\n    offsetBottom = _a.offsetBottom,\n    offsetLeft = _a.offsetLeft,\n    offsetRight = _a.offsetRight,\n    ariaLabel = _a.ariaLabel,\n    ariaLabelledby = _a.ariaLabelledby,\n    ariaRoleDescription = _a.ariaRoleDescription,\n    ariaDescription = _a.ariaDescription,\n    ariaDescribedby = _a.ariaDescribedby,\n    activeElementKey = _a.activeElementKey,\n    activeElementRef = _a.activeElementRef,\n    ariaLiveRegion = _a.ariaLiveRegion,\n    isClickable = _a.isClickable,\n    isPrecise = _a.isPrecise,\n    children = _a.children,\n    onMouseDown = _a.onMouseDown,\n    onKeyDown = _a.onKeyDown,\n    onFocus = _a.onFocus,\n    onBlur = _a.onBlur,\n    _a$focusOffset = _a.focusOffset,\n    focusOffset = _a$focusOffset === void 0 ? DEFAULT_PLOT_FOCUS_OFFSET : _a$focusOffset,\n    _a$activeElementFocus = _a.activeElementFocusOffset,\n    activeElementFocusOffset = _a$activeElementFocus === void 0 ? DEFAULT_ELEMENT_FOCUS_OFFSET : _a$activeElementFocus,\n    restProps = __rest(_a, [\"width\", \"height\", \"transform\", \"offsetTop\", \"offsetBottom\", \"offsetLeft\", \"offsetRight\", \"ariaLabel\", \"ariaLabelledby\", \"ariaRoleDescription\", \"ariaDescription\", \"ariaDescribedby\", \"activeElementKey\", \"activeElementRef\", \"ariaLiveRegion\", \"isClickable\", \"isPrecise\", \"children\", \"onMouseDown\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"focusOffset\", \"activeElementFocusOffset\"]);\n  var i18n = useInternalI18n('[charts]');\n  var svgRef = useRef(null);\n  var applicationRef = useRef(null);\n  var plotClickedRef = useRef(false);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isPlotFocused = _useState2[0],\n    setPlotFocused = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isApplicationFocused = _useState4[0],\n    setApplicationFocused = _useState4[1];\n  var internalDescriptionId = useUniqueId('awsui-chart-plot__description');\n  var ariaDescriptionId = [ariaDescription && internalDescriptionId, ariaDescribedby].filter(Boolean).join(' ');\n  useImperativeHandle(ref, function () {\n    return {\n      svg: svgRef.current,\n      focusPlot: function focusPlot() {\n        return svgRef.current.focus();\n      },\n      focusApplication: function focusApplication() {\n        return applicationRef.current.focus();\n      }\n    };\n  });\n  var onPlotMouseDown = function onPlotMouseDown(event) {\n    onMouseDown && onMouseDown(event);\n    // Record the click was made for the application focus handler.\n    plotClickedRef.current = true;\n  };\n  var onPlotFocus = function onPlotFocus(event) {\n    if (event.target === svgRef.current && !plotClickedRef.current) {\n      setPlotFocused(true);\n    }\n    // The click should focus the underling application bypassing the svg.\n    else if (plotClickedRef.current) {\n      applicationRef.current.focus();\n    }\n  };\n  var onPlotBlur = function onPlotBlur(event) {\n    if (event.target === svgRef.current) {\n      setPlotFocused(false);\n    }\n  };\n  // Once one of the expected keys is pressed the focus is delegated to the application controller.\n  var onPlotKeyDown = function onPlotKeyDown(event) {\n    if (isPlotFocused) {\n      // Delegate the focus to the application if one of the expected keys was pressed.\n      var codes = [KeyCode.space, KeyCode.enter, KeyCode.up, KeyCode.left, KeyCode.right, KeyCode.down];\n      if (codes.indexOf(event.keyCode) !== -1) {\n        applicationRef.current.focus();\n      }\n    }\n  };\n  var onApplicationFocus = function onApplicationFocus(event) {\n    onFocus && onFocus(event, plotClickedRef.current ? 'mouse' : 'keyboard');\n    // \"Release\" the click reference to not affect the next call of this handler.\n    plotClickedRef.current = false;\n    setApplicationFocused(true);\n  };\n  var onApplicationBlur = function onApplicationBlur(event) {\n    onBlur && onBlur(event);\n    setApplicationFocused(false);\n  };\n  var onApplicationKeyDown = onKeyDown;\n  var plotFocusable = !isApplicationFocused;\n  var plotTabIndex = plotFocusable ? 0 : -1;\n  var plotAria = !isApplicationFocused ? {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescriptionId,\n    'aria-roledescription': i18n('i18nStrings.chartAriaRoleDescription', ariaRoleDescription)\n  } : {};\n  return React.createElement(React.Fragment, null, React.createElement(\"svg\", Object.assign({}, restProps, {\n    focusable: plotFocusable,\n    tabIndex: plotTabIndex,\n    role: \"application\",\n    \"aria-hidden\": \"false\"\n  }, plotAria, {\n    ref: svgRef,\n    style: {\n      width: width,\n      height: height,\n      marginTop: offsetTop,\n      marginBottom: offsetBottom,\n      marginLeft: offsetLeft,\n      marginRight: offsetRight\n    },\n    className: clsx(styles.root, (_clsx = {}, _defineProperty(_clsx, styles.clickable, isClickable), _defineProperty(_clsx, styles.precise, isPrecise), _clsx)),\n    onMouseDown: onPlotMouseDown,\n    onFocus: onPlotFocus,\n    onBlur: onPlotBlur,\n    onKeyDown: onPlotKeyDown\n  }), React.createElement(FocusOutline, {\n    elementRef: svgRef,\n    elementKey: isPlotFocused,\n    offset: focusOffset\n  }), React.createElement(\"g\", {\n    transform: transform\n  }, React.createElement(ApplicationController, {\n    activeElementKey: activeElementKey || null,\n    activeElementRef: activeElementRef,\n    ref: applicationRef,\n    onFocus: onApplicationFocus,\n    onBlur: onApplicationBlur,\n    onKeyDown: onApplicationKeyDown\n  }), ariaDescription && plotFocusable && React.createElement(\"desc\", {\n    \"aria-hidden\": \"true\",\n    id: internalDescriptionId\n  }, ariaDescription), children, React.createElement(FocusOutline, {\n    elementRef: activeElementRef,\n    elementKey: isApplicationFocused && activeElementKey,\n    offset: activeElementFocusOffset\n  }))), React.createElement(LiveRegion, null, ariaLiveRegion));\n}","map":{"version":3,"mappings":"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","names":["React","forwardRef","useImperativeHandle","useRef","useState","clsx","styles","useUniqueId","KeyCode","LiveRegion","ApplicationController","FocusOutline","useInternalI18n","DEFAULT_PLOT_FOCUS_OFFSET","DEFAULT_ELEMENT_FOCUS_OFFSET","ChartPlot","_a","ref","width","height","transform","offsetTop","offsetBottom","offsetLeft","offsetRight","ariaLabel","ariaLabelledby","ariaRoleDescription","ariaDescription","ariaDescribedby","activeElementKey","activeElementRef","ariaLiveRegion","isClickable","isPrecise","children","onMouseDown","onKeyDown","onFocus","onBlur","focusOffset","activeElementFocusOffset","restProps","i18n","svgRef","applicationRef","plotClickedRef","isPlotFocused","setPlotFocused","isApplicationFocused","setApplicationFocused","internalDescriptionId","ariaDescriptionId","filter","Boolean","join","svg","current","focusPlot","focus","focusApplication","onPlotMouseDown","event","onPlotFocus","target","onPlotBlur","onPlotKeyDown","codes","space","enter","up","left","right","down","indexOf","keyCode","onApplicationFocus","onApplicationBlur","onApplicationKeyDown","plotFocusable","plotTabIndex","plotAria","focusable","tabIndex","role","style","marginTop","marginBottom","marginLeft","marginRight","className","root","clickable","precise","elementRef","elementKey","offset","id"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/components/chart-plot/lib/default/internal/components/chart-plot/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport styles from './styles.css.js';\nimport { useUniqueId } from '../../hooks/use-unique-id';\n\nimport { KeyCode } from '../../keycode';\nimport LiveRegion from '../live-region/index';\nimport ApplicationController, { ApplicationRef } from './application-controller';\nimport FocusOutline from './focus-outline';\nimport { Offset } from '../interfaces';\nimport { useInternalI18n } from '../../../i18n/context';\n\nconst DEFAULT_PLOT_FOCUS_OFFSET = 3;\nconst DEFAULT_ELEMENT_FOCUS_OFFSET = 3;\n\nexport interface ChartPlotRef {\n  svg: SVGSVGElement;\n  focusPlot(): void;\n  focusApplication(): void;\n}\n\nexport interface ChartPlotProps {\n  width: number | string;\n  height: number | string;\n  transform?: string;\n  offsetTop?: number;\n  offsetBottom?: number;\n  offsetLeft?: number;\n  offsetRight?: number;\n  focusOffset?: number;\n  ariaLabel?: string;\n  ariaLabelledby?: string;\n  ariaDescription?: string;\n  ariaDescribedby?: string;\n  ariaRoleDescription?: string;\n  activeElementKey?: null | string | number | boolean;\n  activeElementRef?: React.RefObject<SVGGElement>;\n  activeElementFocusOffset?: Offset;\n  ariaLiveRegion?: React.ReactNode;\n  isClickable?: boolean;\n  isPrecise?: boolean;\n  onMouseDown?: (event: React.MouseEvent<SVGSVGElement>) => void;\n  onMouseMove?: (event: React.MouseEvent<SVGSVGElement>) => void;\n  onMouseOut?: (event: React.MouseEvent<SVGSVGElement>) => void;\n  onFocus?: (event: React.FocusEvent<SVGGElement>, trigger: 'mouse' | 'keyboard') => void;\n  onBlur?: (event: React.FocusEvent<SVGGElement>) => void;\n  onKeyDown?: (event: React.KeyboardEvent<SVGGElement>) => void;\n  children: React.ReactNode;\n}\n\n/**\n  An extension for the SVG to be used for charts. It includes a controller element to\n  handle the focus and keyboard interactions in a way that is supported by screen readers.\n\n  The application mimics the aria-activedescendant behavior which is unsupported by Safari. The\n  activeElementRef is the pointer to the secondary-focus element and activeElementKey denotes when\n  the focus transition was made.\n\n  Alternatively, ariaLiveRegion can be used to make announcements.\n*/\nexport default forwardRef(ChartPlot);\n\nfunction ChartPlot(\n  {\n    width,\n    height,\n    transform,\n    offsetTop,\n    offsetBottom,\n    offsetLeft,\n    offsetRight,\n    ariaLabel,\n    ariaLabelledby,\n    ariaRoleDescription,\n    ariaDescription,\n    ariaDescribedby,\n    activeElementKey,\n    activeElementRef,\n    ariaLiveRegion,\n    isClickable,\n    isPrecise,\n    children,\n    onMouseDown,\n    onKeyDown,\n    onFocus,\n    onBlur,\n    focusOffset = DEFAULT_PLOT_FOCUS_OFFSET,\n    activeElementFocusOffset = DEFAULT_ELEMENT_FOCUS_OFFSET,\n    ...restProps\n  }: ChartPlotProps,\n  ref: React.Ref<ChartPlotRef>\n) {\n  const i18n = useInternalI18n('[charts]');\n  const svgRef = useRef<SVGSVGElement>(null);\n  const applicationRef = useRef<ApplicationRef>(null);\n  const plotClickedRef = useRef(false);\n  const [isPlotFocused, setPlotFocused] = useState(false);\n  const [isApplicationFocused, setApplicationFocused] = useState(false);\n\n  const internalDescriptionId = useUniqueId('awsui-chart-plot__description');\n  const ariaDescriptionId = [ariaDescription && internalDescriptionId, ariaDescribedby].filter(Boolean).join(' ');\n\n  useImperativeHandle(ref, () => ({\n    svg: svgRef.current!,\n    focusPlot: () => svgRef.current!.focus(),\n    focusApplication: () => applicationRef.current!.focus(),\n  }));\n\n  const onPlotMouseDown = (event: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n    onMouseDown && onMouseDown(event);\n    // Record the click was made for the application focus handler.\n    plotClickedRef.current = true;\n  };\n  const onPlotFocus = (event: React.FocusEvent<SVGSVGElement>) => {\n    if (event.target === svgRef.current && !plotClickedRef.current) {\n      setPlotFocused(true);\n    }\n    // The click should focus the underling application bypassing the svg.\n    else if (plotClickedRef.current) {\n      applicationRef.current!.focus();\n    }\n  };\n  const onPlotBlur = (event: React.FocusEvent<SVGSVGElement>) => {\n    if (event.target === svgRef.current) {\n      setPlotFocused(false);\n    }\n  };\n  // Once one of the expected keys is pressed the focus is delegated to the application controller.\n  const onPlotKeyDown = (event: React.KeyboardEvent) => {\n    if (isPlotFocused) {\n      // Delegate the focus to the application if one of the expected keys was pressed.\n      const codes = [KeyCode.space, KeyCode.enter, KeyCode.up, KeyCode.left, KeyCode.right, KeyCode.down];\n      if (codes.indexOf(event.keyCode) !== -1) {\n        applicationRef.current!.focus();\n      }\n    }\n  };\n\n  const onApplicationFocus = (event: React.FocusEvent<SVGGElement>) => {\n    onFocus && onFocus(event, plotClickedRef.current ? 'mouse' : 'keyboard');\n    // \"Release\" the click reference to not affect the next call of this handler.\n    plotClickedRef.current = false;\n    setApplicationFocused(true);\n  };\n  const onApplicationBlur = (event: React.FocusEvent<SVGGElement>) => {\n    onBlur && onBlur(event);\n    setApplicationFocused(false);\n  };\n  const onApplicationKeyDown = onKeyDown;\n\n  const plotFocusable = !isApplicationFocused;\n  const plotTabIndex = plotFocusable ? 0 : -1;\n  const plotAria = !isApplicationFocused\n    ? {\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledby,\n        'aria-describedby': ariaDescriptionId,\n        'aria-roledescription': i18n('i18nStrings.chartAriaRoleDescription', ariaRoleDescription),\n      }\n    : {};\n\n  return (\n    <>\n      <svg\n        {...restProps}\n        focusable={plotFocusable}\n        tabIndex={plotTabIndex}\n        role=\"application\"\n        aria-hidden=\"false\"\n        {...plotAria}\n        ref={svgRef}\n        style={{\n          width,\n          height,\n          marginTop: offsetTop,\n          marginBottom: offsetBottom,\n          marginLeft: offsetLeft,\n          marginRight: offsetRight,\n        }}\n        className={clsx(styles.root, {\n          [styles.clickable]: isClickable,\n          [styles.precise]: isPrecise,\n        })}\n        onMouseDown={onPlotMouseDown}\n        onFocus={onPlotFocus}\n        onBlur={onPlotBlur}\n        onKeyDown={onPlotKeyDown}\n      >\n        <FocusOutline elementRef={svgRef} elementKey={isPlotFocused} offset={focusOffset} />\n\n        <g transform={transform}>\n          <ApplicationController\n            activeElementKey={activeElementKey || null}\n            activeElementRef={activeElementRef}\n            ref={applicationRef}\n            onFocus={onApplicationFocus}\n            onBlur={onApplicationBlur}\n            onKeyDown={onApplicationKeyDown}\n          />\n\n          {/* Only show description when plot is focusable to avoid repetition in Safari and Firefox */}\n          {ariaDescription && plotFocusable && (\n            <desc aria-hidden=\"true\" id={internalDescriptionId}>\n              {ariaDescription}\n            </desc>\n          )}\n\n          {children}\n\n          <FocusOutline\n            elementRef={activeElementRef}\n            elementKey={isApplicationFocused && activeElementKey}\n            offset={activeElementFocusOffset}\n          />\n        </g>\n      </svg>\n\n      <LiveRegion>{ariaLiveRegion}</LiveRegion>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}