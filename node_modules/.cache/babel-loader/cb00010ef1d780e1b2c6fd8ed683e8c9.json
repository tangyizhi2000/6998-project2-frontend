{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useCallback, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport customCssProps from '../internal/generated/custom-css-properties';\nimport { Flash, focusFlashById } from './flash';\nimport InternalIcon from '../icon/internal';\nimport { TransitionGroup } from 'react-transition-group';\nimport { Transition } from '../internal/components/transition';\nimport styles from './styles.css.js';\nimport { counterTypes, getFlashTypeCount, getItemColor, getVisibleCollapsedItems } from './utils';\nimport { animate, getDOMRects } from '../internal/animate';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { sendToggleMetric } from './internal/analytics';\nimport { useFlashbar } from './common';\nimport { throttle } from '../internal/utils/throttle';\nimport { scrollElementIntoView } from '../internal/utils/scrollable-containers';\nimport { findUpUntil } from '../internal/utils/dom';\nimport { useInternalI18n } from '../i18n/context';\nimport { getVisualContextClassname } from '../internal/components/visual-context';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\n// If the number of items is equal or less than this value,\n// the toggle element will not be displayed and the Flashbar will look like a regular single-item Flashbar.\nconst maxNonCollapsibleItems = 1;\nconst resizeListenerThrottleDelay = 100;\nexport default function CollapsibleFlashbar(_a) {\n  var {\n      items\n    } = _a,\n    restProps = __rest(_a, [\"items\"]);\n  const [enteringItems, setEnteringItems] = useState([]);\n  const [exitingItems, setExitingItems] = useState([]);\n  const [isFlashbarStackExpanded, setIsFlashbarStackExpanded] = useState(false);\n  const getElementsToAnimate = useCallback(() => {\n    const flashElements = isFlashbarStackExpanded ? expandedItemRefs.current : collapsedItemRefs.current;\n    return Object.assign(Object.assign({}, flashElements), {\n      notificationBar: notificationBarRef.current\n    });\n  }, [isFlashbarStackExpanded]);\n  const prepareAnimations = useCallback(() => {\n    const rects = getDOMRects(getElementsToAnimate());\n    setInitialAnimationState(rects);\n  }, [getElementsToAnimate]);\n  const {\n    baseProps,\n    breakpoint,\n    isReducedMotion,\n    isVisualRefresh,\n    mergedRef,\n    ref\n  } = useFlashbar(Object.assign(Object.assign({\n    items\n  }, restProps), {\n    onItemsAdded: newItems => {\n      setEnteringItems([...enteringItems, ...newItems]);\n    },\n    onItemsChanged: options => {\n      // If not all items have ID, we can still animate collapse/expand transitions\n      // because we can rely on each item's index in the original array,\n      // but we can't do that when elements are added or removed, since the index changes.\n      if ((options === null || options === void 0 ? void 0 : options.allItemsHaveId) && !(options === null || options === void 0 ? void 0 : options.isReducedMotion)) {\n        prepareAnimations();\n      }\n    },\n    onItemsRemoved: removedItems => {\n      setExitingItems([...exitingItems, ...removedItems]);\n    }\n  }));\n  const collapsedItemRefs = useRef({});\n  const expandedItemRefs = useRef({});\n  const [initialAnimationState, setInitialAnimationState] = useState(null);\n  const listElementRef = useRef(null);\n  const notificationBarRef = useRef(null);\n  const [transitioning, setTransitioning] = useState(false);\n  const flashbarElementId = useUniqueId('flashbar');\n  const itemCountElementId = useUniqueId('item-count');\n  if (items.length <= maxNonCollapsibleItems && isFlashbarStackExpanded) {\n    setIsFlashbarStackExpanded(false);\n  }\n  const animateFlash = !isReducedMotion;\n  function toggleCollapseExpand() {\n    sendToggleMetric(items.length, !isFlashbarStackExpanded);\n    if (!isReducedMotion) {\n      prepareAnimations();\n    }\n    setIsFlashbarStackExpanded(prev => !prev);\n  }\n  useLayoutEffect(() => {\n    if (isFlashbarStackExpanded && (items === null || items === void 0 ? void 0 : items.length)) {\n      const mostRecentItem = items[0];\n      if (mostRecentItem.id !== undefined) {\n        focusFlashById(ref.current, mostRecentItem.id);\n      }\n    }\n    // Run this after expanding, but not every time the items change.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFlashbarStackExpanded]);\n  // When collapsing, scroll up if necessary to avoid losing track of the focused button\n  useEffectOnUpdate(() => {\n    if (!isFlashbarStackExpanded && notificationBarRef.current) {\n      scrollElementIntoView(notificationBarRef.current);\n    }\n  }, [isFlashbarStackExpanded]);\n  const updateBottomSpacing = useMemo(() => throttle(() => {\n    // Allow vertical space between Flashbar and page bottom only when the Flashbar is reaching the end of the page,\n    // otherwise avoid spacing with eventual sticky elements below.\n    const listElement = listElementRef === null || listElementRef === void 0 ? void 0 : listElementRef.current;\n    const flashbar = listElement === null || listElement === void 0 ? void 0 : listElement.parentElement;\n    if (listElement && flashbar) {\n      // Make sure the bottom padding is present when we make the calculations,\n      // then we might decide to remove it or not.\n      flashbar.classList.remove(styles.floating);\n      const windowHeight = window.innerHeight;\n      // Take the parent region into account if using the App Layout, because it might have additional margins.\n      // Otherwise we use the Flashbar component for this calculation.\n      const outerElement = findUpUntil(flashbar, element => element.getAttribute('role') === 'region') || flashbar;\n      const applySpacing = isFlashbarStackExpanded && Math.ceil(outerElement.getBoundingClientRect().bottom) >= windowHeight;\n      if (!applySpacing) {\n        flashbar.classList.add(styles.floating);\n      }\n    }\n  }, resizeListenerThrottleDelay), [isFlashbarStackExpanded]);\n  useLayoutEffect(() => {\n    window.addEventListener('resize', updateBottomSpacing);\n    return () => {\n      window.removeEventListener('resize', updateBottomSpacing);\n      updateBottomSpacing.cancel();\n    };\n  }, [updateBottomSpacing]);\n  const {\n    i18nStrings\n  } = restProps;\n  const i18n = useInternalI18n('flashbar');\n  const ariaLabel = i18n('i18nStrings.ariaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel);\n  const notificationBarText = i18n('i18nStrings.notificationBarText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.notificationBarText);\n  const notificationBarAriaLabel = i18n('i18nStrings.notificationBarAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.notificationBarAriaLabel);\n  const iconAriaLabels = {\n    errorIconAriaLabel: i18n('i18nStrings.errorIconAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel),\n    inProgressIconAriaLabel: i18n('i18nStrings.inProgressIconAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inProgressIconAriaLabel),\n    infoIconAriaLabel: i18n('i18nStrings.infoIconAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.infoIconAriaLabel),\n    successIconAriaLabel: i18n('i18nStrings.successIconAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.successIconAriaLabel),\n    warningIconAriaLabel: i18n('i18nStrings.warningIconAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel)\n  };\n  useLayoutEffect(() => {\n    // When `useLayoutEffect` is called, the DOM is updated but has not been painted yet,\n    // so it's a good moment to trigger animations that will make calculations based on old and new DOM state.\n    // The old state is kept in `initialAnimationState`\n    // and the new state can be retrieved from the current DOM elements.\n    if (initialAnimationState) {\n      updateBottomSpacing();\n      animate({\n        elements: getElementsToAnimate(),\n        oldState: initialAnimationState,\n        newElementInitialState: _ref => {\n          let {\n            top\n          } = _ref;\n          return {\n            scale: 0.9,\n            y: -0.2 * top\n          };\n        },\n        onTransitionsEnd: () => setTransitioning(false)\n      });\n      setTransitioning(true);\n      setInitialAnimationState(null);\n    }\n  }, [updateBottomSpacing, getElementsToAnimate, initialAnimationState, isFlashbarStackExpanded]);\n  const isCollapsible = items.length > maxNonCollapsibleItems;\n  const countByType = getFlashTypeCount(items);\n  const numberOfColorsInStack = new Set(items.map(getItemColor)).size;\n  const maxSlots = Math.max(numberOfColorsInStack, 3);\n  const stackDepth = Math.min(maxSlots, items.length);\n  const itemsToShow = isFlashbarStackExpanded ? items.map((item, index) => Object.assign(Object.assign({}, item), {\n    expandedIndex: index\n  })) : getVisibleCollapsedItems(items, stackDepth).map((item, index) => Object.assign(Object.assign({}, item), {\n    collapsedIndex: index\n  }));\n  const getItemId = item => {\n    var _a, _b;\n    return (_b = (_a = item.id) !== null && _a !== void 0 ? _a : item.expandedIndex) !== null && _b !== void 0 ? _b : 0;\n  };\n  // This check allows us to use the standard \"enter\" Transition only when the notification was not existing before.\n  // If instead it was moved to the top of the stack but was already present in the array\n  // (e.g, after dismissing another notification),\n  // we need to use different, more custom and more controlled animations.\n  const hasEntered = item => enteringItems.some(_item => _item.id && _item.id === item.id);\n  const hasLeft = item => !('expandedIndex' in item);\n  const hasEnteredOrLeft = item => hasEntered(item) || hasLeft(item);\n  const showInnerContent = item => isFlashbarStackExpanded || hasLeft(item) || 'expandedIndex' in item && item.expandedIndex === 0;\n  const shouldUseStandardAnimation = (item, index) => index === 0 && hasEnteredOrLeft(item);\n  const getAnimationElementId = item => `flash-${getItemId(item)}`;\n  const renderList = () => React.createElement(\"ul\", {\n    ref: listElementRef,\n    className: clsx(styles['flash-list'], isFlashbarStackExpanded ? styles.expanded : styles.collapsed, transitioning && styles['animation-running'], initialAnimationState && styles['animation-ready'], isVisualRefresh && styles['visual-refresh']),\n    id: flashbarElementId,\n    \"aria-label\": ariaLabel,\n    \"aria-describedby\": isCollapsible ? itemCountElementId : undefined,\n    style: !isFlashbarStackExpanded || transitioning ? {\n      [customCssProps.flashbarStackDepth]: stackDepth\n    } : undefined\n  }, React.createElement(ListWrapper, {\n    withMotion: !isReducedMotion\n  }, itemsToShow.map((item, index) => React.createElement(Transition, {\n    key: getItemId(item),\n    in: !hasLeft(item),\n    onStatusChange: status => {\n      if (status === 'entered') {\n        setEnteringItems([]);\n      } else if (status === 'exited') {\n        setExitingItems([]);\n      }\n    }\n  }, (state, transitionRootElement) => {\n    var _a, _b, _c;\n    return React.createElement(\"li\", {\n      \"aria-hidden\": !showInnerContent(item),\n      className: showInnerContent(item) ? clsx(styles['flash-list-item'], !isFlashbarStackExpanded && styles.item, !collapsedItemRefs.current[getAnimationElementId(item)] && styles['expanded-only']) : clsx(styles.flash, styles[`flash-type-${(_a = item.type) !== null && _a !== void 0 ? _a : 'info'}`], styles.item),\n      ref: element => {\n        if (isFlashbarStackExpanded) {\n          expandedItemRefs.current[getAnimationElementId(item)] = element;\n        } else {\n          collapsedItemRefs.current[getAnimationElementId(item)] = element;\n        }\n      },\n      style: !isFlashbarStackExpanded || transitioning ? {\n        [customCssProps.flashbarStackIndex]: (_c = (_b = item.collapsedIndex) !== null && _b !== void 0 ? _b : item.expandedIndex) !== null && _c !== void 0 ? _c : index\n      } : undefined,\n      key: getItemId(item)\n    }, showInnerContent(item) && React.createElement(Flash\n    // eslint-disable-next-line react/forbid-component-props\n    , Object.assign({\n      // eslint-disable-next-line react/forbid-component-props\n      className: clsx(animateFlash && styles['flash-with-motion'], isVisualRefresh && styles['flash-refresh']),\n      key: getItemId(item),\n      ref: shouldUseStandardAnimation(item, index) ? transitionRootElement : undefined,\n      transitionState: shouldUseStandardAnimation(item, index) ? state : undefined,\n      i18nStrings: iconAriaLabels\n    }, item)));\n  }))));\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.flashbar, styles[`breakpoint-${breakpoint}`], styles.stack, isCollapsible && styles.collapsible, items.length === 2 && styles['short-list'], isFlashbarStackExpanded && styles.expanded, isVisualRefresh && styles['visual-refresh']),\n    ref: mergedRef\n  }), isFlashbarStackExpanded && renderList(), isCollapsible && React.createElement(\"div\", {\n    className: clsx(styles['notification-bar'], isVisualRefresh && styles['visual-refresh'], isFlashbarStackExpanded ? styles.expanded : styles.collapsed, transitioning && styles['animation-running'], items.length === 2 && styles['short-list'], getVisualContextClassname('flashbar') // Visual context is needed for focus ring to be white\n    ),\n    onClick: toggleCollapseExpand,\n    ref: notificationBarRef\n  }, React.createElement(\"span\", {\n    \"aria-live\": \"polite\",\n    className: styles.status,\n    role: \"status\",\n    id: itemCountElementId\n  }, notificationBarText && React.createElement(\"h2\", {\n    className: styles.header\n  }, notificationBarText), React.createElement(\"span\", {\n    className: styles['item-count']\n  }, counterTypes.map(_ref2 => {\n    let {\n      type,\n      labelName,\n      iconName\n    } = _ref2;\n    return React.createElement(NotificationTypeCount, {\n      key: type,\n      iconName: iconName,\n      label: iconAriaLabels[labelName],\n      count: countByType[type]\n    });\n  }))), React.createElement(\"button\", {\n    \"aria-controls\": flashbarElementId,\n    \"aria-describedby\": itemCountElementId,\n    \"aria-expanded\": isFlashbarStackExpanded,\n    \"aria-label\": notificationBarAriaLabel,\n    className: clsx(styles.button, isFlashbarStackExpanded && styles.expanded)\n  }, React.createElement(InternalIcon, {\n    className: styles.icon,\n    size: \"normal\",\n    name: \"angle-down\"\n  }))), !isFlashbarStackExpanded && renderList());\n}\nconst NotificationTypeCount = _ref3 => {\n  let {\n    iconName,\n    label,\n    count\n  } = _ref3;\n  return React.createElement(\"span\", {\n    className: styles['type-count']\n  }, React.createElement(\"span\", {\n    \"aria-label\": label,\n    role: \"img\"\n  }, React.createElement(\"span\", {\n    title: label,\n    \"aria-hidden\": \"true\"\n  }, React.createElement(InternalIcon, {\n    name: iconName\n  }))), React.createElement(\"span\", {\n    className: styles['count-number']\n  }, count));\n};\nconst ListWrapper = _ref4 => {\n  let {\n    children,\n    withMotion\n  } = _ref4;\n  return withMotion ? React.createElement(TransitionGroup, {\n    component: null\n  }, children) : React.createElement(React.Fragment, null, children);\n};","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,IAAeC,WAAW,EAAEC,eAAe,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACjG,OAAOC,cAAc,MAAM,6CAA6C;AACxE,SAASC,KAAK,EAAEC,cAAc,QAAQ,SAAS;AAE/C,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,SAASC,eAAe,QAAQ,wBAAwB;AACxD,SAASC,UAAU,QAAQ,mCAAmC;AAC9D,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,YAAY,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,wBAAwB,QAAuB,SAAS;AAChH,SAASC,OAAO,EAAEC,WAAW,QAAQ,qBAAqB;AAC1D,SAASC,WAAW,QAAQ,iCAAiC;AAE7D,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,WAAW,QAAQ,UAAU;AACtC,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,SAASC,qBAAqB,QAAQ,yCAAyC;AAC/E,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,eAAe,QAAQ,iBAAiB;AACjD,SAASC,yBAAyB,QAAQ,uCAAuC;AACjF,SAASC,iBAAiB,QAAQ,wCAAwC;AAI1E;AACA;AACA,MAAMC,sBAAsB,GAAG,CAAC;AAEhC,MAAMC,2BAA2B,GAAG,GAAG;AAEvC,eAAc,SAAUC,mBAAmB,CAACC,EAAsC;MAAtC;MAAEC;IAAK,MAA+B;IAA1BC,SAAS,cAArB,SAAuB,CAAF;EAC/D,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG9B,QAAQ,CAAiD,EAAE,CAAC;EACtG,MAAM,CAAC+B,YAAY,EAAEC,eAAe,CAAC,GAAGhC,QAAQ,CAAiD,EAAE,CAAC;EACpG,MAAM,CAACiC,uBAAuB,EAAEC,0BAA0B,CAAC,GAAGlC,QAAQ,CAAC,KAAK,CAAC;EAE7E,MAAMmC,oBAAoB,GAAGvC,WAAW,CAAC,MAAK;IAC5C,MAAMwC,aAAa,GAAGH,uBAAuB,GAAGI,gBAAgB,CAACC,OAAO,GAAGC,iBAAiB,CAACD,OAAO;IACpG,uCAAYF,aAAa;MAAEI,eAAe,EAAEC,kBAAkB,CAACH;IAAO;EACxE,CAAC,EAAE,CAACL,uBAAuB,CAAC,CAAC;EAE7B,MAAMS,iBAAiB,GAAG9C,WAAW,CAAC,MAAK;IACzC,MAAM+C,KAAK,GAAG9B,WAAW,CAACsB,oBAAoB,EAAE,CAAC;IACjDS,wBAAwB,CAACD,KAAK,CAAC;EACjC,CAAC,EAAE,CAACR,oBAAoB,CAAC,CAAC;EAE1B,MAAM;IAAEU,SAAS;IAAEC,UAAU;IAAEC,eAAe;IAAEC,eAAe;IAAEC,SAAS;IAAEC;EAAG,CAAE,GAAGlC,WAAW;IAC7FW;EAAK,GACFC,SAAS;IACZuB,YAAY,EAAEC,QAAQ,IAAG;MACvBtB,gBAAgB,CAAC,CAAC,GAAGD,aAAa,EAAE,GAAGuB,QAAQ,CAAC,CAAC;IACnD,CAAC;IACDC,cAAc,EAAEC,OAAO,IAAG;MACxB;MACA;MACA;MACA,IAAI,QAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,cAAc,KAAI,EAACD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEP,eAAe,GAAE;QACxDL,iBAAiB,EAAE;;IAEvB,CAAC;IACDc,cAAc,EAAEC,YAAY,IAAG;MAC7BzB,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAE,GAAG0B,YAAY,CAAC,CAAC;IACrD;EAAC,GACD;EAEF,MAAMlB,iBAAiB,GAAGxC,MAAM,CAA8C,EAAE,CAAC;EACjF,MAAMsC,gBAAgB,GAAGtC,MAAM,CAA8C,EAAE,CAAC;EAChF,MAAM,CAAC2D,qBAAqB,EAAEd,wBAAwB,CAAC,GAAG5C,QAAQ,CAA0C,IAAI,CAAC;EACjH,MAAM2D,cAAc,GAAG5D,MAAM,CAA0B,IAAI,CAAC;EAC5D,MAAM0C,kBAAkB,GAAG1C,MAAM,CAAwB,IAAI,CAAC;EAC9D,MAAM,CAAC6D,aAAa,EAAEC,gBAAgB,CAAC,GAAG7D,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM8D,iBAAiB,GAAGhD,WAAW,CAAC,UAAU,CAAC;EACjD,MAAMiD,kBAAkB,GAAGjD,WAAW,CAAC,YAAY,CAAC;EAEpD,IAAIa,KAAK,CAACqC,MAAM,IAAIzC,sBAAsB,IAAIU,uBAAuB,EAAE;IACrEC,0BAA0B,CAAC,KAAK,CAAC;;EAGnC,MAAM+B,YAAY,GAAG,CAAClB,eAAe;EAErC,SAASmB,oBAAoB;IAC3BnD,gBAAgB,CAACY,KAAK,CAACqC,MAAM,EAAE,CAAC/B,uBAAuB,CAAC;IACxD,IAAI,CAACc,eAAe,EAAE;MACpBL,iBAAiB,EAAE;;IAErBR,0BAA0B,CAACiC,IAAI,IAAI,CAACA,IAAI,CAAC;EAC3C;EAEAtE,eAAe,CAAC,MAAK;IACnB,IAAIoC,uBAAuB,KAAIN,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEqC,MAAM,GAAE;MAC5C,MAAMI,cAAc,GAAGzC,KAAK,CAAC,CAAC,CAAC;MAC/B,IAAIyC,cAAc,CAACC,EAAE,KAAKC,SAAS,EAAE;QACnCnE,cAAc,CAAC+C,GAAG,CAACZ,OAAO,EAAE8B,cAAc,CAACC,EAAE,CAAC;;;IAGlD;IACA;EACF,CAAC,EAAE,CAACpC,uBAAuB,CAAC,CAAC;EAE7B;EACAX,iBAAiB,CAAC,MAAK;IACrB,IAAI,CAACW,uBAAuB,IAAIQ,kBAAkB,CAACH,OAAO,EAAE;MAC1DpB,qBAAqB,CAACuB,kBAAkB,CAACH,OAAO,CAAC;;EAErD,CAAC,EAAE,CAACL,uBAAuB,CAAC,CAAC;EAE7B,MAAMsC,mBAAmB,GAAGzE,OAAO,CACjC,MACEmB,QAAQ,CAAC,MAAK;IACZ;IACA;IACA,MAAMuD,WAAW,GAAGb,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAErB,OAAO;IAC3C,MAAMmC,QAAQ,GAAGD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEE,aAAa;IAC3C,IAAIF,WAAW,IAAIC,QAAQ,EAAE;MAC3B;MACA;MACAA,QAAQ,CAACE,SAAS,CAACC,MAAM,CAACrE,MAAM,CAACsE,QAAQ,CAAC;MAC1C,MAAMC,YAAY,GAAGC,MAAM,CAACC,WAAW;MACvC;MACA;MACA,MAAMC,YAAY,GAAG9D,WAAW,CAACsD,QAAQ,EAAES,OAAO,IAAIA,OAAO,CAACC,YAAY,CAAC,MAAM,CAAC,KAAK,QAAQ,CAAC,IAAIV,QAAQ;MAC5G,MAAMW,YAAY,GAChBnD,uBAAuB,IAAIoD,IAAI,CAACC,IAAI,CAACL,YAAY,CAACM,qBAAqB,EAAE,CAACC,MAAM,CAAC,IAAIV,YAAY;MACnG,IAAI,CAACM,YAAY,EAAE;QACjBX,QAAQ,CAACE,SAAS,CAACc,GAAG,CAAClF,MAAM,CAACsE,QAAQ,CAAC;;;EAG7C,CAAC,EAAErD,2BAA2B,CAAC,EACjC,CAACS,uBAAuB,CAAC,CAC1B;EAEDpC,eAAe,CAAC,MAAK;IACnBkF,MAAM,CAACW,gBAAgB,CAAC,QAAQ,EAAEnB,mBAAmB,CAAC;IACtD,OAAO,MAAK;MACVQ,MAAM,CAACY,mBAAmB,CAAC,QAAQ,EAAEpB,mBAAmB,CAAC;MACzDA,mBAAmB,CAACqB,MAAM,EAAE;IAC9B,CAAC;EACH,CAAC,EAAE,CAACrB,mBAAmB,CAAC,CAAC;EAEzB,MAAM;IAAEsB;EAAW,CAAE,GAAGjE,SAAS;EAEjC,MAAMkE,IAAI,GAAG1E,eAAe,CAAC,UAAU,CAAC;EACxC,MAAM2E,SAAS,GAAGD,IAAI,CAAC,uBAAuB,EAAED,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEE,SAAS,CAAC;EACvE,MAAMC,mBAAmB,GAAGF,IAAI,CAAC,iCAAiC,EAAED,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG,mBAAmB,CAAC;EACrG,MAAMC,wBAAwB,GAAGH,IAAI,CAAC,sCAAsC,EAAED,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEI,wBAAwB,CAAC;EACpH,MAAMC,cAAc,GAAG;IACrBC,kBAAkB,EAAEL,IAAI,CAAC,gCAAgC,EAAED,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEM,kBAAkB,CAAC;IAC3FC,uBAAuB,EAAEN,IAAI,CAAC,qCAAqC,EAAED,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEO,uBAAuB,CAAC;IAC1GC,iBAAiB,EAAEP,IAAI,CAAC,+BAA+B,EAAED,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEQ,iBAAiB,CAAC;IACxFC,oBAAoB,EAAER,IAAI,CAAC,kCAAkC,EAAED,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAES,oBAAoB,CAAC;IACjGC,oBAAoB,EAAET,IAAI,CAAC,kCAAkC,EAAED,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEU,oBAAoB;GACjG;EAED1G,eAAe,CAAC,MAAK;IACnB;IACA;IACA;IACA;IAEA,IAAI6D,qBAAqB,EAAE;MACzBa,mBAAmB,EAAE;MAErB3D,OAAO,CAAC;QACN4F,QAAQ,EAAErE,oBAAoB,EAAE;QAChCsE,QAAQ,EAAE/C,qBAAqB;QAC/BgD,sBAAsB,EAAE;UAAA,IAAC;YAAEC;UAAG,CAAE;UAAA,OAAM;YAAEC,KAAK,EAAE,GAAG;YAAEC,CAAC,EAAE,CAAC,GAAG,GAAGF;UAAG,CAAE;QAAA,CAAC;QACpEG,gBAAgB,EAAE,MAAMjD,gBAAgB,CAAC,KAAK;OAC/C,CAAC;MAEFA,gBAAgB,CAAC,IAAI,CAAC;MACtBjB,wBAAwB,CAAC,IAAI,CAAC;;EAElC,CAAC,EAAE,CAAC2B,mBAAmB,EAAEpC,oBAAoB,EAAEuB,qBAAqB,EAAEzB,uBAAuB,CAAC,CAAC;EAE/F,MAAM8E,aAAa,GAAGpF,KAAK,CAACqC,MAAM,GAAGzC,sBAAsB;EAE3D,MAAMyF,WAAW,GAAGvG,iBAAiB,CAACkB,KAAK,CAAC;EAE5C,MAAMsF,qBAAqB,GAAG,IAAIC,GAAG,CAACvF,KAAK,CAACwF,GAAG,CAACzG,YAAY,CAAC,CAAC,CAAC0G,IAAI;EACnE,MAAMC,QAAQ,GAAGhC,IAAI,CAACiC,GAAG,CAACL,qBAAqB,EAAE,CAAC,CAAC;EACnD,MAAMM,UAAU,GAAGlC,IAAI,CAACmC,GAAG,CAACH,QAAQ,EAAE1F,KAAK,CAACqC,MAAM,CAAC;EAEnD,MAAMyD,WAAW,GAAGxF,uBAAuB,GACvCN,KAAK,CAACwF,GAAG,CAAC,CAACO,IAAI,EAAEC,KAAK,KAAKC,gCAAMF,IAAI;IAAEG,aAAa,EAAEF;EAAK,EAAG,CAAC,GAC/DhH,wBAAwB,CAACgB,KAAK,EAAE4F,UAAU,CAAC,CAACJ,GAAG,CAAC,CAACO,IAAmB,EAAEC,KAAa,KAAKC,gCACnFF,IAAI;IACPI,cAAc,EAAEH;EAAK,EACrB,CAAC;EAEP,MAAMI,SAAS,GAAIL,IAAqD,IAAI;IAAA;IAC1E,uBAAI,CAACrD,EAAE,mCAAKqD,IAAsB,CAACG,aAAa,mCAAI,CAAC;EAAA;EAEvD;EACA;EACA;EACA;EACA,MAAMG,UAAU,GAAIN,IAAqD,IACvE7F,aAAa,CAACoG,IAAI,CAACC,KAAK,IAAIA,KAAK,CAAC7D,EAAE,IAAI6D,KAAK,CAAC7D,EAAE,KAAKqD,IAAI,CAACrD,EAAE,CAAC;EAC/D,MAAM8D,OAAO,GAAIT,IAAqD,IAAK,EAAE,eAAe,IAAIA,IAAI,CAAC;EACrG,MAAMU,gBAAgB,GAAIV,IAAqD,IAAKM,UAAU,CAACN,IAAI,CAAC,IAAIS,OAAO,CAACT,IAAI,CAAC;EAErH,MAAMW,gBAAgB,GAAIX,IAAqD,IAC7EzF,uBAAuB,IAAIkG,OAAO,CAACT,IAAI,CAAC,IAAK,eAAe,IAAIA,IAAI,IAAIA,IAAI,CAACG,aAAa,KAAK,CAAE;EAEnG,MAAMS,0BAA0B,GAAG,CAACZ,IAAmB,EAAEC,KAAa,KAAKA,KAAK,KAAK,CAAC,IAAIS,gBAAgB,CAACV,IAAI,CAAC;EAEhH,MAAMa,qBAAqB,GAAIb,IAAmB,IAAK,SAASK,SAAS,CAACL,IAAI,CAAC,EAAE;EAEjF,MAAMc,UAAU,GAAG,MACjB7I;IACEuD,GAAG,EAAES,cAAc;IACnB8E,SAAS,EAAE/I,IAAI,CACba,MAAM,CAAC,YAAY,CAAC,EACpB0B,uBAAuB,GAAG1B,MAAM,CAACmI,QAAQ,GAAGnI,MAAM,CAACoI,SAAS,EAC5D/E,aAAa,IAAIrD,MAAM,CAAC,mBAAmB,CAAC,EAC5CmD,qBAAqB,IAAInD,MAAM,CAAC,iBAAiB,CAAC,EAClDyC,eAAe,IAAIzC,MAAM,CAAC,gBAAgB,CAAC,CAC5C;IACD8D,EAAE,EAAEP,iBAAiB;IAAA,cACTiC,SAAS;IAAA,oBACHgB,aAAa,GAAGhD,kBAAkB,GAAGO,SAAS;IAChEsE,KAAK,EACH,CAAC3G,uBAAuB,IAAI2B,aAAa,GACrC;MACE,CAAC3D,cAAc,CAAC4I,kBAAkB,GAAGtB;KACtC,GACDjD;EAAS,GAGf3E,oBAACmJ,WAAW;IAACC,UAAU,EAAE,CAAChG;EAAe,GACtC0E,WAAW,CAACN,GAAG,CAAC,CAACO,IAAmB,EAAEC,KAAa,KAClDhI,oBAACW,UAAU;IACT0I,GAAG,EAAEjB,SAAS,CAACL,IAAI,CAAC;IACpBuB,EAAE,EAAE,CAACd,OAAO,CAACT,IAAI,CAAC;IAClBwB,cAAc,EAAEC,MAAM,IAAG;MACvB,IAAIA,MAAM,KAAK,SAAS,EAAE;QACxBrH,gBAAgB,CAAC,EAAE,CAAC;OACrB,MAAM,IAAIqH,MAAM,KAAK,QAAQ,EAAE;QAC9BnH,eAAe,CAAC,EAAE,CAAC;;IAEvB;EAAC,GAEA,CAACoH,KAAa,EAAEC,qBAA4D,KAAI;;IAAC,OAChF1J;MAAA,eACe,CAAC0I,gBAAgB,CAACX,IAAI,CAAC;MACpCe,SAAS,EACPJ,gBAAgB,CAACX,IAAI,CAAC,GAClBhI,IAAI,CACFa,MAAM,CAAC,iBAAiB,CAAC,EACzB,CAAC0B,uBAAuB,IAAI1B,MAAM,CAACmH,IAAI,EACvC,CAACnF,iBAAiB,CAACD,OAAO,CAACiG,qBAAqB,CAACb,IAAI,CAAC,CAAC,IAAInH,MAAM,CAAC,eAAe,CAAC,CACnF,GACDb,IAAI,CAACa,MAAM,CAAC+I,KAAK,EAAE/I,MAAM,CAAC,cAAc,UAAI,CAACgJ,IAAI,mCAAI,MAAM,EAAE,CAAC,EAAEhJ,MAAM,CAACmH,IAAI,CAAC;MAElFxE,GAAG,EAAEgC,OAAO,IAAG;QACb,IAAIjD,uBAAuB,EAAE;UAC3BI,gBAAgB,CAACC,OAAO,CAACiG,qBAAqB,CAACb,IAAI,CAAC,CAAC,GAAGxC,OAAO;SAChE,MAAM;UACL3C,iBAAiB,CAACD,OAAO,CAACiG,qBAAqB,CAACb,IAAI,CAAC,CAAC,GAAGxC,OAAO;;MAEpE,CAAC;MACD0D,KAAK,EACH,CAAC3G,uBAAuB,IAAI2B,aAAa,GACrC;QACE,CAAC3D,cAAc,CAACuJ,kBAAkB,GAChC,YAAC9B,IAAsB,CAACI,cAAc,mCAAKJ,IAAsB,CAACG,aAAa,mCAAIF;OACtF,GACDrD,SAAS;MAEf0E,GAAG,EAAEjB,SAAS,CAACL,IAAI;IAAC,GAEnBW,gBAAgB,CAACX,IAAI,CAAC,IACrB/H,oBAACO;IACC;IAAA;MAAA;MACAuI,SAAS,EAAE/I,IAAI,CACbuE,YAAY,IAAI1D,MAAM,CAAC,mBAAmB,CAAC,EAC3CyC,eAAe,IAAIzC,MAAM,CAAC,eAAe,CAAC,CAC3C;MACDyI,GAAG,EAAEjB,SAAS,CAACL,IAAI,CAAC;MACpBxE,GAAG,EAAEoF,0BAA0B,CAACZ,IAAI,EAAEC,KAAK,CAAC,GAAG0B,qBAAqB,GAAG/E,SAAS;MAChFmF,eAAe,EAAEnB,0BAA0B,CAACZ,IAAI,EAAEC,KAAK,CAAC,GAAGyB,KAAK,GAAG9E,SAAS;MAC5EuB,WAAW,EAAEK;IAAc,GACvBwB,IAAI,EAEX,CACE;GACN,CAEJ,CAAC,CACU,CAEjB;EAED,OACE/H,6CACMkD,SAAS;IACb4F,SAAS,EAAE/I,IAAI,CACbmD,SAAS,CAAC4F,SAAS,EACnBlI,MAAM,CAACkE,QAAQ,EACflE,MAAM,CAAC,cAAcuC,UAAU,EAAE,CAAC,EAClCvC,MAAM,CAACmJ,KAAK,EACZ3C,aAAa,IAAIxG,MAAM,CAACoJ,WAAW,EACnChI,KAAK,CAACqC,MAAM,KAAK,CAAC,IAAIzD,MAAM,CAAC,YAAY,CAAC,EAC1C0B,uBAAuB,IAAI1B,MAAM,CAACmI,QAAQ,EAC1C1F,eAAe,IAAIzC,MAAM,CAAC,gBAAgB,CAAC,CAC5C;IACD2C,GAAG,EAAED;EAAS,IAEbhB,uBAAuB,IAAIuG,UAAU,EAAE,EACvCzB,aAAa,IACZpH;IACE8I,SAAS,EAAE/I,IAAI,CACba,MAAM,CAAC,kBAAkB,CAAC,EAC1ByC,eAAe,IAAIzC,MAAM,CAAC,gBAAgB,CAAC,EAC3C0B,uBAAuB,GAAG1B,MAAM,CAACmI,QAAQ,GAAGnI,MAAM,CAACoI,SAAS,EAC5D/E,aAAa,IAAIrD,MAAM,CAAC,mBAAmB,CAAC,EAC5CoB,KAAK,CAACqC,MAAM,KAAK,CAAC,IAAIzD,MAAM,CAAC,YAAY,CAAC,EAC1Cc,yBAAyB,CAAC,UAAU,CAAC,CAAC;IAAA,CACvC;IACDuI,OAAO,EAAE1F,oBAAoB;IAC7BhB,GAAG,EAAET;EAAkB,GAEvB9C;IAAA,aAAgB,QAAQ;IAAC8I,SAAS,EAAElI,MAAM,CAAC4I,MAAM;IAAEU,IAAI,EAAC,QAAQ;IAACxF,EAAE,EAAEN;EAAkB,GACpFiC,mBAAmB,IAAIrG;IAAI8I,SAAS,EAAElI,MAAM,CAACuJ;EAAM,GAAG9D,mBAAmB,CAAM,EAChFrG;IAAM8I,SAAS,EAAElI,MAAM,CAAC,YAAY;EAAC,GAClCC,YAAY,CAAC2G,GAAG,CAAC;IAAA,IAAC;MAAEoC,IAAI;MAAEQ,SAAS;MAAEC;IAAQ,CAAE;IAAA,OAC9CrK,oBAACsK,qBAAqB;MACpBjB,GAAG,EAAEO,IAAI;MACTS,QAAQ,EAAEA,QAAQ;MAClBE,KAAK,EAAEhE,cAAc,CAAC6D,SAAS,CAAC;MAChCI,KAAK,EAAEnD,WAAW,CAACuC,IAAI;IAAC,EACxB;EAAA,CACH,CAAC,CACG,CACF,EACP5J;IAAA,iBACiBmE,iBAAiB;IAAA,oBACdC,kBAAkB;IAAA,iBACrB9B,uBAAuB;IAAA,cAC1BgE,wBAAwB;IACpCwC,SAAS,EAAE/I,IAAI,CAACa,MAAM,CAAC6J,MAAM,EAAEnI,uBAAuB,IAAI1B,MAAM,CAACmI,QAAQ;EAAC,GAE1E/I,oBAACS,YAAY;IAACqI,SAAS,EAAElI,MAAM,CAAC8J,IAAI;IAAEjD,IAAI,EAAC,QAAQ;IAACkD,IAAI,EAAC;EAAY,EAAG,CACjE,CAEZ,EACA,CAACrI,uBAAuB,IAAIuG,UAAU,EAAE,CACrC;AAEV;AAEA,MAAMyB,qBAAqB,GAAG,SAQzB;EAAA,IAR0B;IAC7BD,QAAQ;IACRE,KAAK;IACLC;EAAK,CAKN;EACC,OACExK;IAAM8I,SAAS,EAAElI,MAAM,CAAC,YAAY;EAAC,GACnCZ;IAAA,cAAkBuK,KAAK;IAAEL,IAAI,EAAC;EAAK,GACjClK;IAAM4K,KAAK,EAAEL,KAAK;IAAA,eAAc;EAAM,GACpCvK,oBAACS,YAAY;IAACkK,IAAI,EAAEN;EAAQ,EAAI,CAC3B,CACF,EACPrK;IAAM8I,SAAS,EAAElI,MAAM,CAAC,cAAc;EAAC,GAAG4J,KAAK,CAAQ,CAClD;AAEX,CAAC;AAED,MAAMrB,WAAW,GAAG;EAAA,IAAC;IAAE0B,QAAQ;IAAEzB;EAAU,CAAgD;EAAA,OACzFA,UAAU,GAAGpJ,oBAACU,eAAe;IAACoK,SAAS,EAAE;EAAI,GAAGD,QAAQ,CAAmB,GAAG7K,0CAAG6K,QAAQ,CAAI;AAAA","names":["clsx","React","useCallback","useLayoutEffect","useMemo","useRef","useState","customCssProps","Flash","focusFlashById","InternalIcon","TransitionGroup","Transition","styles","counterTypes","getFlashTypeCount","getItemColor","getVisibleCollapsedItems","animate","getDOMRects","useUniqueId","sendToggleMetric","useFlashbar","throttle","scrollElementIntoView","findUpUntil","useInternalI18n","getVisualContextClassname","useEffectOnUpdate","maxNonCollapsibleItems","resizeListenerThrottleDelay","CollapsibleFlashbar","_a","items","restProps","enteringItems","setEnteringItems","exitingItems","setExitingItems","isFlashbarStackExpanded","setIsFlashbarStackExpanded","getElementsToAnimate","flashElements","expandedItemRefs","current","collapsedItemRefs","notificationBar","notificationBarRef","prepareAnimations","rects","setInitialAnimationState","baseProps","breakpoint","isReducedMotion","isVisualRefresh","mergedRef","ref","onItemsAdded","newItems","onItemsChanged","options","allItemsHaveId","onItemsRemoved","removedItems","initialAnimationState","listElementRef","transitioning","setTransitioning","flashbarElementId","itemCountElementId","length","animateFlash","toggleCollapseExpand","prev","mostRecentItem","id","undefined","updateBottomSpacing","listElement","flashbar","parentElement","classList","remove","floating","windowHeight","window","innerHeight","outerElement","element","getAttribute","applySpacing","Math","ceil","getBoundingClientRect","bottom","add","addEventListener","removeEventListener","cancel","i18nStrings","i18n","ariaLabel","notificationBarText","notificationBarAriaLabel","iconAriaLabels","errorIconAriaLabel","inProgressIconAriaLabel","infoIconAriaLabel","successIconAriaLabel","warningIconAriaLabel","elements","oldState","newElementInitialState","top","scale","y","onTransitionsEnd","isCollapsible","countByType","numberOfColorsInStack","Set","map","size","maxSlots","max","stackDepth","min","itemsToShow","item","index","Object","expandedIndex","collapsedIndex","getItemId","hasEntered","some","_item","hasLeft","hasEnteredOrLeft","showInnerContent","shouldUseStandardAnimation","getAnimationElementId","renderList","className","expanded","collapsed","style","flashbarStackDepth","ListWrapper","withMotion","key","in","onStatusChange","status","state","transitionRootElement","flash","type","flashbarStackIndex","transitionState","stack","collapsible","onClick","role","header","labelName","iconName","NotificationTypeCount","label","count","button","icon","name","title","children","component"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/flashbar/lib/default/flashbar/collapsible-flashbar.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { ReactNode, useCallback, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport customCssProps from '../internal/generated/custom-css-properties';\nimport { Flash, focusFlashById } from './flash';\nimport { FlashbarProps } from './interfaces';\nimport InternalIcon from '../icon/internal';\nimport { TransitionGroup } from 'react-transition-group';\nimport { Transition } from '../internal/components/transition';\nimport styles from './styles.css.js';\nimport { counterTypes, getFlashTypeCount, getItemColor, getVisibleCollapsedItems, StackableItem } from './utils';\nimport { animate, getDOMRects } from '../internal/animate';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { IconProps } from '../icon/interfaces';\nimport { sendToggleMetric } from './internal/analytics';\nimport { useFlashbar } from './common';\nimport { throttle } from '../internal/utils/throttle';\nimport { scrollElementIntoView } from '../internal/utils/scrollable-containers';\nimport { findUpUntil } from '../internal/utils/dom';\nimport { useInternalI18n } from '../i18n/context';\nimport { getVisualContextClassname } from '../internal/components/visual-context';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\n\nexport { FlashbarProps };\n\n// If the number of items is equal or less than this value,\n// the toggle element will not be displayed and the Flashbar will look like a regular single-item Flashbar.\nconst maxNonCollapsibleItems = 1;\n\nconst resizeListenerThrottleDelay = 100;\n\nexport default function CollapsibleFlashbar({ items, ...restProps }: FlashbarProps) {\n  const [enteringItems, setEnteringItems] = useState<ReadonlyArray<FlashbarProps.MessageDefinition>>([]);\n  const [exitingItems, setExitingItems] = useState<ReadonlyArray<FlashbarProps.MessageDefinition>>([]);\n  const [isFlashbarStackExpanded, setIsFlashbarStackExpanded] = useState(false);\n\n  const getElementsToAnimate = useCallback(() => {\n    const flashElements = isFlashbarStackExpanded ? expandedItemRefs.current : collapsedItemRefs.current;\n    return { ...flashElements, notificationBar: notificationBarRef.current };\n  }, [isFlashbarStackExpanded]);\n\n  const prepareAnimations = useCallback(() => {\n    const rects = getDOMRects(getElementsToAnimate());\n    setInitialAnimationState(rects);\n  }, [getElementsToAnimate]);\n\n  const { baseProps, breakpoint, isReducedMotion, isVisualRefresh, mergedRef, ref } = useFlashbar({\n    items,\n    ...restProps,\n    onItemsAdded: newItems => {\n      setEnteringItems([...enteringItems, ...newItems]);\n    },\n    onItemsChanged: options => {\n      // If not all items have ID, we can still animate collapse/expand transitions\n      // because we can rely on each item's index in the original array,\n      // but we can't do that when elements are added or removed, since the index changes.\n      if (options?.allItemsHaveId && !options?.isReducedMotion) {\n        prepareAnimations();\n      }\n    },\n    onItemsRemoved: removedItems => {\n      setExitingItems([...exitingItems, ...removedItems]);\n    },\n  });\n\n  const collapsedItemRefs = useRef<Record<string | number, HTMLElement | null>>({});\n  const expandedItemRefs = useRef<Record<string | number, HTMLElement | null>>({});\n  const [initialAnimationState, setInitialAnimationState] = useState<Record<string | number, DOMRect> | null>(null);\n  const listElementRef = useRef<HTMLUListElement | null>(null);\n  const notificationBarRef = useRef<HTMLDivElement | null>(null);\n  const [transitioning, setTransitioning] = useState(false);\n  const flashbarElementId = useUniqueId('flashbar');\n  const itemCountElementId = useUniqueId('item-count');\n\n  if (items.length <= maxNonCollapsibleItems && isFlashbarStackExpanded) {\n    setIsFlashbarStackExpanded(false);\n  }\n\n  const animateFlash = !isReducedMotion;\n\n  function toggleCollapseExpand() {\n    sendToggleMetric(items.length, !isFlashbarStackExpanded);\n    if (!isReducedMotion) {\n      prepareAnimations();\n    }\n    setIsFlashbarStackExpanded(prev => !prev);\n  }\n\n  useLayoutEffect(() => {\n    if (isFlashbarStackExpanded && items?.length) {\n      const mostRecentItem = items[0];\n      if (mostRecentItem.id !== undefined) {\n        focusFlashById(ref.current, mostRecentItem.id);\n      }\n    }\n    // Run this after expanding, but not every time the items change.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFlashbarStackExpanded]);\n\n  // When collapsing, scroll up if necessary to avoid losing track of the focused button\n  useEffectOnUpdate(() => {\n    if (!isFlashbarStackExpanded && notificationBarRef.current) {\n      scrollElementIntoView(notificationBarRef.current);\n    }\n  }, [isFlashbarStackExpanded]);\n\n  const updateBottomSpacing = useMemo(\n    () =>\n      throttle(() => {\n        // Allow vertical space between Flashbar and page bottom only when the Flashbar is reaching the end of the page,\n        // otherwise avoid spacing with eventual sticky elements below.\n        const listElement = listElementRef?.current;\n        const flashbar = listElement?.parentElement;\n        if (listElement && flashbar) {\n          // Make sure the bottom padding is present when we make the calculations,\n          // then we might decide to remove it or not.\n          flashbar.classList.remove(styles.floating);\n          const windowHeight = window.innerHeight;\n          // Take the parent region into account if using the App Layout, because it might have additional margins.\n          // Otherwise we use the Flashbar component for this calculation.\n          const outerElement = findUpUntil(flashbar, element => element.getAttribute('role') === 'region') || flashbar;\n          const applySpacing =\n            isFlashbarStackExpanded && Math.ceil(outerElement.getBoundingClientRect().bottom) >= windowHeight;\n          if (!applySpacing) {\n            flashbar.classList.add(styles.floating);\n          }\n        }\n      }, resizeListenerThrottleDelay),\n    [isFlashbarStackExpanded]\n  );\n\n  useLayoutEffect(() => {\n    window.addEventListener('resize', updateBottomSpacing);\n    return () => {\n      window.removeEventListener('resize', updateBottomSpacing);\n      updateBottomSpacing.cancel();\n    };\n  }, [updateBottomSpacing]);\n\n  const { i18nStrings } = restProps;\n\n  const i18n = useInternalI18n('flashbar');\n  const ariaLabel = i18n('i18nStrings.ariaLabel', i18nStrings?.ariaLabel);\n  const notificationBarText = i18n('i18nStrings.notificationBarText', i18nStrings?.notificationBarText);\n  const notificationBarAriaLabel = i18n('i18nStrings.notificationBarAriaLabel', i18nStrings?.notificationBarAriaLabel);\n  const iconAriaLabels = {\n    errorIconAriaLabel: i18n('i18nStrings.errorIconAriaLabel', i18nStrings?.errorIconAriaLabel),\n    inProgressIconAriaLabel: i18n('i18nStrings.inProgressIconAriaLabel', i18nStrings?.inProgressIconAriaLabel),\n    infoIconAriaLabel: i18n('i18nStrings.infoIconAriaLabel', i18nStrings?.infoIconAriaLabel),\n    successIconAriaLabel: i18n('i18nStrings.successIconAriaLabel', i18nStrings?.successIconAriaLabel),\n    warningIconAriaLabel: i18n('i18nStrings.warningIconAriaLabel', i18nStrings?.warningIconAriaLabel),\n  };\n\n  useLayoutEffect(() => {\n    // When `useLayoutEffect` is called, the DOM is updated but has not been painted yet,\n    // so it's a good moment to trigger animations that will make calculations based on old and new DOM state.\n    // The old state is kept in `initialAnimationState`\n    // and the new state can be retrieved from the current DOM elements.\n\n    if (initialAnimationState) {\n      updateBottomSpacing();\n\n      animate({\n        elements: getElementsToAnimate(),\n        oldState: initialAnimationState,\n        newElementInitialState: ({ top }) => ({ scale: 0.9, y: -0.2 * top }),\n        onTransitionsEnd: () => setTransitioning(false),\n      });\n\n      setTransitioning(true);\n      setInitialAnimationState(null);\n    }\n  }, [updateBottomSpacing, getElementsToAnimate, initialAnimationState, isFlashbarStackExpanded]);\n\n  const isCollapsible = items.length > maxNonCollapsibleItems;\n\n  const countByType = getFlashTypeCount(items);\n\n  const numberOfColorsInStack = new Set(items.map(getItemColor)).size;\n  const maxSlots = Math.max(numberOfColorsInStack, 3);\n  const stackDepth = Math.min(maxSlots, items.length);\n\n  const itemsToShow = isFlashbarStackExpanded\n    ? items.map((item, index) => ({ ...item, expandedIndex: index }))\n    : getVisibleCollapsedItems(items, stackDepth).map((item: StackableItem, index: number) => ({\n        ...item,\n        collapsedIndex: index,\n      }));\n\n  const getItemId = (item: StackableItem | FlashbarProps.MessageDefinition) =>\n    item.id ?? (item as StackableItem).expandedIndex ?? 0;\n\n  // This check allows us to use the standard \"enter\" Transition only when the notification was not existing before.\n  // If instead it was moved to the top of the stack but was already present in the array\n  // (e.g, after dismissing another notification),\n  // we need to use different, more custom and more controlled animations.\n  const hasEntered = (item: StackableItem | FlashbarProps.MessageDefinition) =>\n    enteringItems.some(_item => _item.id && _item.id === item.id);\n  const hasLeft = (item: StackableItem | FlashbarProps.MessageDefinition) => !('expandedIndex' in item);\n  const hasEnteredOrLeft = (item: StackableItem | FlashbarProps.MessageDefinition) => hasEntered(item) || hasLeft(item);\n\n  const showInnerContent = (item: StackableItem | FlashbarProps.MessageDefinition) =>\n    isFlashbarStackExpanded || hasLeft(item) || ('expandedIndex' in item && item.expandedIndex === 0);\n\n  const shouldUseStandardAnimation = (item: StackableItem, index: number) => index === 0 && hasEnteredOrLeft(item);\n\n  const getAnimationElementId = (item: StackableItem) => `flash-${getItemId(item)}`;\n\n  const renderList = () => (\n    <ul\n      ref={listElementRef}\n      className={clsx(\n        styles['flash-list'],\n        isFlashbarStackExpanded ? styles.expanded : styles.collapsed,\n        transitioning && styles['animation-running'],\n        initialAnimationState && styles['animation-ready'],\n        isVisualRefresh && styles['visual-refresh']\n      )}\n      id={flashbarElementId}\n      aria-label={ariaLabel}\n      aria-describedby={isCollapsible ? itemCountElementId : undefined}\n      style={\n        !isFlashbarStackExpanded || transitioning\n          ? {\n              [customCssProps.flashbarStackDepth]: stackDepth,\n            }\n          : undefined\n      }\n    >\n      <ListWrapper withMotion={!isReducedMotion}>\n        {itemsToShow.map((item: StackableItem, index: number) => (\n          <Transition\n            key={getItemId(item)}\n            in={!hasLeft(item)}\n            onStatusChange={status => {\n              if (status === 'entered') {\n                setEnteringItems([]);\n              } else if (status === 'exited') {\n                setExitingItems([]);\n              }\n            }}\n          >\n            {(state: string, transitionRootElement: React.Ref<HTMLDivElement> | undefined) => (\n              <li\n                aria-hidden={!showInnerContent(item)}\n                className={\n                  showInnerContent(item)\n                    ? clsx(\n                        styles['flash-list-item'],\n                        !isFlashbarStackExpanded && styles.item,\n                        !collapsedItemRefs.current[getAnimationElementId(item)] && styles['expanded-only']\n                      )\n                    : clsx(styles.flash, styles[`flash-type-${item.type ?? 'info'}`], styles.item)\n                }\n                ref={element => {\n                  if (isFlashbarStackExpanded) {\n                    expandedItemRefs.current[getAnimationElementId(item)] = element;\n                  } else {\n                    collapsedItemRefs.current[getAnimationElementId(item)] = element;\n                  }\n                }}\n                style={\n                  !isFlashbarStackExpanded || transitioning\n                    ? {\n                        [customCssProps.flashbarStackIndex]:\n                          (item as StackableItem).collapsedIndex ?? (item as StackableItem).expandedIndex ?? index,\n                      }\n                    : undefined\n                }\n                key={getItemId(item)}\n              >\n                {showInnerContent(item) && (\n                  <Flash\n                    // eslint-disable-next-line react/forbid-component-props\n                    className={clsx(\n                      animateFlash && styles['flash-with-motion'],\n                      isVisualRefresh && styles['flash-refresh']\n                    )}\n                    key={getItemId(item)}\n                    ref={shouldUseStandardAnimation(item, index) ? transitionRootElement : undefined}\n                    transitionState={shouldUseStandardAnimation(item, index) ? state : undefined}\n                    i18nStrings={iconAriaLabels}\n                    {...item}\n                  />\n                )}\n              </li>\n            )}\n          </Transition>\n        ))}\n      </ListWrapper>\n    </ul>\n  );\n\n  return (\n    <div\n      {...baseProps}\n      className={clsx(\n        baseProps.className,\n        styles.flashbar,\n        styles[`breakpoint-${breakpoint}`],\n        styles.stack,\n        isCollapsible && styles.collapsible,\n        items.length === 2 && styles['short-list'],\n        isFlashbarStackExpanded && styles.expanded,\n        isVisualRefresh && styles['visual-refresh']\n      )}\n      ref={mergedRef}\n    >\n      {isFlashbarStackExpanded && renderList()}\n      {isCollapsible && (\n        <div\n          className={clsx(\n            styles['notification-bar'],\n            isVisualRefresh && styles['visual-refresh'],\n            isFlashbarStackExpanded ? styles.expanded : styles.collapsed,\n            transitioning && styles['animation-running'],\n            items.length === 2 && styles['short-list'],\n            getVisualContextClassname('flashbar') // Visual context is needed for focus ring to be white\n          )}\n          onClick={toggleCollapseExpand}\n          ref={notificationBarRef}\n        >\n          <span aria-live=\"polite\" className={styles.status} role=\"status\" id={itemCountElementId}>\n            {notificationBarText && <h2 className={styles.header}>{notificationBarText}</h2>}\n            <span className={styles['item-count']}>\n              {counterTypes.map(({ type, labelName, iconName }) => (\n                <NotificationTypeCount\n                  key={type}\n                  iconName={iconName}\n                  label={iconAriaLabels[labelName]}\n                  count={countByType[type]}\n                />\n              ))}\n            </span>\n          </span>\n          <button\n            aria-controls={flashbarElementId}\n            aria-describedby={itemCountElementId}\n            aria-expanded={isFlashbarStackExpanded}\n            aria-label={notificationBarAriaLabel}\n            className={clsx(styles.button, isFlashbarStackExpanded && styles.expanded)}\n          >\n            <InternalIcon className={styles.icon} size=\"normal\" name=\"angle-down\" />\n          </button>\n        </div>\n      )}\n      {!isFlashbarStackExpanded && renderList()}\n    </div>\n  );\n}\n\nconst NotificationTypeCount = ({\n  iconName,\n  label,\n  count,\n}: {\n  iconName: IconProps.Name;\n  label?: string;\n  count: number;\n}) => {\n  return (\n    <span className={styles['type-count']}>\n      <span aria-label={label} role=\"img\">\n        <span title={label} aria-hidden=\"true\">\n          <InternalIcon name={iconName} />\n        </span>\n      </span>\n      <span className={styles['count-number']}>{count}</span>\n    </span>\n  );\n};\n\nconst ListWrapper = ({ children, withMotion }: { children: ReactNode; withMotion: boolean }) =>\n  withMotion ? <TransitionGroup component={null}>{children}</TransitionGroup> : <>{children}</>;\n"]},"metadata":{},"sourceType":"module"}