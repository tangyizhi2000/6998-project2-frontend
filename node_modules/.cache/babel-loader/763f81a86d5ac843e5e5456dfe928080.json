{"ast":null,"code":"import { subtract as getCoordinatesDelta, getOwnerDocument, getWindow, isKeyboardEvent } from '@dnd-kit/utilities';\nimport { defaultCoordinates } from '@dnd-kit/core';\nimport { applyScroll } from './utilities/scroll';\nimport { EventName } from './utilities/events';\nimport { Listeners } from './utilities/listeners';\nimport { defaultKeyboardCodes } from './defaults';\nimport { scrollElementIntoView } from '../../../internal/utils/scrollable-containers';\n// Slightly modified version of @dnd-kit's KeyboardSensor:\n// https://github.com/clauderic/dnd-kit/blob/master/packages/core/src/sensors/keyboard/KeyboardSensor.ts\n// The only difference is that here, reordering is deactivated on blur, as in\n// this PR: https://github.com/clauderic/dnd-kit/pull/1087.\n// If it is merged, then @dnd-kit's KeyboardSensor can be used instead\n// and all files under this directory (`keyboard-sensor`) can be removed.\n// Changes from mainstream are marked below as \"Customization\"\nexport class KeyboardSensor {\n  constructor(props) {\n    this.props = props;\n    this.autoScrollEnabled = false;\n    const {\n      event: {\n        target\n      }\n    } = props;\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.attach();\n  }\n  attach() {\n    var _a;\n    this.handleStart();\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n    // Customization: deactivate reordering on blur event\n    (_a = this.props.event.target) === null || _a === void 0 ? void 0 : _a.addEventListener(EventName.Blur, this.handleCancel);\n    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));\n  }\n  handleStart() {\n    const {\n      activeNode,\n      onStart\n    } = this.props;\n    const node = activeNode.node.current;\n    if (node) {\n      scrollElementIntoView(node);\n    }\n    onStart(defaultCoordinates);\n  }\n  handleKeyDown(event) {\n    if (isKeyboardEvent(event)) {\n      const {\n        active,\n        context,\n        options\n      } = this.props;\n      const {\n        keyboardCodes = defaultKeyboardCodes,\n        coordinateGetter\n      } = options;\n      const {\n        code\n      } = event;\n      if (keyboardCodes.end.indexOf(code) !== -1) {\n        this.handleEnd(event);\n        return;\n      }\n      if (keyboardCodes.cancel.indexOf(code) !== -1) {\n        this.handleCancel(event);\n        return;\n      }\n      const {\n        collisionRect\n      } = context.current;\n      const currentCoordinates = collisionRect ? {\n        x: collisionRect.left,\n        y: collisionRect.top\n      } : defaultCoordinates;\n      if (!this.referenceCoordinates) {\n        this.referenceCoordinates = currentCoordinates;\n      }\n      if (!coordinateGetter) {\n        return;\n      }\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates\n      });\n      if (newCoordinates) {\n        const {\n          scrollableAncestors\n        } = context.current;\n        const direction = event.code;\n        const scrolled = applyScroll({\n          currentCoordinates,\n          direction,\n          newCoordinates,\n          scrollableAncestors\n        });\n        if (!scrolled) {\n          this.handleMove(event, getCoordinatesDelta(newCoordinates, this.referenceCoordinates));\n        }\n      }\n    }\n  }\n  handleMove(event, coordinates) {\n    const {\n      onMove\n    } = this.props;\n    event.preventDefault();\n    onMove(coordinates);\n  }\n  handleEnd(event) {\n    const {\n      onEnd\n    } = this.props;\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n  handleCancel(event) {\n    const {\n      onCancel\n    } = this.props;\n    // Customization: do not prevent browser from managing native focus\n    if (event.type !== EventName.Blur) {\n      event.preventDefault();\n    }\n    this.detach();\n    onCancel();\n  }\n  detach() {\n    var _a;\n    // Customization: clean up listener for blur event\n    (_a = this.props.event.target) === null || _a === void 0 ? void 0 : _a.removeEventListener(EventName.Blur, this.handleCancel);\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n}\nKeyboardSensor.activators = [{\n  eventName: 'onKeyDown',\n  handler: (event, _ref, _ref2) => {\n    let {\n      keyboardCodes = defaultKeyboardCodes,\n      onActivation\n    } = _ref;\n    let {\n      active\n    } = _ref2;\n    const {\n      code\n    } = event.nativeEvent;\n    if (keyboardCodes.start.indexOf(code) !== -1) {\n      const activator = active.activatorNode.current;\n      if (activator && event.target !== activator) {\n        return false;\n      }\n      event.preventDefault();\n      onActivation === null || onActivation === void 0 ? void 0 : onActivation({\n        event: event.nativeEvent\n      });\n      return true;\n    }\n    return false;\n  }\n}];","map":{"version":3,"mappings":"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","names":["subtract","getCoordinatesDelta","getOwnerDocument","getWindow","isKeyboardEvent","defaultCoordinates","applyScroll","EventName","Listeners","defaultKeyboardCodes","scrollElementIntoView","KeyboardSensor","constructor","props","event","target","listeners","windowListeners","handleKeyDown","bind","handleCancel","attach","handleStart","add","Resize","VisibilityChange","addEventListener","Blur","setTimeout","Keydown","activeNode","onStart","node","current","active","context","options","keyboardCodes","coordinateGetter","code","end","indexOf","handleEnd","cancel","collisionRect","currentCoordinates","x","left","y","top","referenceCoordinates","newCoordinates","scrollableAncestors","direction","scrolled","handleMove","coordinates","onMove","preventDefault","onEnd","detach","onCancel","type","removeEventListener","removeAll","eventName","handler","onActivation","nativeEvent","start","activator","activatorNode"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/collection-preferences/content-display/keyboard-sensor/lib/default/collection-preferences/content-display/keyboard-sensor/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport {\n  subtract as getCoordinatesDelta,\n  getOwnerDocument,\n  getWindow,\n  isKeyboardEvent,\n  Coordinates,\n} from '@dnd-kit/utilities';\n\nimport { defaultCoordinates } from '@dnd-kit/core';\nimport { applyScroll } from './utilities/scroll';\nimport { EventName } from './utilities/events';\nimport { Listeners } from './utilities/listeners';\nimport type { Activators, SensorInstance } from '@dnd-kit/core';\nimport { KeyboardSensorOptions, KeyboardSensorProps } from '@dnd-kit/core';\n\nimport { defaultKeyboardCodes } from './defaults';\nimport { scrollElementIntoView } from '../../../internal/utils/scrollable-containers';\n\n// Slightly modified version of @dnd-kit's KeyboardSensor:\n// https://github.com/clauderic/dnd-kit/blob/master/packages/core/src/sensors/keyboard/KeyboardSensor.ts\n\n// The only difference is that here, reordering is deactivated on blur, as in\n// this PR: https://github.com/clauderic/dnd-kit/pull/1087.\n// If it is merged, then @dnd-kit's KeyboardSensor can be used instead\n// and all files under this directory (`keyboard-sensor`) can be removed.\n\n// Changes from mainstream are marked below as \"Customization\"\n\nexport class KeyboardSensor implements SensorInstance {\n  public autoScrollEnabled = false;\n  private referenceCoordinates: Coordinates | undefined;\n  private listeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(private props: KeyboardSensorProps) {\n    const {\n      event: { target },\n    } = props;\n\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    this.handleStart();\n\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n\n    // Customization: deactivate reordering on blur event\n    this.props.event.target?.addEventListener(EventName.Blur, this.handleCancel);\n\n    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));\n  }\n\n  private handleStart() {\n    const { activeNode, onStart } = this.props;\n    const node = activeNode.node.current;\n\n    if (node) {\n      scrollElementIntoView(node);\n    }\n\n    onStart(defaultCoordinates);\n  }\n\n  private handleKeyDown(event: Event) {\n    if (isKeyboardEvent(event)) {\n      const { active, context, options } = this.props;\n      const { keyboardCodes = defaultKeyboardCodes, coordinateGetter } = options;\n      const { code } = event;\n\n      if (keyboardCodes.end.indexOf(code) !== -1) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.indexOf(code) !== -1) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const { collisionRect } = context.current;\n      const currentCoordinates = collisionRect ? { x: collisionRect.left, y: collisionRect.top } : defaultCoordinates;\n\n      if (!this.referenceCoordinates) {\n        this.referenceCoordinates = currentCoordinates;\n      }\n\n      if (!coordinateGetter) {\n        return;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates,\n      });\n\n      if (newCoordinates) {\n        const { scrollableAncestors } = context.current;\n        const direction = event.code;\n\n        const scrolled = applyScroll({ currentCoordinates, direction, newCoordinates, scrollableAncestors });\n\n        if (!scrolled) {\n          this.handleMove(event, getCoordinatesDelta(newCoordinates, this.referenceCoordinates));\n        }\n      }\n    }\n  }\n\n  private handleMove(event: Event, coordinates: Coordinates) {\n    const { onMove } = this.props;\n\n    event.preventDefault();\n    onMove(coordinates);\n  }\n\n  private handleEnd(event: Event) {\n    const { onEnd } = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel(event: Event) {\n    const { onCancel } = this.props;\n\n    // Customization: do not prevent browser from managing native focus\n    if (event.type !== EventName.Blur) {\n      event.preventDefault();\n    }\n    this.detach();\n    onCancel();\n  }\n\n  private detach() {\n    // Customization: clean up listener for blur event\n    this.props.event.target?.removeEventListener(EventName.Blur, this.handleCancel);\n\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n\n  static activators: Activators<KeyboardSensorOptions> = [\n    {\n      eventName: 'onKeyDown' as const,\n      handler: (event: React.KeyboardEvent, { keyboardCodes = defaultKeyboardCodes, onActivation }, { active }) => {\n        const { code } = event.nativeEvent;\n\n        if (keyboardCodes.start.indexOf(code) !== -1) {\n          const activator = active.activatorNode.current;\n\n          if (activator && event.target !== activator) {\n            return false;\n          }\n\n          event.preventDefault();\n\n          onActivation?.({ event: event.nativeEvent });\n\n          return true;\n        }\n\n        return false;\n      },\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}