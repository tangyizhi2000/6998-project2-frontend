{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { matchesX, getKeyValue } from './utils';\nimport styles from './styles.css.js';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nexport default function BarSeries(_ref) {\n  var _clsx;\n  var axis = _ref.axis,\n    series = _ref.series,\n    color = _ref.color,\n    xScale = _ref.xScale,\n    yScale = _ref.yScale,\n    highlighted = _ref.highlighted,\n    dimmed = _ref.dimmed,\n    highlightedGroupIndex = _ref.highlightedGroupIndex,\n    stackedBarOffsets = _ref.stackedBarOffsets,\n    totalSeriesCount = _ref.totalSeriesCount,\n    seriesIndex = _ref.seriesIndex,\n    plotSize = _ref.plotSize,\n    chartAreaClipPath = _ref.chartAreaClipPath;\n  var isRefresh = useVisualRefresh();\n  var xCoordinates = useMemo(function () {\n    var _a;\n    if (series.type !== 'bar' || !xScale.isCategorical()) {\n      return [];\n    }\n    var yContinuosScale = yScale.d3Scale;\n    var xPoints = series.data.map(function (_ref2) {\n      var x = _ref2.x;\n      return xScale.d3Scale(x) || NaN;\n    });\n    var zeroY = (_a = yScale.d3Scale(0)) !== null && _a !== void 0 ? _a : NaN;\n    var baseY = isFinite(zeroY) ? Math.min(plotSize, zeroY) : plotSize;\n    var barWidth = xScale.d3Scale.bandwidth();\n    var PADDING = 4;\n    var MINWIDTH = 4;\n    if (!stackedBarOffsets && totalSeriesCount > 1) {\n      // Regular grouped bars\n      barWidth = (barWidth - (totalSeriesCount - 1) * PADDING) / totalSeriesCount;\n      barWidth = Math.max(barWidth, MINWIDTH);\n    }\n    return xPoints.map(function (x, i) {\n      var _a, _b;\n      var d = series.data[i];\n      var barX = x;\n      var yValue = d.y;\n      if (stackedBarOffsets) {\n        // Stacked bars\n        var offsetMap = d.y < 0 ? stackedBarOffsets.negativeOffsets : stackedBarOffsets.positiveOffsets;\n        yValue = d.y + (offsetMap[getKeyValue(d.x)] || 0);\n      } else if (totalSeriesCount > 1) {\n        // Regular grouped bars\n        barX += seriesIndex * (barWidth + PADDING);\n      }\n      // Account for negative values growing \"down\" instead of \"up\"\n      yValue = yValue < 0 ? yValue - d.y : yValue;\n      return {\n        x: barX,\n        y: (_a = yContinuosScale(yValue)) !== null && _a !== void 0 ? _a : NaN,\n        width: barWidth,\n        height: Math.abs(((_b = yContinuosScale(d.y)) !== null && _b !== void 0 ? _b : NaN) - baseY)\n      };\n    });\n  }, [series, xScale, yScale, plotSize, stackedBarOffsets, totalSeriesCount, seriesIndex]);\n  var highlightedXValue = highlightedGroupIndex !== null ? xScale.domain[highlightedGroupIndex] : null;\n  return React.createElement(\"g\", {\n    \"aria-label\": series.title,\n    clipPath: \"url(#\".concat(chartAreaClipPath, \")\"),\n    className: clsx(styles.series, styles['series--bar'], (_clsx = {}, _defineProperty(_clsx, styles['series--highlighted'], highlighted), _defineProperty(_clsx, styles['series--dimmed'], dimmed), _clsx))\n  }, xCoordinates.map(function (_ref3, i) {\n    var x = _ref3.x,\n      y = _ref3.y,\n      width = _ref3.width,\n      height = _ref3.height;\n    if (!isFinite(x) || !isFinite(height)) {\n      return;\n    }\n    // Create margins between stacked series but only when series data is not too small.\n    var baseHeightOffset = stackedBarOffsets ? 3 : 0;\n    var isSmallBar = height < 4;\n    var heightOffset = isSmallBar ? 0 : baseHeightOffset;\n    var widthOffset = 2;\n    var rx = isRefresh ? isSmallBar ? '2px' : '4px' : '0px';\n    var className = clsx(styles.series__rect, _defineProperty({}, styles['series--dimmed'], highlightedXValue !== null && !matchesX(highlightedXValue, series.data[i].x)));\n    return axis === 'x' ? React.createElement(\"rect\", {\n      key: \"bar-\".concat(i),\n      fill: color,\n      x: x + widthOffset / 2,\n      y: y + heightOffset / 2,\n      width: width - widthOffset,\n      height: height - heightOffset,\n      rx: rx,\n      className: className\n    }) : React.createElement(\"rect\", {\n      key: \"bar-\".concat(i),\n      fill: color,\n      x: y - height + heightOffset / 2,\n      y: x + widthOffset / 2,\n      width: height - heightOffset,\n      height: width - widthOffset,\n      rx: rx,\n      className: className\n    });\n  }));\n}","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,OAAOC,IAAI,MAAM,MAAM;AAKvB,SAASC,QAAQ,EAAEC,WAAW,QAAwB,SAAS;AAC/D,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,gBAAgB,QAAQ,mCAAmC;AAwBpE,eAAc,SAAUC,SAAS,OAcb;EAAA;EAAA,IAblBC,IAAI,QAAJA,IAAI;IACJC,MAAM,QAANA,MAAM;IACNC,KAAK,QAALA,KAAK;IACLC,MAAM,QAANA,MAAM;IACNC,MAAM,QAANA,MAAM;IACNC,WAAW,QAAXA,WAAW;IACXC,MAAM,QAANA,MAAM;IACNC,qBAAqB,QAArBA,qBAAqB;IACrBC,iBAAiB,QAAjBA,iBAAiB;IACjBC,gBAAgB,QAAhBA,gBAAgB;IAChBC,WAAW,QAAXA,WAAW;IACXC,QAAQ,QAARA,QAAQ;IACRC,iBAAiB,QAAjBA,iBAAiB;EAEjB,IAAMC,SAAS,GAAGf,gBAAgB,EAAE;EAEpC,IAAMgB,YAAY,GAAGrB,OAAO,CAAC,YAAK;;IAChC,IAAIQ,MAAM,CAACc,IAAI,KAAK,KAAK,IAAI,CAACZ,MAAM,CAACa,aAAa,EAAE,EAAE;MACpD,OAAO,EAAE;;IAGX,IAAMC,eAAe,GAAuEb,MAAM,CAACc,OAAO;IAC1G,IAAMC,OAAO,GAAIlB,MAAM,CAACmB,IAAoE,CAACC,GAAG,CAC9F;MAAA,IAAGC,CAAC,SAADA,CAAC;MAAA,OAAOnB,MAAM,CAACe,OAAO,CAACI,CAAC,CAAC,IAAIC,GAAG;IAAA,EACpC;IAED,IAAMC,KAAK,GAAG,YAAM,CAACN,OAAO,CAAC,CAAC,CAAC,mCAAIK,GAAG;IACtC,IAAME,KAAK,GAAGC,QAAQ,CAACF,KAAK,CAAC,GAAGG,IAAI,CAACC,GAAG,CAACjB,QAAQ,EAAEa,KAAK,CAAC,GAAGb,QAAQ;IAEpE,IAAIkB,QAAQ,GAAG1B,MAAM,CAACe,OAAO,CAACY,SAAS,EAAE;IAEzC,IAAMC,OAAO,GAAG,CAAC;IACjB,IAAMC,QAAQ,GAAG,CAAC;IAElB,IAAI,CAACxB,iBAAiB,IAAIC,gBAAgB,GAAG,CAAC,EAAE;MAC9C;MACAoB,QAAQ,GAAG,CAACA,QAAQ,GAAG,CAACpB,gBAAgB,GAAG,CAAC,IAAIsB,OAAO,IAAItB,gBAAgB;MAC3EoB,QAAQ,GAAGF,IAAI,CAACM,GAAG,CAACJ,QAAQ,EAAEG,QAAQ,CAAC;;IAGzC,OAAOb,OAAO,CAACE,GAAG,CAAC,UAACC,CAAC,EAAEY,CAAC,EAAI;;MAC1B,IAAMC,CAAC,GAAGlC,MAAM,CAACmB,IAAI,CAACc,CAAC,CAAC;MACxB,IAAIE,IAAI,GAAGd,CAAC;MACZ,IAAIe,MAAM,GAAGF,CAAC,CAACG,CAAC;MAEhB,IAAI9B,iBAAiB,EAAE;QACrB;QACA,IAAM+B,SAAS,GAAGJ,CAAC,CAACG,CAAC,GAAG,CAAC,GAAG9B,iBAAiB,CAACgC,eAAe,GAAGhC,iBAAiB,CAACiC,eAAe;QACjGJ,MAAM,GAAGF,CAAC,CAACG,CAAC,IAAIC,SAAS,CAAC3C,WAAW,CAACuC,CAAC,CAACb,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;OAClD,MAAM,IAAIb,gBAAgB,GAAG,CAAC,EAAE;QAC/B;QACA2B,IAAI,IAAI1B,WAAW,IAAImB,QAAQ,GAAGE,OAAO,CAAC;;MAG5C;MACAM,MAAM,GAAGA,MAAM,GAAG,CAAC,GAAGA,MAAM,GAAGF,CAAC,CAACG,CAAC,GAAGD,MAAM;MAE3C,OAAO;QACLf,CAAC,EAAEc,IAAI;QACPE,CAAC,EAAE,qBAAe,CAACD,MAAM,CAAC,mCAAId,GAAG;QACjCmB,KAAK,EAAEb,QAAQ;QACfc,MAAM,EAAEhB,IAAI,CAACiB,GAAG,CAAC,CAAC,qBAAe,CAACT,CAAC,CAACG,CAAC,CAAC,mCAAIf,GAAG,IAAIE,KAAK;OACvD;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACxB,MAAM,EAAEE,MAAM,EAAEC,MAAM,EAAEO,QAAQ,EAAEH,iBAAiB,EAAEC,gBAAgB,EAAEC,WAAW,CAAC,CAAC;EAExF,IAAMmC,iBAAiB,GAAGtC,qBAAqB,KAAK,IAAI,GAAGJ,MAAM,CAAC2C,MAAM,CAACvC,qBAAqB,CAAC,GAAG,IAAI;EAEtG,OACEf;IAAA,cACcS,MAAM,CAAC8C,KAAK;IACxBC,QAAQ,iBAAUpC,iBAAiB,MAAG;IACtCqC,SAAS,EAAEvD,IAAI,CAACG,MAAM,CAACI,MAAM,EAAEJ,MAAM,CAAC,aAAa,CAAC,sCACjDA,MAAM,CAAC,qBAAqB,CAAC,EAAGQ,WAAW,0BAC3CR,MAAM,CAAC,gBAAgB,CAAC,EAAGS,MAAM;EAClC,GAEDQ,YAAY,CAACO,GAAG,CAAC,iBAA0Ba,CAAC,EAAI;IAAA,IAA5BZ,CAAC,SAADA,CAAC;MAAEgB,CAAC,SAADA,CAAC;MAAEI,KAAK,SAALA,KAAK;MAAEC,MAAM,SAANA,MAAM;IACtC,IAAI,CAACjB,QAAQ,CAACJ,CAAC,CAAC,IAAI,CAACI,QAAQ,CAACiB,MAAM,CAAC,EAAE;MACrC;;IAGF;IACA,IAAMO,gBAAgB,GAAG1C,iBAAiB,GAAG,CAAC,GAAG,CAAC;IAClD,IAAM2C,UAAU,GAAGR,MAAM,GAAG,CAAC;IAC7B,IAAMS,YAAY,GAAGD,UAAU,GAAG,CAAC,GAAGD,gBAAgB;IACtD,IAAMG,WAAW,GAAG,CAAC;IAErB,IAAMC,EAAE,GAAGzC,SAAS,GAAIsC,UAAU,GAAG,KAAK,GAAG,KAAK,GAAI,KAAK;IAC3D,IAAMF,SAAS,GAAGvD,IAAI,CAACG,MAAM,CAAC0D,YAAY,sBACvC1D,MAAM,CAAC,gBAAgB,CAAC,EAAGgD,iBAAiB,KAAK,IAAI,IAAI,CAAClD,QAAQ,CAACkD,iBAAiB,EAAE5C,MAAM,CAACmB,IAAI,CAACc,CAAC,CAAC,CAACZ,CAAC,CAAC,EACxG;IAEF,OAAOtB,IAAI,KAAK,GAAG,GACjBR;MACEgE,GAAG,gBAAStB,CAAC,CAAE;MACfuB,IAAI,EAAEvD,KAAK;MACXoB,CAAC,EAAEA,CAAC,GAAG+B,WAAW,GAAG,CAAC;MACtBf,CAAC,EAAEA,CAAC,GAAGc,YAAY,GAAG,CAAC;MACvBV,KAAK,EAAEA,KAAK,GAAGW,WAAW;MAC1BV,MAAM,EAAEA,MAAM,GAAGS,YAAY;MAC7BE,EAAE,EAAEA,EAAE;MACNL,SAAS,EAAEA;IAAS,EACpB,GAEFzD;MACEgE,GAAG,gBAAStB,CAAC,CAAE;MACfuB,IAAI,EAAEvD,KAAK;MACXoB,CAAC,EAAEgB,CAAC,GAAGK,MAAM,GAAGS,YAAY,GAAG,CAAC;MAChCd,CAAC,EAAEhB,CAAC,GAAG+B,WAAW,GAAG,CAAC;MACtBX,KAAK,EAAEC,MAAM,GAAGS,YAAY;MAC5BT,MAAM,EAAED,KAAK,GAAGW,WAAW;MAC3BC,EAAE,EAAEA,EAAE;MACNL,SAAS,EAAEA;IAAS,EAEvB;EACH,CAAC,CAAC,CACA;AAER","names":["React","useMemo","clsx","matchesX","getKeyValue","styles","useVisualRefresh","BarSeries","axis","series","color","xScale","yScale","highlighted","dimmed","highlightedGroupIndex","stackedBarOffsets","totalSeriesCount","seriesIndex","plotSize","chartAreaClipPath","isRefresh","xCoordinates","type","isCategorical","yContinuosScale","d3Scale","xPoints","data","map","x","NaN","zeroY","baseY","isFinite","Math","min","barWidth","bandwidth","PADDING","MINWIDTH","max","i","d","barX","yValue","y","offsetMap","negativeOffsets","positiveOffsets","width","height","abs","highlightedXValue","domain","title","clipPath","className","baseHeightOffset","isSmallBar","heightOffset","widthOffset","rx","series__rect","key","fill"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/mixed-line-bar-chart/lib/default/mixed-line-bar-chart/bar-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { ScaleContinuousNumeric, ScaleTime } from '../internal/vendor/d3-scale';\n\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport { ChartDataTypes, MixedLineBarChartProps } from './interfaces';\nimport { matchesX, getKeyValue, StackedOffsets } from './utils';\nimport styles from './styles.css.js';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nexport interface BarSeriesProps<T> {\n  axis: 'x' | 'y';\n\n  series: MixedLineBarChartProps.BarDataSeries<T>;\n\n  color: string;\n  totalSeriesCount: number;\n  seriesIndex: number;\n\n  xScale: ChartScale;\n  yScale: NumericChartScale;\n\n  plotSize: number;\n  chartAreaClipPath: string;\n\n  highlighted: boolean;\n  dimmed: boolean;\n  highlightedGroupIndex: number | null;\n\n  // Contains the cumulative offset for each x value in a stacked bar chart\n  stackedBarOffsets?: StackedOffsets;\n}\n\nexport default function BarSeries<T extends ChartDataTypes>({\n  axis,\n  series,\n  color,\n  xScale,\n  yScale,\n  highlighted,\n  dimmed,\n  highlightedGroupIndex,\n  stackedBarOffsets,\n  totalSeriesCount,\n  seriesIndex,\n  plotSize,\n  chartAreaClipPath,\n}: BarSeriesProps<T>) {\n  const isRefresh = useVisualRefresh();\n\n  const xCoordinates = useMemo(() => {\n    if (series.type !== 'bar' || !xScale.isCategorical()) {\n      return [];\n    }\n\n    const yContinuosScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number> = yScale.d3Scale;\n    const xPoints = (series.data as ReadonlyArray<MixedLineBarChartProps.Datum<ChartDataTypes>>).map(\n      ({ x }) => xScale.d3Scale(x) || NaN\n    );\n\n    const zeroY = yScale.d3Scale(0) ?? NaN;\n    const baseY = isFinite(zeroY) ? Math.min(plotSize, zeroY) : plotSize;\n\n    let barWidth = xScale.d3Scale.bandwidth();\n\n    const PADDING = 4;\n    const MINWIDTH = 4;\n\n    if (!stackedBarOffsets && totalSeriesCount > 1) {\n      // Regular grouped bars\n      barWidth = (barWidth - (totalSeriesCount - 1) * PADDING) / totalSeriesCount;\n      barWidth = Math.max(barWidth, MINWIDTH);\n    }\n\n    return xPoints.map((x, i) => {\n      const d = series.data[i];\n      let barX = x;\n      let yValue = d.y;\n\n      if (stackedBarOffsets) {\n        // Stacked bars\n        const offsetMap = d.y < 0 ? stackedBarOffsets.negativeOffsets : stackedBarOffsets.positiveOffsets;\n        yValue = d.y + (offsetMap[getKeyValue(d.x)] || 0);\n      } else if (totalSeriesCount > 1) {\n        // Regular grouped bars\n        barX += seriesIndex * (barWidth + PADDING);\n      }\n\n      // Account for negative values growing \"down\" instead of \"up\"\n      yValue = yValue < 0 ? yValue - d.y : yValue;\n\n      return {\n        x: barX,\n        y: yContinuosScale(yValue) ?? NaN,\n        width: barWidth,\n        height: Math.abs((yContinuosScale(d.y) ?? NaN) - baseY),\n      };\n    });\n  }, [series, xScale, yScale, plotSize, stackedBarOffsets, totalSeriesCount, seriesIndex]);\n\n  const highlightedXValue = highlightedGroupIndex !== null ? xScale.domain[highlightedGroupIndex] : null;\n\n  return (\n    <g\n      aria-label={series.title}\n      clipPath={`url(#${chartAreaClipPath})`}\n      className={clsx(styles.series, styles['series--bar'], {\n        [styles['series--highlighted']]: highlighted,\n        [styles['series--dimmed']]: dimmed,\n      })}\n    >\n      {xCoordinates.map(({ x, y, width, height }, i) => {\n        if (!isFinite(x) || !isFinite(height)) {\n          return;\n        }\n\n        // Create margins between stacked series but only when series data is not too small.\n        const baseHeightOffset = stackedBarOffsets ? 3 : 0;\n        const isSmallBar = height < 4;\n        const heightOffset = isSmallBar ? 0 : baseHeightOffset;\n        const widthOffset = 2;\n\n        const rx = isRefresh ? (isSmallBar ? '2px' : '4px') : '0px';\n        const className = clsx(styles.series__rect, {\n          [styles['series--dimmed']]: highlightedXValue !== null && !matchesX(highlightedXValue, series.data[i].x),\n        });\n\n        return axis === 'x' ? (\n          <rect\n            key={`bar-${i}`}\n            fill={color}\n            x={x + widthOffset / 2}\n            y={y + heightOffset / 2}\n            width={width - widthOffset}\n            height={height - heightOffset}\n            rx={rx}\n            className={className}\n          />\n        ) : (\n          <rect\n            key={`bar-${i}`}\n            fill={color}\n            x={y - height + heightOffset / 2}\n            y={x + widthOffset / 2}\n            width={height - heightOffset}\n            height={width - widthOffset}\n            rx={rx}\n            className={className}\n          />\n        );\n      })}\n    </g>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}