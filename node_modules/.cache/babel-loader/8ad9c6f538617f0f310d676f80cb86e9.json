{"ast":null,"code":"import { isDataSeries, isXThreshold, isYThreshold, matchesX } from './utils';\n/** Formats provided x-position and its corresponding series values. */\nexport default function formatHighlighted(position, series, xTickFormatter) {\n  const formattedPosition = xTickFormatter ? xTickFormatter(position) : position.toString();\n  const details = [];\n  series.forEach(s => {\n    const detail = getSeriesDetail(s, position);\n    if (detail) {\n      details.push(detail);\n    }\n  });\n  return {\n    position: formattedPosition,\n    details\n  };\n}\nfunction getSeriesDetail(internalSeries, targetX) {\n  const {\n    series,\n    color\n  } = internalSeries;\n  // X-thresholds are only shown when X matches.\n  if (isXThreshold(series)) {\n    return series.x === targetX ? {\n      key: series.title,\n      value: '',\n      color,\n      markerType: 'dashed'\n    } : null;\n  }\n  if (isYThreshold(series)) {\n    return {\n      key: series.title,\n      value: series.valueFormatter ? series.valueFormatter(series.y) : series.y,\n      color,\n      markerType: 'dashed'\n    };\n  }\n  if (isDataSeries(series)) {\n    for (const datum of series.data) {\n      if (matchesX(targetX, datum.x)) {\n        return {\n          key: series.title,\n          value: series.valueFormatter ? series.valueFormatter(datum.y, targetX) : datum.y,\n          color,\n          markerType: series.type === 'line' ? 'line' : 'rectangle'\n        };\n      }\n    }\n  }\n  return null;\n}","map":{"version":3,"mappings":"AAKA,SAASA,YAAY,EAAEC,YAAY,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,SAAS;AAO5E;AACA,eAAc,SAAUC,iBAAiB,CACvCC,QAAW,EACXC,MAAyC,EACzCC,cAAqD;EAErD,MAAMC,iBAAiB,GAAGD,cAAc,GAAGA,cAAc,CAACF,QAAQ,CAAC,GAAGA,QAAQ,CAACI,QAAQ,EAAE;EAEzF,MAAMC,OAAO,GAA4B,EAAE;EAC3CJ,MAAM,CAACK,OAAO,CAACC,CAAC,IAAG;IACjB,MAAMC,MAAM,GAAGC,eAAe,CAACF,CAAC,EAAEP,QAAQ,CAAC;IAC3C,IAAIQ,MAAM,EAAE;MACVH,OAAO,CAACK,IAAI,CAACF,MAAM,CAAC;;EAExB,CAAC,CAAC;EAEF,OAAO;IAAER,QAAQ,EAAEG,iBAAiB;IAAEE;EAAO,CAAE;AACjD;AAEA,SAASI,eAAe,CAAIE,cAAsC,EAAEC,OAAU;EAC5E,MAAM;IAAEX,MAAM;IAAEY;EAAK,CAAE,GAAGF,cAAc;EAExC;EACA,IAAIf,YAAY,CAACK,MAAM,CAAC,EAAE;IACxB,OAAOA,MAAM,CAACa,CAAC,KAAKF,OAAO,GACvB;MACEG,GAAG,EAAEd,MAAM,CAACe,KAAK;MACjBC,KAAK,EAAE,EAAE;MACTJ,KAAK;MACLK,UAAU,EAAE;KACb,GACD,IAAI;;EAGV,IAAIrB,YAAY,CAACI,MAAM,CAAC,EAAE;IACxB,OAAO;MACLc,GAAG,EAAEd,MAAM,CAACe,KAAK;MACjBC,KAAK,EAAEhB,MAAM,CAACkB,cAAc,GAAGlB,MAAM,CAACkB,cAAc,CAAClB,MAAM,CAACmB,CAAC,CAAC,GAAGnB,MAAM,CAACmB,CAAC;MACzEP,KAAK;MACLK,UAAU,EAAE;KACb;;EAGH,IAAIvB,YAAY,CAACM,MAAM,CAAC,EAAE;IACxB,KAAK,MAAMoB,KAAK,IAAIpB,MAAM,CAACqB,IAAI,EAAE;MAC/B,IAAIxB,QAAQ,CAACc,OAAO,EAAES,KAAK,CAACP,CAAC,CAAC,EAAE;QAC9B,OAAO;UACLC,GAAG,EAAEd,MAAM,CAACe,KAAK;UACjBC,KAAK,EAAEhB,MAAM,CAACkB,cAAc,GAAGlB,MAAM,CAACkB,cAAc,CAACE,KAAK,CAACD,CAAC,EAAER,OAAO,CAAC,GAAGS,KAAK,CAACD,CAAC;UAChFP,KAAK;UACLK,UAAU,EAAEjB,MAAM,CAACsB,IAAI,KAAK,MAAM,GAAG,MAAM,GAAG;SAC/C;;;;EAKP,OAAO,IAAI;AACb","names":["isDataSeries","isXThreshold","isYThreshold","matchesX","formatHighlighted","position","series","xTickFormatter","formattedPosition","toString","details","forEach","s","detail","getSeriesDetail","push","internalSeries","targetX","color","x","key","title","value","markerType","valueFormatter","y","datum","data","type"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/mixed-line-bar-chart/lib/default/mixed-line-bar-chart/format-highlighted.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ChartDataTypes, InternalChartSeries } from './interfaces';\nimport { ChartSeriesDetailItem } from '../internal/components/chart-series-details';\nimport { CartesianChartProps } from '../internal/components/cartesian-chart/interfaces';\nimport { isDataSeries, isXThreshold, isYThreshold, matchesX } from './utils';\n\nexport interface HighlightDetails {\n  position: string;\n  details: ChartSeriesDetailItem[];\n}\n\n/** Formats provided x-position and its corresponding series values. */\nexport default function formatHighlighted<T extends ChartDataTypes>(\n  position: T,\n  series: readonly InternalChartSeries<T>[],\n  xTickFormatter?: CartesianChartProps.TickFormatter<T>\n): HighlightDetails {\n  const formattedPosition = xTickFormatter ? xTickFormatter(position) : position.toString();\n\n  const details: ChartSeriesDetailItem[] = [];\n  series.forEach(s => {\n    const detail = getSeriesDetail(s, position);\n    if (detail) {\n      details.push(detail);\n    }\n  });\n\n  return { position: formattedPosition, details };\n}\n\nfunction getSeriesDetail<T>(internalSeries: InternalChartSeries<T>, targetX: T): ChartSeriesDetailItem | null {\n  const { series, color } = internalSeries;\n\n  // X-thresholds are only shown when X matches.\n  if (isXThreshold(series)) {\n    return series.x === targetX\n      ? {\n          key: series.title,\n          value: '',\n          color,\n          markerType: 'dashed',\n        }\n      : null;\n  }\n\n  if (isYThreshold(series)) {\n    return {\n      key: series.title,\n      value: series.valueFormatter ? series.valueFormatter(series.y) : series.y,\n      color,\n      markerType: 'dashed',\n    };\n  }\n\n  if (isDataSeries(series)) {\n    for (const datum of series.data) {\n      if (matchesX(targetX, datum.x)) {\n        return {\n          key: series.title,\n          value: series.valueFormatter ? series.valueFormatter(datum.y, targetX) : datum.y,\n          color,\n          markerType: series.type === 'line' ? 'line' : 'rectangle',\n        };\n      }\n    }\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}