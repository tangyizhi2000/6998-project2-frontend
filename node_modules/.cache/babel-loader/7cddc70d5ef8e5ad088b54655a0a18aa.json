{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nexport default memo(LabelsMeasure);\n// Places the invisible left-hand side labels to calculate their maximum width.\nfunction LabelsMeasure(_ref) {\n  let {\n    scale,\n    ticks,\n    tickFormatter,\n    autoWidth\n  } = _ref;\n  const [width, ref] = useContainerQuery(rect => rect.contentBoxWidth);\n  // Tell elements's width to the parent.\n  useEffect(() => {\n    autoWidth(width || 0);\n  }, [autoWidth, width]);\n  const labelMapper = value => {\n    const scaledValue = scale.d3Scale(value);\n    if (scaledValue === undefined || !isFinite(scaledValue)) {\n      return null;\n    }\n    return React.createElement(\"div\", {\n      key: `${value}`,\n      className: styles['labels-left__label'],\n      \"aria-hidden\": \"true\"\n    }, tickFormatter ? tickFormatter(value) : value.toString());\n  };\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: clsx(styles['labels-left'], styles['labels-left--hidden'])\n  }, ticks.map(labelMapper));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,IAAI,EAAEC,SAAS,QAAQ,OAAO;AAC9C,OAAOC,IAAI,MAAM,MAAM;AAIvB,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,SAASC,iBAAiB,QAAQ,sCAAsC;AASxE,eAAeJ,IAAI,CAACK,aAAa,CAAyB;AAE1D;AACA,SAASA,aAAa,OAA+D;EAAA,IAA9D;IAAEC,KAAK;IAAEC,KAAK;IAAEC,aAAa;IAAEC;EAAS,CAAsB;EACnF,MAAM,CAACC,KAAK,EAAEC,GAAG,CAAC,GAAGP,iBAAiB,CAASQ,IAAI,IAAIA,IAAI,CAACC,eAAe,CAAC;EAE5E;EACAZ,SAAS,CAAC,MAAK;IACbQ,SAAS,CAACC,KAAK,IAAI,CAAC,CAAC;EACvB,CAAC,EAAE,CAACD,SAAS,EAAEC,KAAK,CAAC,CAAC;EAEtB,MAAMI,WAAW,GAAIC,KAAqB,IAAI;IAC5C,MAAMC,WAAW,GAAGV,KAAK,CAACW,OAAO,CAACF,KAAY,CAAC;IAC/C,IAAIC,WAAW,KAAKE,SAAS,IAAI,CAACC,QAAQ,CAACH,WAAW,CAAC,EAAE;MACvD,OAAO,IAAI;;IAGb,OACEjB;MAAKqB,GAAG,EAAE,GAAGL,KAAK,EAAE;MAAEM,SAAS,EAAElB,MAAM,CAAC,oBAAoB,CAAC;MAAA,eAAc;IAAM,GAC9EK,aAAa,GAAGA,aAAa,CAACO,KAAY,CAAC,GAAGA,KAAK,CAACO,QAAQ,EAAE,CAC3D;EAEV,CAAC;EAED,OACEvB;IAAKY,GAAG,EAAEA,GAAG;IAAEU,SAAS,EAAEnB,IAAI,CAACC,MAAM,CAAC,aAAa,CAAC,EAAEA,MAAM,CAAC,qBAAqB,CAAC;EAAC,GACjFI,KAAK,CAACgB,GAAG,CAACT,WAAW,CAAC,CACnB;AAEV","names":["React","memo","useEffect","clsx","styles","useContainerQuery","LabelsMeasure","scale","ticks","tickFormatter","autoWidth","width","ref","rect","contentBoxWidth","labelMapper","value","scaledValue","d3Scale","undefined","isFinite","key","className","toString","map"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/internal/components/cartesian-chart/lib/default/internal/components/cartesian-chart/labels-measure.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useEffect } from 'react';\nimport clsx from 'clsx';\n\nimport { ChartScale, NumericChartScale } from './scales';\n\nimport styles from './styles.css.js';\nimport { ChartDataTypes } from '../../../mixed-line-bar-chart/interfaces';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\ninterface LabelsMeasureProps {\n  scale: ChartScale | NumericChartScale;\n  ticks: readonly ChartDataTypes[];\n  tickFormatter?: (value: ChartDataTypes) => string;\n  autoWidth: (value: number) => void;\n}\n\nexport default memo(LabelsMeasure) as typeof LabelsMeasure;\n\n// Places the invisible left-hand side labels to calculate their maximum width.\nfunction LabelsMeasure({ scale, ticks, tickFormatter, autoWidth }: LabelsMeasureProps) {\n  const [width, ref] = useContainerQuery<number>(rect => rect.contentBoxWidth);\n\n  // Tell elements's width to the parent.\n  useEffect(() => {\n    autoWidth(width || 0);\n  }, [autoWidth, width]);\n\n  const labelMapper = (value: ChartDataTypes) => {\n    const scaledValue = scale.d3Scale(value as any);\n    if (scaledValue === undefined || !isFinite(scaledValue)) {\n      return null;\n    }\n\n    return (\n      <div key={`${value}`} className={styles['labels-left__label']} aria-hidden=\"true\">\n        {tickFormatter ? tickFormatter(value as any) : value.toString()}\n      </div>\n    );\n  };\n\n  return (\n    <div ref={ref} className={clsx(styles['labels-left'], styles['labels-left--hidden'])}>\n      {ticks.map(labelMapper)}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}