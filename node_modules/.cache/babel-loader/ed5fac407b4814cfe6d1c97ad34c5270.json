{"ast":null,"code":"import _toConsumableArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport styles from '../styles.css.js';\nimport { getSortedOptions } from './utils';\nimport { DndContext, DragOverlay } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport DraggableOption from './draggable-option';\nimport useDragAndDropReorder from './use-drag-and-drop-reorder';\nimport useLiveAnnouncements from './use-live-announcements';\nimport Portal from '../../internal/components/portal';\nimport ContentDisplayOption from './content-display-option';\nimport { useInternalI18n } from '../../i18n/context';\nvar componentPrefix = 'content-display';\nvar getClassName = function getClassName(suffix) {\n  return styles[\"\".concat(componentPrefix, \"-\").concat(suffix)];\n};\nexport default function ContentDisplayPreference(_ref) {\n  var title = _ref.title,\n    description = _ref.description,\n    options = _ref.options,\n    _ref$value = _ref.value,\n    value = _ref$value === void 0 ? options.map(function (_ref2) {\n      var id = _ref2.id;\n      return {\n        id: id,\n        visible: true\n      };\n    }) : _ref$value,\n    onChange = _ref.onChange,\n    liveAnnouncementDndStarted = _ref.liveAnnouncementDndStarted,\n    liveAnnouncementDndItemReordered = _ref.liveAnnouncementDndItemReordered,\n    liveAnnouncementDndItemCommitted = _ref.liveAnnouncementDndItemCommitted,\n    liveAnnouncementDndDiscarded = _ref.liveAnnouncementDndDiscarded,\n    dragHandleAriaDescription = _ref.dragHandleAriaDescription,\n    dragHandleAriaLabel = _ref.dragHandleAriaLabel;\n  var idPrefix = useUniqueId(componentPrefix);\n  var i18n = useInternalI18n('collection-preferences');\n  var onToggle = function onToggle(option) {\n    onChange(value.map(function (item) {\n      return item.id === option.id ? Object.assign(Object.assign({}, item), {\n        visible: !option.visible\n      }) : item;\n    }));\n  };\n  var titleId = \"\".concat(idPrefix, \"-title\");\n  var descriptionId = \"\".concat(idPrefix, \"-description\");\n  var sortedOptions = getSortedOptions({\n    options: options,\n    contentDisplay: value\n  });\n  var _useDragAndDropReorde = useDragAndDropReorder({\n      sortedOptions: sortedOptions\n    }),\n    activeItem = _useDragAndDropReorde.activeItem,\n    collisionDetection = _useDragAndDropReorde.collisionDetection,\n    handleKeyDown = _useDragAndDropReorde.handleKeyDown,\n    sensors = _useDragAndDropReorde.sensors,\n    setActiveItem = _useDragAndDropReorde.setActiveItem;\n  var activeOption = activeItem ? sortedOptions.find(function (_ref3) {\n    var id = _ref3.id;\n    return id === activeItem;\n  }) : null;\n  var announcements = useLiveAnnouncements({\n    isDragging: activeItem !== null,\n    liveAnnouncementDndStarted: i18n('contentDisplayPreference.liveAnnouncementDndStarted', liveAnnouncementDndStarted, function (format) {\n      return function (position, total) {\n        return format({\n          position: position,\n          total: total\n        });\n      };\n    }),\n    liveAnnouncementDndItemReordered: i18n('contentDisplayPreference.liveAnnouncementDndItemReordered', liveAnnouncementDndItemReordered, function (format) {\n      return function (initialPosition, currentPosition, total) {\n        return format({\n          currentPosition: currentPosition,\n          total: total,\n          isInitialPosition: \"\".concat(initialPosition === currentPosition)\n        });\n      };\n    }),\n    liveAnnouncementDndItemCommitted: i18n('contentDisplayPreference.liveAnnouncementDndItemCommitted', liveAnnouncementDndItemCommitted, function (format) {\n      return function (initialPosition, finalPosition, total) {\n        return format({\n          initialPosition: initialPosition,\n          finalPosition: finalPosition,\n          total: total,\n          isInitialPosition: \"\".concat(initialPosition === finalPosition)\n        });\n      };\n    }),\n    liveAnnouncementDndDiscarded: i18n('contentDisplayPreference.liveAnnouncementDndDiscarded', liveAnnouncementDndDiscarded),\n    sortedOptions: value\n  });\n  var renderedDragHandleAriaDescription = i18n('contentDisplayPreference.dragHandleAriaDescription', dragHandleAriaDescription);\n  return React.createElement(\"div\", {\n    className: styles[componentPrefix]\n  }, React.createElement(\"h3\", {\n    className: getClassName('title'),\n    id: titleId\n  }, i18n('contentDisplayPreference.title', title)), React.createElement(\"p\", {\n    className: getClassName('description'),\n    id: descriptionId\n  }, i18n('contentDisplayPreference.description', description)), React.createElement(DndContext, {\n    sensors: sensors,\n    collisionDetection: collisionDetection,\n    accessibility: {\n      announcements: announcements,\n      restoreFocus: false,\n      screenReaderInstructions: renderedDragHandleAriaDescription ? {\n        draggable: renderedDragHandleAriaDescription\n      } : undefined\n    },\n    onDragStart: function onDragStart(_ref4) {\n      var active = _ref4.active;\n      return setActiveItem(active.id);\n    },\n    onDragEnd: function onDragEnd(event) {\n      setActiveItem(null);\n      var active = event.active,\n        over = event.over;\n      if (over && active.id !== over.id) {\n        var oldIndex = value.findIndex(function (_ref5) {\n          var id = _ref5.id;\n          return id === active.id;\n        });\n        var newIndex = value.findIndex(function (_ref6) {\n          var id = _ref6.id;\n          return id === over.id;\n        });\n        onChange(arrayMove(_toConsumableArray(value), oldIndex, newIndex));\n      }\n    },\n    onDragCancel: function onDragCancel() {\n      return setActiveItem(null);\n    }\n  }, React.createElement(\"ul\", {\n    className: getClassName('option-list'),\n    \"aria-describedby\": descriptionId,\n    \"aria-labelledby\": titleId,\n    role: \"list\"\n  }, React.createElement(SortableContext, {\n    items: sortedOptions.map(function (_ref7) {\n      var id = _ref7.id;\n      return id;\n    }),\n    strategy: verticalListSortingStrategy\n  }, sortedOptions.map(function (option) {\n    return React.createElement(DraggableOption, {\n      dragHandleAriaLabel: i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel),\n      key: option.id,\n      onKeyDown: handleKeyDown,\n      onToggle: onToggle,\n      option: option\n    });\n  }))), React.createElement(Portal, null, React.createElement(DragOverlay, {\n    className: styles['drag-overlay'],\n    dropAnimation: null,\n    style: {\n      zIndex: 5000\n    }\n  }, activeOption && React.createElement(ContentDisplayOption, {\n    listeners: {\n      onKeyDown: handleKeyDown\n    },\n    dragHandleAriaLabel: i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel),\n    onToggle: onToggle,\n    option: activeOption\n  })))));\n}","map":{"version":3,"mappings":"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","names":["React","useUniqueId","styles","getSortedOptions","DndContext","DragOverlay","arrayMove","SortableContext","verticalListSortingStrategy","DraggableOption","useDragAndDropReorder","useLiveAnnouncements","Portal","ContentDisplayOption","useInternalI18n","componentPrefix","getClassName","suffix","ContentDisplayPreference","title","description","options","value","map","id","visible","onChange","liveAnnouncementDndStarted","liveAnnouncementDndItemReordered","liveAnnouncementDndItemCommitted","liveAnnouncementDndDiscarded","dragHandleAriaDescription","dragHandleAriaLabel","idPrefix","i18n","onToggle","option","item","Object","titleId","descriptionId","sortedOptions","contentDisplay","activeItem","collisionDetection","handleKeyDown","sensors","setActiveItem","activeOption","find","announcements","isDragging","position","total","format","initialPosition","currentPosition","isInitialPosition","finalPosition","renderedDragHandleAriaDescription","className","accessibility","restoreFocus","screenReaderInstructions","draggable","undefined","onDragStart","active","onDragEnd","event","over","oldIndex","findIndex","newIndex","onDragCancel","role","items","strategy","key","onKeyDown","dropAnimation","style","zIndex","listeners"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/collection-preferences/content-display/lib/default/collection-preferences/content-display/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\n\nimport { CollectionPreferencesProps } from '../interfaces';\nimport styles from '../styles.css.js';\nimport { getSortedOptions, OptionWithVisibility } from './utils';\nimport { DndContext, DragOverlay } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport DraggableOption from './draggable-option';\nimport useDragAndDropReorder from './use-drag-and-drop-reorder';\nimport useLiveAnnouncements from './use-live-announcements';\nimport Portal from '../../internal/components/portal';\nimport ContentDisplayOption from './content-display-option';\nimport { useInternalI18n } from '../../i18n/context';\n\nconst componentPrefix = 'content-display';\n\nconst getClassName = (suffix: string) => styles[`${componentPrefix}-${suffix}`];\n\ninterface ContentDisplayPreferenceProps extends CollectionPreferencesProps.ContentDisplayPreference {\n  onChange: (value: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>) => void;\n  value?: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>;\n}\n\nexport default function ContentDisplayPreference({\n  title,\n  description,\n  options,\n  value = options.map(({ id }) => ({\n    id,\n    visible: true,\n  })),\n  onChange,\n  liveAnnouncementDndStarted,\n  liveAnnouncementDndItemReordered,\n  liveAnnouncementDndItemCommitted,\n  liveAnnouncementDndDiscarded,\n  dragHandleAriaDescription,\n  dragHandleAriaLabel,\n}: ContentDisplayPreferenceProps) {\n  const idPrefix = useUniqueId(componentPrefix);\n  const i18n = useInternalI18n('collection-preferences');\n\n  const onToggle = (option: OptionWithVisibility) => {\n    onChange(value.map(item => (item.id === option.id ? { ...item, visible: !option.visible } : item)));\n  };\n\n  const titleId = `${idPrefix}-title`;\n  const descriptionId = `${idPrefix}-description`;\n\n  const sortedOptions = getSortedOptions({ options, contentDisplay: value });\n\n  const { activeItem, collisionDetection, handleKeyDown, sensors, setActiveItem } = useDragAndDropReorder({\n    sortedOptions,\n  });\n\n  const activeOption = activeItem ? sortedOptions.find(({ id }) => id === activeItem) : null;\n\n  const announcements = useLiveAnnouncements({\n    isDragging: activeItem !== null,\n    liveAnnouncementDndStarted: i18n(\n      'contentDisplayPreference.liveAnnouncementDndStarted',\n      liveAnnouncementDndStarted,\n      format => (position, total) => format({ position, total })\n    ),\n    liveAnnouncementDndItemReordered: i18n(\n      'contentDisplayPreference.liveAnnouncementDndItemReordered',\n      liveAnnouncementDndItemReordered,\n      format => (initialPosition, currentPosition, total) =>\n        format({ currentPosition, total, isInitialPosition: `${initialPosition === currentPosition}` })\n    ),\n    liveAnnouncementDndItemCommitted: i18n(\n      'contentDisplayPreference.liveAnnouncementDndItemCommitted',\n      liveAnnouncementDndItemCommitted,\n      format => (initialPosition, finalPosition, total) =>\n        format({ initialPosition, finalPosition, total, isInitialPosition: `${initialPosition === finalPosition}` })\n    ),\n    liveAnnouncementDndDiscarded: i18n(\n      'contentDisplayPreference.liveAnnouncementDndDiscarded',\n      liveAnnouncementDndDiscarded\n    ),\n    sortedOptions: value,\n  });\n\n  const renderedDragHandleAriaDescription = i18n(\n    'contentDisplayPreference.dragHandleAriaDescription',\n    dragHandleAriaDescription\n  );\n\n  return (\n    <div className={styles[componentPrefix]}>\n      <h3 className={getClassName('title')} id={titleId}>\n        {i18n('contentDisplayPreference.title', title)}\n      </h3>\n      <p className={getClassName('description')} id={descriptionId}>\n        {i18n('contentDisplayPreference.description', description)}\n      </p>\n      <DndContext\n        sensors={sensors}\n        collisionDetection={collisionDetection}\n        accessibility={{\n          announcements,\n          restoreFocus: false,\n          screenReaderInstructions: renderedDragHandleAriaDescription\n            ? { draggable: renderedDragHandleAriaDescription }\n            : undefined,\n        }}\n        onDragStart={({ active }) => setActiveItem(active.id)}\n        onDragEnd={event => {\n          setActiveItem(null);\n          const { active, over } = event;\n\n          if (over && active.id !== over.id) {\n            const oldIndex = value.findIndex(({ id }) => id === active.id);\n            const newIndex = value.findIndex(({ id }) => id === over.id);\n            onChange(arrayMove([...value], oldIndex, newIndex));\n          }\n        }}\n        onDragCancel={() => setActiveItem(null)}\n      >\n        {/* Use explicit list role to work around Safari not announcing lists as such when list-style is set to none.\n            See https://bugs.webkit.org/show_bug.cgi?id=170179 */}\n        <ul\n          className={getClassName('option-list')}\n          aria-describedby={descriptionId}\n          aria-labelledby={titleId}\n          role=\"list\"\n        >\n          <SortableContext items={sortedOptions.map(({ id }) => id)} strategy={verticalListSortingStrategy}>\n            {sortedOptions.map(option => {\n              return (\n                <DraggableOption\n                  dragHandleAriaLabel={i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel)}\n                  key={option.id}\n                  onKeyDown={handleKeyDown}\n                  onToggle={onToggle}\n                  option={option}\n                />\n              );\n            })}\n          </SortableContext>\n        </ul>\n        <Portal>\n          {/* Make sure that the drag overlay is above the modal\n              by assigning the z-index as inline style\n              so that it prevails over dnd-kit's inline z-index of 999  */}\n          {/* className is a documented prop of the DragOverlay component:\n              https://docs.dndkit.com/api-documentation/draggable/drag-overlay#class-name-and-inline-styles */\n          /* eslint-disable-next-line react/forbid-component-props */}\n          <DragOverlay className={styles['drag-overlay']} dropAnimation={null} style={{ zIndex: 5000 }}>\n            {activeOption && (\n              <ContentDisplayOption\n                listeners={{ onKeyDown: handleKeyDown }}\n                dragHandleAriaLabel={i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel)}\n                onToggle={onToggle}\n                option={activeOption}\n              />\n            )}\n          </DragOverlay>\n        </Portal>\n      </DndContext>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}