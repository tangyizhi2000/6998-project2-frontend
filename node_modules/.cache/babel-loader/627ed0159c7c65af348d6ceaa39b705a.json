{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useRef, useState } from 'react';\n/**\n * A hook that uses an Intersection Observer on the target element ref\n * and detects if the element is intersecting with its parent.\n */\nexport function useIntersectionObserver() {\n  var observerRef = useRef(null);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isIntersecting = _useState2[0],\n    setIsIntersecting = _useState2[1];\n  var ref = useCallback(function (targetElement) {\n    if (typeof IntersectionObserver === 'undefined') {\n      // Do nothing in environments like JSDOM\n      return;\n    }\n    if (observerRef.current) {\n      // Dismiss previous observer because the target changed\n      observerRef.current.disconnect();\n    }\n    // Create a new observer with the target element\n    if (targetElement) {\n      observerRef.current = new IntersectionObserver(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n          entry = _ref2[0];\n        return setIsIntersecting(entry.isIntersecting);\n      });\n      observerRef.current.observe(targetElement);\n    }\n  }, []);\n  return {\n    ref: ref,\n    isIntersecting: isIntersecting\n  };\n}","map":{"version":3,"mappings":";AAAA;AACA;AAEA,SAAsBA,WAAW,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAElE;;;;AAIA,OAAM,SAAUC,uBAAuB;EACrC,IAAMC,WAAW,GAAGH,MAAM,CAA8B,IAAI,CAAC;EAC7D,gBAA4CC,QAAQ,CAAC,KAAK,CAAC;IAAA;IAApDG,cAAc;IAAEC,iBAAiB;EAExC,IAAMC,GAAG,GAAGP,WAAW,CAAiB,uBAAa,EAAG;IACtD,IAAI,OAAOQ,oBAAoB,KAAK,WAAW,EAAE;MAC/C;MACA;;IAGF,IAAIJ,WAAW,CAACK,OAAO,EAAE;MACvB;MACAL,WAAW,CAACK,OAAO,CAACC,UAAU,EAAE;;IAGlC;IACA,IAAIC,aAAa,EAAE;MACjBP,WAAW,CAACK,OAAO,GAAG,IAAID,oBAAoB,CAAC;QAAA;UAAEI,KAAK;QAAA,OAAMN,iBAAiB,CAACM,KAAK,CAACP,cAAc,CAAC;MAAA,EAAC;MACpGD,WAAW,CAACK,OAAO,CAACI,OAAO,CAACF,aAAa,CAAC;;EAE9C,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEJ,GAAG,EAAHA,GAAG;IAAEF,cAAc,EAAdA;EAAc,CAAE;AAChC","names":["useCallback","useRef","useState","useIntersectionObserver","observerRef","isIntersecting","setIsIntersecting","ref","IntersectionObserver","current","disconnect","targetElement","entry","observe"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/hooks/use-intersection-observer/lib/default/internal/hooks/use-intersection-observer/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { RefCallback, useCallback, useRef, useState } from 'react';\n\n/**\n * A hook that uses an Intersection Observer on the target element ref\n * and detects if the element is intersecting with its parent.\n */\nexport function useIntersectionObserver<T extends HTMLElement>() {\n  const observerRef = useRef<IntersectionObserver | null>(null);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  const ref = useCallback<RefCallback<T>>(targetElement => {\n    if (typeof IntersectionObserver === 'undefined') {\n      // Do nothing in environments like JSDOM\n      return;\n    }\n\n    if (observerRef.current) {\n      // Dismiss previous observer because the target changed\n      observerRef.current.disconnect();\n    }\n\n    // Create a new observer with the target element\n    if (targetElement) {\n      observerRef.current = new IntersectionObserver(([entry]) => setIsIntersecting(entry.isIntersecting));\n      observerRef.current.observe(targetElement);\n    }\n  }, []);\n\n  return { ref, isIntersecting };\n}\n"]},"metadata":{},"sourceType":"module"}