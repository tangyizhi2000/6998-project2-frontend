{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { getBaseProps } from '../internal/base-component';\nimport { matchBreakpointMapping } from '../internal/breakpoints';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport styles from './styles.css.js';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nconst InternalGrid = React.forwardRef((_a, ref) => {\n  var {\n      __breakpoint,\n      gridDefinition = [],\n      disableGutters = false,\n      children,\n      __responsiveClassName,\n      __internalRootRef = null\n    } = _a,\n    restProps = __rest(_a, [\"__breakpoint\", \"gridDefinition\", \"disableGutters\", \"children\", \"__responsiveClassName\", \"__internalRootRef\"]);\n  let [defaultBreakpoint, defaultRef] = useContainerBreakpoints(undefined);\n  if (__breakpoint !== undefined) {\n    defaultBreakpoint = __breakpoint;\n    defaultRef = ref;\n  }\n  const baseProps = getBaseProps(restProps);\n  /*\n  Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n  */\n  const flattenedChildren = flattenChildren(children);\n  if (isDevelopment) {\n    const columnCount = gridDefinition.length;\n    const childCount = flattenedChildren.length;\n    if (columnCount !== childCount) {\n      warnOnce('Grid', `The number of children (${childCount}) does not match the number of columns defined (${columnCount}).`);\n    }\n  }\n  const mergedRef = useMergeRefs(defaultRef, __internalRootRef);\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: clsx(styles.grid, baseProps.className, {\n      [styles['no-gutters']]: disableGutters\n    }, __responsiveClassName ? __responsiveClassName(defaultBreakpoint) : null),\n    ref: mergedRef\n  }), flattenedChildren.map((child, i) => {\n    var _a, _b, _c, _d;\n    // If this react child is a primitive value, the key will be undefined\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const key = child.key;\n    return React.createElement(\"div\", {\n      key: key,\n      className: clsx(styles['grid-column'], getColumnClassNames('colspan', (_a = gridDefinition[i]) === null || _a === void 0 ? void 0 : _a.colspan, defaultBreakpoint), getColumnClassNames('offset', (_b = gridDefinition[i]) === null || _b === void 0 ? void 0 : _b.offset, defaultBreakpoint), getColumnClassNames('pull', (_c = gridDefinition[i]) === null || _c === void 0 ? void 0 : _c.pull, defaultBreakpoint), getColumnClassNames('push', (_d = gridDefinition[i]) === null || _d === void 0 ? void 0 : _d.push, defaultBreakpoint))\n    }, React.createElement(\"div\", {\n      className: styles['restore-pointer-events']\n    }, child));\n  }));\n});\nfunction getColumnClassNames(prop, mapping, breakpoint) {\n  if (typeof mapping === 'number') {\n    return styles[`${prop}-${mapping}`];\n  }\n  if (breakpoint === null || mapping === undefined) {\n    return null;\n  }\n  return styles[`${prop}-${matchBreakpointMapping(mapping, breakpoint)}`];\n}\nexport default InternalGrid;","map":{"version":3,"mappings":"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","names":["React","clsx","flattenChildren","getBaseProps","matchBreakpointMapping","isDevelopment","warnOnce","styles","useContainerBreakpoints","useMergeRefs","InternalGrid","forwardRef","_a","ref","__breakpoint","gridDefinition","disableGutters","children","__responsiveClassName","__internalRootRef","restProps","defaultBreakpoint","defaultRef","undefined","baseProps","flattenedChildren","columnCount","length","childCount","mergedRef","className","grid","map","child","i","key","getColumnClassNames","colspan","offset","pull","push","prop","mapping","breakpoint"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/grid/lib/default/grid/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx, { ClassValue } from 'clsx';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { getBaseProps } from '../internal/base-component';\nimport { Breakpoint, matchBreakpointMapping } from '../internal/breakpoints';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport styles from './styles.css.js';\nimport { GridProps } from './interfaces';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\n\nexport interface InternalGridProps extends GridProps, InternalBaseComponentProps {\n  __breakpoint?: Breakpoint | null;\n\n  /**\n   * The handler that fires when the grid breakpoint changes.\n   */\n  __responsiveClassName?: (breakpoint: Breakpoint | null) => ClassValue;\n}\n\nconst InternalGrid = React.forwardRef(\n  (\n    {\n      __breakpoint,\n      gridDefinition = [],\n      disableGutters = false,\n      children,\n      __responsiveClassName,\n      __internalRootRef = null,\n      ...restProps\n    }: InternalGridProps,\n    ref: React.Ref<any>\n  ) => {\n    let [defaultBreakpoint, defaultRef]: [Breakpoint | null, React.Ref<any>] = useContainerBreakpoints(undefined);\n    if (__breakpoint !== undefined) {\n      defaultBreakpoint = __breakpoint;\n      defaultRef = ref;\n    }\n\n    const baseProps = getBaseProps(restProps);\n    /*\n   Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n   */\n    const flattenedChildren = flattenChildren(children);\n\n    if (isDevelopment) {\n      const columnCount = gridDefinition.length;\n      const childCount = flattenedChildren.length;\n      if (columnCount !== childCount) {\n        warnOnce(\n          'Grid',\n          `The number of children (${childCount}) does not match the number of columns defined (${columnCount}).`\n        );\n      }\n    }\n\n    const mergedRef = useMergeRefs(defaultRef, __internalRootRef);\n\n    return (\n      <div\n        {...baseProps}\n        className={clsx(\n          styles.grid,\n          baseProps.className,\n          { [styles['no-gutters']]: disableGutters },\n          __responsiveClassName ? __responsiveClassName(defaultBreakpoint) : null\n        )}\n        ref={mergedRef}\n      >\n        {flattenedChildren.map((child, i) => {\n          // If this react child is a primitive value, the key will be undefined\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const key = (child as any).key;\n\n          return (\n            <div\n              key={key}\n              className={clsx(\n                styles['grid-column'],\n                getColumnClassNames('colspan', gridDefinition[i]?.colspan, defaultBreakpoint),\n                getColumnClassNames('offset', gridDefinition[i]?.offset, defaultBreakpoint),\n                getColumnClassNames('pull', gridDefinition[i]?.pull, defaultBreakpoint),\n                getColumnClassNames('push', gridDefinition[i]?.push, defaultBreakpoint)\n              )}\n            >\n              <div className={styles['restore-pointer-events']}>{child}</div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n);\n\nfunction getColumnClassNames(\n  prop: string,\n  mapping: undefined | number | GridProps.BreakpointMapping,\n  breakpoint: Breakpoint | null\n): string | null {\n  if (typeof mapping === 'number') {\n    return styles[`${prop}-${mapping}`];\n  }\n  if (breakpoint === null || mapping === undefined) {\n    return null;\n  }\n  return styles[`${prop}-${matchBreakpointMapping(mapping, breakpoint)}`];\n}\n\nexport default InternalGrid;\n"]},"metadata":{},"sourceType":"module"}