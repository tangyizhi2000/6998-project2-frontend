{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useRef, useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport Dropdown from '../internal/components/dropdown';\nimport { useDropdownStatus } from '../internal/components/dropdown-status';\nimport Filter from './parts/filter';\nimport Trigger from './parts/trigger';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { getBaseProps } from '../internal/base-component';\nimport { prepareOptions } from '../internal/components/option/utils/prepare-options';\nimport { useSelect } from './utils/use-select';\nimport { checkOptionValueField } from './utils/check-option-value-field';\nimport { useNativeSearch } from './utils/use-native-search';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useLoadItems } from './utils/use-load-items';\nimport { useAnnouncement } from './utils/use-announcement';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport PlainList from './parts/plain-list';\nimport VirtualList from './parts/virtual-list';\nimport DropdownFooter from '../internal/components/dropdown-footer';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport ScreenreaderOnly from '../internal/components/screenreader-only/index.js';\nimport { joinStrings } from '../internal/utils/strings/join-strings.js';\nimport { useInternalI18n } from '../i18n/context.js';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nconst InternalSelect = React.forwardRef((_a, externalRef) => {\n  var _b;\n  var {\n      options,\n      filteringType = 'none',\n      filteringPlaceholder,\n      filteringAriaLabel,\n      filteringClearAriaLabel,\n      filteringResultsText,\n      ariaRequired,\n      placeholder,\n      disabled,\n      ariaLabel,\n      statusType = 'finished',\n      empty,\n      loadingText,\n      finishedText,\n      errorText,\n      noMatch,\n      triggerVariant = 'label',\n      renderHighlightedAriaLive,\n      selectedOption,\n      onBlur,\n      onFocus,\n      onLoadItems,\n      onChange,\n      virtualScroll,\n      expandToViewport,\n      autoFocus,\n      __inFilteringToken,\n      __internalRootRef = null\n    } = _a,\n    restProps = __rest(_a, [\"options\", \"filteringType\", \"filteringPlaceholder\", \"filteringAriaLabel\", \"filteringClearAriaLabel\", \"filteringResultsText\", \"ariaRequired\", \"placeholder\", \"disabled\", \"ariaLabel\", \"statusType\", \"empty\", \"loadingText\", \"finishedText\", \"errorText\", \"noMatch\", \"triggerVariant\", \"renderHighlightedAriaLive\", \"selectedOption\", \"onBlur\", \"onFocus\", \"onLoadItems\", \"onChange\", \"virtualScroll\", \"expandToViewport\", \"autoFocus\", \"__inFilteringToken\", \"__internalRootRef\"]);\n  const baseProps = getBaseProps(restProps);\n  const formFieldContext = useFormFieldContext(restProps);\n  const i18n = useInternalI18n('select');\n  const errorIconAriaLabel = i18n('errorIconAriaLabel', restProps.errorIconAriaLabel);\n  const selectedAriaLabel = i18n('selectedAriaLabel', restProps.selectedAriaLabel);\n  const recoveryText = i18n('recoveryText', restProps.recoveryText);\n  if (restProps.recoveryText && !onLoadItems) {\n    warnOnce('Select', '`onLoadItems` must be provided for `recoveryText` to be displayed.');\n  }\n  const {\n    handleLoadMore,\n    handleRecoveryClick,\n    fireLoadItems\n  } = useLoadItems({\n    onLoadItems,\n    options,\n    statusType\n  });\n  checkControlled('Select', 'selectedOption', selectedOption, 'onChange', onChange);\n  checkOptionValueField('Select', 'options', options);\n  const [filteringValue, setFilteringValue] = useState('');\n  const {\n    filteredOptions,\n    parentMap,\n    totalCount,\n    matchesCount\n  } = prepareOptions(options, filteringType, filteringValue);\n  const rootRef = useRef(null);\n  const triggerRef = useRef(null);\n  const selfControlId = useUniqueId('trigger');\n  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;\n  const scrollToIndex = useRef(null);\n  const {\n    isOpen,\n    highlightType,\n    highlightedOption,\n    highlightedIndex,\n    getTriggerProps,\n    getDropdownProps,\n    getFilterProps,\n    getMenuProps,\n    getOptionProps,\n    highlightOption,\n    selectOption,\n    announceSelected\n  } = useSelect({\n    selectedOptions: selectedOption ? [selectedOption] : [],\n    updateSelectedOption: option => fireNonCancelableEvent(onChange, {\n      selectedOption: option\n    }),\n    options: filteredOptions,\n    filteringType,\n    onBlur,\n    onFocus,\n    externalRef,\n    fireLoadItems,\n    setFilteringValue,\n    statusType\n  });\n  const handleNativeSearch = useNativeSearch({\n    isEnabled: filteringType === 'none',\n    options: filteredOptions,\n    highlightOption: !isOpen ? selectOption : highlightOption,\n    highlightedOption: !isOpen ? selectedOption : highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option\n  });\n  const selectAriaLabelId = useUniqueId('select-arialabel-');\n  const footerId = useUniqueId('footer');\n  useEffect(() => {\n    var _a;\n    (_a = scrollToIndex.current) === null || _a === void 0 ? void 0 : _a.call(scrollToIndex, highlightedIndex);\n  }, [highlightedIndex]);\n  const filter = React.createElement(Filter, Object.assign({\n    clearAriaLabel: filteringClearAriaLabel,\n    filteringType: filteringType,\n    placeholder: filteringPlaceholder,\n    ariaLabel: filteringAriaLabel,\n    ariaRequired: ariaRequired,\n    value: filteringValue\n  }, getFilterProps()));\n  const trigger = React.createElement(Trigger, Object.assign({\n    ref: triggerRef,\n    placeholder: placeholder,\n    disabled: disabled,\n    triggerVariant: triggerVariant,\n    triggerProps: getTriggerProps(disabled, autoFocus),\n    selectedOption: selectedOption,\n    isOpen: isOpen,\n    inFilteringToken: __inFilteringToken\n  }, formFieldContext, {\n    controlId: controlId,\n    ariaLabelledby: joinStrings(formFieldContext.ariaLabelledby, selectAriaLabelId)\n  }));\n  const isEmpty = !options || options.length === 0;\n  const isNoMatch = filteredOptions && filteredOptions.length === 0;\n  const isFiltered = filteringType !== 'none' && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;\n  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(matchesCount, totalCount) : undefined;\n  const dropdownStatus = useDropdownStatus({\n    statusType,\n    empty,\n    loadingText,\n    finishedText,\n    errorText,\n    recoveryText,\n    isEmpty,\n    isNoMatch,\n    noMatch,\n    isFiltered,\n    filteringResultsText: filteredText,\n    errorIconAriaLabel,\n    onRecoveryClick: handleRecoveryClick,\n    hasRecoveryCallback: !!onLoadItems\n  });\n  const menuProps = Object.assign(Object.assign({}, getMenuProps()), {\n    onLoadMore: handleLoadMore,\n    ariaLabelledby: joinStrings(selectAriaLabelId, controlId),\n    ariaDescribedby: dropdownStatus.content ? footerId : undefined\n  });\n  const announcement = useAnnouncement({\n    announceSelected,\n    highlightedOption,\n    getParent: option => {\n      var _a;\n      return (_a = parentMap.get(option)) === null || _a === void 0 ? void 0 : _a.option;\n    },\n    selectedAriaLabel,\n    renderHighlightedAriaLive\n  });\n  const ListComponent = virtualScroll ? VirtualList : PlainList;\n  const handleMouseDown = event => {\n    const target = event.target;\n    if (target !== document.activeElement) {\n      // prevent currently focused element from losing it\n      event.preventDefault();\n    }\n  };\n  const mergedRef = useMergeRefs(rootRef, __internalRootRef);\n  const dropdownProps = getDropdownProps();\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    ref: mergedRef,\n    className: clsx(styles.root, baseProps.className),\n    onKeyPress: handleNativeSearch\n  }), React.createElement(Dropdown, Object.assign({}, dropdownProps, {\n    ariaLabelledby: dropdownProps.dropdownContentRole ? joinStrings(selectAriaLabelId, controlId) : undefined,\n    ariaDescribedby: dropdownProps.dropdownContentRole ? dropdownStatus.content ? footerId : undefined : undefined,\n    open: isOpen,\n    stretchTriggerHeight: __inFilteringToken,\n    stretchBeyondTriggerWidth: true,\n    trigger: trigger,\n    header: filter,\n    onMouseDown: handleMouseDown,\n    footer: dropdownStatus.isSticky ? React.createElement(DropdownFooter, {\n      content: isOpen ? dropdownStatus.content : null,\n      id: footerId\n    }) : null,\n    expandToViewport: expandToViewport\n  }), React.createElement(ListComponent, {\n    listBottom: !dropdownStatus.isSticky ? React.createElement(DropdownFooter, {\n      content: isOpen ? dropdownStatus.content : null,\n      id: footerId\n    }) : null,\n    menuProps: menuProps,\n    getOptionProps: getOptionProps,\n    filteredOptions: filteredOptions,\n    filteringValue: filteringValue,\n    ref: scrollToIndex,\n    hasDropdownStatus: dropdownStatus.content !== null,\n    screenReaderContent: announcement,\n    highlightType: highlightType\n  })), React.createElement(ScreenreaderOnly, {\n    id: selectAriaLabelId\n  }, ariaLabel));\n});\nexport default InternalSelect;","map":{"version":3,"mappings":"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","names":["React","useState","useRef","useEffect","clsx","styles","Dropdown","useDropdownStatus","Filter","Trigger","useUniqueId","getBaseProps","prepareOptions","useSelect","checkOptionValueField","useNativeSearch","fireNonCancelableEvent","useLoadItems","useAnnouncement","useFormFieldContext","PlainList","VirtualList","DropdownFooter","checkControlled","useMergeRefs","ScreenreaderOnly","joinStrings","useInternalI18n","warnOnce","InternalSelect","forwardRef","_a","externalRef","options","filteringType","filteringPlaceholder","filteringAriaLabel","filteringClearAriaLabel","filteringResultsText","ariaRequired","placeholder","disabled","ariaLabel","statusType","empty","loadingText","finishedText","errorText","noMatch","triggerVariant","renderHighlightedAriaLive","selectedOption","onBlur","onFocus","onLoadItems","onChange","virtualScroll","expandToViewport","autoFocus","__inFilteringToken","__internalRootRef","restProps","baseProps","formFieldContext","i18n","errorIconAriaLabel","selectedAriaLabel","recoveryText","handleLoadMore","handleRecoveryClick","fireLoadItems","filteringValue","setFilteringValue","filteredOptions","parentMap","totalCount","matchesCount","rootRef","triggerRef","selfControlId","controlId","scrollToIndex","isOpen","highlightType","highlightedOption","highlightedIndex","getTriggerProps","getDropdownProps","getFilterProps","getMenuProps","getOptionProps","highlightOption","selectOption","announceSelected","selectedOptions","updateSelectedOption","option","handleNativeSearch","isEnabled","selectAriaLabelId","footerId","current","filter","clearAriaLabel","value","trigger","ref","triggerProps","inFilteringToken","ariaLabelledby","isEmpty","length","isNoMatch","isFiltered","filteredText","undefined","dropdownStatus","onRecoveryClick","hasRecoveryCallback","menuProps","onLoadMore","ariaDescribedby","content","announcement","getParent","get","ListComponent","handleMouseDown","event","target","document","activeElement","preventDefault","mergedRef","dropdownProps","className","root","onKeyPress","dropdownContentRole","open","stretchTriggerHeight","stretchBeyondTriggerWidth","header","onMouseDown","footer","isSticky","id","listBottom","hasDropdownStatus","screenReaderContent"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/select/lib/default/select/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useRef, useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\n\nimport Dropdown from '../internal/components/dropdown';\nimport { useDropdownStatus } from '../internal/components/dropdown-status';\nimport Filter from './parts/filter';\nimport Trigger from './parts/trigger';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { SelectProps } from './interfaces';\nimport { prepareOptions } from '../internal/components/option/utils/prepare-options';\nimport { useSelect } from './utils/use-select';\nimport { checkOptionValueField } from './utils/check-option-value-field';\nimport { useNativeSearch } from './utils/use-native-search';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useLoadItems } from './utils/use-load-items';\nimport { useAnnouncement } from './utils/use-announcement';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport PlainList, { SelectListProps } from './parts/plain-list';\nimport VirtualList from './parts/virtual-list';\nimport DropdownFooter from '../internal/components/dropdown-footer';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { OptionGroup } from '../internal/components/option/interfaces.js';\nimport { SomeRequired } from '../internal/types';\nimport ScreenreaderOnly from '../internal/components/screenreader-only/index.js';\nimport { joinStrings } from '../internal/utils/strings/join-strings.js';\nimport { useInternalI18n } from '../i18n/context.js';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nexport interface InternalSelectProps extends SomeRequired<SelectProps, 'options'>, InternalBaseComponentProps {\n  __inFilteringToken?: boolean;\n}\n\nconst InternalSelect = React.forwardRef(\n  (\n    {\n      options,\n      filteringType = 'none',\n      filteringPlaceholder,\n      filteringAriaLabel,\n      filteringClearAriaLabel,\n      filteringResultsText,\n      ariaRequired,\n      placeholder,\n      disabled,\n      ariaLabel,\n      statusType = 'finished',\n      empty,\n      loadingText,\n      finishedText,\n      errorText,\n      noMatch,\n      triggerVariant = 'label',\n      renderHighlightedAriaLive,\n      selectedOption,\n      onBlur,\n      onFocus,\n      onLoadItems,\n      onChange,\n      virtualScroll,\n      expandToViewport,\n      autoFocus,\n      __inFilteringToken,\n      __internalRootRef = null,\n      ...restProps\n    }: InternalSelectProps,\n    externalRef: React.Ref<SelectProps.Ref>\n  ) => {\n    const baseProps = getBaseProps(restProps);\n    const formFieldContext = useFormFieldContext(restProps);\n\n    const i18n = useInternalI18n('select');\n    const errorIconAriaLabel = i18n('errorIconAriaLabel', restProps.errorIconAriaLabel);\n    const selectedAriaLabel = i18n('selectedAriaLabel', restProps.selectedAriaLabel);\n    const recoveryText = i18n('recoveryText', restProps.recoveryText);\n\n    if (restProps.recoveryText && !onLoadItems) {\n      warnOnce('Select', '`onLoadItems` must be provided for `recoveryText` to be displayed.');\n    }\n\n    const { handleLoadMore, handleRecoveryClick, fireLoadItems } = useLoadItems({\n      onLoadItems,\n      options,\n      statusType,\n    });\n\n    checkControlled('Select', 'selectedOption', selectedOption, 'onChange', onChange);\n\n    checkOptionValueField('Select', 'options', options);\n\n    const [filteringValue, setFilteringValue] = useState('');\n\n    const { filteredOptions, parentMap, totalCount, matchesCount } = prepareOptions(\n      options,\n      filteringType,\n      filteringValue\n    );\n\n    const rootRef = useRef<HTMLDivElement>(null);\n    const triggerRef = useRef<HTMLButtonElement>(null);\n\n    const selfControlId = useUniqueId('trigger');\n    const controlId = formFieldContext.controlId ?? selfControlId;\n\n    const scrollToIndex = useRef<SelectListProps.SelectListRef>(null);\n    const {\n      isOpen,\n      highlightType,\n      highlightedOption,\n      highlightedIndex,\n      getTriggerProps,\n      getDropdownProps,\n      getFilterProps,\n      getMenuProps,\n      getOptionProps,\n      highlightOption,\n      selectOption,\n      announceSelected,\n    } = useSelect({\n      selectedOptions: selectedOption ? [selectedOption] : [],\n      updateSelectedOption: option => fireNonCancelableEvent(onChange, { selectedOption: option }),\n      options: filteredOptions,\n      filteringType,\n      onBlur,\n      onFocus,\n      externalRef,\n      fireLoadItems,\n      setFilteringValue,\n      statusType,\n    });\n\n    const handleNativeSearch = useNativeSearch({\n      isEnabled: filteringType === 'none',\n      options: filteredOptions,\n      highlightOption: !isOpen ? selectOption : highlightOption,\n      highlightedOption: !isOpen ? selectedOption : highlightedOption?.option,\n    });\n\n    const selectAriaLabelId = useUniqueId('select-arialabel-');\n    const footerId = useUniqueId('footer');\n\n    useEffect(() => {\n      scrollToIndex.current?.(highlightedIndex);\n    }, [highlightedIndex]);\n\n    const filter = (\n      <Filter\n        clearAriaLabel={filteringClearAriaLabel}\n        filteringType={filteringType}\n        placeholder={filteringPlaceholder}\n        ariaLabel={filteringAriaLabel}\n        ariaRequired={ariaRequired}\n        value={filteringValue}\n        {...getFilterProps()}\n      />\n    );\n\n    const trigger = (\n      <Trigger\n        ref={triggerRef}\n        placeholder={placeholder}\n        disabled={disabled}\n        triggerVariant={triggerVariant}\n        triggerProps={getTriggerProps(disabled, autoFocus)}\n        selectedOption={selectedOption}\n        isOpen={isOpen}\n        inFilteringToken={__inFilteringToken}\n        {...formFieldContext}\n        controlId={controlId}\n        ariaLabelledby={joinStrings(formFieldContext.ariaLabelledby, selectAriaLabelId)}\n      />\n    );\n\n    const isEmpty = !options || options.length === 0;\n    const isNoMatch = filteredOptions && filteredOptions.length === 0;\n    const isFiltered =\n      filteringType !== 'none' && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;\n    const filteredText = isFiltered ? filteringResultsText?.(matchesCount, totalCount) : undefined;\n\n    const dropdownStatus = useDropdownStatus({\n      statusType,\n      empty,\n      loadingText,\n      finishedText,\n      errorText,\n      recoveryText,\n      isEmpty,\n      isNoMatch,\n      noMatch,\n      isFiltered,\n      filteringResultsText: filteredText,\n      errorIconAriaLabel,\n      onRecoveryClick: handleRecoveryClick,\n      hasRecoveryCallback: !!onLoadItems,\n    });\n\n    const menuProps = {\n      ...getMenuProps(),\n      onLoadMore: handleLoadMore,\n      ariaLabelledby: joinStrings(selectAriaLabelId, controlId),\n      ariaDescribedby: dropdownStatus.content ? footerId : undefined,\n    };\n\n    const announcement = useAnnouncement({\n      announceSelected,\n      highlightedOption,\n      getParent: option => parentMap.get(option)?.option as undefined | OptionGroup,\n      selectedAriaLabel,\n      renderHighlightedAriaLive,\n    });\n\n    const ListComponent = virtualScroll ? VirtualList : PlainList;\n\n    const handleMouseDown = (event: React.MouseEvent) => {\n      const target = event.target as HTMLElement;\n\n      if (target !== document.activeElement) {\n        // prevent currently focused element from losing it\n        event.preventDefault();\n      }\n    };\n\n    const mergedRef = useMergeRefs(rootRef, __internalRootRef);\n\n    const dropdownProps = getDropdownProps();\n\n    return (\n      <div\n        {...baseProps}\n        ref={mergedRef}\n        className={clsx(styles.root, baseProps.className)}\n        onKeyPress={handleNativeSearch}\n      >\n        <Dropdown\n          {...dropdownProps}\n          ariaLabelledby={dropdownProps.dropdownContentRole ? joinStrings(selectAriaLabelId, controlId) : undefined}\n          ariaDescribedby={\n            dropdownProps.dropdownContentRole ? (dropdownStatus.content ? footerId : undefined) : undefined\n          }\n          open={isOpen}\n          stretchTriggerHeight={__inFilteringToken}\n          stretchBeyondTriggerWidth={true}\n          trigger={trigger}\n          header={filter}\n          onMouseDown={handleMouseDown}\n          footer={\n            dropdownStatus.isSticky ? (\n              <DropdownFooter content={isOpen ? dropdownStatus.content : null} id={footerId} />\n            ) : null\n          }\n          expandToViewport={expandToViewport}\n        >\n          <ListComponent\n            listBottom={\n              !dropdownStatus.isSticky ? (\n                <DropdownFooter content={isOpen ? dropdownStatus.content : null} id={footerId} />\n              ) : null\n            }\n            menuProps={menuProps}\n            getOptionProps={getOptionProps}\n            filteredOptions={filteredOptions}\n            filteringValue={filteringValue}\n            ref={scrollToIndex}\n            hasDropdownStatus={dropdownStatus.content !== null}\n            screenReaderContent={announcement}\n            highlightType={highlightType}\n          />\n        </Dropdown>\n        <ScreenreaderOnly id={selectAriaLabelId}>{ariaLabel}</ScreenreaderOnly>\n      </div>\n    );\n  }\n);\n\nexport default InternalSelect;\n"]},"metadata":{},"sourceType":"module"}