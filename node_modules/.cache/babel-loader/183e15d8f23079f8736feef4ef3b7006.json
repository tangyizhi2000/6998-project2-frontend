{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { getXTickCount, getYTickCount, createXTicks, createYTicks } from '../internal/components/cartesian-chart/ticks';\nimport ChartPlot from '../internal/components/chart-plot';\nimport AxisLabel from '../internal/components/cartesian-chart/axis-label';\nimport LabelsMeasure from '../internal/components/cartesian-chart/labels-measure';\nimport LeftLabels from '../internal/components/cartesian-chart/left-labels';\nimport BottomLabels, { useBottomLabels } from '../internal/components/cartesian-chart/bottom-labels';\nimport VerticalGridLines from '../internal/components/cartesian-chart/vertical-grid-lines';\nimport EmphasizedBaseline from '../internal/components/cartesian-chart/emphasized-baseline';\nimport HighlightedPoint from '../internal/components/cartesian-chart/highlighted-point';\nimport VerticalMarker from '../internal/components/cartesian-chart/vertical-marker';\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport ChartPopover from './chart-popover';\nimport { computeDomainX, computeDomainY } from './domain';\nimport { isXThreshold } from './utils';\nimport makeScaledSeries from './make-scaled-series';\nimport makeScaledBarGroups from './make-scaled-bar-groups';\nimport formatHighlighted from './format-highlighted';\nimport DataSeries from './data-series';\nimport BarGroups from './bar-groups';\nimport { useMouseHover } from './hooks/use-mouse-hover';\nimport { useNavigation } from './hooks/use-navigation';\nimport { usePopover } from './hooks/use-popover';\nimport useContainerWidth from '../internal/utils/use-container-width';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { nodeBelongs } from '../internal/utils/node-belongs';\nimport { CartesianChartContainer } from '../internal/components/cartesian-chart/chart-container';\nimport { useHeightMeasure } from '../internal/hooks/container-queries/use-height-measure';\nconst LEFT_LABELS_MARGIN = 16;\nconst BOTTOM_LABELS_OFFSET = 12;\nexport default function ChartContainer(_a) {\n  var _b, _c;\n  var {\n      fitHeight,\n      height: explicitPlotHeight,\n      series,\n      visibleSeries,\n      highlightedSeries,\n      onHighlightChange,\n      highlightedPoint,\n      setHighlightedPoint,\n      highlightedGroupIndex,\n      setHighlightedGroupIndex,\n      detailPopoverFooter,\n      detailPopoverSize = 'medium',\n      stackedBars = false,\n      horizontalBars = false,\n      xScaleType,\n      yScaleType,\n      xTickFormatter,\n      yTickFormatter,\n      emphasizeBaselineAxis,\n      xTitle,\n      yTitle,\n      ariaLabel,\n      ariaLabelledby,\n      ariaDescription,\n      i18nStrings = {},\n      plotContainerRef\n    } = _a,\n    props = __rest(_a, [\"fitHeight\", \"height\", \"series\", \"visibleSeries\", \"highlightedSeries\", \"onHighlightChange\", \"highlightedPoint\", \"setHighlightedPoint\", \"highlightedGroupIndex\", \"setHighlightedGroupIndex\", \"detailPopoverFooter\", \"detailPopoverSize\", \"stackedBars\", \"horizontalBars\", \"xScaleType\", \"yScaleType\", \"xTickFormatter\", \"yTickFormatter\", \"emphasizeBaselineAxis\", \"xTitle\", \"yTitle\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescription\", \"i18nStrings\", \"plotContainerRef\"]);\n  const plotRef = useRef(null);\n  const verticalMarkerRef = useRef(null);\n  const [leftLabelsWidth, setLeftLabelsWidth] = useState(0);\n  const [verticalMarkerX, setVerticalMarkerX] = useState(null);\n  const [containerWidth, containerMeasureRef] = useContainerWidth(500);\n  const plotWidth = containerWidth ? containerWidth - leftLabelsWidth - LEFT_LABELS_MARGIN : 500;\n  const containerRefObject = useRef(null);\n  const containerRef = useMergeRefs(containerMeasureRef, containerRefObject);\n  const popoverRef = useRef(null);\n  const xDomain = props.xDomain || computeDomainX(series, xScaleType);\n  const yDomain = props.yDomain || computeDomainY(series, yScaleType, stackedBars);\n  const linesOnly = series.every(_ref => {\n    let {\n      series\n    } = _ref;\n    return series.type === 'line' || series.type === 'threshold';\n  });\n  function getXAxisProps(size, range) {\n    const tickCount = getXTickCount(size);\n    const scale = new ChartScale(xScaleType, xDomain, range, linesOnly);\n    const ticks = createXTicks(scale, tickCount);\n    return {\n      axis: 'x',\n      tickCount,\n      scale,\n      ticks,\n      tickFormatter: xTickFormatter,\n      title: xTitle,\n      ariaRoleDescription: i18nStrings.xAxisAriaRoleDescription\n    };\n  }\n  function getYAxisProps(size, range) {\n    const tickCount = getYTickCount(size);\n    const scale = new NumericChartScale(yScaleType, yDomain, range, props.yDomain ? null : tickCount);\n    const ticks = createYTicks(scale, tickCount);\n    return {\n      axis: 'y',\n      tickCount,\n      scale,\n      ticks,\n      tickFormatter: yTickFormatter,\n      title: yTitle,\n      ariaRoleDescription: i18nStrings.yAxisAriaRoleDescription\n    };\n  }\n  const bottomAxisProps = !horizontalBars ? getXAxisProps(plotWidth, [0, plotWidth]) : getYAxisProps(plotWidth, [0, plotWidth]);\n  const bottomLabelsProps = useBottomLabels(Object.assign({}, bottomAxisProps));\n  const plotMeasureRef = useRef(null);\n  const measuredHeight = useHeightMeasure(() => plotMeasureRef.current, !fitHeight);\n  const plotHeight = fitHeight ? measuredHeight !== null && measuredHeight !== void 0 ? measuredHeight : 0 : explicitPlotHeight;\n  const leftAxisProps = !horizontalBars ? getYAxisProps(plotHeight, [plotHeight, 0]) : getXAxisProps(plotHeight, [0, plotHeight]);\n  const xAxisProps = bottomAxisProps.axis === 'x' ? bottomAxisProps : leftAxisProps.axis === 'x' ? leftAxisProps : null;\n  const yAxisProps = bottomAxisProps.axis === 'y' ? bottomAxisProps : leftAxisProps.axis === 'y' ? leftAxisProps : null;\n  if (!xAxisProps || !yAxisProps) {\n    throw new Error('Invariant violation: invalid axis props.');\n  }\n  /**\n   * Interactions\n   */\n  const highlightedPointRef = useRef(null);\n  const highlightedGroupRef = useRef(null);\n  const [isPlotFocused, setPlotFocused] = useState(false);\n  // Some chart components are rendered against \"x\" or \"y\" axes,\n  // When \"horizontalBars\" is enabled, the axes are inverted.\n  const x = !horizontalBars ? 'x' : 'y';\n  const y = !horizontalBars ? 'y' : 'x';\n  const scaledSeries = makeScaledSeries(visibleSeries, xAxisProps.scale, yAxisProps.scale);\n  const barGroups = makeScaledBarGroups(visibleSeries, xAxisProps.scale, plotWidth, plotHeight, y);\n  const {\n    isPopoverOpen,\n    isPopoverPinned,\n    showPopover,\n    pinPopover,\n    dismissPopover\n  } = usePopover();\n  // Allows to add a delay between popover is dismissed and handlers are enabled to prevent immediate popover reopening.\n  const [isHandlersDisabled, setHandlersDisabled] = useState(!isPopoverPinned);\n  useEffect(() => {\n    if (isPopoverPinned) {\n      setHandlersDisabled(true);\n    } else {\n      const timeoutId = setTimeout(() => setHandlersDisabled(false), 25);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [isPopoverPinned]);\n  const highlightSeries = useCallback(series => {\n    if (series !== highlightedSeries) {\n      onHighlightChange(series);\n    }\n  }, [highlightedSeries, onHighlightChange]);\n  const highlightPoint = useCallback(point => {\n    var _a, _b;\n    setHighlightedGroupIndex(null);\n    setHighlightedPoint(point);\n    if (point) {\n      highlightSeries(point.series);\n      setVerticalMarkerX({\n        scaledX: point.x,\n        label: (_b = (_a = point.datum) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : null\n      });\n    }\n  }, [setHighlightedGroupIndex, setHighlightedPoint, highlightSeries]);\n  const clearAllHighlights = useCallback(() => {\n    setHighlightedPoint(null);\n    highlightSeries(null);\n    setHighlightedGroupIndex(null);\n  }, [highlightSeries, setHighlightedGroupIndex, setHighlightedPoint]);\n  // Highlight all points at a given X in a line chart\n  const highlightX = useCallback(marker => {\n    if (marker) {\n      clearAllHighlights();\n    }\n    setVerticalMarkerX(marker);\n  }, [clearAllHighlights]);\n  // Highlight all points and bars at a given X index in a mixed line and bar chart\n  const highlightGroup = useCallback(groupIndex => {\n    highlightSeries(null);\n    setHighlightedPoint(null);\n    setHighlightedGroupIndex(groupIndex);\n  }, [highlightSeries, setHighlightedPoint, setHighlightedGroupIndex]);\n  const clearHighlightedSeries = useCallback(() => {\n    clearAllHighlights();\n    dismissPopover();\n  }, [dismissPopover, clearAllHighlights]);\n  const _d = useNavigation({\n      series,\n      visibleSeries,\n      scaledSeries,\n      barGroups,\n      xScale: xAxisProps.scale,\n      yScale: yAxisProps.scale,\n      highlightedPoint,\n      highlightedGroupIndex,\n      highlightedSeries,\n      isHandlersDisabled,\n      pinPopover,\n      highlightSeries,\n      highlightGroup,\n      highlightPoint,\n      highlightX,\n      clearHighlightedSeries,\n      verticalMarkerX\n    }),\n    {\n      isGroupNavigation\n    } = _d,\n    handlers = __rest(_d, [\"isGroupNavigation\"]);\n  const {\n    onSVGMouseMove,\n    onSVGMouseOut,\n    onPopoverLeave\n  } = useMouseHover({\n    scaledSeries,\n    barGroups,\n    plotRef,\n    popoverRef,\n    highlightPoint,\n    highlightGroup,\n    clearHighlightedSeries,\n    isGroupNavigation,\n    isHandlersDisabled,\n    highlightX\n  });\n  // There are multiple ways to indicate what X is selected.\n  // TODO: make a uniform verticalMarkerX state to fit all use-cases.\n  const highlightedX = useMemo(() => {\n    var _a, _b;\n    if (highlightedGroupIndex !== null) {\n      return barGroups[highlightedGroupIndex].x;\n    }\n    if (verticalMarkerX !== null) {\n      return verticalMarkerX.label;\n    }\n    return (_b = (_a = highlightedPoint === null || highlightedPoint === void 0 ? void 0 : highlightedPoint.datum) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : null;\n  }, [highlightedPoint, verticalMarkerX, highlightedGroupIndex, barGroups]);\n  useEffect(() => {\n    const onKeyDown = event => {\n      if (event.key === 'Escape') {\n        dismissPopover();\n      }\n    };\n    document.addEventListener('keydown', onKeyDown);\n    return () => document.removeEventListener('keydown', onKeyDown);\n  }, [dismissPopover]);\n  useLayoutEffect(() => {\n    if (highlightedX !== null || highlightedPoint !== null) {\n      showPopover();\n    }\n  }, [highlightedX, highlightedPoint, showPopover]);\n  const onPopoverDismiss = outsideClick => {\n    dismissPopover();\n    if (!outsideClick) {\n      // The delay is needed to bypass focus events caused by click or keypress needed to unpin the popover.\n      setTimeout(() => {\n        var _a, _b;\n        const isSomeInnerElementFocused = highlightedPoint || highlightedGroupIndex !== null || verticalMarkerX;\n        if (isSomeInnerElementFocused) {\n          (_a = plotRef.current) === null || _a === void 0 ? void 0 : _a.focusApplication();\n        } else {\n          (_b = plotRef.current) === null || _b === void 0 ? void 0 : _b.focusPlot();\n        }\n      }, 0);\n    } else {\n      clearAllHighlights();\n      setVerticalMarkerX(null);\n    }\n  };\n  const onSVGMouseDown = e => {\n    if (isPopoverOpen) {\n      if (isPopoverPinned) {\n        dismissPopover();\n      } else {\n        pinPopover();\n        e.preventDefault();\n      }\n    } else {\n      showPopover();\n    }\n  };\n  const onSVGFocus = (event, trigger) => {\n    setPlotFocused(true);\n    if (trigger === 'keyboard') {\n      handlers.onFocus();\n    } else {\n      // noop: clicks are handled separately\n    }\n  };\n  const onSVGBlur = event => {\n    var _a;\n    setPlotFocused(false);\n    const blurTarget = event.relatedTarget || event.target;\n    if (blurTarget === null || !(blurTarget instanceof Element) || !nodeBelongs(containerRefObject.current, blurTarget)) {\n      setHighlightedPoint(null);\n      setVerticalMarkerX(null);\n      if (!((_a = plotContainerRef === null || plotContainerRef === void 0 ? void 0 : plotContainerRef.current) === null || _a === void 0 ? void 0 : _a.contains(blurTarget))) {\n        clearHighlightedSeries();\n      }\n      if (isPopoverOpen && !isPopoverPinned) {\n        dismissPopover();\n      }\n    }\n  };\n  const onSVGKeyDown = handlers.onKeyDown;\n  const xOffset = xAxisProps.scale.isCategorical() ? Math.max(0, xAxisProps.scale.d3Scale.bandwidth() - 1) / 2 : 0;\n  let verticalLineX = null;\n  if (verticalMarkerX !== null) {\n    verticalLineX = verticalMarkerX.scaledX;\n  } else if (isGroupNavigation && highlightedGroupIndex !== null) {\n    const x = (_b = xAxisProps.scale.d3Scale(barGroups[highlightedGroupIndex].x)) !== null && _b !== void 0 ? _b : null;\n    if (x !== null) {\n      verticalLineX = xOffset + x;\n    }\n  }\n  const point = useMemo(() => highlightedPoint ? {\n    key: `${highlightedPoint.x}-${highlightedPoint.y}`,\n    x: highlightedPoint.x,\n    y: highlightedPoint.y,\n    color: highlightedPoint.color\n  } : null, [highlightedPoint]);\n  const verticalMarkers = useMemo(() => verticalLineX !== null ? scaledSeries.filter(_ref2 => {\n    let {\n      x,\n      y\n    } = _ref2;\n    return (x === verticalLineX || isNaN(x)) && !isNaN(y);\n  }).map((_ref3, index) => {\n    let {\n      x,\n      y,\n      color\n    } = _ref3;\n    return {\n      key: `${index}-${x}-${y}`,\n      x: !horizontalBars ? verticalLineX || 0 : y,\n      y: !horizontalBars ? y : verticalLineX || 0,\n      color: color\n    };\n  }) : [], [scaledSeries, verticalLineX, horizontalBars]);\n  const highlightedElementRef = isGroupNavigation ? highlightedGroupRef : highlightedPoint ? highlightedPointRef : verticalMarkerRef;\n  const highlightDetails = useMemo(() => {\n    if (highlightedX === null) {\n      return null;\n    }\n    // When series point is highlighted show the corresponding series and matching x-thresholds.\n    if (highlightedPoint) {\n      const seriesToShow = visibleSeries.filter(series => series.series === (highlightedPoint === null || highlightedPoint === void 0 ? void 0 : highlightedPoint.series) || isXThreshold(series.series));\n      return formatHighlighted(highlightedX, seriesToShow, xTickFormatter);\n    }\n    // Otherwise - show all visible series details.\n    return formatHighlighted(highlightedX, visibleSeries, xTickFormatter);\n  }, [highlightedX, highlightedPoint, visibleSeries, xTickFormatter]);\n  const detailPopoverFooterContent = useMemo(() => detailPopoverFooter && highlightedX ? detailPopoverFooter(highlightedX) : null, [detailPopoverFooter, highlightedX]);\n  const activeAriaLabel = useMemo(() => highlightDetails ? `${highlightDetails.position}, ${highlightDetails.details.map(d => d.key + ' ' + d.value).join(',')}` : '', [highlightDetails]);\n  // Live region is used when nothing is focused e.g. when hovering.\n  const activeLiveRegion = activeAriaLabel && !highlightedPoint && highlightedGroupIndex === null ? activeAriaLabel : '';\n  const isLineXKeyboardFocused = isPlotFocused && !highlightedPoint && verticalMarkerX;\n  const isRefresh = useVisualRefresh();\n  return React.createElement(CartesianChartContainer, {\n    ref: containerRef,\n    minHeight: explicitPlotHeight + bottomLabelsProps.height,\n    fitHeight: !!fitHeight,\n    leftAxisLabel: React.createElement(AxisLabel, {\n      axis: y,\n      position: \"left\",\n      title: leftAxisProps.title\n    }),\n    leftAxisLabelMeasure: React.createElement(LabelsMeasure, {\n      ticks: leftAxisProps.ticks,\n      scale: leftAxisProps.scale,\n      tickFormatter: leftAxisProps.tickFormatter,\n      autoWidth: setLeftLabelsWidth\n    }),\n    bottomAxisLabel: React.createElement(AxisLabel, {\n      axis: x,\n      position: \"bottom\",\n      title: bottomAxisProps.title\n    }),\n    chartPlot: React.createElement(ChartPlot, {\n      ref: plotRef,\n      width: \"100%\",\n      height: fitHeight ? `calc(100% - ${bottomLabelsProps.height}px)` : plotHeight,\n      offsetBottom: bottomLabelsProps.height,\n      isClickable: isPopoverOpen && !isPopoverPinned,\n      ariaLabel: ariaLabel,\n      ariaLabelledby: ariaLabelledby,\n      ariaDescription: ariaDescription,\n      ariaRoleDescription: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.chartAriaRoleDescription,\n      ariaLiveRegion: activeLiveRegion,\n      activeElementRef: highlightedElementRef,\n      activeElementKey: isPlotFocused && ((_c = highlightedGroupIndex === null || highlightedGroupIndex === void 0 ? void 0 : highlightedGroupIndex.toString()) !== null && _c !== void 0 ? _c : isLineXKeyboardFocused ? `point-index-${handlers.xIndex}` : point === null || point === void 0 ? void 0 : point.key),\n      activeElementFocusOffset: isGroupNavigation ? 0 : isLineXKeyboardFocused ? {\n        x: 8,\n        y: 0\n      } : 3,\n      onMouseMove: onSVGMouseMove,\n      onMouseOut: onSVGMouseOut,\n      onMouseDown: onSVGMouseDown,\n      onFocus: onSVGFocus,\n      onBlur: onSVGBlur,\n      onKeyDown: onSVGKeyDown\n    }, React.createElement(\"line\", {\n      ref: plotMeasureRef,\n      x1: \"0\",\n      x2: \"0\",\n      y1: \"0\",\n      y2: \"100%\",\n      stroke: \"transparent\",\n      strokeWidth: 1,\n      style: {\n        pointerEvents: 'none'\n      }\n    }), React.createElement(LeftLabels, {\n      axis: y,\n      ticks: leftAxisProps.ticks,\n      scale: leftAxisProps.scale,\n      tickFormatter: leftAxisProps.tickFormatter,\n      title: leftAxisProps.title,\n      ariaRoleDescription: leftAxisProps.ariaRoleDescription,\n      width: plotWidth,\n      height: plotHeight\n    }), horizontalBars && React.createElement(VerticalGridLines, {\n      scale: yAxisProps.scale,\n      ticks: yAxisProps.ticks,\n      height: plotHeight\n    }), emphasizeBaselineAxis && linesOnly && React.createElement(EmphasizedBaseline, {\n      axis: x,\n      scale: yAxisProps.scale,\n      width: plotWidth,\n      height: plotHeight\n    }), React.createElement(DataSeries, {\n      axis: x,\n      plotWidth: plotWidth,\n      plotHeight: plotHeight,\n      highlightedSeries: highlightedSeries !== null && highlightedSeries !== void 0 ? highlightedSeries : null,\n      highlightedGroupIndex: highlightedGroupIndex,\n      stackedBars: stackedBars,\n      isGroupNavigation: isGroupNavigation,\n      visibleSeries: visibleSeries,\n      xScale: xAxisProps.scale,\n      yScale: yAxisProps.scale\n    }), emphasizeBaselineAxis && !linesOnly && React.createElement(EmphasizedBaseline, {\n      axis: x,\n      scale: yAxisProps.scale,\n      width: plotWidth,\n      height: plotHeight\n    }), React.createElement(VerticalMarker, {\n      key: verticalLineX || '',\n      height: plotHeight,\n      showPoints: highlightedPoint === null,\n      showLine: !isGroupNavigation,\n      points: verticalMarkers,\n      ref: verticalMarkerRef\n    }), highlightedPoint && React.createElement(HighlightedPoint, {\n      ref: highlightedPointRef,\n      point: point,\n      role: \"button\",\n      ariaLabel: activeAriaLabel,\n      ariaHasPopup: true,\n      ariaExpanded: isPopoverPinned\n    }), isGroupNavigation && xAxisProps.scale.isCategorical() && React.createElement(BarGroups, {\n      ariaLabel: activeAriaLabel,\n      isRefresh: isRefresh,\n      isPopoverPinned: isPopoverPinned,\n      barGroups: barGroups,\n      highlightedGroupIndex: highlightedGroupIndex,\n      highlightedGroupRef: highlightedGroupRef\n    }), React.createElement(BottomLabels, Object.assign({}, bottomLabelsProps, {\n      axis: x,\n      scale: bottomAxisProps.scale,\n      title: bottomAxisProps.title,\n      ariaRoleDescription: bottomAxisProps.ariaRoleDescription,\n      height: plotHeight,\n      width: plotWidth,\n      offsetLeft: leftLabelsWidth + BOTTOM_LABELS_OFFSET,\n      offsetRight: BOTTOM_LABELS_OFFSET\n    }))),\n    popover: React.createElement(ChartPopover, {\n      ref: popoverRef,\n      containerRef: containerRefObject,\n      trackRef: highlightedElementRef,\n      isOpen: isPopoverOpen,\n      isPinned: isPopoverPinned,\n      highlightDetails: highlightDetails,\n      onDismiss: onPopoverDismiss,\n      size: detailPopoverSize,\n      footer: detailPopoverFooterContent,\n      dismissAriaLabel: i18nStrings.detailPopoverDismissAriaLabel,\n      onMouseLeave: onPopoverLeave\n    })\n  });\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useLayoutEffect","useMemo","useRef","useState","useVisualRefresh","getXTickCount","getYTickCount","createXTicks","createYTicks","ChartPlot","AxisLabel","LabelsMeasure","LeftLabels","BottomLabels","useBottomLabels","VerticalGridLines","EmphasizedBaseline","HighlightedPoint","VerticalMarker","ChartScale","NumericChartScale","ChartPopover","computeDomainX","computeDomainY","isXThreshold","makeScaledSeries","makeScaledBarGroups","formatHighlighted","DataSeries","BarGroups","useMouseHover","useNavigation","usePopover","useContainerWidth","useMergeRefs","nodeBelongs","CartesianChartContainer","useHeightMeasure","LEFT_LABELS_MARGIN","BOTTOM_LABELS_OFFSET","ChartContainer","_a","fitHeight","height","explicitPlotHeight","series","visibleSeries","highlightedSeries","onHighlightChange","highlightedPoint","setHighlightedPoint","highlightedGroupIndex","setHighlightedGroupIndex","detailPopoverFooter","detailPopoverSize","stackedBars","horizontalBars","xScaleType","yScaleType","xTickFormatter","yTickFormatter","emphasizeBaselineAxis","xTitle","yTitle","ariaLabel","ariaLabelledby","ariaDescription","i18nStrings","plotContainerRef","props","plotRef","verticalMarkerRef","leftLabelsWidth","setLeftLabelsWidth","verticalMarkerX","setVerticalMarkerX","containerWidth","containerMeasureRef","plotWidth","containerRefObject","containerRef","popoverRef","xDomain","yDomain","linesOnly","every","type","getXAxisProps","size","range","tickCount","scale","ticks","axis","tickFormatter","title","ariaRoleDescription","xAxisAriaRoleDescription","getYAxisProps","yAxisAriaRoleDescription","bottomAxisProps","bottomLabelsProps","plotMeasureRef","measuredHeight","current","plotHeight","leftAxisProps","xAxisProps","yAxisProps","Error","highlightedPointRef","highlightedGroupRef","isPlotFocused","setPlotFocused","x","y","scaledSeries","barGroups","isPopoverOpen","isPopoverPinned","showPopover","pinPopover","dismissPopover","isHandlersDisabled","setHandlersDisabled","timeoutId","setTimeout","clearTimeout","highlightSeries","highlightPoint","point","scaledX","label","datum","clearAllHighlights","highlightX","marker","highlightGroup","groupIndex","clearHighlightedSeries","_d","xScale","yScale","isGroupNavigation","handlers","onSVGMouseMove","onSVGMouseOut","onPopoverLeave","highlightedX","onKeyDown","event","key","document","addEventListener","removeEventListener","onPopoverDismiss","outsideClick","isSomeInnerElementFocused","focusApplication","focusPlot","onSVGMouseDown","e","preventDefault","onSVGFocus","trigger","onFocus","onSVGBlur","blurTarget","relatedTarget","target","Element","contains","onSVGKeyDown","xOffset","isCategorical","Math","max","d3Scale","bandwidth","verticalLineX","color","verticalMarkers","filter","isNaN","map","index","highlightedElementRef","highlightDetails","seriesToShow","detailPopoverFooterContent","activeAriaLabel","position","details","d","value","join","activeLiveRegion","isLineXKeyboardFocused","isRefresh","ref","minHeight","leftAxisLabel","leftAxisLabelMeasure","autoWidth","bottomAxisLabel","chartPlot","width","offsetBottom","isClickable","chartAriaRoleDescription","ariaLiveRegion","activeElementRef","activeElementKey","toString","xIndex","activeElementFocusOffset","onMouseMove","onMouseOut","onMouseDown","onBlur","x1","x2","y1","y2","stroke","strokeWidth","style","pointerEvents","showPoints","showLine","points","role","ariaHasPopup","ariaExpanded","offsetLeft","offsetRight","popover","trackRef","isOpen","isPinned","onDismiss","footer","dismissAriaLabel","detailPopoverDismissAriaLabel","onMouseLeave"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/mixed-line-bar-chart/lib/default/mixed-line-bar-chart/chart-container.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\n\nimport { getXTickCount, getYTickCount, createXTicks, createYTicks } from '../internal/components/cartesian-chart/ticks';\nimport ChartPlot, { ChartPlotRef } from '../internal/components/chart-plot';\nimport AxisLabel from '../internal/components/cartesian-chart/axis-label';\nimport LabelsMeasure from '../internal/components/cartesian-chart/labels-measure';\nimport LeftLabels from '../internal/components/cartesian-chart/left-labels';\nimport BottomLabels, { useBottomLabels } from '../internal/components/cartesian-chart/bottom-labels';\nimport VerticalGridLines from '../internal/components/cartesian-chart/vertical-grid-lines';\nimport EmphasizedBaseline from '../internal/components/cartesian-chart/emphasized-baseline';\nimport HighlightedPoint from '../internal/components/cartesian-chart/highlighted-point';\nimport VerticalMarker from '../internal/components/cartesian-chart/vertical-marker';\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport ChartPopover from './chart-popover';\nimport { ChartDataTypes, InternalChartSeries, MixedLineBarChartProps, ScaleType, VerticalMarkerX } from './interfaces';\nimport { computeDomainX, computeDomainY } from './domain';\nimport { isXThreshold } from './utils';\nimport makeScaledSeries, { ScaledPoint } from './make-scaled-series';\nimport makeScaledBarGroups, { ScaledBarGroup } from './make-scaled-bar-groups';\nimport formatHighlighted from './format-highlighted';\nimport DataSeries from './data-series';\nimport BarGroups from './bar-groups';\nimport { useMouseHover } from './hooks/use-mouse-hover';\nimport { useNavigation } from './hooks/use-navigation';\nimport { usePopover } from './hooks/use-popover';\n\nimport { CartesianChartProps } from '../internal/components/cartesian-chart/interfaces';\nimport useContainerWidth from '../internal/utils/use-container-width';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { nodeBelongs } from '../internal/utils/node-belongs';\nimport { CartesianChartContainer } from '../internal/components/cartesian-chart/chart-container';\nimport { useHeightMeasure } from '../internal/hooks/container-queries/use-height-measure';\n\nconst LEFT_LABELS_MARGIN = 16;\nconst BOTTOM_LABELS_OFFSET = 12;\n\ntype TickFormatter = undefined | ((value: ChartDataTypes) => string);\n\nexport interface ChartContainerProps<T extends ChartDataTypes> {\n  series: ReadonlyArray<InternalChartSeries<T>>;\n  visibleSeries: ReadonlyArray<InternalChartSeries<T>>;\n\n  fitHeight?: boolean;\n  height: number;\n  detailPopoverSize: MixedLineBarChartProps<T>['detailPopoverSize'];\n  detailPopoverFooter: MixedLineBarChartProps<T>['detailPopoverFooter'];\n\n  xScaleType: ScaleType;\n  yScaleType: 'linear' | 'log';\n\n  xDomain: MixedLineBarChartProps<T>['xDomain'];\n  yDomain: MixedLineBarChartProps<T>['yDomain'];\n\n  xTickFormatter?: CartesianChartProps.TickFormatter<T>;\n  yTickFormatter?: CartesianChartProps.TickFormatter<number>;\n\n  xTitle?: string;\n  yTitle?: string;\n\n  stackedBars?: boolean;\n  emphasizeBaselineAxis: boolean;\n  horizontalBars?: boolean;\n\n  highlightedSeries?: MixedLineBarChartProps<T>['highlightedSeries'];\n  onHighlightChange: (series: InternalChartSeries<T>['series'] | null) => void;\n  highlightedPoint: ScaledPoint<T> | null;\n  setHighlightedPoint: (point: ScaledPoint<T> | null) => void;\n  highlightedGroupIndex: number | null;\n  setHighlightedGroupIndex: (groupIndex: number | null) => void;\n\n  ariaLabel: MixedLineBarChartProps<T>['ariaLabel'];\n  ariaLabelledby: MixedLineBarChartProps<T>['ariaLabelledby'];\n  ariaDescription: MixedLineBarChartProps<T>['ariaDescription'];\n  i18nStrings: MixedLineBarChartProps<T>['i18nStrings'];\n\n  plotContainerRef: React.RefObject<HTMLDivElement>;\n}\n\ninterface BaseAxisProps {\n  tickCount: number;\n  tickFormatter: TickFormatter;\n  title?: string;\n  ariaRoleDescription?: string;\n}\n\ninterface XAxisProps extends BaseAxisProps {\n  axis: 'x';\n  scale: ChartScale;\n  ticks: ChartDataTypes[];\n}\n\ninterface YAxisProps extends BaseAxisProps {\n  axis: 'y';\n  scale: NumericChartScale;\n  ticks: number[];\n}\n\nexport default function ChartContainer<T extends ChartDataTypes>({\n  fitHeight,\n  height: explicitPlotHeight,\n  series,\n  visibleSeries,\n  highlightedSeries,\n  onHighlightChange,\n  highlightedPoint,\n  setHighlightedPoint,\n  highlightedGroupIndex,\n  setHighlightedGroupIndex,\n  detailPopoverFooter,\n  detailPopoverSize = 'medium',\n  stackedBars = false,\n  horizontalBars = false,\n  xScaleType,\n  yScaleType,\n  xTickFormatter,\n  yTickFormatter,\n  emphasizeBaselineAxis,\n  xTitle,\n  yTitle,\n  ariaLabel,\n  ariaLabelledby,\n  ariaDescription,\n  i18nStrings = {},\n  plotContainerRef,\n  ...props\n}: ChartContainerProps<T>) {\n  const plotRef = useRef<ChartPlotRef>(null);\n  const verticalMarkerRef = useRef<SVGLineElement>(null);\n\n  const [leftLabelsWidth, setLeftLabelsWidth] = useState(0);\n  const [verticalMarkerX, setVerticalMarkerX] = useState<VerticalMarkerX<T> | null>(null);\n  const [containerWidth, containerMeasureRef] = useContainerWidth(500);\n  const plotWidth = containerWidth ? containerWidth - leftLabelsWidth - LEFT_LABELS_MARGIN : 500;\n  const containerRefObject = useRef(null);\n  const containerRef = useMergeRefs(containerMeasureRef, containerRefObject);\n  const popoverRef = useRef<HTMLElement | null>(null);\n\n  const xDomain = (props.xDomain || computeDomainX(series, xScaleType)) as\n    | readonly number[]\n    | readonly string[]\n    | readonly Date[];\n  const yDomain = (props.yDomain || computeDomainY(series, yScaleType, stackedBars)) as readonly number[];\n\n  const linesOnly = series.every(({ series }) => series.type === 'line' || series.type === 'threshold');\n\n  function getXAxisProps(size: number, range: [from: number, until: number]): XAxisProps {\n    const tickCount = getXTickCount(size);\n    const scale = new ChartScale(xScaleType, xDomain, range, linesOnly);\n    const ticks = createXTicks(scale, tickCount);\n    return {\n      axis: 'x',\n      tickCount,\n      scale,\n      ticks,\n      tickFormatter: xTickFormatter as TickFormatter,\n      title: xTitle,\n      ariaRoleDescription: i18nStrings.xAxisAriaRoleDescription,\n    };\n  }\n\n  function getYAxisProps(size: number, range: [from: number, until: number]): YAxisProps {\n    const tickCount = getYTickCount(size);\n    const scale = new NumericChartScale(yScaleType, yDomain, range, props.yDomain ? null : tickCount);\n    const ticks = createYTicks(scale, tickCount);\n    return {\n      axis: 'y',\n      tickCount,\n      scale,\n      ticks,\n      tickFormatter: yTickFormatter as TickFormatter,\n      title: yTitle,\n      ariaRoleDescription: i18nStrings.yAxisAriaRoleDescription,\n    };\n  }\n\n  const bottomAxisProps = !horizontalBars\n    ? getXAxisProps(plotWidth, [0, plotWidth])\n    : getYAxisProps(plotWidth, [0, plotWidth]);\n\n  const bottomLabelsProps = useBottomLabels({ ...bottomAxisProps });\n\n  const plotMeasureRef = useRef<SVGLineElement>(null);\n  const measuredHeight = useHeightMeasure(() => plotMeasureRef.current, !fitHeight);\n  const plotHeight = fitHeight ? measuredHeight ?? 0 : explicitPlotHeight;\n\n  const leftAxisProps = !horizontalBars\n    ? getYAxisProps(plotHeight, [plotHeight, 0])\n    : getXAxisProps(plotHeight, [0, plotHeight]);\n\n  const xAxisProps = bottomAxisProps.axis === 'x' ? bottomAxisProps : leftAxisProps.axis === 'x' ? leftAxisProps : null;\n  const yAxisProps = bottomAxisProps.axis === 'y' ? bottomAxisProps : leftAxisProps.axis === 'y' ? leftAxisProps : null;\n  if (!xAxisProps || !yAxisProps) {\n    throw new Error('Invariant violation: invalid axis props.');\n  }\n\n  /**\n   * Interactions\n   */\n  const highlightedPointRef = useRef<SVGGElement>(null);\n  const highlightedGroupRef = useRef<SVGRectElement>(null);\n  const [isPlotFocused, setPlotFocused] = useState(false);\n\n  // Some chart components are rendered against \"x\" or \"y\" axes,\n  // When \"horizontalBars\" is enabled, the axes are inverted.\n  const x = !horizontalBars ? 'x' : 'y';\n  const y = !horizontalBars ? 'y' : 'x';\n\n  const scaledSeries = makeScaledSeries(visibleSeries, xAxisProps.scale, yAxisProps.scale);\n  const barGroups: ScaledBarGroup<T>[] = makeScaledBarGroups(visibleSeries, xAxisProps.scale, plotWidth, plotHeight, y);\n\n  const { isPopoverOpen, isPopoverPinned, showPopover, pinPopover, dismissPopover } = usePopover();\n\n  // Allows to add a delay between popover is dismissed and handlers are enabled to prevent immediate popover reopening.\n  const [isHandlersDisabled, setHandlersDisabled] = useState(!isPopoverPinned);\n  useEffect(() => {\n    if (isPopoverPinned) {\n      setHandlersDisabled(true);\n    } else {\n      const timeoutId = setTimeout(() => setHandlersDisabled(false), 25);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [isPopoverPinned]);\n\n  const highlightSeries = useCallback(\n    (series: MixedLineBarChartProps.ChartSeries<T> | null) => {\n      if (series !== highlightedSeries) {\n        onHighlightChange(series);\n      }\n    },\n    [highlightedSeries, onHighlightChange]\n  );\n\n  const highlightPoint = useCallback(\n    (point: ScaledPoint<T> | null) => {\n      setHighlightedGroupIndex(null);\n      setHighlightedPoint(point);\n      if (point) {\n        highlightSeries(point.series);\n        setVerticalMarkerX({\n          scaledX: point.x,\n          label: point.datum?.x ?? null,\n        });\n      }\n    },\n    [setHighlightedGroupIndex, setHighlightedPoint, highlightSeries]\n  );\n\n  const clearAllHighlights = useCallback(() => {\n    setHighlightedPoint(null);\n    highlightSeries(null);\n    setHighlightedGroupIndex(null);\n  }, [highlightSeries, setHighlightedGroupIndex, setHighlightedPoint]);\n\n  // Highlight all points at a given X in a line chart\n  const highlightX = useCallback(\n    (marker: VerticalMarkerX<T> | null) => {\n      if (marker) {\n        clearAllHighlights();\n      }\n      setVerticalMarkerX(marker);\n    },\n    [clearAllHighlights]\n  );\n\n  // Highlight all points and bars at a given X index in a mixed line and bar chart\n  const highlightGroup = useCallback(\n    (groupIndex: number) => {\n      highlightSeries(null);\n      setHighlightedPoint(null);\n      setHighlightedGroupIndex(groupIndex);\n    },\n    [highlightSeries, setHighlightedPoint, setHighlightedGroupIndex]\n  );\n\n  const clearHighlightedSeries = useCallback(() => {\n    clearAllHighlights();\n    dismissPopover();\n  }, [dismissPopover, clearAllHighlights]);\n\n  const { isGroupNavigation, ...handlers } = useNavigation({\n    series,\n    visibleSeries,\n    scaledSeries,\n    barGroups,\n    xScale: xAxisProps.scale,\n    yScale: yAxisProps.scale,\n    highlightedPoint,\n    highlightedGroupIndex,\n    highlightedSeries,\n    isHandlersDisabled,\n    pinPopover,\n    highlightSeries,\n    highlightGroup,\n    highlightPoint,\n    highlightX,\n    clearHighlightedSeries,\n    verticalMarkerX,\n  });\n\n  const { onSVGMouseMove, onSVGMouseOut, onPopoverLeave } = useMouseHover<T>({\n    scaledSeries,\n    barGroups,\n    plotRef,\n    popoverRef,\n    highlightPoint,\n    highlightGroup,\n    clearHighlightedSeries,\n    isGroupNavigation,\n    isHandlersDisabled,\n    highlightX,\n  });\n\n  // There are multiple ways to indicate what X is selected.\n  // TODO: make a uniform verticalMarkerX state to fit all use-cases.\n  const highlightedX = useMemo(() => {\n    if (highlightedGroupIndex !== null) {\n      return barGroups[highlightedGroupIndex].x;\n    }\n    if (verticalMarkerX !== null) {\n      return verticalMarkerX.label;\n    }\n    return highlightedPoint?.datum?.x ?? null;\n  }, [highlightedPoint, verticalMarkerX, highlightedGroupIndex, barGroups]);\n\n  useEffect(() => {\n    const onKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        dismissPopover();\n      }\n    };\n    document.addEventListener('keydown', onKeyDown);\n    return () => document.removeEventListener('keydown', onKeyDown);\n  }, [dismissPopover]);\n\n  useLayoutEffect(() => {\n    if (highlightedX !== null || highlightedPoint !== null) {\n      showPopover();\n    }\n  }, [highlightedX, highlightedPoint, showPopover]);\n\n  const onPopoverDismiss = (outsideClick?: boolean) => {\n    dismissPopover();\n\n    if (!outsideClick) {\n      // The delay is needed to bypass focus events caused by click or keypress needed to unpin the popover.\n      setTimeout(() => {\n        const isSomeInnerElementFocused = highlightedPoint || highlightedGroupIndex !== null || verticalMarkerX;\n        if (isSomeInnerElementFocused) {\n          plotRef.current?.focusApplication();\n        } else {\n          plotRef.current?.focusPlot();\n        }\n      }, 0);\n    } else {\n      clearAllHighlights();\n      setVerticalMarkerX(null);\n    }\n  };\n\n  const onSVGMouseDown = (e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n    if (isPopoverOpen) {\n      if (isPopoverPinned) {\n        dismissPopover();\n      } else {\n        pinPopover();\n        e.preventDefault();\n      }\n    } else {\n      showPopover();\n    }\n  };\n\n  const onSVGFocus = (event: React.FocusEvent, trigger: 'mouse' | 'keyboard') => {\n    setPlotFocused(true);\n    if (trigger === 'keyboard') {\n      handlers.onFocus();\n    } else {\n      // noop: clicks are handled separately\n    }\n  };\n\n  const onSVGBlur = (event: React.FocusEvent<Element>) => {\n    setPlotFocused(false);\n    const blurTarget = event.relatedTarget || event.target;\n    if (\n      blurTarget === null ||\n      !(blurTarget instanceof Element) ||\n      !nodeBelongs(containerRefObject.current, blurTarget)\n    ) {\n      setHighlightedPoint(null);\n      setVerticalMarkerX(null);\n      if (!plotContainerRef?.current?.contains(blurTarget)) {\n        clearHighlightedSeries();\n      }\n\n      if (isPopoverOpen && !isPopoverPinned) {\n        dismissPopover();\n      }\n    }\n  };\n\n  const onSVGKeyDown = handlers.onKeyDown;\n\n  const xOffset = xAxisProps.scale.isCategorical() ? Math.max(0, xAxisProps.scale.d3Scale.bandwidth() - 1) / 2 : 0;\n\n  let verticalLineX: number | null = null;\n  if (verticalMarkerX !== null) {\n    verticalLineX = verticalMarkerX.scaledX;\n  } else if (isGroupNavigation && highlightedGroupIndex !== null) {\n    const x = xAxisProps.scale.d3Scale(barGroups[highlightedGroupIndex].x as any) ?? null;\n    if (x !== null) {\n      verticalLineX = xOffset + x;\n    }\n  }\n\n  const point = useMemo(\n    () =>\n      highlightedPoint\n        ? {\n            key: `${highlightedPoint.x}-${highlightedPoint.y}`,\n            x: highlightedPoint.x,\n            y: highlightedPoint.y,\n            color: highlightedPoint.color,\n          }\n        : null,\n    [highlightedPoint]\n  );\n\n  const verticalMarkers = useMemo(\n    () =>\n      verticalLineX !== null\n        ? scaledSeries\n            .filter(({ x, y }) => (x === verticalLineX || isNaN(x)) && !isNaN(y))\n            .map(({ x, y, color }, index) => ({\n              key: `${index}-${x}-${y}`,\n              x: !horizontalBars ? verticalLineX || 0 : y,\n              y: !horizontalBars ? y : verticalLineX || 0,\n              color: color,\n            }))\n        : [],\n    [scaledSeries, verticalLineX, horizontalBars]\n  );\n\n  const highlightedElementRef = isGroupNavigation\n    ? highlightedGroupRef\n    : highlightedPoint\n    ? highlightedPointRef\n    : verticalMarkerRef;\n\n  const highlightDetails = useMemo(() => {\n    if (highlightedX === null) {\n      return null;\n    }\n\n    // When series point is highlighted show the corresponding series and matching x-thresholds.\n    if (highlightedPoint) {\n      const seriesToShow = visibleSeries.filter(\n        series => series.series === highlightedPoint?.series || isXThreshold(series.series)\n      );\n      return formatHighlighted(highlightedX, seriesToShow, xTickFormatter);\n    }\n\n    // Otherwise - show all visible series details.\n    return formatHighlighted(highlightedX, visibleSeries, xTickFormatter);\n  }, [highlightedX, highlightedPoint, visibleSeries, xTickFormatter]);\n\n  const detailPopoverFooterContent = useMemo(\n    () => (detailPopoverFooter && highlightedX ? detailPopoverFooter(highlightedX) : null),\n    [detailPopoverFooter, highlightedX]\n  );\n\n  const activeAriaLabel = useMemo(\n    () =>\n      highlightDetails\n        ? `${highlightDetails.position}, ${highlightDetails.details.map(d => d.key + ' ' + d.value).join(',')}`\n        : '',\n    [highlightDetails]\n  );\n\n  // Live region is used when nothing is focused e.g. when hovering.\n  const activeLiveRegion =\n    activeAriaLabel && !highlightedPoint && highlightedGroupIndex === null ? activeAriaLabel : '';\n\n  const isLineXKeyboardFocused = isPlotFocused && !highlightedPoint && verticalMarkerX;\n\n  const isRefresh = useVisualRefresh();\n\n  return (\n    <CartesianChartContainer\n      ref={containerRef}\n      minHeight={explicitPlotHeight + bottomLabelsProps.height}\n      fitHeight={!!fitHeight}\n      leftAxisLabel={<AxisLabel axis={y} position=\"left\" title={leftAxisProps.title} />}\n      leftAxisLabelMeasure={\n        <LabelsMeasure\n          ticks={leftAxisProps.ticks}\n          scale={leftAxisProps.scale}\n          tickFormatter={leftAxisProps.tickFormatter as TickFormatter}\n          autoWidth={setLeftLabelsWidth}\n        />\n      }\n      bottomAxisLabel={<AxisLabel axis={x} position=\"bottom\" title={bottomAxisProps.title} />}\n      chartPlot={\n        <ChartPlot\n          ref={plotRef}\n          width=\"100%\"\n          height={fitHeight ? `calc(100% - ${bottomLabelsProps.height}px)` : plotHeight}\n          offsetBottom={bottomLabelsProps.height}\n          isClickable={isPopoverOpen && !isPopoverPinned}\n          ariaLabel={ariaLabel}\n          ariaLabelledby={ariaLabelledby}\n          ariaDescription={ariaDescription}\n          ariaRoleDescription={i18nStrings?.chartAriaRoleDescription}\n          ariaLiveRegion={activeLiveRegion}\n          activeElementRef={highlightedElementRef}\n          activeElementKey={\n            isPlotFocused &&\n            (highlightedGroupIndex?.toString() ??\n              (isLineXKeyboardFocused ? `point-index-${handlers.xIndex}` : point?.key))\n          }\n          activeElementFocusOffset={isGroupNavigation ? 0 : isLineXKeyboardFocused ? { x: 8, y: 0 } : 3}\n          onMouseMove={onSVGMouseMove}\n          onMouseOut={onSVGMouseOut}\n          onMouseDown={onSVGMouseDown}\n          onFocus={onSVGFocus}\n          onBlur={onSVGBlur}\n          onKeyDown={onSVGKeyDown}\n        >\n          <line\n            ref={plotMeasureRef}\n            x1=\"0\"\n            x2=\"0\"\n            y1=\"0\"\n            y2=\"100%\"\n            stroke=\"transparent\"\n            strokeWidth={1}\n            style={{ pointerEvents: 'none' }}\n          />\n\n          <LeftLabels\n            axis={y}\n            ticks={leftAxisProps.ticks}\n            scale={leftAxisProps.scale}\n            tickFormatter={leftAxisProps.tickFormatter as TickFormatter}\n            title={leftAxisProps.title}\n            ariaRoleDescription={leftAxisProps.ariaRoleDescription}\n            width={plotWidth}\n            height={plotHeight}\n          />\n\n          {horizontalBars && (\n            <VerticalGridLines scale={yAxisProps.scale} ticks={yAxisProps.ticks} height={plotHeight} />\n          )}\n\n          {emphasizeBaselineAxis && linesOnly && (\n            <EmphasizedBaseline axis={x} scale={yAxisProps.scale} width={plotWidth} height={plotHeight} />\n          )}\n\n          <DataSeries\n            axis={x}\n            plotWidth={plotWidth}\n            plotHeight={plotHeight}\n            highlightedSeries={highlightedSeries ?? null}\n            highlightedGroupIndex={highlightedGroupIndex}\n            stackedBars={stackedBars}\n            isGroupNavigation={isGroupNavigation}\n            visibleSeries={visibleSeries}\n            xScale={xAxisProps.scale}\n            yScale={yAxisProps.scale}\n          />\n\n          {emphasizeBaselineAxis && !linesOnly && (\n            <EmphasizedBaseline axis={x} scale={yAxisProps.scale} width={plotWidth} height={plotHeight} />\n          )}\n\n          <VerticalMarker\n            key={verticalLineX || ''}\n            height={plotHeight}\n            showPoints={highlightedPoint === null}\n            showLine={!isGroupNavigation}\n            points={verticalMarkers}\n            ref={verticalMarkerRef}\n          />\n\n          {highlightedPoint && (\n            <HighlightedPoint\n              ref={highlightedPointRef}\n              point={point}\n              role=\"button\"\n              ariaLabel={activeAriaLabel}\n              ariaHasPopup={true}\n              ariaExpanded={isPopoverPinned}\n            />\n          )}\n\n          {isGroupNavigation && xAxisProps.scale.isCategorical() && (\n            <BarGroups\n              ariaLabel={activeAriaLabel}\n              isRefresh={isRefresh}\n              isPopoverPinned={isPopoverPinned}\n              barGroups={barGroups}\n              highlightedGroupIndex={highlightedGroupIndex}\n              highlightedGroupRef={highlightedGroupRef}\n            />\n          )}\n\n          <BottomLabels\n            {...bottomLabelsProps}\n            axis={x}\n            scale={bottomAxisProps.scale}\n            title={bottomAxisProps.title}\n            ariaRoleDescription={bottomAxisProps.ariaRoleDescription}\n            height={plotHeight}\n            width={plotWidth}\n            offsetLeft={leftLabelsWidth + BOTTOM_LABELS_OFFSET}\n            offsetRight={BOTTOM_LABELS_OFFSET}\n          />\n        </ChartPlot>\n      }\n      popover={\n        <ChartPopover\n          ref={popoverRef}\n          containerRef={containerRefObject}\n          trackRef={highlightedElementRef}\n          isOpen={isPopoverOpen}\n          isPinned={isPopoverPinned}\n          highlightDetails={highlightDetails}\n          onDismiss={onPopoverDismiss}\n          size={detailPopoverSize}\n          footer={detailPopoverFooterContent}\n          dismissAriaLabel={i18nStrings.detailPopoverDismissAriaLabel}\n          onMouseLeave={onPopoverLeave}\n        />\n      }\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}