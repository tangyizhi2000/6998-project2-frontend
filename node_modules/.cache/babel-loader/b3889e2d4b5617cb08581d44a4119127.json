{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useRef } from 'react';\nimport styles from '../styles.css.js';\nimport { KeyCode } from '../../internal/keycode';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport { getDateLabel, renderDayName } from '../utils/intl';\nimport clsx from 'clsx';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update.js';\nimport ScreenreaderOnly from '../../internal/components/screenreader-only/index.js';\nimport { moveNextDay, movePrevDay, moveNextWeek, movePrevWeek } from '../utils/navigation';\nexport default function Grid(_ref) {\n  var locale = _ref.locale,\n    baseDate = _ref.baseDate,\n    isDateEnabled = _ref.isDateEnabled,\n    focusedDate = _ref.focusedDate,\n    focusableDate = _ref.focusableDate,\n    onSelectDate = _ref.onSelectDate,\n    onFocusDate = _ref.onFocusDate,\n    onChangeMonth = _ref.onChangeMonth,\n    startOfWeek = _ref.startOfWeek,\n    todayAriaLabel = _ref.todayAriaLabel,\n    selectedDate = _ref.selectedDate,\n    ariaLabelledby = _ref.ariaLabelledby;\n  var focusedDateRef = useRef(null);\n  var onGridKeyDownHandler = function onGridKeyDownHandler(event) {\n    var updatedFocusDate;\n    if (focusableDate === null) {\n      return;\n    }\n    switch (event.keyCode) {\n      case KeyCode.space:\n      case KeyCode.enter:\n        event.preventDefault();\n        if (focusableDate) {\n          onFocusDate(null);\n          onSelectDate(focusableDate);\n        }\n        return;\n      case KeyCode.right:\n        event.preventDefault();\n        updatedFocusDate = moveNextDay(focusableDate, isDateEnabled);\n        break;\n      case KeyCode.left:\n        event.preventDefault();\n        updatedFocusDate = movePrevDay(focusableDate, isDateEnabled);\n        break;\n      case KeyCode.up:\n        event.preventDefault();\n        updatedFocusDate = movePrevWeek(focusableDate, isDateEnabled);\n        break;\n      case KeyCode.down:\n        event.preventDefault();\n        updatedFocusDate = moveNextWeek(focusableDate, isDateEnabled);\n        break;\n      default:\n        return;\n    }\n    if (!isSameMonth(updatedFocusDate, baseDate)) {\n      onChangeMonth(updatedFocusDate);\n    }\n    onFocusDate(updatedFocusDate);\n  };\n  // The focused date changes as a feedback to keyboard navigation in the grid.\n  // Once changed, the corresponding day button needs to receive the actual focus.\n  useEffectOnUpdate(function () {\n    if (focusedDate && focusedDateRef.current) {\n      focusedDateRef.current.focus();\n    }\n  }, [focusedDate]);\n  var weeks = useMemo(function () {\n    return getCalendarMonth(baseDate, {\n      firstDayOfWeek: startOfWeek\n    });\n  }, [baseDate, startOfWeek]);\n  var weekdays = weeks[0].map(function (date) {\n    return date.getDay();\n  });\n  return React.createElement(\"table\", {\n    role: \"grid\",\n    className: styles['calendar-grid'],\n    \"aria-labelledby\": ariaLabelledby\n  }, React.createElement(\"thead\", null, React.createElement(\"tr\", null, weekdays.map(function (dayIndex) {\n    return React.createElement(\"th\", {\n      key: dayIndex,\n      scope: \"col\",\n      className: clsx(styles['calendar-grid-cell'], styles['calendar-day-header'])\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, renderDayName(locale, dayIndex, 'short')), React.createElement(ScreenreaderOnly, null, renderDayName(locale, dayIndex, 'long')));\n  }))), React.createElement(\"tbody\", {\n    onKeyDown: onGridKeyDownHandler\n  }, weeks.map(function (week, weekIndex) {\n    return React.createElement(\"tr\", {\n      key: weekIndex,\n      className: styles['calendar-week']\n    }, week.map(function (date, dateIndex) {\n      var _clsx;\n      var isFocusable = !!focusableDate && isSameDay(date, focusableDate);\n      var isSelected = !!selectedDate && isSameDay(date, selectedDate);\n      var isEnabled = !isDateEnabled || isDateEnabled(date);\n      var isDateOnSameDay = isSameDay(date, new Date());\n      // Can't be focused.\n      var tabIndex = undefined;\n      if (isFocusable && isEnabled) {\n        // Next focus target.\n        tabIndex = 0;\n      } else if (isEnabled) {\n        // Can be focused programmatically.\n        tabIndex = -1;\n      }\n      // Screen-reader announcement for the focused day.\n      var dayAnnouncement = getDateLabel(locale, date, 'short');\n      if (isDateOnSameDay) {\n        dayAnnouncement += '. ' + todayAriaLabel;\n      }\n      return React.createElement(\"td\", {\n        key: \"\".concat(weekIndex, \":\").concat(dateIndex),\n        ref: tabIndex === 0 ? focusedDateRef : undefined,\n        tabIndex: tabIndex,\n        \"aria-current\": isDateOnSameDay ? 'date' : undefined,\n        \"aria-selected\": isEnabled ? isSelected : undefined,\n        \"aria-disabled\": !isEnabled,\n        // Do not attach click event when the date is disabled, otherwise VO+safari announces clickable\n        onClick: isEnabled ? function () {\n          return onSelectDate(date);\n        } : undefined,\n        className: clsx(styles['calendar-grid-cell'], styles['calendar-day'], (_clsx = {}, _defineProperty(_clsx, styles['calendar-day-current-month'], isSameMonth(date, baseDate)), _defineProperty(_clsx, styles['calendar-day-enabled'], isEnabled), _defineProperty(_clsx, styles['calendar-day-selected'], isSelected), _defineProperty(_clsx, styles['calendar-day-today'], isDateOnSameDay), _clsx))\n      }, React.createElement(\"span\", {\n        className: styles['day-inner'],\n        \"aria-hidden\": \"true\"\n      }, date.getDate()), React.createElement(ScreenreaderOnly, null, dayAnnouncement));\n    }));\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","useMemo","useRef","styles","KeyCode","isSameDay","isSameMonth","getCalendarMonth","getDateLabel","renderDayName","clsx","useEffectOnUpdate","ScreenreaderOnly","moveNextDay","movePrevDay","moveNextWeek","movePrevWeek","Grid","locale","baseDate","isDateEnabled","focusedDate","focusableDate","onSelectDate","onFocusDate","onChangeMonth","startOfWeek","todayAriaLabel","selectedDate","ariaLabelledby","focusedDateRef","onGridKeyDownHandler","event","updatedFocusDate","keyCode","space","enter","preventDefault","right","left","up","down","current","focus","weeks","firstDayOfWeek","weekdays","map","date","getDay","role","className","key","dayIndex","scope","onKeyDown","week","weekIndex","dateIndex","isFocusable","isSelected","isEnabled","isDateOnSameDay","Date","tabIndex","undefined","dayAnnouncement","ref","onClick","getDate"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/calendar/grid/lib/default/calendar/grid/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useRef } from 'react';\nimport styles from '../styles.css.js';\nimport { KeyCode } from '../../internal/keycode';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport { DayIndex } from '../internal';\nimport { DatePickerProps } from '../../date-picker/interfaces';\nimport { getDateLabel, renderDayName } from '../utils/intl';\nimport clsx from 'clsx';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update.js';\nimport ScreenreaderOnly from '../../internal/components/screenreader-only/index.js';\nimport { moveNextDay, movePrevDay, moveNextWeek, movePrevWeek } from '../utils/navigation';\n\n/**\n * Calendar grid supports two mechanisms of keyboard navigation:\n * - Native screen-reader table navigation (semantic table markup);\n * - Keyboard arrow-keys navigation (a custom key-down handler).\n *\n * The implementation largely follows the w3 example (https://www.w3.org/WAI/ARIA/apg/example-index/dialog-modal/datepicker-dialog) and shares the following issues:\n * - (table navigation) Chrome+VO - weekday is announced twice when navigating to the calendar's header;\n * - (table navigation) Safari+VO - \"dimmed\" state is announced twice;\n * - (table navigation) Firefox/Chrome+NVDA - cannot use table navigation if any cell has a focus;\n * - (keyboard navigation) Firefox+NVDA - every day is announced as \"not selected\";\n * - (keyboard navigation) Safari/Chrome+VO - weekdays are not announced;\n * - (keyboard navigation) Safari/Chrome+VO - days are not announced as interactive (clickable or selectable);\n * - (keyboard navigation) Safari/Chrome+VO - day announcements are not interruptive and can be missed if navigating fast.\n */\n\nexport interface GridProps {\n  locale: string;\n  baseDate: Date;\n  isDateEnabled: DatePickerProps.IsDateEnabledFunction;\n  focusedDate: Date | null;\n  focusableDate: Date | null;\n  onSelectDate: (date: Date) => void;\n  onFocusDate: (date: null | Date) => void;\n  onChangeMonth: (date: Date) => void;\n  startOfWeek: DayIndex;\n  todayAriaLabel?: string;\n  selectedDate: Date | null;\n  ariaLabelledby: string;\n}\n\nexport default function Grid({\n  locale,\n  baseDate,\n  isDateEnabled,\n  focusedDate,\n  focusableDate,\n  onSelectDate,\n  onFocusDate,\n  onChangeMonth,\n  startOfWeek,\n  todayAriaLabel,\n  selectedDate,\n  ariaLabelledby,\n}: GridProps) {\n  const focusedDateRef = useRef<HTMLTableCellElement>(null);\n\n  const onGridKeyDownHandler = (event: React.KeyboardEvent) => {\n    let updatedFocusDate;\n\n    if (focusableDate === null) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case KeyCode.space:\n      case KeyCode.enter:\n        event.preventDefault();\n        if (focusableDate) {\n          onFocusDate(null);\n          onSelectDate(focusableDate);\n        }\n        return;\n      case KeyCode.right:\n        event.preventDefault();\n        updatedFocusDate = moveNextDay(focusableDate, isDateEnabled);\n        break;\n      case KeyCode.left:\n        event.preventDefault();\n        updatedFocusDate = movePrevDay(focusableDate, isDateEnabled);\n        break;\n      case KeyCode.up:\n        event.preventDefault();\n        updatedFocusDate = movePrevWeek(focusableDate, isDateEnabled);\n        break;\n      case KeyCode.down:\n        event.preventDefault();\n        updatedFocusDate = moveNextWeek(focusableDate, isDateEnabled);\n        break;\n      default:\n        return;\n    }\n\n    if (!isSameMonth(updatedFocusDate, baseDate)) {\n      onChangeMonth(updatedFocusDate);\n    }\n    onFocusDate(updatedFocusDate);\n  };\n\n  // The focused date changes as a feedback to keyboard navigation in the grid.\n  // Once changed, the corresponding day button needs to receive the actual focus.\n  useEffectOnUpdate(() => {\n    if (focusedDate && focusedDateRef.current) {\n      (focusedDateRef.current as HTMLDivElement).focus();\n    }\n  }, [focusedDate]);\n\n  const weeks = useMemo<Date[][]>(\n    () => getCalendarMonth(baseDate, { firstDayOfWeek: startOfWeek }),\n    [baseDate, startOfWeek]\n  );\n  const weekdays = weeks[0].map(date => date.getDay());\n\n  return (\n    <table role=\"grid\" className={styles['calendar-grid']} aria-labelledby={ariaLabelledby}>\n      <thead>\n        <tr>\n          {weekdays.map(dayIndex => (\n            <th\n              key={dayIndex}\n              scope=\"col\"\n              className={clsx(styles['calendar-grid-cell'], styles['calendar-day-header'])}\n            >\n              <span aria-hidden=\"true\">{renderDayName(locale, dayIndex, 'short')}</span>\n              <ScreenreaderOnly>{renderDayName(locale, dayIndex, 'long')}</ScreenreaderOnly>\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody onKeyDown={onGridKeyDownHandler}>\n        {weeks.map((week, weekIndex) => (\n          <tr key={weekIndex} className={styles['calendar-week']}>\n            {week.map((date, dateIndex) => {\n              const isFocusable = !!focusableDate && isSameDay(date, focusableDate);\n              const isSelected = !!selectedDate && isSameDay(date, selectedDate);\n              const isEnabled = !isDateEnabled || isDateEnabled(date);\n              const isDateOnSameDay = isSameDay(date, new Date());\n\n              // Can't be focused.\n              let tabIndex = undefined;\n              if (isFocusable && isEnabled) {\n                // Next focus target.\n                tabIndex = 0;\n              } else if (isEnabled) {\n                // Can be focused programmatically.\n                tabIndex = -1;\n              }\n\n              // Screen-reader announcement for the focused day.\n              let dayAnnouncement = getDateLabel(locale, date, 'short');\n              if (isDateOnSameDay) {\n                dayAnnouncement += '. ' + todayAriaLabel;\n              }\n\n              return (\n                <td\n                  key={`${weekIndex}:${dateIndex}`}\n                  ref={tabIndex === 0 ? focusedDateRef : undefined}\n                  tabIndex={tabIndex}\n                  aria-current={isDateOnSameDay ? 'date' : undefined}\n                  aria-selected={isEnabled ? isSelected : undefined}\n                  aria-disabled={!isEnabled}\n                  // Do not attach click event when the date is disabled, otherwise VO+safari announces clickable\n                  onClick={isEnabled ? () => onSelectDate(date) : undefined}\n                  className={clsx(styles['calendar-grid-cell'], styles['calendar-day'], {\n                    [styles['calendar-day-current-month']]: isSameMonth(date, baseDate),\n                    [styles['calendar-day-enabled']]: isEnabled,\n                    [styles['calendar-day-selected']]: isSelected,\n                    [styles['calendar-day-today']]: isDateOnSameDay,\n                  })}\n                >\n                  <span className={styles['day-inner']} aria-hidden=\"true\">\n                    {date.getDate()}\n                  </span>\n                  <ScreenreaderOnly>{dayAnnouncement}</ScreenreaderOnly>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}