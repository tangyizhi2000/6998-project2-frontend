{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport function filterOptions(options) {\n  var searchText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (!searchText) {\n    return options;\n  }\n  var filtered = [];\n  var _iterator = _createForOfIteratorHelper(options),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var option = _step.value;\n      if (isGroup(option)) {\n        var childOptions = filterOptions(option.options, searchText);\n        if (childOptions.length > 0) {\n          filtered.push(Object.assign(Object.assign({}, option), {\n            options: childOptions\n          }));\n        }\n      } else if (matchSingleOption(option, searchText)) {\n        filtered.push(option);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return filtered;\n}\nfunction isGroup(optionOrGroup) {\n  return 'options' in optionOrGroup;\n}\nfunction matchSingleOption(option, searchText) {\n  var _a, _b;\n  searchText = searchText.toLowerCase();\n  var label = ((_a = option.label) !== null && _a !== void 0 ? _a : '').toLowerCase();\n  var labelPrefix = (_b = option.__labelPrefix) !== null && _b !== void 0 ? _b : '';\n  var value = (option.value ? option.value.slice(labelPrefix.length) : '').toLowerCase();\n  return label.indexOf(searchText) !== -1 || value.indexOf(searchText) !== -1;\n}","map":{"version":3,"mappings":";AAAA;AACA;AAKA,OAAM,SAAUA,aAAa,CAC3BC,OAA4E,EAC7D;EAAA,IAAfC,UAAU,uEAAG,EAAE;EAEf,IAAI,CAACA,UAAU,EAAE;IACf,OAAOD,OAAO;;EAGhB,IAAME,QAAQ,GAA+D,EAAE;EAAC,2CAC3DF,OAAO;IAAA;EAAA;IAA5B,oDAA8B;MAAA,IAAnBG,MAAM;MACf,IAAIC,OAAO,CAACD,MAAM,CAAC,EAAE;QACnB,IAAME,YAAY,GAAGN,aAAa,CAACI,MAAM,CAACH,OAAO,EAAEC,UAAU,CAAC;QAC9D,IAAII,YAAY,CAACC,MAAM,GAAG,CAAC,EAAE;UAC3BJ,QAAQ,CAACK,IAAI,iCAAMJ,MAAM;YAAEH,OAAO,EAAEK;UAAY,GAAG;;OAEtD,MAAM,IAAIG,iBAAiB,CAACL,MAAM,EAAEF,UAAU,CAAC,EAAE;QAChDC,QAAQ,CAACK,IAAI,CAACJ,MAAM,CAAC;;;EAExB;IAAA;EAAA;IAAA;EAAA;EACD,OAAOD,QAAQ;AACjB;AAEA,SAASE,OAAO,CAACK,aAAsC;EACrD,OAAO,SAAS,IAAIA,aAAa;AACnC;AAEA,SAASD,iBAAiB,CAACL,MAAwB,EAAEF,UAAkB;;EACrEA,UAAU,GAAGA,UAAU,CAACS,WAAW,EAAE;EAErC,IAAMC,KAAK,GAAG,CAAC,YAAM,CAACA,KAAK,mCAAI,EAAE,EAAED,WAAW,EAAE;EAChD,IAAME,WAAW,GAAG,YAAM,CAACC,aAAa,mCAAI,EAAE;EAC9C,IAAMC,KAAK,GAAG,CAACX,MAAM,CAACW,KAAK,GAAGX,MAAM,CAACW,KAAK,CAACC,KAAK,CAACH,WAAW,CAACN,MAAM,CAAC,GAAG,EAAE,EAAEI,WAAW,EAAE;EACxF,OAAOC,KAAK,CAACK,OAAO,CAACf,UAAU,CAAC,KAAK,CAAC,CAAC,IAAIa,KAAK,CAACE,OAAO,CAACf,UAAU,CAAC,KAAK,CAAC,CAAC;AAC7E","names":["filterOptions","options","searchText","filtered","option","isGroup","childOptions","length","push","matchSingleOption","optionOrGroup","toLowerCase","label","labelPrefix","__labelPrefix","value","slice","indexOf"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/property-filter/lib/default/property-filter/filter-options.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AutosuggestProps } from '../autosuggest/interfaces';\nimport { OptionDefinition } from '../internal/components/option/interfaces';\n\nexport function filterOptions(\n  options: readonly (AutosuggestProps.Option | AutosuggestProps.OptionGroup)[],\n  searchText = ''\n): readonly (AutosuggestProps.Option | AutosuggestProps.OptionGroup)[] {\n  if (!searchText) {\n    return options;\n  }\n\n  const filtered: (AutosuggestProps.Option | AutosuggestProps.OptionGroup)[] = [];\n  for (const option of options) {\n    if (isGroup(option)) {\n      const childOptions = filterOptions(option.options, searchText);\n      if (childOptions.length > 0) {\n        filtered.push({ ...option, options: childOptions });\n      }\n    } else if (matchSingleOption(option, searchText)) {\n      filtered.push(option);\n    }\n  }\n  return filtered;\n}\n\nfunction isGroup(optionOrGroup: AutosuggestProps.Option): optionOrGroup is AutosuggestProps.OptionGroup {\n  return 'options' in optionOrGroup;\n}\n\nfunction matchSingleOption(option: OptionDefinition, searchText: string): boolean {\n  searchText = searchText.toLowerCase();\n\n  const label = (option.label ?? '').toLowerCase();\n  const labelPrefix = option.__labelPrefix ?? '';\n  const value = (option.value ? option.value.slice(labelPrefix.length) : '').toLowerCase();\n  return label.indexOf(searchText) !== -1 || value.indexOf(searchText) !== -1;\n}\n"]},"metadata":{},"sourceType":"module"}