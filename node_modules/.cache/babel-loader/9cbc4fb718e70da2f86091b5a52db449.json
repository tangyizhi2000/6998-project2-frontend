{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createPlaceholdersLayout, getDefaultColumnSpan, getDefaultRowSpan } from \"../../internal/utils/layout\";\nimport { normalizeInsertionPath } from \"./path\";\nexport function getLayoutColumns(transition) {\n  return transition.itemsLayout.columns;\n}\n// The rows can be overridden during transition to create more drop targets at the bottom.\nexport function getLayoutRows(transition) {\n  var _a, _b, _c;\n  const layout = (_b = (_a = transition.layoutShift) === null || _a === void 0 ? void 0 : _a.next) !== null && _b !== void 0 ? _b : transition.itemsLayout;\n  const layoutItem = layout.items.find(it => it.id === transition.draggableItem.id);\n  const itemHeight = (_c = layoutItem === null || layoutItem === void 0 ? void 0 : layoutItem.height) !== null && _c !== void 0 ? _c : getDefaultRowSpan(transition.draggableItem);\n  // Add extra row for resize when already at the bottom.\n  if (transition.operation === \"resize\") {\n    return Math.max(layout.rows, layoutItem ? layoutItem.y + layoutItem.height + 1 : 0);\n  }\n  // Add extra row(s) for reorder/insert based on item's height.\n  else {\n    return Math.max(layout.rows, transition.itemsLayout.rows + itemHeight);\n  }\n}\nexport function getLayoutPlaceholders(transition) {\n  const rows = getLayoutRows(transition);\n  const columns = getLayoutColumns(transition);\n  return createPlaceholdersLayout(rows, columns);\n}\n/**\n * Retrieves direction from where the inserting item comes.\n */\nexport function getInsertionDirection(cursorOffset) {\n  if (cursorOffset.x < 0) {\n    return \"right\";\n  }\n  if (cursorOffset.x > 0) {\n    return \"left\";\n  }\n  if (cursorOffset.y < 0) {\n    return \"down\";\n  }\n  if (cursorOffset.y > 0) {\n    return \"up\";\n  }\n  return \"right\";\n}\n/**\n * Applies transition operation (reorder/move/insert) and retrieves an object that describes the updated\n * layout and the moves to be made including and not including items float to top.\n *\n * The layout shift w/o refloat is used for rendering and w/ refloat is used for live announcements.\n */\nexport function getLayoutShift(transition, path, insertionDirection) {\n  if (path.length === 0) {\n    return null;\n  }\n  const width = getDefaultColumnSpan(transition.draggableItem, getLayoutColumns(transition));\n  const height = getDefaultRowSpan(transition.draggableItem);\n  const rows = getLayoutRows(transition);\n  const columns = getLayoutColumns(transition);\n  switch (transition.operation) {\n    case \"resize\":\n      return transition.layoutEngine.resize({\n        itemId: transition.draggableItem.id,\n        path\n      });\n    case \"reorder\":\n      return transition.layoutEngine.move({\n        itemId: transition.draggableItem.id,\n        path\n      });\n    case \"insert\":\n      return transition.layoutEngine.insert({\n        itemId: transition.draggableItem.id,\n        width,\n        height,\n        path: normalizeInsertionPath(path, insertionDirection !== null && insertionDirection !== void 0 ? insertionDirection : \"right\", columns, rows)\n      });\n  }\n}","map":{"version":3,"names":["createPlaceholdersLayout","getDefaultColumnSpan","getDefaultRowSpan","normalizeInsertionPath","getLayoutColumns","transition","itemsLayout","columns","getLayoutRows","_a","_b","_c","layout","layoutShift","next","layoutItem","items","find","it","id","draggableItem","itemHeight","height","operation","Math","max","rows","y","getLayoutPlaceholders","getInsertionDirection","cursorOffset","x","getLayoutShift","path","insertionDirection","length","width","layoutEngine","resize","itemId","move","insert"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/board-components/board/utils/layout.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createPlaceholdersLayout, getDefaultColumnSpan, getDefaultRowSpan } from \"../../internal/utils/layout\";\nimport { normalizeInsertionPath } from \"./path\";\nexport function getLayoutColumns(transition) {\n    return transition.itemsLayout.columns;\n}\n// The rows can be overridden during transition to create more drop targets at the bottom.\nexport function getLayoutRows(transition) {\n    var _a, _b, _c;\n    const layout = (_b = (_a = transition.layoutShift) === null || _a === void 0 ? void 0 : _a.next) !== null && _b !== void 0 ? _b : transition.itemsLayout;\n    const layoutItem = layout.items.find((it) => it.id === transition.draggableItem.id);\n    const itemHeight = (_c = layoutItem === null || layoutItem === void 0 ? void 0 : layoutItem.height) !== null && _c !== void 0 ? _c : getDefaultRowSpan(transition.draggableItem);\n    // Add extra row for resize when already at the bottom.\n    if (transition.operation === \"resize\") {\n        return Math.max(layout.rows, layoutItem ? layoutItem.y + layoutItem.height + 1 : 0);\n    }\n    // Add extra row(s) for reorder/insert based on item's height.\n    else {\n        return Math.max(layout.rows, transition.itemsLayout.rows + itemHeight);\n    }\n}\nexport function getLayoutPlaceholders(transition) {\n    const rows = getLayoutRows(transition);\n    const columns = getLayoutColumns(transition);\n    return createPlaceholdersLayout(rows, columns);\n}\n/**\n * Retrieves direction from where the inserting item comes.\n */\nexport function getInsertionDirection(cursorOffset) {\n    if (cursorOffset.x < 0) {\n        return \"right\";\n    }\n    if (cursorOffset.x > 0) {\n        return \"left\";\n    }\n    if (cursorOffset.y < 0) {\n        return \"down\";\n    }\n    if (cursorOffset.y > 0) {\n        return \"up\";\n    }\n    return \"right\";\n}\n/**\n * Applies transition operation (reorder/move/insert) and retrieves an object that describes the updated\n * layout and the moves to be made including and not including items float to top.\n *\n * The layout shift w/o refloat is used for rendering and w/ refloat is used for live announcements.\n */\nexport function getLayoutShift(transition, path, insertionDirection) {\n    if (path.length === 0) {\n        return null;\n    }\n    const width = getDefaultColumnSpan(transition.draggableItem, getLayoutColumns(transition));\n    const height = getDefaultRowSpan(transition.draggableItem);\n    const rows = getLayoutRows(transition);\n    const columns = getLayoutColumns(transition);\n    switch (transition.operation) {\n        case \"resize\":\n            return transition.layoutEngine.resize({ itemId: transition.draggableItem.id, path });\n        case \"reorder\":\n            return transition.layoutEngine.move({ itemId: transition.draggableItem.id, path });\n        case \"insert\":\n            return transition.layoutEngine.insert({\n                itemId: transition.draggableItem.id,\n                width,\n                height,\n                path: normalizeInsertionPath(path, insertionDirection !== null && insertionDirection !== void 0 ? insertionDirection : \"right\", columns, rows),\n            });\n    }\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,wBAAwB,EAAEC,oBAAoB,EAAEC,iBAAiB,QAAQ,6BAA6B;AAC/G,SAASC,sBAAsB,QAAQ,QAAQ;AAC/C,OAAO,SAASC,gBAAgB,CAACC,UAAU,EAAE;EACzC,OAAOA,UAAU,CAACC,WAAW,CAACC,OAAO;AACzC;AACA;AACA,OAAO,SAASC,aAAa,CAACH,UAAU,EAAE;EACtC,IAAII,EAAE,EAAEC,EAAE,EAAEC,EAAE;EACd,MAAMC,MAAM,GAAG,CAACF,EAAE,GAAG,CAACD,EAAE,GAAGJ,UAAU,CAACQ,WAAW,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACK,IAAI,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGL,UAAU,CAACC,WAAW;EACxJ,MAAMS,UAAU,GAAGH,MAAM,CAACI,KAAK,CAACC,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACC,EAAE,KAAKd,UAAU,CAACe,aAAa,CAACD,EAAE,CAAC;EACnF,MAAME,UAAU,GAAG,CAACV,EAAE,GAAGI,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACO,MAAM,MAAM,IAAI,IAAIX,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGT,iBAAiB,CAACG,UAAU,CAACe,aAAa,CAAC;EAChL;EACA,IAAIf,UAAU,CAACkB,SAAS,KAAK,QAAQ,EAAE;IACnC,OAAOC,IAAI,CAACC,GAAG,CAACb,MAAM,CAACc,IAAI,EAAEX,UAAU,GAAGA,UAAU,CAACY,CAAC,GAAGZ,UAAU,CAACO,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;EACvF;EACA;EAAA,KACK;IACD,OAAOE,IAAI,CAACC,GAAG,CAACb,MAAM,CAACc,IAAI,EAAErB,UAAU,CAACC,WAAW,CAACoB,IAAI,GAAGL,UAAU,CAAC;EAC1E;AACJ;AACA,OAAO,SAASO,qBAAqB,CAACvB,UAAU,EAAE;EAC9C,MAAMqB,IAAI,GAAGlB,aAAa,CAACH,UAAU,CAAC;EACtC,MAAME,OAAO,GAAGH,gBAAgB,CAACC,UAAU,CAAC;EAC5C,OAAOL,wBAAwB,CAAC0B,IAAI,EAAEnB,OAAO,CAAC;AAClD;AACA;AACA;AACA;AACA,OAAO,SAASsB,qBAAqB,CAACC,YAAY,EAAE;EAChD,IAAIA,YAAY,CAACC,CAAC,GAAG,CAAC,EAAE;IACpB,OAAO,OAAO;EAClB;EACA,IAAID,YAAY,CAACC,CAAC,GAAG,CAAC,EAAE;IACpB,OAAO,MAAM;EACjB;EACA,IAAID,YAAY,CAACH,CAAC,GAAG,CAAC,EAAE;IACpB,OAAO,MAAM;EACjB;EACA,IAAIG,YAAY,CAACH,CAAC,GAAG,CAAC,EAAE;IACpB,OAAO,IAAI;EACf;EACA,OAAO,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,cAAc,CAAC3B,UAAU,EAAE4B,IAAI,EAAEC,kBAAkB,EAAE;EACjE,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;IACnB,OAAO,IAAI;EACf;EACA,MAAMC,KAAK,GAAGnC,oBAAoB,CAACI,UAAU,CAACe,aAAa,EAAEhB,gBAAgB,CAACC,UAAU,CAAC,CAAC;EAC1F,MAAMiB,MAAM,GAAGpB,iBAAiB,CAACG,UAAU,CAACe,aAAa,CAAC;EAC1D,MAAMM,IAAI,GAAGlB,aAAa,CAACH,UAAU,CAAC;EACtC,MAAME,OAAO,GAAGH,gBAAgB,CAACC,UAAU,CAAC;EAC5C,QAAQA,UAAU,CAACkB,SAAS;IACxB,KAAK,QAAQ;MACT,OAAOlB,UAAU,CAACgC,YAAY,CAACC,MAAM,CAAC;QAAEC,MAAM,EAAElC,UAAU,CAACe,aAAa,CAACD,EAAE;QAAEc;MAAK,CAAC,CAAC;IACxF,KAAK,SAAS;MACV,OAAO5B,UAAU,CAACgC,YAAY,CAACG,IAAI,CAAC;QAAED,MAAM,EAAElC,UAAU,CAACe,aAAa,CAACD,EAAE;QAAEc;MAAK,CAAC,CAAC;IACtF,KAAK,QAAQ;MACT,OAAO5B,UAAU,CAACgC,YAAY,CAACI,MAAM,CAAC;QAClCF,MAAM,EAAElC,UAAU,CAACe,aAAa,CAACD,EAAE;QACnCiB,KAAK;QACLd,MAAM;QACNW,IAAI,EAAE9B,sBAAsB,CAAC8B,IAAI,EAAEC,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,KAAK,KAAK,CAAC,GAAGA,kBAAkB,GAAG,OAAO,EAAE3B,OAAO,EAAEmB,IAAI;MACjJ,CAAC,CAAC;EAAC;AAEf"},"metadata":{},"sourceType":"module"}