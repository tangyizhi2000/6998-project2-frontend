{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useMemo, useState } from 'react';\nimport { KeyCode } from '../../internal/keycode';\nimport { findNavigableSeries, isXThreshold, isYThreshold, nextValidDomainIndex } from '../utils';\nexport function useNavigation(_ref) {\n  var series = _ref.series,\n    visibleSeries = _ref.visibleSeries,\n    scaledSeries = _ref.scaledSeries,\n    barGroups = _ref.barGroups,\n    xScale = _ref.xScale,\n    yScale = _ref.yScale,\n    highlightedPoint = _ref.highlightedPoint,\n    highlightedGroupIndex = _ref.highlightedGroupIndex,\n    highlightedSeries = _ref.highlightedSeries,\n    isHandlersDisabled = _ref.isHandlersDisabled,\n    pinPopover = _ref.pinPopover,\n    highlightSeries = _ref.highlightSeries,\n    highlightGroup = _ref.highlightGroup,\n    highlightPoint = _ref.highlightPoint,\n    highlightX = _ref.highlightX,\n    verticalMarkerX = _ref.verticalMarkerX;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    targetX = _useState2[0],\n    setTargetX = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    xIndex = _useState4[0],\n    setXIndex = _useState4[1];\n  // There are two different types of navigation:\n  // 1) Group navigation for any chart that contains a bar series\n  // 2) Line navigation for any chart that only contains lines and thresholds\n  var isGroupNavigation = useMemo(function () {\n    return visibleSeries.some(function (_ref2) {\n      var series = _ref2.series;\n      return series.type === 'bar';\n    });\n  }, [visibleSeries]);\n  // Make a list of series that can be navigated between. Bar series are treated as one.\n  var _useMemo = useMemo(function () {\n      return findNavigableSeries(visibleSeries);\n    }, [visibleSeries]),\n    navigableSeries = _useMemo.navigableSeries;\n  var containsMultipleSeries = navigableSeries.length > 1;\n  var onBarGroupFocus = function onBarGroupFocus() {\n    var groupIndex = highlightedGroupIndex !== null && highlightedGroupIndex !== void 0 ? highlightedGroupIndex : 0;\n    setTargetX(xScale.domain[groupIndex]);\n    highlightGroup(groupIndex);\n  };\n  var onLineFocus = function onLineFocus() {\n    if (verticalMarkerX === null) {\n      if (containsMultipleSeries) {\n        moveToLineGroupIndex(0);\n      } else {\n        moveBetweenSeries(0);\n      }\n    }\n  };\n  var onFocus = function onFocus() {\n    if (isGroupNavigation) {\n      onBarGroupFocus();\n    } else {\n      onLineFocus();\n    }\n  };\n  // Returns all the unique X coordinates in scaledSeries.\n  // Assumes scaledSeries is sorted by `x`.\n  var allUniqueX = useMemo(function () {\n    var result = [];\n    for (var i = 0; i < scaledSeries.length; i += 1) {\n      var point = scaledSeries[i];\n      if (point !== undefined && (!result.length || result[result.length - 1].scaledX !== point.x)) {\n        result.push({\n          scaledX: point.x,\n          datum: point.datum\n        });\n      }\n    }\n    return result;\n  }, [scaledSeries]);\n  var moveBetweenSeries = useCallback(function (direction) {\n    var _a, _b, _c, _d;\n    if (isGroupNavigation) {\n      return;\n    }\n    var xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;\n    var MAX_SERIES_INDEX = navigableSeries.length - 1;\n    // Find the index of the currently highlighted series (if any)\n    var previousSeriesIndex = -1;\n    if (highlightedSeries) {\n      previousSeriesIndex = navigableSeries.indexOf(highlightedSeries);\n    }\n    // Move forwards or backwards to the new series\n    // If index === -1, show all data points from all series at the given X instead of one single series\n    var firstPossibleIndex = containsMultipleSeries ? -1 : 0;\n    var nextSeriesIndex = 0;\n    if (previousSeriesIndex !== null) {\n      nextSeriesIndex = previousSeriesIndex + direction;\n      if (nextSeriesIndex > MAX_SERIES_INDEX) {\n        nextSeriesIndex = firstPossibleIndex;\n      } else if (nextSeriesIndex < firstPossibleIndex) {\n        nextSeriesIndex = MAX_SERIES_INDEX;\n      }\n    }\n    if (nextSeriesIndex === -1) {\n      highlightSeries(null);\n      highlightPoint(null);\n      return;\n    }\n    var nextSeries = navigableSeries[nextSeriesIndex];\n    var nextInternalSeries = series.filter(function (_ref3) {\n      var series = _ref3.series;\n      return series === nextSeries;\n    })[0];\n    // 2. Find point in the next series\n    var targetXPoint = ((_a = xScale.d3Scale(targetX)) !== null && _a !== void 0 ? _a : NaN) + xOffset;\n    if (!isFinite(targetXPoint)) {\n      targetXPoint = 0;\n    }\n    if (nextSeries.type === 'line') {\n      var nextScaledSeries = scaledSeries.filter(function (it) {\n        return it.series === nextSeries;\n      });\n      var closestNextSeriesPoint = nextScaledSeries.reduce(function (prev, curr) {\n        return Math.abs(curr.x - targetXPoint) < Math.abs(prev.x - targetXPoint) ? curr : prev;\n      }, {\n        x: -Infinity,\n        y: -Infinity\n      });\n      highlightPoint(Object.assign(Object.assign({}, closestNextSeriesPoint), {\n        color: nextInternalSeries.color,\n        series: nextSeries\n      }));\n    } else if (isYThreshold(nextSeries)) {\n      var scaledTargetIndex = scaledSeries.map(function (it) {\n        var _a;\n        return ((_a = it.datum) === null || _a === void 0 ? void 0 : _a.x) || null;\n      }).indexOf(targetX);\n      highlightPoint({\n        x: targetXPoint,\n        y: (_b = yScale.d3Scale(nextSeries.y)) !== null && _b !== void 0 ? _b : NaN,\n        color: nextInternalSeries.color,\n        series: nextSeries,\n        datum: (_c = scaledSeries[scaledTargetIndex]) === null || _c === void 0 ? void 0 : _c.datum\n      });\n    } else if (isXThreshold(nextSeries)) {\n      highlightPoint({\n        x: (_d = xScale.d3Scale(nextSeries.x)) !== null && _d !== void 0 ? _d : NaN,\n        y: yScale.d3Scale.range()[0],\n        color: nextInternalSeries.color,\n        series: nextSeries,\n        datum: {\n          x: nextSeries.x,\n          y: NaN\n        }\n      });\n    }\n  }, [isGroupNavigation, xScale, navigableSeries, highlightedSeries, containsMultipleSeries, highlightSeries, highlightPoint, series, targetX, scaledSeries, yScale]);\n  var moveWithinSeries = useCallback(function (direction) {\n    var _a;\n    var series = highlightedSeries || visibleSeries[0].series;\n    if (series.type === 'line' || isYThreshold(series)) {\n      var targetScaledSeries = scaledSeries.filter(function (it) {\n        return it.series === series;\n      });\n      var previousPoint = highlightedPoint || targetScaledSeries[0];\n      var indexOfPreviousPoint = targetScaledSeries.map(function (it) {\n        return it.x;\n      }).indexOf(previousPoint.x);\n      var nextPointIndex = circleIndex(indexOfPreviousPoint + direction, [0, targetScaledSeries.length - 1]);\n      var nextPoint = targetScaledSeries[nextPointIndex];\n      setTargetX(((_a = nextPoint.datum) === null || _a === void 0 ? void 0 : _a.x) || null);\n      setXIndex(nextPointIndex);\n      highlightPoint(nextPoint);\n    } else if (series.type === 'bar') {\n      var xDomain = xScale.domain;\n      var MAX_GROUP_INDEX = xDomain.length - 1;\n      var nextGroupIndex = 0;\n      if (highlightedGroupIndex !== null) {\n        // find next group\n        nextGroupIndex = highlightedGroupIndex + direction;\n        if (nextGroupIndex > MAX_GROUP_INDEX) {\n          nextGroupIndex = 0;\n        } else if (nextGroupIndex < 0) {\n          nextGroupIndex = MAX_GROUP_INDEX;\n        }\n      }\n      var nextDomainIndex = nextValidDomainIndex(nextGroupIndex, barGroups, direction);\n      setTargetX(xDomain[nextDomainIndex]);\n      highlightGroup(nextDomainIndex);\n    }\n  }, [highlightedSeries, visibleSeries, scaledSeries, highlightedPoint, highlightPoint, xScale.domain, highlightedGroupIndex, barGroups, highlightGroup]);\n  var moveToLineGroupIndex = useCallback(function (index) {\n    var _a, _b, _c, _d;\n    var point = allUniqueX[index];\n    setXIndex(index);\n    setTargetX(((_a = point.datum) === null || _a === void 0 ? void 0 : _a.x) || null);\n    highlightX({\n      scaledX: (_b = point === null || point === void 0 ? void 0 : point.scaledX) !== null && _b !== void 0 ? _b : null,\n      label: (_d = (_c = point.datum) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : null\n    });\n  }, [allUniqueX, highlightX]);\n  var moveWithinXAxis = useCallback(function (direction) {\n    if (highlightedSeries || isGroupNavigation) {\n      moveWithinSeries(direction);\n    } else {\n      var nextPointGroupIndex = circleIndex(xIndex + direction, [0, allUniqueX.length - 1]);\n      moveToLineGroupIndex(nextPointGroupIndex);\n    }\n  }, [highlightedSeries, isGroupNavigation, moveWithinSeries, xIndex, allUniqueX.length, moveToLineGroupIndex]);\n  var onKeyDown = useCallback(function (event) {\n    var keyCode = event.keyCode;\n    if (keyCode !== KeyCode.up && keyCode !== KeyCode.right && keyCode !== KeyCode.down && keyCode !== KeyCode.left && keyCode !== KeyCode.space && keyCode !== KeyCode.enter) {\n      return;\n    }\n    event.preventDefault();\n    if (isHandlersDisabled) {\n      return;\n    }\n    if (keyCode === KeyCode.down || keyCode === KeyCode.up) {\n      moveBetweenSeries(keyCode === KeyCode.down ? 1 : -1);\n    } else if (keyCode === KeyCode.left || keyCode === KeyCode.right) {\n      moveWithinXAxis(keyCode === KeyCode.right ? 1 : -1);\n    } else if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {\n      pinPopover();\n    }\n  }, [isHandlersDisabled, moveBetweenSeries, moveWithinXAxis, pinPopover]);\n  return {\n    isGroupNavigation: isGroupNavigation,\n    onFocus: onFocus,\n    onKeyDown: onKeyDown,\n    xIndex: xIndex\n  };\n}\n// Returns given index if it is in range or the opposite range boundary otherwise.\nfunction circleIndex(index, _ref4) {\n  var _ref5 = _slicedToArray(_ref4, 2),\n    from = _ref5[0],\n    to = _ref5[1];\n  if (index < from) {\n    return to;\n  }\n  if (index > to) {\n    return from;\n  }\n  return index;\n}","map":{"version":3,"mappings":"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","names":["useCallback","useMemo","useState","KeyCode","findNavigableSeries","isXThreshold","isYThreshold","nextValidDomainIndex","useNavigation","series","visibleSeries","scaledSeries","barGroups","xScale","yScale","highlightedPoint","highlightedGroupIndex","highlightedSeries","isHandlersDisabled","pinPopover","highlightSeries","highlightGroup","highlightPoint","highlightX","verticalMarkerX","targetX","setTargetX","xIndex","setXIndex","isGroupNavigation","some","type","navigableSeries","containsMultipleSeries","length","onBarGroupFocus","groupIndex","domain","onLineFocus","moveToLineGroupIndex","moveBetweenSeries","onFocus","allUniqueX","result","i","point","undefined","scaledX","x","push","datum","direction","xOffset","isCategorical","Math","max","d3Scale","bandwidth","MAX_SERIES_INDEX","previousSeriesIndex","indexOf","firstPossibleIndex","nextSeriesIndex","nextSeries","nextInternalSeries","filter","targetXPoint","NaN","isFinite","nextScaledSeries","it","closestNextSeriesPoint","reduce","prev","curr","abs","Infinity","y","color","scaledTargetIndex","map","range","moveWithinSeries","targetScaledSeries","previousPoint","indexOfPreviousPoint","nextPointIndex","circleIndex","nextPoint","xDomain","MAX_GROUP_INDEX","nextGroupIndex","nextDomainIndex","index","label","moveWithinXAxis","nextPointGroupIndex","onKeyDown","event","keyCode","up","right","down","left","space","enter","preventDefault","from","to"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/mixed-line-bar-chart/hooks/lib/default/mixed-line-bar-chart/hooks/use-navigation.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { KeyCode } from '../../internal/keycode';\nimport { ChartContainerProps } from '../chart-container';\nimport { ChartDataTypes, MixedLineBarChartProps, VerticalMarkerX } from '../interfaces';\nimport { ChartScale, NumericChartScale } from '../../internal/components/cartesian-chart/scales';\nimport { findNavigableSeries, isXThreshold, isYThreshold, nextValidDomainIndex } from '../utils';\nimport { ScaledPoint } from '../make-scaled-series';\nimport { ScaledBarGroup } from '../make-scaled-bar-groups';\n\nexport type UseNavigationProps<T extends ChartDataTypes> = Pick<\n  ChartContainerProps<T>,\n  'highlightedSeries' | 'series' | 'visibleSeries'\n> & {\n  xScale: ChartScale;\n  yScale: NumericChartScale;\n  barGroups: ScaledBarGroup<T>[];\n  scaledSeries: ReadonlyArray<ScaledPoint<T>>;\n\n  highlightedPoint: ScaledPoint<T> | null;\n  highlightedGroupIndex: number | null;\n  isHandlersDisabled: boolean;\n\n  pinPopover(pinned?: boolean): void;\n  highlightSeries(series: MixedLineBarChartProps.ChartSeries<T> | null): void;\n  highlightGroup(groupIndex: number): void;\n  highlightPoint(point: ScaledPoint<T> | null): void;\n  highlightX: (verticalMarker: VerticalMarkerX<T> | null) => void;\n  clearHighlightedSeries(): void;\n  verticalMarkerX: VerticalMarkerX<T> | null;\n};\n\nexport function useNavigation<T extends ChartDataTypes>({\n  series,\n  visibleSeries,\n  scaledSeries,\n  barGroups,\n  xScale,\n  yScale,\n  highlightedPoint,\n  highlightedGroupIndex,\n  highlightedSeries,\n  isHandlersDisabled,\n  pinPopover,\n  highlightSeries,\n  highlightGroup,\n  highlightPoint,\n  highlightX,\n  verticalMarkerX,\n}: UseNavigationProps<T>) {\n  const [targetX, setTargetX] = useState<T | null>(null);\n  const [xIndex, setXIndex] = useState(0);\n\n  // There are two different types of navigation:\n  // 1) Group navigation for any chart that contains a bar series\n  // 2) Line navigation for any chart that only contains lines and thresholds\n  const isGroupNavigation = useMemo(() => visibleSeries.some(({ series }) => series.type === 'bar'), [visibleSeries]);\n\n  // Make a list of series that can be navigated between. Bar series are treated as one.\n  const { navigableSeries } = useMemo(() => findNavigableSeries(visibleSeries), [visibleSeries]);\n  const containsMultipleSeries = navigableSeries.length > 1;\n\n  const onBarGroupFocus = () => {\n    const groupIndex = highlightedGroupIndex ?? 0;\n    setTargetX((xScale.domain as T[])[groupIndex]);\n    highlightGroup(groupIndex);\n  };\n\n  const onLineFocus = () => {\n    if (verticalMarkerX === null) {\n      if (containsMultipleSeries) {\n        moveToLineGroupIndex(0);\n      } else {\n        moveBetweenSeries(0);\n      }\n    }\n  };\n\n  const onFocus = () => {\n    if (isGroupNavigation) {\n      onBarGroupFocus();\n    } else {\n      onLineFocus();\n    }\n  };\n\n  // Returns all the unique X coordinates in scaledSeries.\n  // Assumes scaledSeries is sorted by `x`.\n  const allUniqueX = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < scaledSeries.length; i += 1) {\n      const point = scaledSeries[i];\n      if (point !== undefined && (!result.length || result[result.length - 1].scaledX !== point.x)) {\n        result.push({ scaledX: point.x, datum: point.datum });\n      }\n    }\n    return result;\n  }, [scaledSeries]);\n\n  const moveBetweenSeries = useCallback(\n    (direction: number) => {\n      if (isGroupNavigation) {\n        return;\n      }\n\n      const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;\n      const MAX_SERIES_INDEX = navigableSeries.length - 1;\n\n      // Find the index of the currently highlighted series (if any)\n      let previousSeriesIndex = -1;\n      if (highlightedSeries) {\n        previousSeriesIndex = navigableSeries.indexOf(highlightedSeries);\n      }\n\n      // Move forwards or backwards to the new series\n      // If index === -1, show all data points from all series at the given X instead of one single series\n      const firstPossibleIndex = containsMultipleSeries ? -1 : 0;\n      let nextSeriesIndex = 0;\n      if (previousSeriesIndex !== null) {\n        nextSeriesIndex = previousSeriesIndex + direction;\n        if (nextSeriesIndex > MAX_SERIES_INDEX) {\n          nextSeriesIndex = firstPossibleIndex;\n        } else if (nextSeriesIndex < firstPossibleIndex) {\n          nextSeriesIndex = MAX_SERIES_INDEX;\n        }\n      }\n      if (nextSeriesIndex === -1) {\n        highlightSeries(null);\n        highlightPoint(null);\n        return;\n      }\n      const nextSeries = navigableSeries[nextSeriesIndex];\n      const nextInternalSeries = series.filter(({ series }) => series === nextSeries)[0];\n\n      // 2. Find point in the next series\n      let targetXPoint = (xScale.d3Scale(targetX as any) ?? NaN) + xOffset;\n      if (!isFinite(targetXPoint)) {\n        targetXPoint = 0;\n      }\n\n      if (nextSeries.type === 'line') {\n        const nextScaledSeries = scaledSeries.filter(it => it.series === nextSeries);\n        const closestNextSeriesPoint = nextScaledSeries.reduce(\n          (prev, curr) => (Math.abs(curr.x - targetXPoint) < Math.abs(prev.x - targetXPoint) ? curr : prev),\n          { x: -Infinity, y: -Infinity }\n        );\n        highlightPoint({ ...closestNextSeriesPoint, color: nextInternalSeries.color, series: nextSeries });\n      } else if (isYThreshold(nextSeries)) {\n        const scaledTargetIndex = scaledSeries.map(it => it.datum?.x || null).indexOf(targetX);\n        highlightPoint({\n          x: targetXPoint,\n          y: yScale.d3Scale(nextSeries.y) ?? NaN,\n          color: nextInternalSeries.color,\n          series: nextSeries,\n          datum: scaledSeries[scaledTargetIndex]?.datum,\n        });\n      } else if (isXThreshold(nextSeries)) {\n        highlightPoint({\n          x: xScale.d3Scale(nextSeries.x as any) ?? NaN,\n          y: yScale.d3Scale.range()[0],\n          color: nextInternalSeries.color,\n          series: nextSeries,\n          datum: { x: nextSeries.x, y: NaN },\n        });\n      }\n    },\n    [\n      isGroupNavigation,\n      xScale,\n      navigableSeries,\n      highlightedSeries,\n      containsMultipleSeries,\n      highlightSeries,\n      highlightPoint,\n      series,\n      targetX,\n      scaledSeries,\n      yScale,\n    ]\n  );\n\n  const moveWithinSeries = useCallback(\n    (direction: number) => {\n      const series = highlightedSeries || visibleSeries[0].series;\n\n      if (series.type === 'line' || isYThreshold(series)) {\n        const targetScaledSeries = scaledSeries.filter(it => it.series === series);\n        const previousPoint = highlightedPoint || targetScaledSeries[0];\n        const indexOfPreviousPoint = targetScaledSeries.map(it => it.x).indexOf(previousPoint.x);\n        const nextPointIndex = circleIndex(indexOfPreviousPoint + direction, [0, targetScaledSeries.length - 1]);\n        const nextPoint = targetScaledSeries[nextPointIndex];\n\n        setTargetX(nextPoint.datum?.x || null);\n        setXIndex(nextPointIndex);\n        highlightPoint(nextPoint);\n      } else if (series.type === 'bar') {\n        const xDomain = xScale.domain as T[];\n        const MAX_GROUP_INDEX = xDomain.length - 1;\n\n        let nextGroupIndex = 0;\n        if (highlightedGroupIndex !== null) {\n          // find next group\n          nextGroupIndex = highlightedGroupIndex + direction;\n          if (nextGroupIndex > MAX_GROUP_INDEX) {\n            nextGroupIndex = 0;\n          } else if (nextGroupIndex < 0) {\n            nextGroupIndex = MAX_GROUP_INDEX;\n          }\n        }\n\n        const nextDomainIndex = nextValidDomainIndex(nextGroupIndex, barGroups, direction);\n        setTargetX(xDomain[nextDomainIndex]);\n        highlightGroup(nextDomainIndex);\n      }\n    },\n    [\n      highlightedSeries,\n      visibleSeries,\n      scaledSeries,\n      highlightedPoint,\n      highlightPoint,\n      xScale.domain,\n      highlightedGroupIndex,\n      barGroups,\n      highlightGroup,\n    ]\n  );\n\n  const moveToLineGroupIndex = useCallback(\n    (index: number) => {\n      const point = allUniqueX[index];\n      setXIndex(index);\n      setTargetX(point.datum?.x || null);\n      highlightX({ scaledX: point?.scaledX ?? null, label: point.datum?.x ?? null });\n    },\n    [allUniqueX, highlightX]\n  );\n\n  const moveWithinXAxis = useCallback(\n    (direction: number) => {\n      if (highlightedSeries || isGroupNavigation) {\n        moveWithinSeries(direction);\n      } else {\n        const nextPointGroupIndex = circleIndex(xIndex + direction, [0, allUniqueX.length - 1]);\n        moveToLineGroupIndex(nextPointGroupIndex);\n      }\n    },\n    [highlightedSeries, isGroupNavigation, moveWithinSeries, xIndex, allUniqueX.length, moveToLineGroupIndex]\n  );\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const keyCode = event.keyCode;\n      if (\n        keyCode !== KeyCode.up &&\n        keyCode !== KeyCode.right &&\n        keyCode !== KeyCode.down &&\n        keyCode !== KeyCode.left &&\n        keyCode !== KeyCode.space &&\n        keyCode !== KeyCode.enter\n      ) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if (isHandlersDisabled) {\n        return;\n      }\n\n      if (keyCode === KeyCode.down || keyCode === KeyCode.up) {\n        moveBetweenSeries(keyCode === KeyCode.down ? 1 : -1);\n      } else if (keyCode === KeyCode.left || keyCode === KeyCode.right) {\n        moveWithinXAxis(keyCode === KeyCode.right ? 1 : -1);\n      } else if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {\n        pinPopover();\n      }\n    },\n    [isHandlersDisabled, moveBetweenSeries, moveWithinXAxis, pinPopover]\n  );\n\n  return { isGroupNavigation, onFocus, onKeyDown, xIndex };\n}\n\n// Returns given index if it is in range or the opposite range boundary otherwise.\nfunction circleIndex(index: number, [from, to]: [number, number]): number {\n  if (index < from) {\n    return to;\n  }\n  if (index > to) {\n    return from;\n  }\n  return index;\n}\n"]},"metadata":{},"sourceType":"module"}