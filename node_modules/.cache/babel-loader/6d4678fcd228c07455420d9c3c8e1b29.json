{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from 'react';\nimport { getFirstFocusable } from '../focus-lock/utils.js';\nimport styles from './styles.css.js';\nconst tokenSelector = `.${styles['list-item']}`;\nconst toggleButtonSelector = `.${styles.toggle}`;\nexport function useTokenFocusController(_ref) {\n  let {\n    removedItemIndex\n  } = _ref;\n  const tokenListRef = useRef(null);\n  useEffect(() => {\n    var _a, _b;\n    if (removedItemIndex === undefined || removedItemIndex === null || tokenListRef.current === null) {\n      return;\n    }\n    const tokenElements = tokenListRef.current.querySelectorAll(tokenSelector);\n    const toggleButton = tokenListRef.current.querySelector(toggleButtonSelector);\n    const activeItemIndices = [];\n    for (let i = 0; i < tokenElements.length; i++) {\n      if (!tokenElements[i].querySelector('[aria-disabled=\"true\"]')) {\n        activeItemIndices.push(i);\n      }\n    }\n    let closestPrevIndex = Number.NEGATIVE_INFINITY;\n    let closestNextIndex = Number.POSITIVE_INFINITY;\n    for (const activeIndex of activeItemIndices) {\n      if (activeIndex < removedItemIndex) {\n        closestPrevIndex = removedItemIndex - activeIndex < removedItemIndex - closestPrevIndex ? activeIndex : closestPrevIndex;\n      } else {\n        closestNextIndex = activeIndex - removedItemIndex < closestNextIndex - removedItemIndex ? activeIndex : closestNextIndex;\n      }\n    }\n    const nextElement = tokenElements[closestNextIndex];\n    const prevElement = tokenElements[closestPrevIndex];\n    if (nextElement instanceof HTMLElement) {\n      (_a = getFirstFocusable(nextElement)) === null || _a === void 0 ? void 0 : _a.focus();\n    } else if (prevElement instanceof HTMLElement) {\n      (_b = getFirstFocusable(prevElement)) === null || _b === void 0 ? void 0 : _b.focus();\n    } else if (toggleButton instanceof HTMLElement) {\n      toggleButton.focus();\n    }\n  }, [removedItemIndex]);\n  return tokenListRef;\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,iBAAiB,QAAQ,wBAAwB;AAC1D,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,MAAMC,aAAa,GAAG,IAAID,MAAM,CAAC,WAAW,CAAC,EAAE;AAC/C,MAAME,oBAAoB,GAAG,IAAIF,MAAM,CAACG,MAAM,EAAE;AAEhD,OAAM,SAAUC,uBAAuB,OAA2D;EAAA,IAA1D;IAAEC;EAAgB,CAAwC;EAChG,MAAMC,YAAY,GAAGR,MAAM,CAAiB,IAAI,CAAC;EAEjDD,SAAS,CAAC,MAAK;;IACb,IAAIQ,gBAAgB,KAAKE,SAAS,IAAIF,gBAAgB,KAAK,IAAI,IAAIC,YAAY,CAACE,OAAO,KAAK,IAAI,EAAE;MAChG;;IAGF,MAAMC,aAAa,GAAGH,YAAY,CAACE,OAAO,CAACE,gBAAgB,CAACT,aAAa,CAAC;IAC1E,MAAMU,YAAY,GAAGL,YAAY,CAACE,OAAO,CAACI,aAAa,CAACV,oBAAoB,CAAC;IAE7E,MAAMW,iBAAiB,GAAa,EAAE;IACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,aAAa,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,IAAI,CAACL,aAAa,CAACK,CAAC,CAAC,CAACF,aAAa,CAAC,wBAAwB,CAAC,EAAE;QAC7DC,iBAAiB,CAACG,IAAI,CAACF,CAAC,CAAC;;;IAI7B,IAAIG,gBAAgB,GAAGC,MAAM,CAACC,iBAAiB;IAC/C,IAAIC,gBAAgB,GAAGF,MAAM,CAACG,iBAAiB;IAE/C,KAAK,MAAMC,WAAW,IAAIT,iBAAiB,EAAE;MAC3C,IAAIS,WAAW,GAAGjB,gBAAgB,EAAE;QAClCY,gBAAgB,GACdZ,gBAAgB,GAAGiB,WAAW,GAAGjB,gBAAgB,GAAGY,gBAAgB,GAAGK,WAAW,GAAGL,gBAAgB;OACxG,MAAM;QACLG,gBAAgB,GACdE,WAAW,GAAGjB,gBAAgB,GAAGe,gBAAgB,GAAGf,gBAAgB,GAAGiB,WAAW,GAAGF,gBAAgB;;;IAI3G,MAAMG,WAAW,GAAGd,aAAa,CAACW,gBAAgB,CAAC;IACnD,MAAMI,WAAW,GAAGf,aAAa,CAACQ,gBAAgB,CAAC;IAEnD,IAAIM,WAAW,YAAYE,WAAW,EAAE;MACtC,uBAAiB,CAACF,WAAW,CAAC,0CAAEG,KAAK,EAAE;KACxC,MAAM,IAAIF,WAAW,YAAYC,WAAW,EAAE;MAC7C,uBAAiB,CAACD,WAAW,CAAC,0CAAEE,KAAK,EAAE;KACxC,MAAM,IAAIf,YAAY,YAAYc,WAAW,EAAE;MAC9Cd,YAAY,CAACe,KAAK,EAAE;;EAExB,CAAC,EAAE,CAACrB,gBAAgB,CAAC,CAAC;EAEtB,OAAOC,YAAY;AACrB","names":["useEffect","useRef","getFirstFocusable","styles","tokenSelector","toggleButtonSelector","toggle","useTokenFocusController","removedItemIndex","tokenListRef","undefined","current","tokenElements","querySelectorAll","toggleButton","querySelector","activeItemIndices","i","length","push","closestPrevIndex","Number","NEGATIVE_INFINITY","closestNextIndex","POSITIVE_INFINITY","activeIndex","nextElement","prevElement","HTMLElement","focus"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/components/token-list/lib/default/internal/components/token-list/token-focus-controller.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useEffect, useRef } from 'react';\nimport { getFirstFocusable } from '../focus-lock/utils.js';\nimport styles from './styles.css.js';\n\nconst tokenSelector = `.${styles['list-item']}`;\nconst toggleButtonSelector = `.${styles.toggle}`;\n\nexport function useTokenFocusController({ removedItemIndex }: { removedItemIndex?: null | number }) {\n  const tokenListRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (removedItemIndex === undefined || removedItemIndex === null || tokenListRef.current === null) {\n      return;\n    }\n\n    const tokenElements = tokenListRef.current.querySelectorAll(tokenSelector);\n    const toggleButton = tokenListRef.current.querySelector(toggleButtonSelector);\n\n    const activeItemIndices: number[] = [];\n    for (let i = 0; i < tokenElements.length; i++) {\n      if (!tokenElements[i].querySelector('[aria-disabled=\"true\"]')) {\n        activeItemIndices.push(i);\n      }\n    }\n\n    let closestPrevIndex = Number.NEGATIVE_INFINITY;\n    let closestNextIndex = Number.POSITIVE_INFINITY;\n\n    for (const activeIndex of activeItemIndices) {\n      if (activeIndex < removedItemIndex) {\n        closestPrevIndex =\n          removedItemIndex - activeIndex < removedItemIndex - closestPrevIndex ? activeIndex : closestPrevIndex;\n      } else {\n        closestNextIndex =\n          activeIndex - removedItemIndex < closestNextIndex - removedItemIndex ? activeIndex : closestNextIndex;\n      }\n    }\n\n    const nextElement = tokenElements[closestNextIndex];\n    const prevElement = tokenElements[closestPrevIndex];\n\n    if (nextElement instanceof HTMLElement) {\n      getFirstFocusable(nextElement)?.focus();\n    } else if (prevElement instanceof HTMLElement) {\n      getFirstFocusable(prevElement)?.focus();\n    } else if (toggleButton instanceof HTMLElement) {\n      toggleButton.focus();\n    }\n  }, [removedItemIndex]);\n\n  return tokenListRef;\n}\n"]},"metadata":{},"sourceType":"module"}