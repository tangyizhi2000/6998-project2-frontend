{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect, useRef } from 'react';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport styles from './styles.css.js';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\nexport function SplitPanelContentBottom(_ref) {\n  let {\n    baseProps,\n    isOpen,\n    state,\n    transitioningElementRef,\n    splitPanelRef,\n    cappedSize,\n    header,\n    resizeHandle,\n    children,\n    appLayoutMaxWidth,\n    panelHeaderId,\n    onToggle\n  } = _ref;\n  const isRefresh = useVisualRefresh();\n  const {\n    bottomOffset,\n    leftOffset,\n    rightOffset,\n    disableContentPaddings,\n    contentWrapperPaddings,\n    reportHeaderHeight\n  } = useSplitPanelContext();\n  const transitionContentBottomRef = useMergeRefs(splitPanelRef || null, transitioningElementRef);\n  const isMobile = useMobile();\n  const headerRef = useRef(null);\n  useResizeObserver(headerRef, entry => reportHeaderHeight(entry.borderBoxHeight));\n  useEffect(() => {\n    // report empty height when unmounting the panel\n    return () => reportHeaderHeight(0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const centeredMaxWidthClasses = clsx({\n    [styles['pane-bottom-center-align']]: isRefresh,\n    [styles['pane-bottom-content-nav-padding']]: contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedNav,\n    [styles['pane-bottom-content-tools-padding']]: contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedTools\n  });\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root, styles.drawer, styles['position-bottom'], {\n      [styles['drawer-closed']]: !isOpen,\n      [styles['drawer-mobile']]: isMobile,\n      [styles['drawer-disable-content-paddings']]: disableContentPaddings,\n      [styles.animating]: isRefresh && (state === 'entering' || state === 'exiting'),\n      [styles.refresh]: isRefresh\n    }),\n    onClick: () => !isOpen && onToggle(),\n    style: {\n      bottom: bottomOffset,\n      left: leftOffset,\n      right: rightOffset,\n      height: isOpen ? cappedSize : undefined\n    },\n    ref: transitionContentBottomRef\n  }), isOpen && React.createElement(\"div\", {\n    className: styles['slider-wrapper-bottom']\n  }, resizeHandle), React.createElement(\"div\", {\n    className: styles['drawer-content-bottom'],\n    \"aria-labelledby\": panelHeaderId,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles['pane-header-wrapper-bottom'], centeredMaxWidthClasses),\n    ref: headerRef\n  }, header), React.createElement(\"div\", {\n    className: clsx(styles['content-bottom'], centeredMaxWidthClasses),\n    \"aria-hidden\": !isOpen\n  }, React.createElement(\"div\", {\n    className: clsx({\n      [styles['content-bottom-max-width']]: isRefresh\n    }),\n    style: appLayoutMaxWidth\n  }, children))));\n}","map":{"version":3,"mappings":"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","names":["clsx","React","useEffect","useRef","useMergeRefs","useMobile","styles","useSplitPanelContext","useVisualRefresh","useResizeObserver","SplitPanelContentBottom","baseProps","isOpen","state","transitioningElementRef","splitPanelRef","cappedSize","header","resizeHandle","children","appLayoutMaxWidth","panelHeaderId","onToggle","isRefresh","bottomOffset","leftOffset","rightOffset","disableContentPaddings","contentWrapperPaddings","reportHeaderHeight","transitionContentBottomRef","isMobile","headerRef","entry","borderBoxHeight","centeredMaxWidthClasses","closedNav","closedTools","className","root","drawer","animating","refresh","onClick","style","bottom","left","right","height","undefined","ref","role"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/split-panel/lib/default/split-panel/bottom.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect, useRef } from 'react';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { TransitionStatus } from '../internal/components/transition';\nimport { SplitPanelContentProps } from './interfaces';\nimport styles from './styles.css.js';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\n\ninterface SplitPanelContentBottomProps extends SplitPanelContentProps {\n  state: TransitionStatus;\n  transitioningElementRef: React.Ref<any>;\n  appLayoutMaxWidth: React.CSSProperties | undefined;\n}\n\nexport function SplitPanelContentBottom({\n  baseProps,\n  isOpen,\n  state,\n  transitioningElementRef,\n  splitPanelRef,\n  cappedSize,\n  header,\n  resizeHandle,\n  children,\n  appLayoutMaxWidth,\n  panelHeaderId,\n  onToggle,\n}: SplitPanelContentBottomProps) {\n  const isRefresh = useVisualRefresh();\n  const { bottomOffset, leftOffset, rightOffset, disableContentPaddings, contentWrapperPaddings, reportHeaderHeight } =\n    useSplitPanelContext();\n  const transitionContentBottomRef = useMergeRefs(splitPanelRef || null, transitioningElementRef);\n  const isMobile = useMobile();\n\n  const headerRef = useRef<HTMLDivElement>(null);\n  useResizeObserver(headerRef, entry => reportHeaderHeight(entry.borderBoxHeight));\n  useEffect(() => {\n    // report empty height when unmounting the panel\n    return () => reportHeaderHeight(0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const centeredMaxWidthClasses = clsx({\n    [styles['pane-bottom-center-align']]: isRefresh,\n    [styles['pane-bottom-content-nav-padding']]: contentWrapperPaddings?.closedNav,\n    [styles['pane-bottom-content-tools-padding']]: contentWrapperPaddings?.closedTools,\n  });\n\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.root, styles.drawer, styles['position-bottom'], {\n        [styles['drawer-closed']]: !isOpen,\n        [styles['drawer-mobile']]: isMobile,\n        [styles['drawer-disable-content-paddings']]: disableContentPaddings,\n        [styles.animating]: isRefresh && (state === 'entering' || state === 'exiting'),\n        [styles.refresh]: isRefresh,\n      })}\n      onClick={() => !isOpen && onToggle()}\n      style={{\n        bottom: bottomOffset,\n        left: leftOffset,\n        right: rightOffset,\n        height: isOpen ? cappedSize : undefined,\n      }}\n      ref={transitionContentBottomRef}\n    >\n      {isOpen && <div className={styles['slider-wrapper-bottom']}>{resizeHandle}</div>}\n      <div className={styles['drawer-content-bottom']} aria-labelledby={panelHeaderId} role=\"region\">\n        <div className={clsx(styles['pane-header-wrapper-bottom'], centeredMaxWidthClasses)} ref={headerRef}>\n          {header}\n        </div>\n        <div className={clsx(styles['content-bottom'], centeredMaxWidthClasses)} aria-hidden={!isOpen}>\n          <div className={clsx({ [styles['content-bottom-max-width']]: isRefresh })} style={appLayoutMaxWidth}>\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}