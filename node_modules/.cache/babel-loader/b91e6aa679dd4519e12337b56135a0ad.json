{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport ResizeHandler from './icons/resize-handler';\nimport PreferencesModal from './preferences-modal';\nimport { usePointerEvents } from '../app-layout/utils/use-pointer-events';\nimport { useKeyboardEvents } from '../app-layout/utils/use-keyboard-events';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { Transition } from '../internal/components/transition';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { SplitPanelContentSide } from './side';\nimport { SplitPanelContentBottom } from './bottom';\nimport { useInternalI18n } from '../i18n/context';\nexport default function SplitPanel(_a) {\n  var {\n      header,\n      children,\n      hidePreferencesButton = false,\n      closeBehavior = 'collapse',\n      i18nStrings\n    } = _a,\n    restProps = __rest(_a, [\"header\", \"children\", \"hidePreferencesButton\", \"closeBehavior\", \"i18nStrings\"]);\n  const isRefresh = useVisualRefresh();\n  const {\n    __internalRootRef\n  } = useBaseComponent('SplitPanel');\n  const {\n    position,\n    topOffset,\n    bottomOffset,\n    rightOffset,\n    contentWidthStyles,\n    isOpen,\n    isForcedPosition,\n    onPreferencesChange,\n    onResize,\n    onToggle,\n    size,\n    relativeSize,\n    setSplitPanelToggle,\n    refs\n  } = useSplitPanelContext();\n  const baseProps = getBaseProps(restProps);\n  const i18n = useInternalI18n('split-panel');\n  const [isPreferencesOpen, setPreferencesOpen] = useState(false);\n  const appLayoutMaxWidth = isRefresh && position === 'bottom' ? contentWidthStyles : undefined;\n  const openButtonAriaLabel = i18n('i18nStrings.openButtonAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.openButtonAriaLabel);\n  useEffect(() => {\n    setSplitPanelToggle({\n      displayed: closeBehavior === 'collapse',\n      ariaLabel: openButtonAriaLabel\n    });\n  }, [setSplitPanelToggle, openButtonAriaLabel, closeBehavior]);\n  const splitPanelRefObject = useRef(null);\n  const sizeControlProps = {\n    position,\n    panelRef: splitPanelRefObject,\n    handleRef: refs.slider,\n    onResize\n  };\n  const onSliderPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n  const wrappedChildren = React.createElement(AppLayoutContext.Provider, {\n    value: {\n      stickyOffsetTop: topOffset,\n      stickyOffsetBottom: bottomOffset\n    }\n  }, children);\n  const panelHeaderId = useUniqueId('split-panel-header');\n  const wrappedHeader = React.createElement(\"div\", {\n    className: styles.header,\n    style: appLayoutMaxWidth\n  }, React.createElement(\"h2\", {\n    className: styles['header-text'],\n    id: panelHeaderId\n  }, header), React.createElement(\"div\", {\n    className: styles['header-actions']\n  }, !hidePreferencesButton && isOpen && React.createElement(React.Fragment, null, React.createElement(InternalButton, {\n    className: styles['preferences-button'],\n    iconName: \"settings\",\n    variant: \"icon\",\n    onClick: () => setPreferencesOpen(true),\n    formAction: \"none\",\n    ariaLabel: i18n('i18nStrings.preferencesTitle', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesTitle),\n    ref: refs.preferences\n  }), React.createElement(\"span\", {\n    className: styles.divider\n  })), isOpen ? React.createElement(InternalButton, {\n    className: styles['close-button'],\n    iconName: isRefresh && closeBehavior === 'collapse' ? position === 'side' ? 'angle-right' : 'angle-down' : 'close',\n    variant: \"icon\",\n    onClick: onToggle,\n    formAction: \"none\",\n    ariaLabel: i18n('i18nStrings.closeButtonAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.closeButtonAriaLabel),\n    ariaExpanded: isOpen\n  }) : position === 'side' ? null : React.createElement(InternalButton, {\n    className: styles['open-button'],\n    iconName: \"angle-up\",\n    variant: \"icon\",\n    formAction: \"none\",\n    ariaLabel: i18n('i18nStrings.openButtonAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.openButtonAriaLabel),\n    ref: refs.toggle,\n    ariaExpanded: isOpen\n  })));\n  const resizeHandle = React.createElement(\"div\", {\n    ref: refs.slider,\n    role: \"slider\",\n    tabIndex: 0,\n    \"aria-label\": i18n('i18nStrings.resizeHandleAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleAriaLabel),\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": position === 'bottom' ? relativeSize : 100 - relativeSize,\n    className: clsx(styles.slider, styles[`slider-${position}`]),\n    onKeyDown: onKeyDown,\n    onPointerDown: onSliderPointerDown\n  }, React.createElement(ResizeHandler, {\n    className: clsx(styles['slider-icon'], styles[`slider-icon-${position}`])\n  }));\n  /*\n    This effect forces the browser to recalculate the layout\n    whenever the split panel might have moved.\n       This is needed as a workaround for a bug in Safari, which does\n    not automatically calculate the new position of the split panel\n    _content_ when the split panel moves.\n  */\n  useLayoutEffect(() => {\n    const root = __internalRootRef.current;\n    if (root) {\n      const property = 'transform';\n      const temporaryValue = 'translateZ(0)';\n      const valueBefore = root.style[property];\n      root.style[property] = temporaryValue;\n      // This line forces the browser to recalculate the layout\n      void root.offsetHeight;\n      root.style[property] = valueBefore;\n    }\n  }, [rightOffset, __internalRootRef]);\n  const mergedRef = useMergeRefs(splitPanelRefObject, __internalRootRef);\n  if (closeBehavior === 'hide' && !isOpen) {\n    return React.createElement(React.Fragment, null);\n  }\n  /**\n   * The AppLayout factor moved the circular buttons out of the\n   * SplitPanel and into the Tools component. This conditional\n   * is still needed for the early return to prevent execution\n   * of the following code.\n   */\n  if (isRefresh && !isOpen && position === 'side') {\n    return React.createElement(React.Fragment, null);\n  }\n  return React.createElement(Transition, {\n    in: isOpen !== null && isOpen !== void 0 ? isOpen : false\n  }, (state, transitioningElementRef) => React.createElement(React.Fragment, null, position === 'side' && React.createElement(SplitPanelContentSide, {\n    resizeHandle: resizeHandle,\n    baseProps: baseProps,\n    isOpen: isOpen,\n    splitPanelRef: mergedRef,\n    cappedSize: size,\n    onToggle: onToggle,\n    openButtonAriaLabel: i18n('i18nStrings.openButtonAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.openButtonAriaLabel),\n    toggleRef: refs.toggle,\n    header: wrappedHeader,\n    panelHeaderId: panelHeaderId\n  }, wrappedChildren), position === 'bottom' && React.createElement(SplitPanelContentBottom, {\n    resizeHandle: resizeHandle,\n    baseProps: baseProps,\n    isOpen: isOpen,\n    splitPanelRef: mergedRef,\n    cappedSize: size,\n    onToggle: onToggle,\n    header: wrappedHeader,\n    panelHeaderId: panelHeaderId,\n    state: state,\n    transitioningElementRef: transitioningElementRef,\n    appLayoutMaxWidth: appLayoutMaxWidth\n  }, wrappedChildren), isPreferencesOpen && React.createElement(PreferencesModal, {\n    visible: true,\n    preferences: {\n      position\n    },\n    disabledSidePosition: position === 'bottom' && isForcedPosition,\n    isRefresh: isRefresh,\n    i18nStrings: {\n      header: i18n('i18nStrings.preferencesTitle', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesTitle),\n      confirm: i18n('i18nStrings.preferencesConfirm', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesConfirm),\n      cancel: i18n('i18nStrings.preferencesCancel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesCancel),\n      positionLabel: i18n('i18nStrings.preferencesPositionLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionLabel),\n      positionDescription: i18n('i18nStrings.preferencesPositionDescription', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionDescription),\n      positionBottom: i18n('i18nStrings.preferencesPositionBottom', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionBottom),\n      positionSide: i18n('i18nStrings.preferencesPositionSide', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionSide)\n    },\n    onConfirm: preferences => {\n      onPreferencesChange(Object.assign({}, preferences));\n      setPreferencesOpen(false);\n    },\n    onDismiss: () => {\n      setPreferencesOpen(false);\n    }\n  })));\n}\napplyDisplayName(SplitPanel, 'SplitPanel');","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","useLayoutEffect","useRef","clsx","InternalButton","getBaseProps","useSplitPanelContext","applyDisplayName","ResizeHandler","PreferencesModal","usePointerEvents","useKeyboardEvents","styles","useBaseComponent","useMergeRefs","AppLayoutContext","Transition","useVisualRefresh","useUniqueId","SplitPanelContentSide","SplitPanelContentBottom","useInternalI18n","SplitPanel","_a","header","children","hidePreferencesButton","closeBehavior","i18nStrings","restProps","isRefresh","__internalRootRef","position","topOffset","bottomOffset","rightOffset","contentWidthStyles","isOpen","isForcedPosition","onPreferencesChange","onResize","onToggle","size","relativeSize","setSplitPanelToggle","refs","baseProps","i18n","isPreferencesOpen","setPreferencesOpen","appLayoutMaxWidth","undefined","openButtonAriaLabel","displayed","ariaLabel","splitPanelRefObject","sizeControlProps","panelRef","handleRef","slider","onSliderPointerDown","onKeyDown","wrappedChildren","Provider","value","stickyOffsetTop","stickyOffsetBottom","panelHeaderId","wrappedHeader","className","style","id","iconName","variant","onClick","formAction","preferencesTitle","ref","preferences","divider","closeButtonAriaLabel","ariaExpanded","toggle","resizeHandle","role","tabIndex","resizeHandleAriaLabel","onPointerDown","root","current","property","temporaryValue","valueBefore","offsetHeight","mergedRef","in","state","transitioningElementRef","splitPanelRef","cappedSize","toggleRef","visible","disabledSidePosition","confirm","preferencesConfirm","cancel","preferencesCancel","positionLabel","preferencesPositionLabel","positionDescription","preferencesPositionDescription","positionBottom","preferencesPositionBottom","positionSide","preferencesPositionSide","onConfirm","onDismiss"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/split-panel/lib/default/split-panel/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\n\nimport { SplitPanelProps } from './interfaces';\nimport ResizeHandler from './icons/resize-handler';\nimport PreferencesModal from './preferences-modal';\nimport { usePointerEvents } from '../app-layout/utils/use-pointer-events';\nimport { useKeyboardEvents } from '../app-layout/utils/use-keyboard-events';\nimport { SizeControlProps } from '../app-layout/utils/interfaces';\n\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { Transition } from '../internal/components/transition';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { SplitPanelContentSide } from './side';\nimport { SplitPanelContentBottom } from './bottom';\nimport { useInternalI18n } from '../i18n/context';\n\nexport { SplitPanelProps };\n\nexport default function SplitPanel({\n  header,\n  children,\n  hidePreferencesButton = false,\n  closeBehavior = 'collapse',\n  i18nStrings,\n  ...restProps\n}: SplitPanelProps) {\n  const isRefresh = useVisualRefresh();\n  const { __internalRootRef } = useBaseComponent('SplitPanel');\n  const {\n    position,\n    topOffset,\n    bottomOffset,\n    rightOffset,\n    contentWidthStyles,\n    isOpen,\n    isForcedPosition,\n    onPreferencesChange,\n    onResize,\n    onToggle,\n    size,\n    relativeSize,\n    setSplitPanelToggle,\n    refs,\n  } = useSplitPanelContext();\n  const baseProps = getBaseProps(restProps);\n  const i18n = useInternalI18n('split-panel');\n  const [isPreferencesOpen, setPreferencesOpen] = useState<boolean>(false);\n\n  const appLayoutMaxWidth = isRefresh && position === 'bottom' ? contentWidthStyles : undefined;\n\n  const openButtonAriaLabel = i18n('i18nStrings.openButtonAriaLabel', i18nStrings?.openButtonAriaLabel);\n  useEffect(() => {\n    setSplitPanelToggle({ displayed: closeBehavior === 'collapse', ariaLabel: openButtonAriaLabel });\n  }, [setSplitPanelToggle, openButtonAriaLabel, closeBehavior]);\n\n  const splitPanelRefObject = useRef<HTMLDivElement>(null);\n\n  const sizeControlProps: SizeControlProps = {\n    position,\n    panelRef: splitPanelRefObject,\n    handleRef: refs.slider,\n    onResize,\n  };\n  const onSliderPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n\n  const wrappedChildren = (\n    <AppLayoutContext.Provider\n      value={{\n        stickyOffsetTop: topOffset,\n        stickyOffsetBottom: bottomOffset,\n      }}\n    >\n      {children}\n    </AppLayoutContext.Provider>\n  );\n\n  const panelHeaderId = useUniqueId('split-panel-header');\n\n  const wrappedHeader = (\n    <div className={styles.header} style={appLayoutMaxWidth}>\n      <h2 className={styles['header-text']} id={panelHeaderId}>\n        {header}\n      </h2>\n      <div className={styles['header-actions']}>\n        {!hidePreferencesButton && isOpen && (\n          <>\n            <InternalButton\n              className={styles['preferences-button']}\n              iconName=\"settings\"\n              variant=\"icon\"\n              onClick={() => setPreferencesOpen(true)}\n              formAction=\"none\"\n              ariaLabel={i18n('i18nStrings.preferencesTitle', i18nStrings?.preferencesTitle)}\n              ref={refs.preferences}\n            />\n            <span className={styles.divider} />\n          </>\n        )}\n\n        {isOpen ? (\n          <InternalButton\n            className={styles['close-button']}\n            iconName={\n              isRefresh && closeBehavior === 'collapse' ? (position === 'side' ? 'angle-right' : 'angle-down') : 'close'\n            }\n            variant=\"icon\"\n            onClick={onToggle}\n            formAction=\"none\"\n            ariaLabel={i18n('i18nStrings.closeButtonAriaLabel', i18nStrings?.closeButtonAriaLabel)}\n            ariaExpanded={isOpen}\n          />\n        ) : position === 'side' ? null : (\n          <InternalButton\n            className={styles['open-button']}\n            iconName=\"angle-up\"\n            variant=\"icon\"\n            formAction=\"none\"\n            ariaLabel={i18n('i18nStrings.openButtonAriaLabel', i18nStrings?.openButtonAriaLabel)}\n            ref={refs.toggle}\n            ariaExpanded={isOpen}\n          />\n        )}\n      </div>\n    </div>\n  );\n\n  const resizeHandle = (\n    <div\n      ref={refs.slider}\n      role=\"slider\"\n      tabIndex={0}\n      aria-label={i18n('i18nStrings.resizeHandleAriaLabel', i18nStrings?.resizeHandleAriaLabel)}\n      aria-valuemax={100}\n      aria-valuemin={0}\n      // Allows us to use the logical left/right keys to move the slider left/right,\n      // but match aria keyboard behavior of using left/right to decrease/increase\n      // the slider value.\n      aria-valuenow={position === 'bottom' ? relativeSize : 100 - relativeSize}\n      className={clsx(styles.slider, styles[`slider-${position}`])}\n      onKeyDown={onKeyDown}\n      onPointerDown={onSliderPointerDown}\n    >\n      <ResizeHandler className={clsx(styles['slider-icon'], styles[`slider-icon-${position}`])} />\n    </div>\n  );\n\n  /*\n    This effect forces the browser to recalculate the layout\n    whenever the split panel might have moved.\n\n    This is needed as a workaround for a bug in Safari, which does\n    not automatically calculate the new position of the split panel\n    _content_ when the split panel moves.\n  */\n  useLayoutEffect(() => {\n    const root = __internalRootRef.current;\n\n    if (root) {\n      const property = 'transform';\n      const temporaryValue = 'translateZ(0)';\n\n      const valueBefore = root.style[property];\n      root.style[property] = temporaryValue;\n\n      // This line forces the browser to recalculate the layout\n      void root.offsetHeight;\n\n      root.style[property] = valueBefore;\n    }\n  }, [rightOffset, __internalRootRef]);\n\n  const mergedRef = useMergeRefs(splitPanelRefObject, __internalRootRef);\n\n  if (closeBehavior === 'hide' && !isOpen) {\n    return <></>;\n  }\n\n  /**\n   * The AppLayout factor moved the circular buttons out of the\n   * SplitPanel and into the Tools component. This conditional\n   * is still needed for the early return to prevent execution\n   * of the following code.\n   */\n  if (isRefresh && !isOpen && position === 'side') {\n    return <></>;\n  }\n\n  return (\n    <Transition in={isOpen ?? false}>\n      {(state, transitioningElementRef) => (\n        <>\n          {position === 'side' && (\n            <SplitPanelContentSide\n              resizeHandle={resizeHandle}\n              baseProps={baseProps}\n              isOpen={isOpen}\n              splitPanelRef={mergedRef}\n              cappedSize={size}\n              onToggle={onToggle}\n              openButtonAriaLabel={i18n('i18nStrings.openButtonAriaLabel', i18nStrings?.openButtonAriaLabel)}\n              toggleRef={refs.toggle}\n              header={wrappedHeader}\n              panelHeaderId={panelHeaderId}\n            >\n              {wrappedChildren}\n            </SplitPanelContentSide>\n          )}\n\n          {position === 'bottom' && (\n            <SplitPanelContentBottom\n              resizeHandle={resizeHandle}\n              baseProps={baseProps}\n              isOpen={isOpen}\n              splitPanelRef={mergedRef}\n              cappedSize={size}\n              onToggle={onToggle}\n              header={wrappedHeader}\n              panelHeaderId={panelHeaderId}\n              state={state}\n              transitioningElementRef={transitioningElementRef}\n              appLayoutMaxWidth={appLayoutMaxWidth}\n            >\n              {wrappedChildren}\n            </SplitPanelContentBottom>\n          )}\n          {isPreferencesOpen && (\n            <PreferencesModal\n              visible={true}\n              preferences={{ position }}\n              disabledSidePosition={position === 'bottom' && isForcedPosition}\n              isRefresh={isRefresh}\n              i18nStrings={{\n                header: i18n('i18nStrings.preferencesTitle', i18nStrings?.preferencesTitle),\n                confirm: i18n('i18nStrings.preferencesConfirm', i18nStrings?.preferencesConfirm),\n                cancel: i18n('i18nStrings.preferencesCancel', i18nStrings?.preferencesCancel),\n                positionLabel: i18n('i18nStrings.preferencesPositionLabel', i18nStrings?.preferencesPositionLabel),\n                positionDescription: i18n(\n                  'i18nStrings.preferencesPositionDescription',\n                  i18nStrings?.preferencesPositionDescription\n                ),\n                positionBottom: i18n('i18nStrings.preferencesPositionBottom', i18nStrings?.preferencesPositionBottom),\n                positionSide: i18n('i18nStrings.preferencesPositionSide', i18nStrings?.preferencesPositionSide),\n              }}\n              onConfirm={preferences => {\n                onPreferencesChange({ ...preferences });\n                setPreferencesOpen(false);\n              }}\n              onDismiss={() => {\n                setPreferencesOpen(false);\n              }}\n            />\n          )}\n        </>\n      )}\n    </Transition>\n  );\n}\n\napplyDisplayName(SplitPanel, 'SplitPanel');\n"]},"metadata":{},"sourceType":"module"}