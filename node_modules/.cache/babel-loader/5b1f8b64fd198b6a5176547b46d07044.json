{"ast":null,"code":"const SPACE_BETWEEN = 4;\nexport function formatTicks(_ref) {\n  let {\n    ticks,\n    scale,\n    getLabelSpace,\n    tickFormatter\n  } = _ref;\n  return ticks.map(tick => {\n    var _a;\n    const position = (_a = scale.d3Scale(tick)) !== null && _a !== void 0 ? _a : NaN;\n    const label = tickFormatter ? tickFormatter(tick) : tick.toString();\n    const lines = (label + '').split('\\n');\n    return {\n      position,\n      lines,\n      space: Math.max(...lines.map(getLabelSpace))\n    };\n  });\n}\nexport function getVisibleTicks(ticks, from, until) {\n  let balanceTicks = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  ticks = getTicksInRange(ticks, from, until);\n  return balanceTicks ? getReducedTicks(ticks) : removeIntersections(ticks);\n}\nfunction getTicksInRange(ticks, from, until) {\n  return ticks.filter(tick => from <= tick.position - tick.space / 2 && tick.position + tick.space / 2 <= until);\n}\nfunction getReducedTicks(ticks) {\n  const reduceLabelRatio = findReduceLabelRatio(ticks);\n  const reducedTicks = [];\n  for (let index = 0; index < ticks.length; index += reduceLabelRatio) {\n    reducedTicks.push(ticks[index]);\n  }\n  return reducedTicks;\n}\n// Returns a ratio such that all elements can be displayed with no intersections.\nfunction findReduceLabelRatio(ticks) {\n  let ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  if (ratio >= ticks.length) {\n    return ratio;\n  }\n  for (let i = ratio; i < ticks.length; i += ratio) {\n    if (hasIntersection(ticks[i - ratio], ticks[i])) {\n      return findReduceLabelRatio(ticks, ratio + 1);\n    }\n  }\n  return ratio;\n}\nfunction removeIntersections(ticks) {\n  const visibleTicks = [];\n  let prevTick = null;\n  for (const tick of ticks) {\n    if (!prevTick || !hasIntersection(prevTick, tick)) {\n      visibleTicks.push(tick);\n      prevTick = tick;\n    }\n  }\n  return visibleTicks;\n}\nfunction hasIntersection(a, b) {\n  const [left, right] = a.position < b.position ? [a, b] : [b, a];\n  const leftEdge = left.position + left.space / 2 + SPACE_BETWEEN;\n  const rightEdge = right.position - right.space / 2;\n  return leftEdge > rightEdge;\n}","map":{"version":3,"mappings":"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","names":["SPACE_BETWEEN","formatTicks","ticks","scale","getLabelSpace","tickFormatter","map","tick","position","d3Scale","NaN","label","toString","lines","split","space","Math","max","getVisibleTicks","from","until","balanceTicks","getTicksInRange","getReducedTicks","removeIntersections","filter","reduceLabelRatio","findReduceLabelRatio","reducedTicks","index","length","push","ratio","i","hasIntersection","visibleTicks","prevTick","a","b","left","right","leftEdge","rightEdge"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/components/cartesian-chart/lib/default/internal/components/cartesian-chart/label-utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ChartDataTypes } from './interfaces';\nimport { ChartScale, NumericChartScale } from './scales';\n\nconst SPACE_BETWEEN = 4;\n\nexport interface FormattedTick {\n  position: number;\n  space: number;\n  lines: string[];\n}\n\nexport function formatTicks({\n  ticks,\n  scale,\n  getLabelSpace,\n  tickFormatter,\n}: {\n  ticks: readonly ChartDataTypes[];\n  scale: ChartScale | NumericChartScale;\n  getLabelSpace: (label: string) => number;\n  tickFormatter?: (value: any) => string;\n}): FormattedTick[] {\n  return ticks.map(tick => {\n    const position = scale.d3Scale(tick as any) ?? NaN;\n    const label = tickFormatter ? tickFormatter(tick as any) : tick.toString();\n    const lines = (label + '').split('\\n');\n    return { position, lines, space: Math.max(...lines.map(getLabelSpace)) };\n  });\n}\n\nexport function getVisibleTicks(ticks: readonly FormattedTick[], from: number, until: number, balanceTicks = false) {\n  ticks = getTicksInRange(ticks, from, until);\n  return balanceTicks ? getReducedTicks(ticks) : removeIntersections(ticks);\n}\n\nfunction getTicksInRange(ticks: readonly FormattedTick[], from: number, until: number) {\n  return ticks.filter(tick => from <= tick.position - tick.space / 2 && tick.position + tick.space / 2 <= until);\n}\n\nfunction getReducedTicks(ticks: readonly FormattedTick[]): readonly FormattedTick[] {\n  const reduceLabelRatio = findReduceLabelRatio(ticks);\n\n  const reducedTicks = [];\n  for (let index = 0; index < ticks.length; index += reduceLabelRatio) {\n    reducedTicks.push(ticks[index]);\n  }\n  return reducedTicks;\n}\n\n// Returns a ratio such that all elements can be displayed with no intersections.\nfunction findReduceLabelRatio(ticks: readonly FormattedTick[], ratio = 1): number {\n  if (ratio >= ticks.length) {\n    return ratio;\n  }\n  for (let i = ratio; i < ticks.length; i += ratio) {\n    if (hasIntersection(ticks[i - ratio], ticks[i])) {\n      return findReduceLabelRatio(ticks, ratio + 1);\n    }\n  }\n  return ratio;\n}\n\nfunction removeIntersections(ticks: readonly FormattedTick[]) {\n  const visibleTicks = [];\n  let prevTick = null;\n  for (const tick of ticks) {\n    if (!prevTick || !hasIntersection(prevTick, tick)) {\n      visibleTicks.push(tick);\n      prevTick = tick;\n    }\n  }\n  return visibleTicks;\n}\n\nfunction hasIntersection(a: FormattedTick, b: FormattedTick) {\n  const [left, right] = a.position < b.position ? [a, b] : [b, a];\n  const leftEdge = left.position + left.space / 2 + SPACE_BETWEEN;\n  const rightEdge = right.position - right.space / 2;\n  return leftEdge > rightEdge;\n}\n"]},"metadata":{},"sourceType":"module"}