{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { InternalButton } from '../../button/internal';\nimport InternalIcon from '../../icon/internal';\nimport styles from './styles.css.js';\nexport var togglesConfig = {\n  navigation: {\n    TagName: 'nav',\n    iconName: 'menu',\n    getLabels: function getLabels() {\n      var labels = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        mainLabel: labels.navigation,\n        openLabel: labels.navigationToggle,\n        closeLabel: labels.navigationClose\n      };\n    }\n  },\n  tools: {\n    TagName: 'aside',\n    iconName: 'status-info',\n    getLabels: function getLabels() {\n      var labels = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        mainLabel: labels.tools,\n        openLabel: labels.toolsToggle,\n        closeLabel: labels.toolsClose\n      };\n    }\n  }\n};\nexport var ToggleButton = React.forwardRef(function (_ref, ref) {\n  var className = _ref.className,\n    ariaLabel = _ref.ariaLabel,\n    ariaExpanded = _ref.ariaExpanded,\n    ariaControls = _ref.ariaControls,\n    iconName = _ref.iconName,\n    iconSvg = _ref.iconSvg,\n    disabled = _ref.disabled,\n    testId = _ref.testId,\n    onClick = _ref.onClick,\n    badge = _ref.badge;\n  return React.createElement(\"button\", {\n    ref: ref,\n    className: clsx(className, styles['toggle-button']),\n    \"aria-label\": ariaLabel,\n    type: \"button\",\n    onClick: onClick,\n    disabled: disabled,\n    \"aria-expanded\": ariaExpanded,\n    \"aria-haspopup\": ariaExpanded ? undefined : true,\n    \"aria-controls\": ariaControls,\n    \"data-testid\": testId\n  }, React.createElement(InternalIcon, {\n    svg: iconSvg,\n    name: iconName,\n    badge: badge\n  }));\n});\nexport var CloseButton = React.forwardRef(function (_ref2, ref) {\n  var className = _ref2.className,\n    ariaLabel = _ref2.ariaLabel,\n    onClick = _ref2.onClick;\n  return React.createElement(\"span\", {\n    className: styles['close-button']\n  }, React.createElement(InternalButton, {\n    ref: ref,\n    className: className,\n    ariaLabel: ariaLabel,\n    variant: \"icon\",\n    formAction: \"none\",\n    iconName: \"close\",\n    onClick: onClick\n  }));\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,cAAc,QAAQ,uBAAuB;AACtD,OAAOC,YAAY,MAAM,qBAAqB;AAG9C,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,OAAO,IAAMC,aAAa,GAAG;EAC3BC,UAAU,EAAE;IACVC,OAAO,EAAE,KAAK;IACdC,QAAQ,EAAE,MAAM;IAChBC,SAAS,EAAE;MAAA,IAACC,6EAAgC,EAAE;MAAA,OAAM;QAClDC,SAAS,EAAED,MAAM,CAACJ,UAAU;QAC5BM,SAAS,EAAEF,MAAM,CAACG,gBAAgB;QAClCC,UAAU,EAAEJ,MAAM,CAACK;OACpB;IAAA;GACF;EACDC,KAAK,EAAE;IACLT,OAAO,EAAE,OAAO;IAChBC,QAAQ,EAAE,aAAa;IACvBC,SAAS,EAAE;MAAA,IAACC,6EAAgC,EAAE;MAAA,OAAM;QAClDC,SAAS,EAAED,MAAM,CAACM,KAAK;QACvBJ,SAAS,EAAEF,MAAM,CAACO,WAAW;QAC7BH,UAAU,EAAEJ,MAAM,CAACQ;OACpB;IAAA;;CAEK;AAEV,OAAO,IAAMC,YAAY,GAAGlB,KAAK,CAACmB,UAAU,CAC1C,gBAaEC,GAAiC,EAC/B;EAAA,IAZAC,SAAS,QAATA,SAAS;IACTC,SAAS,QAATA,SAAS;IACTC,YAAY,QAAZA,YAAY;IACZC,YAAY,QAAZA,YAAY;IACZjB,QAAQ,QAARA,QAAQ;IACRkB,OAAO,QAAPA,OAAO;IACPC,QAAQ,QAARA,QAAQ;IACRC,MAAM,QAANA,MAAM;IACNC,OAAO,QAAPA,OAAO;IACPC,KAAK,QAALA,KAAK;EAIP,OACE7B;IACEoB,GAAG,EAAEA,GAAmC;IACxCC,SAAS,EAAEtB,IAAI,CAACsB,SAAS,EAAElB,MAAM,CAAC,eAAe,CAAC,CAAC;IAAA,cACvCmB,SAAS;IACrBQ,IAAI,EAAC,QAAQ;IACbF,OAAO,EAAEA,OAAO;IAChBF,QAAQ,EAAEA,QAAQ;IAAA,iBACHH,YAAY;IAAA,iBACZA,YAAY,GAAGQ,SAAS,GAAG,IAAI;IAAA,iBAC/BP,YAAY;IAAA,eACdG;EAAM,GAEnB3B,oBAACE,YAAY;IAAC8B,GAAG,EAAEP,OAAO;IAAEQ,IAAI,EAAE1B,QAAQ;IAAEsB,KAAK,EAAEA;EAAK,EAAI,CACrD;AAEb,CAAC,CACF;AAQD,OAAO,IAAMK,WAAW,GAAGlC,KAAK,CAACmB,UAAU,CACzC,iBAAsDC,GAA+B,EAAI;EAAA,IAAtFC,SAAS,SAATA,SAAS;IAAEC,SAAS,SAATA,SAAS;IAAEM,OAAO,SAAPA,OAAO;EAC9B,OACE5B;IAAMqB,SAAS,EAAElB,MAAM,CAAC,cAAc;EAAC,GACrCH,oBAACC,cAAc;IACbmB,GAAG,EAAEA,GAAG;IACRC,SAAS,EAAEA,SAAS;IACpBC,SAAS,EAAEA,SAAS;IACpBa,OAAO,EAAC,MAAM;IACdC,UAAU,EAAC,MAAM;IACjB7B,QAAQ,EAAC,OAAO;IAChBqB,OAAO,EAAEA;EAAO,EAChB,CACG;AAEX,CAAC,CACF","names":["clsx","React","InternalButton","InternalIcon","styles","togglesConfig","navigation","TagName","iconName","getLabels","labels","mainLabel","openLabel","navigationToggle","closeLabel","navigationClose","tools","toolsToggle","toolsClose","ToggleButton","forwardRef","ref","className","ariaLabel","ariaExpanded","ariaControls","iconSvg","disabled","testId","onClick","badge","type","undefined","svg","name","CloseButton","variant","formAction"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/app-layout/toggles/lib/default/app-layout/toggles/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { ButtonProps } from '../../button/interfaces';\nimport { InternalButton } from '../../button/internal';\nimport InternalIcon from '../../icon/internal';\nimport { AppLayoutProps } from '../interfaces';\nimport { AppLayoutButtonProps } from './interfaces';\nimport styles from './styles.css.js';\n\nexport const togglesConfig = {\n  navigation: {\n    TagName: 'nav',\n    iconName: 'menu',\n    getLabels: (labels: AppLayoutProps.Labels = {}) => ({\n      mainLabel: labels.navigation,\n      openLabel: labels.navigationToggle,\n      closeLabel: labels.navigationClose,\n    }),\n  },\n  tools: {\n    TagName: 'aside',\n    iconName: 'status-info',\n    getLabels: (labels: AppLayoutProps.Labels = {}) => ({\n      mainLabel: labels.tools,\n      openLabel: labels.toolsToggle,\n      closeLabel: labels.toolsClose,\n    }),\n  },\n} as const;\n\nexport const ToggleButton = React.forwardRef(\n  (\n    {\n      className,\n      ariaLabel,\n      ariaExpanded,\n      ariaControls,\n      iconName,\n      iconSvg,\n      disabled,\n      testId,\n      onClick,\n      badge,\n    }: AppLayoutButtonProps,\n    ref: React.Ref<{ focus(): void }>\n  ) => {\n    return (\n      <button\n        ref={ref as React.Ref<HTMLButtonElement>}\n        className={clsx(className, styles['toggle-button'])}\n        aria-label={ariaLabel}\n        type=\"button\"\n        onClick={onClick}\n        disabled={disabled}\n        aria-expanded={ariaExpanded}\n        aria-haspopup={ariaExpanded ? undefined : true}\n        aria-controls={ariaControls}\n        data-testid={testId}\n      >\n        <InternalIcon svg={iconSvg} name={iconName} badge={badge} />\n      </button>\n    );\n  }\n);\n\ninterface CloseButtonProps {\n  className?: string;\n  ariaLabel: string | undefined;\n  onClick: () => void;\n}\n\nexport const CloseButton = React.forwardRef(\n  ({ className, ariaLabel, onClick }: CloseButtonProps, ref: React.Ref<ButtonProps.Ref>) => {\n    return (\n      <span className={styles['close-button']}>\n        <InternalButton\n          ref={ref}\n          className={className}\n          ariaLabel={ariaLabel}\n          variant=\"icon\"\n          formAction=\"none\"\n          iconName=\"close\"\n          onClick={onClick}\n        />\n      </span>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}