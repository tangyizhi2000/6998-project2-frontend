{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Icon from '../../icon/internal';\nimport { TableTdElement } from './td-element';\nimport { InlineEditor } from './inline-editor';\nimport LiveRegion from '../../internal/components/live-region/index.js';\nimport { useInternalI18n } from '../../i18n/context';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nconst submitHandlerFallback = () => {\n  throw new Error('The function `handleSubmit` is required for editable columns');\n};\nfunction TableCellEditable(_a) {\n  var _b, _c, _d;\n  var {\n      className,\n      item,\n      column,\n      isEditing,\n      onEditStart,\n      onEditEnd,\n      submitEdit,\n      ariaLabels,\n      isVisualRefresh,\n      successfulEdit = false\n    } = _a,\n    rest = __rest(_a, [\"className\", \"item\", \"column\", \"isEditing\", \"onEditStart\", \"onEditEnd\", \"submitEdit\", \"ariaLabels\", \"isVisualRefresh\", \"successfulEdit\"]);\n  const i18n = useInternalI18n('table');\n  const editActivateRef = useRef(null);\n  const tdNativeAttributes = {\n    'data-inline-editing-active': isEditing.toString()\n  };\n  const isFocusMoveNeededRef = useRef(false);\n  useEffect(() => {\n    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {\n      isFocusMoveNeededRef.current = false;\n      editActivateRef.current.focus();\n    }\n  }, [isEditing]);\n  // To improve the initial page render performance we only show the edit icon when necessary.\n  const [hasHover, setHasHover] = useState(false);\n  const [hasFocus, setHasFocus] = useState(false);\n  const showIcon = hasHover || hasFocus;\n  const prevSuccessfulEdit = usePrevious(successfulEdit);\n  const prevHasFocus = usePrevious(hasFocus);\n  const [showSuccessIcon, setShowSuccessIcon] = useState(false);\n  useEffect(() => {\n    // Hide the success icon after a successful edit, when cell loses focus.\n    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {\n      setShowSuccessIcon(false);\n    }\n    // Show success icon right after a successful edit, when `successfulEdit` switches to true.\n    if (successfulEdit && !prevSuccessfulEdit) {\n      setShowSuccessIcon(true);\n    }\n  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);\n  return React.createElement(TableTdElement, Object.assign({}, rest, {\n    nativeAttributes: tdNativeAttributes,\n    className: clsx(className, styles['body-cell-editable'], isEditing && styles['body-cell-edit-active'], showSuccessIcon && showIcon && styles['body-cell-has-success'], isVisualRefresh && styles['is-visual-refresh']),\n    onClick: !isEditing ? onEditStart : undefined,\n    onMouseEnter: () => setHasHover(true),\n    onMouseLeave: () => setHasHover(false)\n  }), isEditing ? React.createElement(InlineEditor, {\n    ariaLabels: ariaLabels,\n    column: column,\n    item: item,\n    onEditEnd: options => {\n      setShowSuccessIcon(false);\n      isFocusMoveNeededRef.current = options.refocusCell;\n      onEditEnd(options.cancelled);\n    },\n    submitEdit: submitEdit !== null && submitEdit !== void 0 ? submitEdit : submitHandlerFallback\n  }) : React.createElement(React.Fragment, null, column.cell(item), showSuccessIcon && showIcon && React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: styles['body-cell-success'],\n    \"aria-label\": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column),\n    role: \"img\",\n    onMouseDown: e => {\n      // Prevent the editor's Button blur event to be fired when clicking the success icon.\n      // This prevents unfocusing the button and triggers the `TableTdElement` onClick event which initiates the edit mode.\n      e.preventDefault();\n    }\n  }, React.createElement(Icon, {\n    name: \"status-positive\",\n    variant: \"success\"\n  })), React.createElement(LiveRegion, null, i18n('ariaLabels.successfulEditLabel', (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column)))), React.createElement(\"button\", {\n    className: styles['body-cell-editor'],\n    \"aria-label\": (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column, item),\n    ref: editActivateRef,\n    onFocus: () => setHasFocus(true),\n    onBlur: () => setHasFocus(false)\n  }, showIcon && React.createElement(Icon, {\n    name: \"edit\"\n  }))));\n}\nexport function TableBodyCell(_a) {\n  var {\n      isEditable\n    } = _a,\n    rest = __rest(_a, [\"isEditable\"]);\n  if (isEditable || rest.isEditing) {\n    return React.createElement(TableCellEditable, Object.assign({}, rest));\n  }\n  const {\n    column,\n    item\n  } = rest;\n  return React.createElement(TableTdElement, Object.assign({}, rest), column.cell(item));\n}","map":{"version":3,"mappings":"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","names":["clsx","styles","React","useEffect","useRef","useState","Icon","TableTdElement","InlineEditor","LiveRegion","useInternalI18n","usePrevious","submitHandlerFallback","Error","TableCellEditable","_a","className","item","column","isEditing","onEditStart","onEditEnd","submitEdit","ariaLabels","isVisualRefresh","successfulEdit","rest","i18n","editActivateRef","tdNativeAttributes","toString","isFocusMoveNeededRef","current","focus","hasHover","setHasHover","hasFocus","setHasFocus","showIcon","prevSuccessfulEdit","prevHasFocus","showSuccessIcon","setShowSuccessIcon","nativeAttributes","onClick","undefined","onMouseEnter","onMouseLeave","options","refocusCell","cancelled","cell","successfulEditLabel","role","onMouseDown","e","preventDefault","name","variant","activateEditLabel","ref","onFocus","onBlur","TableBodyCell","isEditable"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/table/body-cell/lib/default/table/body-cell/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Icon from '../../icon/internal';\nimport { TableProps } from '../interfaces';\nimport { TableTdElement, TableTdElementProps } from './td-element';\nimport { InlineEditor } from './inline-editor';\nimport LiveRegion from '../../internal/components/live-region/index.js';\nimport { useInternalI18n } from '../../i18n/context';\nimport { usePrevious } from '../../internal/hooks/use-previous';\n\nconst submitHandlerFallback = () => {\n  throw new Error('The function `handleSubmit` is required for editable columns');\n};\n\ninterface TableBodyCellProps<ItemType> extends TableTdElementProps {\n  column: TableProps.ColumnDefinition<ItemType>;\n  item: ItemType;\n  isEditing: boolean;\n  successfulEdit?: boolean;\n  onEditStart: () => void;\n  onEditEnd: (cancelled: boolean) => void;\n  submitEdit?: TableProps.SubmitEditFunction<ItemType>;\n  ariaLabels: TableProps['ariaLabels'];\n}\n\nfunction TableCellEditable<ItemType>({\n  className,\n  item,\n  column,\n  isEditing,\n  onEditStart,\n  onEditEnd,\n  submitEdit,\n  ariaLabels,\n  isVisualRefresh,\n  successfulEdit = false,\n  ...rest\n}: TableBodyCellProps<ItemType>) {\n  const i18n = useInternalI18n('table');\n  const editActivateRef = useRef<HTMLButtonElement>(null);\n  const tdNativeAttributes = {\n    'data-inline-editing-active': isEditing.toString(),\n  };\n  const isFocusMoveNeededRef = useRef(false);\n\n  useEffect(() => {\n    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {\n      isFocusMoveNeededRef.current = false;\n      editActivateRef.current.focus();\n    }\n  }, [isEditing]);\n  // To improve the initial page render performance we only show the edit icon when necessary.\n  const [hasHover, setHasHover] = useState(false);\n  const [hasFocus, setHasFocus] = useState(false);\n  const showIcon = hasHover || hasFocus;\n\n  const prevSuccessfulEdit = usePrevious(successfulEdit);\n  const prevHasFocus = usePrevious(hasFocus);\n  const [showSuccessIcon, setShowSuccessIcon] = useState(false);\n\n  useEffect(() => {\n    // Hide the success icon after a successful edit, when cell loses focus.\n    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {\n      setShowSuccessIcon(false);\n    }\n    // Show success icon right after a successful edit, when `successfulEdit` switches to true.\n    if (successfulEdit && !prevSuccessfulEdit) {\n      setShowSuccessIcon(true);\n    }\n  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);\n\n  return (\n    <TableTdElement\n      {...rest}\n      nativeAttributes={tdNativeAttributes as TableTdElementProps['nativeAttributes']}\n      className={clsx(\n        className,\n        styles['body-cell-editable'],\n        isEditing && styles['body-cell-edit-active'],\n        showSuccessIcon && showIcon && styles['body-cell-has-success'],\n        isVisualRefresh && styles['is-visual-refresh']\n      )}\n      onClick={!isEditing ? onEditStart : undefined}\n      onMouseEnter={() => setHasHover(true)}\n      onMouseLeave={() => setHasHover(false)}\n    >\n      {isEditing ? (\n        <InlineEditor\n          ariaLabels={ariaLabels}\n          column={column}\n          item={item}\n          onEditEnd={options => {\n            setShowSuccessIcon(false);\n            isFocusMoveNeededRef.current = options.refocusCell;\n            onEditEnd(options.cancelled);\n          }}\n          submitEdit={submitEdit ?? submitHandlerFallback}\n        />\n      ) : (\n        <>\n          {column.cell(item)}\n          {showSuccessIcon && showIcon && (\n            <>\n              <span\n                className={styles['body-cell-success']}\n                aria-label={ariaLabels?.successfulEditLabel?.(column)}\n                role=\"img\"\n                onMouseDown={e => {\n                  // Prevent the editor's Button blur event to be fired when clicking the success icon.\n                  // This prevents unfocusing the button and triggers the `TableTdElement` onClick event which initiates the edit mode.\n                  e.preventDefault();\n                }}\n              >\n                <Icon name=\"status-positive\" variant=\"success\" />\n              </span>\n              <LiveRegion>\n                {i18n('ariaLabels.successfulEditLabel', ariaLabels?.successfulEditLabel?.(column))}\n              </LiveRegion>\n            </>\n          )}\n          <button\n            className={styles['body-cell-editor']}\n            aria-label={ariaLabels?.activateEditLabel?.(column, item)}\n            ref={editActivateRef}\n            onFocus={() => setHasFocus(true)}\n            onBlur={() => setHasFocus(false)}\n          >\n            {showIcon && <Icon name=\"edit\" />}\n          </button>\n        </>\n      )}\n    </TableTdElement>\n  );\n}\n\nexport function TableBodyCell<ItemType>({\n  isEditable,\n  ...rest\n}: TableBodyCellProps<ItemType> & { isEditable: boolean }) {\n  if (isEditable || rest.isEditing) {\n    return <TableCellEditable {...rest} />;\n  }\n  const { column, item } = rest;\n  return <TableTdElement {...rest}>{column.cell(item)}</TableTdElement>;\n}\n"]},"metadata":{},"sourceType":"module"}