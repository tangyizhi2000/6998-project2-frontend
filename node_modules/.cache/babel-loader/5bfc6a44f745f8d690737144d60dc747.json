{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useLayoutEffect, useState } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nexport default class AsyncStore {\n  constructor(state) {\n    this._listeners = [];\n    this._state = state;\n  }\n  get() {\n    return this._state;\n  }\n  set(cb) {\n    const prevState = this._state;\n    const newState = cb(prevState);\n    this._state = newState;\n    unstable_batchedUpdates(() => {\n      for (const [selector, listener] of this._listeners) {\n        if (selector(prevState) !== selector(newState)) {\n          listener(newState, prevState);\n        }\n      }\n    });\n  }\n  subscribe(selector, listener) {\n    this._listeners.push([selector, listener]);\n    return () => this.unsubscribe(listener);\n  }\n  unsubscribe(listener) {\n    for (let index = 0; index < this._listeners.length; index++) {\n      const [, storedListener] = this._listeners[index];\n      if (storedListener === listener) {\n        this._listeners.splice(index, 1);\n        break;\n      }\n    }\n  }\n}\nexport function useReaction(store, selector, effect) {\n  useLayoutEffect(() => {\n    const unsubscribe = store.subscribe(selector, (newState, prevState) => effect(selector(newState), selector(prevState)));\n    return unsubscribe;\n  },\n  // ignoring selector and effect as they are expected to stay constant\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [store]);\n}\nexport function useSelector(store, selector) {\n  const [state, setState] = useState(selector(store.get()));\n  useReaction(store, selector, newState => {\n    setState(newState);\n  });\n  // When store changes we need the state to be updated synchronously to avoid inconsistencies.\n  const prevStore = usePrevious(store);\n  if (prevStore !== null && prevStore !== store) {\n    return selector(store.get());\n  }\n  return state;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,eAAe,EAAEC,QAAQ,QAAQ,OAAO;AACjD,SAASC,uBAAuB,QAAQ,WAAW;AACnD,SAASC,WAAW,QAAQ,mCAAmC;AAW/D,eAAc,MAAOC,UAAU;EAI7BC,YAAYC,KAAQ;IAFpB,eAAU,GAAwC,EAAE;IAGlD,IAAI,CAACC,MAAM,GAAGD,KAAK;EACrB;EAEAE,GAAG;IACD,OAAO,IAAI,CAACD,MAAM;EACpB;EAEAE,GAAG,CAACC,EAAmB;IACrB,MAAMC,SAAS,GAAG,IAAI,CAACJ,MAAM;IAC7B,MAAMK,QAAQ,GAAGF,EAAE,CAACC,SAAS,CAAC;IAE9B,IAAI,CAACJ,MAAM,GAAGK,QAAQ;IAEtBV,uBAAuB,CAAC,MAAK;MAC3B,KAAK,MAAM,CAACW,QAAQ,EAAEC,QAAQ,CAAC,IAAI,IAAI,CAACC,UAAU,EAAE;QAClD,IAAIF,QAAQ,CAACF,SAAS,CAAC,KAAKE,QAAQ,CAACD,QAAQ,CAAC,EAAE;UAC9CE,QAAQ,CAACF,QAAQ,EAAED,SAAS,CAAC;;;IAGnC,CAAC,CAAC;EACJ;EAEAK,SAAS,CAAIH,QAAwB,EAAEC,QAAqB;IAC1D,IAAI,CAACC,UAAU,CAACE,IAAI,CAAC,CAACJ,QAAQ,EAAEC,QAAQ,CAAC,CAAC;IAE1C,OAAO,MAAM,IAAI,CAACI,WAAW,CAACJ,QAAQ,CAAC;EACzC;EAEAI,WAAW,CAACJ,QAAuB;IACjC,KAAK,IAAIK,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACJ,UAAU,CAACK,MAAM,EAAED,KAAK,EAAE,EAAE;MAC3D,MAAM,GAAGE,cAAc,CAAC,GAAG,IAAI,CAACN,UAAU,CAACI,KAAK,CAAC;MAEjD,IAAIE,cAAc,KAAKP,QAAQ,EAAE;QAC/B,IAAI,CAACC,UAAU,CAACO,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;QAChC;;;EAGN;;AAGF,OAAM,SAAUI,WAAW,CAAOC,KAA4B,EAAEX,QAAwB,EAAEY,MAAmB;EAC3GzB,eAAe,CACb,MAAK;IACH,MAAMkB,WAAW,GAAGM,KAAK,CAACR,SAAS,CAACH,QAAQ,EAAE,CAACD,QAAQ,EAAED,SAAS,KAChEc,MAAM,CAACZ,QAAQ,CAACD,QAAQ,CAAC,EAAEC,QAAQ,CAACF,SAAS,CAAC,CAAC,CAChD;IACD,OAAOO,WAAW;EACpB,CAAC;EACD;EACA;EACA,CAACM,KAAK,CAAC,CACR;AACH;AAEA,OAAM,SAAUE,WAAW,CAAOF,KAA4B,EAAEX,QAAwB;EACtF,MAAM,CAACP,KAAK,EAAEqB,QAAQ,CAAC,GAAG1B,QAAQ,CAAIY,QAAQ,CAACW,KAAK,CAAChB,GAAG,EAAE,CAAC,CAAC;EAE5De,WAAW,CAACC,KAAK,EAAEX,QAAQ,EAAED,QAAQ,IAAG;IACtCe,QAAQ,CAACf,QAAQ,CAAC;EACpB,CAAC,CAAC;EAEF;EACA,MAAMgB,SAAS,GAAGzB,WAAW,CAACqB,KAAK,CAAC;EACpC,IAAII,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAKJ,KAAK,EAAE;IAC7C,OAAOX,QAAQ,CAACW,KAAK,CAAChB,GAAG,EAAE,CAAC;;EAG9B,OAAOF,KAAK;AACd","names":["useLayoutEffect","useState","unstable_batchedUpdates","usePrevious","AsyncStore","constructor","state","_state","get","set","cb","prevState","newState","selector","listener","_listeners","subscribe","push","unsubscribe","index","length","storedListener","splice","useReaction","store","effect","useSelector","setState","prevStore"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/area-chart/async-store/lib/default/area-chart/async-store/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useLayoutEffect, useState } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { usePrevious } from '../../internal/hooks/use-previous';\n\ntype Selector<S, R> = (state: S) => R;\ntype Listener<S> = (state: S, prevState: S) => any;\n\nexport interface ReadonlyAsyncStore<S> {\n  get(): S;\n  subscribe<R>(selector: Selector<S, R>, listener: Listener<S>): () => void;\n  unsubscribe(listener: Listener<any>): void;\n}\n\nexport default class AsyncStore<S> implements ReadonlyAsyncStore<S> {\n  _state: S;\n  _listeners: [Selector<S, any>, Listener<any>][] = [];\n\n  constructor(state: S) {\n    this._state = state;\n  }\n\n  get(): S {\n    return this._state;\n  }\n\n  set(cb: (state: S) => S): void {\n    const prevState = this._state;\n    const newState = cb(prevState);\n\n    this._state = newState;\n\n    unstable_batchedUpdates(() => {\n      for (const [selector, listener] of this._listeners) {\n        if (selector(prevState) !== selector(newState)) {\n          listener(newState, prevState);\n        }\n      }\n    });\n  }\n\n  subscribe<R>(selector: Selector<S, R>, listener: Listener<S>): () => void {\n    this._listeners.push([selector, listener]);\n\n    return () => this.unsubscribe(listener);\n  }\n\n  unsubscribe(listener: Listener<any>): void {\n    for (let index = 0; index < this._listeners.length; index++) {\n      const [, storedListener] = this._listeners[index];\n\n      if (storedListener === listener) {\n        this._listeners.splice(index, 1);\n        break;\n      }\n    }\n  }\n}\n\nexport function useReaction<S, R>(store: ReadonlyAsyncStore<S>, selector: Selector<S, R>, effect: Listener<R>): void {\n  useLayoutEffect(\n    () => {\n      const unsubscribe = store.subscribe(selector, (newState, prevState) =>\n        effect(selector(newState), selector(prevState))\n      );\n      return unsubscribe;\n    },\n    // ignoring selector and effect as they are expected to stay constant\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [store]\n  );\n}\n\nexport function useSelector<S, R>(store: ReadonlyAsyncStore<S>, selector: Selector<S, R>): R {\n  const [state, setState] = useState<R>(selector(store.get()));\n\n  useReaction(store, selector, newState => {\n    setState(newState);\n  });\n\n  // When store changes we need the state to be updated synchronously to avoid inconsistencies.\n  const prevStore = usePrevious(store);\n  if (prevStore !== null && prevStore !== store) {\n    return selector(store.get());\n  }\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}