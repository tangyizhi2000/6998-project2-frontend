{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport InternalAlert from './internal';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { FunnelMetrics } from '../internal/analytics';\nimport { useFunnel, useFunnelStep, useFunnelSubStep } from '../internal/analytics/hooks/use-funnel';\nimport { getNameFromSelector, getSubStepAllSelector } from '../internal/analytics/selectors';\nconst Alert = React.forwardRef((_a, ref) => {\n  var {\n      type = 'info',\n      visible = true\n    } = _a,\n    props = __rest(_a, [\"type\", \"visible\"]);\n  const baseComponentProps = useBaseComponent('Alert');\n  const {\n    funnelInteractionId,\n    submissionAttempt,\n    funnelState,\n    errorCount\n  } = useFunnel();\n  const {\n    stepNumber,\n    stepNameSelector\n  } = useFunnelStep();\n  const {\n    subStepSelector,\n    subStepNameSelector\n  } = useFunnelSubStep();\n  useEffect(() => {\n    var _a, _b, _c;\n    if (funnelInteractionId && visible && type === 'error' && funnelState.current !== 'complete') {\n      const stepName = getNameFromSelector(stepNameSelector);\n      const subStepName = getNameFromSelector(subStepNameSelector);\n      errorCount.current++;\n      // We don't want to report an error if it is hidden, e.g. inside an Expandable Section.\n      const errorIsVisible = ((_c = (_b = (_a = baseComponentProps.__internalRootRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0) > 0;\n      if (errorIsVisible) {\n        if (subStepSelector) {\n          FunnelMetrics.funnelSubStepError({\n            funnelInteractionId,\n            subStepSelector,\n            subStepName,\n            subStepNameSelector,\n            stepNumber,\n            stepName,\n            stepNameSelector,\n            subStepAllSelector: getSubStepAllSelector()\n          });\n        } else {\n          FunnelMetrics.funnelError({\n            funnelInteractionId\n          });\n        }\n      }\n      return () => {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        errorCount.current--;\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [funnelInteractionId, visible, submissionAttempt, errorCount]);\n  return React.createElement(InternalAlert, Object.assign({\n    type: type,\n    visible: visible\n  }, props, baseComponentProps, {\n    ref: ref\n  }));\n});\napplyDisplayName(Alert, 'Alert');\nexport default Alert;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,gBAAgB,QAAQ,sCAAsC;AAEvE,OAAOC,aAAa,MAAM,YAAY;AACtC,OAAOC,gBAAgB,MAAM,sCAAsC;AACnE,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,SAAS,EAAEC,aAAa,EAAEC,gBAAgB,QAAQ,wCAAwC;AACnG,SAASC,mBAAmB,EAAEC,qBAAqB,QAAQ,iCAAiC;AAI5F,MAAMC,KAAK,GAAGX,KAAK,CAACY,UAAU,CAC5B,CAACC,EAAuD,EAAEC,GAA8B,KAAI;MAA3F;MAAEC,IAAI,GAAG,MAAM;MAAEC,OAAO,GAAG;IAAI,MAAwB;IAAnBC,KAAK,cAAzC,mBAA2C,CAAF;EACxC,MAAMC,kBAAkB,GAAGd,gBAAgB,CAAC,OAAO,CAAC;EAEpD,MAAM;IAAEe,mBAAmB;IAAEC,iBAAiB;IAAEC,WAAW;IAAEC;EAAU,CAAE,GAAGhB,SAAS,EAAE;EACvF,MAAM;IAAEiB,UAAU;IAAEC;EAAgB,CAAE,GAAGjB,aAAa,EAAE;EACxD,MAAM;IAAEkB,eAAe;IAAEC;EAAmB,CAAE,GAAGlB,gBAAgB,EAAE;EAEnEP,SAAS,CAAC,MAAK;;IACb,IAAIkB,mBAAmB,IAAIH,OAAO,IAAID,IAAI,KAAK,OAAO,IAAIM,WAAW,CAACM,OAAO,KAAK,UAAU,EAAE;MAC5F,MAAMC,QAAQ,GAAGnB,mBAAmB,CAACe,gBAAgB,CAAC;MACtD,MAAMK,WAAW,GAAGpB,mBAAmB,CAACiB,mBAAmB,CAAC;MAE5DJ,UAAU,CAACK,OAAO,EAAE;MAEpB;MACA,MAAMG,cAAc,GAAG,CAAC,oCAAkB,CAACC,iBAAiB,CAACJ,OAAO,0CAAEK,qBAAqB,EAAE,0CAAEC,KAAK,mCAAI,CAAC,IAAI,CAAC;MAE9G,IAAIH,cAAc,EAAE;QAClB,IAAIL,eAAe,EAAE;UACnBpB,aAAa,CAAC6B,kBAAkB,CAAC;YAC/Bf,mBAAmB;YACnBM,eAAe;YACfI,WAAW;YACXH,mBAAmB;YACnBH,UAAU;YACVK,QAAQ;YACRJ,gBAAgB;YAChBW,kBAAkB,EAAEzB,qBAAqB;WAC1C,CAAC;SACH,MAAM;UACLL,aAAa,CAAC+B,WAAW,CAAC;YACxBjB;WACD,CAAC;;;MAIN,OAAO,MAAK;QACV;QACAG,UAAU,CAACK,OAAO,EAAE;MACtB,CAAC;;IAGH;EACF,CAAC,EAAE,CAACR,mBAAmB,EAAEH,OAAO,EAAEI,iBAAiB,EAAEE,UAAU,CAAC,CAAC;EAEjE,OAAOtB,oBAACG,aAAa;IAACY,IAAI,EAAEA,IAAI;IAAEC,OAAO,EAAEA;EAAO,GAAMC,KAAK,EAAMC,kBAAkB;IAAEJ,GAAG,EAAEA;EAAG,GAAI;AACrG,CAAC,CACF;AAEDZ,gBAAgB,CAACS,KAAK,EAAE,OAAO,CAAC;AAChC,eAAeA,KAAK","names":["React","useEffect","applyDisplayName","InternalAlert","useBaseComponent","FunnelMetrics","useFunnel","useFunnelStep","useFunnelSubStep","getNameFromSelector","getSubStepAllSelector","Alert","forwardRef","_a","ref","type","visible","props","baseComponentProps","funnelInteractionId","submissionAttempt","funnelState","errorCount","stepNumber","stepNameSelector","subStepSelector","subStepNameSelector","current","stepName","subStepName","errorIsVisible","__internalRootRef","getBoundingClientRect","width","funnelSubStepError","subStepAllSelector","funnelError"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/alert/lib/default/alert/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { AlertProps } from './interfaces';\nimport InternalAlert from './internal';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { FunnelMetrics } from '../internal/analytics';\nimport { useFunnel, useFunnelStep, useFunnelSubStep } from '../internal/analytics/hooks/use-funnel';\nimport { getNameFromSelector, getSubStepAllSelector } from '../internal/analytics/selectors';\n\nexport { AlertProps };\n\nconst Alert = React.forwardRef(\n  ({ type = 'info', visible = true, ...props }: AlertProps, ref: React.Ref<AlertProps.Ref>) => {\n    const baseComponentProps = useBaseComponent('Alert');\n\n    const { funnelInteractionId, submissionAttempt, funnelState, errorCount } = useFunnel();\n    const { stepNumber, stepNameSelector } = useFunnelStep();\n    const { subStepSelector, subStepNameSelector } = useFunnelSubStep();\n\n    useEffect(() => {\n      if (funnelInteractionId && visible && type === 'error' && funnelState.current !== 'complete') {\n        const stepName = getNameFromSelector(stepNameSelector);\n        const subStepName = getNameFromSelector(subStepNameSelector);\n\n        errorCount.current++;\n\n        // We don't want to report an error if it is hidden, e.g. inside an Expandable Section.\n        const errorIsVisible = (baseComponentProps.__internalRootRef.current?.getBoundingClientRect()?.width ?? 0) > 0;\n\n        if (errorIsVisible) {\n          if (subStepSelector) {\n            FunnelMetrics.funnelSubStepError({\n              funnelInteractionId,\n              subStepSelector,\n              subStepName,\n              subStepNameSelector,\n              stepNumber,\n              stepName,\n              stepNameSelector,\n              subStepAllSelector: getSubStepAllSelector(),\n            });\n          } else {\n            FunnelMetrics.funnelError({\n              funnelInteractionId,\n            });\n          }\n        }\n\n        return () => {\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          errorCount.current--;\n        };\n      }\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [funnelInteractionId, visible, submissionAttempt, errorCount]);\n\n    return <InternalAlert type={type} visible={visible} {...props} {...baseComponentProps} ref={ref} />;\n  }\n);\n\napplyDisplayName(Alert, 'Alert');\nexport default Alert;\n"]},"metadata":{},"sourceType":"module"}