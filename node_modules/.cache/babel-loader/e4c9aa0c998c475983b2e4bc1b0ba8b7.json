{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useState, useRef, useEffect } from 'react';\nimport InternalBox from '../box/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { S3InContext } from './s3-in-context';\nimport { S3Modal } from './s3-modal';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nimport { useFormFieldContext } from '../contexts/form-field';\nvar S3ResourceSelector = React.forwardRef(function (_a, ref) {\n  var i18nStrings = _a.i18nStrings,\n    inputPlaceholder = _a.inputPlaceholder,\n    alert = _a.alert,\n    resource = _a.resource,\n    viewHref = _a.viewHref,\n    invalid = _a.invalid,\n    _a$selectableItemsTyp = _a.selectableItemsTypes,\n    selectableItemsTypes = _a$selectableItemsTyp === void 0 ? [] : _a$selectableItemsTyp,\n    inputAriaDescribedby = _a.inputAriaDescribedby,\n    _a$bucketsVisibleColu = _a.bucketsVisibleColumns,\n    bucketsVisibleColumns = _a$bucketsVisibleColu === void 0 ? ['Name', 'CreationDate'] : _a$bucketsVisibleColu,\n    bucketsIsItemDisabled = _a.bucketsIsItemDisabled,\n    fetchBuckets = _a.fetchBuckets,\n    fetchObjects = _a.fetchObjects,\n    _a$objectsVisibleColu = _a.objectsVisibleColumns,\n    objectsVisibleColumns = _a$objectsVisibleColu === void 0 ? ['Key', 'LastModified', 'Size'] : _a$objectsVisibleColu,\n    objectsIsItemDisabled = _a.objectsIsItemDisabled,\n    fetchVersions = _a.fetchVersions,\n    _a$versionsVisibleCol = _a.versionsVisibleColumns,\n    versionsVisibleColumns = _a$versionsVisibleCol === void 0 ? ['ID', 'LastModified', 'Size'] : _a$versionsVisibleCol,\n    versionsIsItemDisabled = _a.versionsIsItemDisabled,\n    _onChange = _a.onChange,\n    ariaLabel = _a.ariaLabel,\n    rest = __rest(_a, [\"i18nStrings\", \"inputPlaceholder\", \"alert\", \"resource\", \"viewHref\", \"invalid\", \"selectableItemsTypes\", \"inputAriaDescribedby\", \"bucketsVisibleColumns\", \"bucketsIsItemDisabled\", \"fetchBuckets\", \"fetchObjects\", \"objectsVisibleColumns\", \"objectsIsItemDisabled\", \"fetchVersions\", \"versionsVisibleColumns\", \"versionsIsItemDisabled\", \"onChange\", \"ariaLabel\"]);\n  checkSafeUrl('S3ResourceSelector', viewHref);\n  var _useBaseComponent = useBaseComponent('S3ResourceSelector'),\n    __internalRootRef = _useBaseComponent.__internalRootRef;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    modalOpen = _useState2[0],\n    setModalOpen = _useState2[1];\n  var inContextRef = useRef(null);\n  var modalWasSubmitted = useRef(false);\n  useForwardFocus(ref, inContextRef);\n  var _useFormFieldContext = useFormFieldContext(rest),\n    ariaLabelledby = _useFormFieldContext.ariaLabelledby,\n    ariaDescribedby = _useFormFieldContext.ariaDescribedby;\n  useEffect(function () {\n    var _a;\n    // Focus uriInput only when modal was submitted.\n    // When it was dismissed, the focus naturally goes to previously focused element (browse button)\n    if (!modalOpen && modalWasSubmitted.current) {\n      modalWasSubmitted.current = false;\n      (_a = inContextRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [modalOpen]);\n  var baseProps = getBaseProps(rest);\n  var modalProps = {\n    alert: alert,\n    i18nStrings: i18nStrings,\n    fetchBuckets: fetchBuckets,\n    selectableItemsTypes: selectableItemsTypes,\n    bucketsVisibleColumns: bucketsVisibleColumns,\n    bucketsIsItemDisabled: bucketsIsItemDisabled,\n    fetchObjects: fetchObjects,\n    objectsVisibleColumns: objectsVisibleColumns,\n    objectsIsItemDisabled: objectsIsItemDisabled,\n    fetchVersions: fetchVersions,\n    versionsVisibleColumns: versionsVisibleColumns,\n    versionsIsItemDisabled: versionsIsItemDisabled,\n    onSubmit: function onSubmit(resource) {\n      fireNonCancelableEvent(_onChange, {\n        resource: resource\n      });\n      setModalOpen(false);\n      modalWasSubmitted.current = true;\n    },\n    onDismiss: function onDismiss() {\n      return setModalOpen(false);\n    }\n  };\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: __internalRootRef,\n    role: \"group\",\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-label\": ariaLabel\n  }), React.createElement(S3InContext, {\n    ref: inContextRef,\n    selectableItemsTypes: selectableItemsTypes,\n    i18nStrings: i18nStrings,\n    inputPlaceholder: inputPlaceholder,\n    resource: resource,\n    viewHref: viewHref,\n    invalid: invalid,\n    inputAriaDescribedby: inputAriaDescribedby,\n    fetchVersions: fetchVersions,\n    onBrowse: function onBrowse() {\n      return setModalOpen(true);\n    },\n    onChange: function onChange(resource, errorText) {\n      return fireNonCancelableEvent(_onChange, {\n        resource: resource,\n        errorText: errorText\n      });\n    }\n  }), !modalOpen && alert && React.createElement(InternalBox, {\n    className: styles.alert,\n    margin: {\n      top: 's'\n    }\n  }, alert), modalOpen && React.createElement(S3Modal, Object.assign({}, modalProps)));\n});\napplyDisplayName(S3ResourceSelector, 'S3ResourceSelector');\nexport default S3ResourceSelector;","map":{"version":3,"mappings":"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","names":["clsx","React","useState","useRef","useEffect","InternalBox","getBaseProps","fireNonCancelableEvent","useForwardFocus","applyDisplayName","S3InContext","S3Modal","styles","useBaseComponent","checkSafeUrl","useFormFieldContext","S3ResourceSelector","forwardRef","_a","ref","i18nStrings","inputPlaceholder","alert","resource","viewHref","invalid","selectableItemsTypes","inputAriaDescribedby","bucketsVisibleColumns","bucketsIsItemDisabled","fetchBuckets","fetchObjects","objectsVisibleColumns","objectsIsItemDisabled","fetchVersions","versionsVisibleColumns","versionsIsItemDisabled","onChange","ariaLabel","rest","__internalRootRef","modalOpen","setModalOpen","inContextRef","modalWasSubmitted","ariaLabelledby","ariaDescribedby","current","focus","baseProps","modalProps","onSubmit","onDismiss","className","root","role","onBrowse","errorText","margin","top"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/s3-resource-selector/lib/default/s3-resource-selector/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useState, useRef, useEffect } from 'react';\nimport InternalBox from '../box/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { S3InContext, S3InContextRef } from './s3-in-context';\nimport { S3ResourceSelectorProps } from './interfaces';\nimport { S3Modal, S3ModalProps } from './s3-modal';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nimport { useFormFieldContext } from '../contexts/form-field';\n\nexport { S3ResourceSelectorProps };\n\nconst S3ResourceSelector = React.forwardRef(\n  (\n    {\n      i18nStrings,\n      inputPlaceholder,\n      alert,\n      resource,\n      viewHref,\n      invalid,\n      selectableItemsTypes = [],\n      inputAriaDescribedby,\n      bucketsVisibleColumns = ['Name', 'CreationDate'],\n      bucketsIsItemDisabled,\n      fetchBuckets,\n      fetchObjects,\n      objectsVisibleColumns = ['Key', 'LastModified', 'Size'],\n      objectsIsItemDisabled,\n      fetchVersions,\n      versionsVisibleColumns = ['ID', 'LastModified', 'Size'],\n      versionsIsItemDisabled,\n      onChange,\n      ariaLabel,\n      ...rest\n    }: S3ResourceSelectorProps,\n    ref: React.Ref<S3ResourceSelectorProps.Ref>\n  ) => {\n    checkSafeUrl('S3ResourceSelector', viewHref);\n    const { __internalRootRef } = useBaseComponent('S3ResourceSelector');\n    const [modalOpen, setModalOpen] = useState(false);\n    const inContextRef = useRef<S3InContextRef>(null);\n    const modalWasSubmitted = useRef<boolean>(false);\n    useForwardFocus(ref, inContextRef);\n    const { ariaLabelledby, ariaDescribedby } = useFormFieldContext(rest);\n\n    useEffect(() => {\n      // Focus uriInput only when modal was submitted.\n      // When it was dismissed, the focus naturally goes to previously focused element (browse button)\n      if (!modalOpen && modalWasSubmitted.current) {\n        modalWasSubmitted.current = false;\n        inContextRef.current?.focus();\n      }\n    }, [modalOpen]);\n\n    const baseProps = getBaseProps(rest);\n    const modalProps: S3ModalProps = {\n      alert,\n      i18nStrings,\n      fetchBuckets,\n      selectableItemsTypes,\n      bucketsVisibleColumns,\n      bucketsIsItemDisabled,\n      fetchObjects,\n      objectsVisibleColumns,\n      objectsIsItemDisabled,\n      fetchVersions,\n      versionsVisibleColumns,\n      versionsIsItemDisabled,\n      onSubmit: resource => {\n        fireNonCancelableEvent(onChange, { resource });\n        setModalOpen(false);\n        modalWasSubmitted.current = true;\n      },\n      onDismiss: () => setModalOpen(false),\n    };\n    return (\n      <div\n        {...baseProps}\n        className={clsx(styles.root, baseProps.className)}\n        ref={__internalRootRef}\n        role=\"group\"\n        aria-labelledby={ariaLabelledby}\n        aria-describedby={ariaDescribedby}\n        aria-label={ariaLabel}\n      >\n        <S3InContext\n          ref={inContextRef}\n          selectableItemsTypes={selectableItemsTypes}\n          i18nStrings={i18nStrings}\n          inputPlaceholder={inputPlaceholder}\n          resource={resource}\n          viewHref={viewHref}\n          invalid={invalid}\n          inputAriaDescribedby={inputAriaDescribedby}\n          fetchVersions={fetchVersions}\n          onBrowse={() => setModalOpen(true)}\n          onChange={(resource, errorText) => fireNonCancelableEvent(onChange, { resource, errorText })}\n        />\n        {!modalOpen && alert && (\n          <InternalBox className={styles.alert} margin={{ top: 's' }}>\n            {alert}\n          </InternalBox>\n        )}\n        {modalOpen && <S3Modal {...modalProps} />}\n      </div>\n    );\n  }\n);\n\napplyDisplayName(S3ResourceSelector, 'S3ResourceSelector');\nexport default S3ResourceSelector;\n"]},"metadata":{},"sourceType":"module"}