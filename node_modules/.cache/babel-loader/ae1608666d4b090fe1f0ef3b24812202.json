{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __rest } from \"tslib\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport InternalButton from '../../button/internal';\nimport styles from './styles.css.js';\nimport { useFormFieldContext } from '../../contexts/form-field';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { joinStrings } from '../../internal/utils/strings';\nimport ScreenreaderOnly from '../../internal/components/screenreader-only';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport clsx from 'clsx';\nexport default React.forwardRef(FileInput);\nfunction FileInput(_a, ref) {\n  var _b;\n  var accept = _a.accept,\n    ariaRequired = _a.ariaRequired,\n    multiple = _a.multiple,\n    value = _a.value,\n    onChange = _a.onChange,\n    children = _a.children,\n    restProps = __rest(_a, [\"accept\", \"ariaRequired\", \"multiple\", \"value\", \"onChange\", \"children\"]);\n  var uploadInputRef = useRef(null);\n  var uploadButtonLabelId = useUniqueId('upload-button-label');\n  var formFieldContext = useFormFieldContext(restProps);\n  var selfControlId = useUniqueId('upload-input');\n  var controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;\n  useForwardFocus(ref, uploadInputRef);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFocused = _useState2[0],\n    setIsFocused = _useState2[1];\n  var onUploadButtonClick = function onUploadButtonClick() {\n    var _a;\n    return (_a = uploadInputRef.current) === null || _a === void 0 ? void 0 : _a.click();\n  };\n  var onUploadInputFocus = function onUploadInputFocus() {\n    return setIsFocused(true);\n  };\n  var onUploadInputBlur = function onUploadInputBlur() {\n    return setIsFocused(false);\n  };\n  var onUploadInputChange = function onUploadInputChange(_ref) {\n    var target = _ref.target;\n    onChange(target.files ? Array.from(target.files) : []);\n  };\n  var nativeAttributes = {\n    'aria-labelledby': joinStrings(formFieldContext.ariaLabelledby, uploadButtonLabelId),\n    'aria-describedby': formFieldContext.ariaDescribedby\n  };\n  if (formFieldContext.invalid) {\n    nativeAttributes['aria-invalid'] = true;\n  }\n  if (ariaRequired) {\n    nativeAttributes['aria-required'] = true;\n  }\n  // Synchronizing component's value with the native file input state.\n  useEffect(function () {\n    // The DataTransfer is not available in jsdom.\n    if (window.DataTransfer) {\n      var dataTransfer = new DataTransfer();\n      var _iterator = _createForOfIteratorHelper(value),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var file = _step.value;\n          dataTransfer.items.add(file);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      uploadInputRef.current.files = dataTransfer.files;\n    }\n  }, [value]);\n  return React.createElement(\"div\", {\n    className: styles['file-input-container']\n  }, React.createElement(\"input\", Object.assign({\n    id: controlId,\n    ref: uploadInputRef,\n    type: \"file\",\n    hidden: false,\n    multiple: multiple,\n    accept: accept,\n    onChange: onUploadInputChange,\n    onFocus: onUploadInputFocus,\n    onBlur: onUploadInputBlur,\n    className: styles['upload-input']\n  }, nativeAttributes)), React.createElement(InternalButton, {\n    iconName: \"upload\",\n    formAction: \"none\",\n    onClick: onUploadButtonClick,\n    className: clsx(styles['upload-button'], isFocused && styles['force-focus-outline']),\n    __nativeAttributes: {\n      tabIndex: -1,\n      'aria-hidden': true\n    }\n  }, children), React.createElement(ScreenreaderOnly, {\n    id: uploadButtonLabelId\n  }, children));\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","useState","InternalButton","styles","useFormFieldContext","useUniqueId","joinStrings","ScreenreaderOnly","useForwardFocus","clsx","forwardRef","FileInput","_a","ref","accept","ariaRequired","multiple","value","onChange","children","restProps","uploadInputRef","uploadButtonLabelId","formFieldContext","selfControlId","controlId","isFocused","setIsFocused","onUploadButtonClick","current","click","onUploadInputFocus","onUploadInputBlur","onUploadInputChange","target","files","Array","from","nativeAttributes","ariaLabelledby","ariaDescribedby","invalid","window","DataTransfer","dataTransfer","file","items","add","className","id","type","hidden","onFocus","onBlur","iconName","formAction","onClick","__nativeAttributes","tabIndex"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/file-upload/file-input/lib/default/file-upload/file-input/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { ChangeEvent, ForwardedRef, useEffect, useRef, useState } from 'react';\n\nimport InternalButton from '../../button/internal';\nimport styles from './styles.css.js';\nimport { useFormFieldContext } from '../../contexts/form-field';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { FormFieldValidationControlProps } from '../../internal/context/form-field-context';\nimport { joinStrings } from '../../internal/utils/strings';\nimport ScreenreaderOnly from '../../internal/components/screenreader-only';\nimport { FileUploadProps } from '../interfaces';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport clsx from 'clsx';\n\ninterface FileInputProps extends FormFieldValidationControlProps {\n  accept?: string;\n  ariaRequired?: boolean;\n  multiple: boolean;\n  value: readonly File[];\n  onChange: (files: File[]) => void;\n  children: React.ReactNode;\n}\n\nexport default React.forwardRef(FileInput);\n\nfunction FileInput(\n  { accept, ariaRequired, multiple, value, onChange, children, ...restProps }: FileInputProps,\n  ref: ForwardedRef<FileUploadProps.Ref>\n) {\n  const uploadInputRef = useRef<HTMLInputElement>(null);\n  const uploadButtonLabelId = useUniqueId('upload-button-label');\n  const formFieldContext = useFormFieldContext(restProps);\n  const selfControlId = useUniqueId('upload-input');\n  const controlId = formFieldContext.controlId ?? selfControlId;\n\n  useForwardFocus(ref, uploadInputRef);\n\n  const [isFocused, setIsFocused] = useState(false);\n\n  const onUploadButtonClick = () => uploadInputRef.current?.click();\n\n  const onUploadInputFocus = () => setIsFocused(true);\n\n  const onUploadInputBlur = () => setIsFocused(false);\n\n  const onUploadInputChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\n    onChange(target.files ? Array.from(target.files) : []);\n  };\n\n  const nativeAttributes: Record<string, any> = {\n    'aria-labelledby': joinStrings(formFieldContext.ariaLabelledby, uploadButtonLabelId),\n    'aria-describedby': formFieldContext.ariaDescribedby,\n  };\n  if (formFieldContext.invalid) {\n    nativeAttributes['aria-invalid'] = true;\n  }\n  if (ariaRequired) {\n    nativeAttributes['aria-required'] = true;\n  }\n\n  // Synchronizing component's value with the native file input state.\n  useEffect(() => {\n    // The DataTransfer is not available in jsdom.\n    if (window.DataTransfer) {\n      const dataTransfer = new DataTransfer();\n      for (const file of value) {\n        dataTransfer.items.add(file);\n      }\n      uploadInputRef.current!.files = dataTransfer.files;\n    }\n  }, [value]);\n\n  return (\n    <div className={styles['file-input-container']}>\n      {/* This is the actual interactive and accessible file-upload element. */}\n      {/* It is visually hidden to achieve the desired UX design. */}\n      <input\n        id={controlId}\n        ref={uploadInputRef}\n        type=\"file\"\n        hidden={false}\n        multiple={multiple}\n        accept={accept}\n        onChange={onUploadInputChange}\n        onFocus={onUploadInputFocus}\n        onBlur={onUploadInputBlur}\n        className={styles['upload-input']}\n        {...nativeAttributes}\n      />\n\n      {/* The button is decorative. It dispatches clicks to the file input and is ARIA-hidden. */}\n      {/* When the input is focused the focus outline is forced on the button. */}\n      <InternalButton\n        iconName=\"upload\"\n        formAction=\"none\"\n        onClick={onUploadButtonClick}\n        className={clsx(styles['upload-button'], isFocused && styles['force-focus-outline'])}\n        __nativeAttributes={{ tabIndex: -1, 'aria-hidden': true }}\n      >\n        {children}\n      </InternalButton>\n\n      {/* The file input needs to be labelled with provided content. Can't use the button because it is ARIA-hidden. */}\n      <ScreenreaderOnly id={uploadButtonLabelId}>{children}</ScreenreaderOnly>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}