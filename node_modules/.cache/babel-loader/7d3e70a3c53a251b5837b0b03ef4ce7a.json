{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport LineSeries from './line-series';\nimport BarSeries from './bar-series';\nimport styles from './styles.css.js';\nimport { calculateOffsetMaps } from './utils';\n// Should have the same value as the `border-line-chart-width` token.\nconst STROKE_WIDTH = 2;\nexport default function DataSeries(_ref) {\n  let {\n    axis,\n    plotHeight,\n    plotWidth,\n    highlightedGroupIndex,\n    highlightedSeries,\n    stackedBars,\n    isGroupNavigation,\n    visibleSeries,\n    xScale,\n    yScale\n  } = _ref;\n  const chartAreaClipPath = useUniqueId('awsui-mixed-line-bar-chart__chart-area-');\n  // Lines get a small extra space at the top and bottom to account for the strokes when they are at the edge of the graph.\n  const lineAreaClipPath = useUniqueId('awsui-line-chart__chart-area-');\n  const stackedBarOffsetMaps = useMemo(() => {\n    if (!stackedBars) {\n      return [];\n    }\n    const barData = [];\n    visibleSeries.forEach(_ref2 => {\n      let {\n        series\n      } = _ref2;\n      if (series.type === 'bar') {\n        barData.push(series.data);\n      }\n    });\n    return calculateOffsetMaps(barData);\n  }, [visibleSeries, stackedBars]);\n  return React.createElement(React.Fragment, null, React.createElement(\"defs\", {\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"clipPath\", {\n    id: chartAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: plotWidth,\n    height: plotHeight\n  })), React.createElement(\"clipPath\", {\n    id: lineAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: -STROKE_WIDTH / 2,\n    width: plotWidth,\n    height: plotHeight + STROKE_WIDTH\n  }))), React.createElement(\"g\", {\n    \"aria-hidden\": isGroupNavigation ? true : undefined,\n    role: \"group\"\n  }, visibleSeries.map((_ref3, index) => {\n    let {\n      series,\n      color\n    } = _ref3;\n    const isHighlighted = series === highlightedSeries;\n    const isDimmed = !!highlightedSeries && !isHighlighted;\n    switch (series.type) {\n      case 'line':\n      case 'threshold':\n        {\n          return React.createElement(\"g\", {\n            key: index,\n            role: \"group\",\n            \"aria-label\": series.title,\n            className: clsx(styles.series, styles[`series--${series.type}`], {\n              [styles['series--highlighted']]: isHighlighted,\n              [styles['series--dimmed']]: isDimmed\n            })\n          }, React.createElement(LineSeries, {\n            axis: axis,\n            series: series,\n            color: color,\n            xScale: xScale,\n            yScale: yScale,\n            chartAreaClipPath: lineAreaClipPath\n          }));\n        }\n      case 'bar':\n        return React.createElement(BarSeries, {\n          key: index,\n          axis: axis,\n          series: series,\n          color: color,\n          totalSeriesCount: visibleSeries.filter(s => s.series.type === 'bar').length,\n          seriesIndex: index,\n          xScale: xScale,\n          yScale: yScale,\n          plotSize: axis === 'y' ? plotWidth : plotHeight,\n          highlighted: isHighlighted,\n          dimmed: isDimmed,\n          chartAreaClipPath: chartAreaClipPath,\n          stackedBarOffsets: stackedBarOffsetMaps[index],\n          highlightedGroupIndex: highlightedGroupIndex\n        });\n    }\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","useMemo","clsx","useUniqueId","LineSeries","BarSeries","styles","calculateOffsetMaps","STROKE_WIDTH","DataSeries","axis","plotHeight","plotWidth","highlightedGroupIndex","highlightedSeries","stackedBars","isGroupNavigation","visibleSeries","xScale","yScale","chartAreaClipPath","lineAreaClipPath","stackedBarOffsetMaps","barData","forEach","series","type","push","data","id","x","y","width","height","undefined","role","map","index","color","isHighlighted","isDimmed","key","title","className","totalSeriesCount","filter","s","length","seriesIndex","plotSize","highlighted","dimmed","stackedBarOffsets"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/mixed-line-bar-chart/lib/default/mixed-line-bar-chart/data-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\n\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport LineSeries from './line-series';\nimport BarSeries from './bar-series';\nimport { ChartDataTypes, InternalChartSeries, MixedLineBarChartProps } from './interfaces';\n\nimport styles from './styles.css.js';\nimport { calculateOffsetMaps, StackedOffsets } from './utils';\n\n// Should have the same value as the `border-line-chart-width` token.\nconst STROKE_WIDTH = 2;\n\nexport interface DataSeriesProps<T> {\n  axis: 'x' | 'y';\n\n  plotHeight: number;\n  plotWidth: number;\n\n  highlightedSeries: MixedLineBarChartProps.ChartSeries<T> | null;\n  highlightedGroupIndex: number | null;\n\n  stackedBars: boolean;\n  isGroupNavigation: boolean;\n\n  visibleSeries: ReadonlyArray<InternalChartSeries<T>>;\n  xScale: ChartScale;\n  yScale: NumericChartScale;\n}\n\nexport default function DataSeries<T extends ChartDataTypes>({\n  axis,\n  plotHeight,\n  plotWidth,\n  highlightedGroupIndex,\n  highlightedSeries,\n  stackedBars,\n  isGroupNavigation,\n  visibleSeries,\n  xScale,\n  yScale,\n}: DataSeriesProps<T>) {\n  const chartAreaClipPath = useUniqueId('awsui-mixed-line-bar-chart__chart-area-');\n\n  // Lines get a small extra space at the top and bottom to account for the strokes when they are at the edge of the graph.\n  const lineAreaClipPath = useUniqueId('awsui-line-chart__chart-area-');\n\n  const stackedBarOffsetMaps: StackedOffsets[] = useMemo(() => {\n    if (!stackedBars) {\n      return [];\n    }\n\n    const barData: Array<readonly MixedLineBarChartProps.Datum<ChartDataTypes>[]> = [];\n    visibleSeries.forEach(({ series }) => {\n      if (series.type === 'bar') {\n        barData.push(series.data);\n      }\n    });\n    return calculateOffsetMaps(barData);\n  }, [visibleSeries, stackedBars]);\n\n  return (\n    <>\n      <defs aria-hidden=\"true\">\n        <clipPath id={chartAreaClipPath}>\n          <rect x={0} y={0} width={plotWidth} height={plotHeight} />\n        </clipPath>\n        <clipPath id={lineAreaClipPath}>\n          <rect x={0} y={-STROKE_WIDTH / 2} width={plotWidth} height={plotHeight + STROKE_WIDTH} />\n        </clipPath>\n      </defs>\n      <g aria-hidden={isGroupNavigation ? true : undefined} role=\"group\">\n        {visibleSeries.map(({ series, color }, index) => {\n          const isHighlighted = series === highlightedSeries;\n          const isDimmed = !!highlightedSeries && !isHighlighted;\n\n          switch (series.type) {\n            case 'line':\n            case 'threshold': {\n              return (\n                <g\n                  key={index}\n                  role=\"group\"\n                  aria-label={series.title}\n                  className={clsx(styles.series, styles[`series--${series.type}`], {\n                    [styles['series--highlighted']]: isHighlighted,\n                    [styles['series--dimmed']]: isDimmed,\n                  })}\n                >\n                  <LineSeries\n                    axis={axis}\n                    series={series}\n                    color={color}\n                    xScale={xScale}\n                    yScale={yScale}\n                    chartAreaClipPath={lineAreaClipPath}\n                  />\n                </g>\n              );\n            }\n\n            case 'bar':\n              return (\n                <BarSeries\n                  key={index}\n                  axis={axis}\n                  series={series}\n                  color={color}\n                  totalSeriesCount={visibleSeries.filter(s => s.series.type === 'bar').length}\n                  seriesIndex={index}\n                  xScale={xScale}\n                  yScale={yScale}\n                  plotSize={axis === 'y' ? plotWidth : plotHeight}\n                  highlighted={isHighlighted}\n                  dimmed={isDimmed}\n                  chartAreaClipPath={chartAreaClipPath}\n                  stackedBarOffsets={stackedBarOffsetMaps[index]}\n                  highlightedGroupIndex={highlightedGroupIndex}\n                />\n              );\n          }\n        })}\n      </g>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}