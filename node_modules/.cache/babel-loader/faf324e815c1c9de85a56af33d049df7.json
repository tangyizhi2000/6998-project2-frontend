{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport ChartStatusContainer, { getChartStatus } from '../internal/components/chart-status-container';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport InternalChartLegend from './chart-legend';\nimport ChartContainer from './chart-container';\nimport styles from './styles.css.js';\nimport { isDevelopment } from '../internal/is-development';\nimport createCategoryColorScale from '../internal/utils/create-category-color-scale';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { chartLegendMap, isXThreshold, isYThreshold } from './utils';\nimport { nodeBelongs } from '../internal/utils/node-belongs';\nimport Filter from '../internal/components/chart-filter';\nimport { ChartWrapper } from '../internal/components/chart-wrapper';\nexport default function InternalMixedLineBarChart(_a) {\n  var fitHeight = _a.fitHeight,\n    height = _a.height,\n    xScaleType = _a.xScaleType,\n    yScaleType = _a.yScaleType,\n    xDomain = _a.xDomain,\n    yDomain = _a.yDomain,\n    xTickFormatter = _a.xTickFormatter,\n    yTickFormatter = _a.yTickFormatter,\n    controlledHighlightedSeries = _a.highlightedSeries,\n    controlledVisibleSeries = _a.visibleSeries,\n    externalSeries = _a.series,\n    onFilterChange = _a.onFilterChange,\n    controlledOnHighlightChange = _a.onHighlightChange,\n    i18nStrings = _a.i18nStrings,\n    ariaLabel = _a.ariaLabel,\n    ariaLabelledby = _a.ariaLabelledby,\n    ariaDescription = _a.ariaDescription,\n    xTitle = _a.xTitle,\n    yTitle = _a.yTitle,\n    stackedBars = _a.stackedBars,\n    horizontalBars = _a.horizontalBars,\n    hideFilter = _a.hideFilter,\n    additionalFilters = _a.additionalFilters,\n    hideLegend = _a.hideLegend,\n    legendTitle = _a.legendTitle,\n    statusType = _a.statusType,\n    detailPopoverSize = _a.detailPopoverSize,\n    detailPopoverFooter = _a.detailPopoverFooter,\n    emphasizeBaselineAxis = _a.emphasizeBaselineAxis,\n    empty = _a.empty,\n    noMatch = _a.noMatch,\n    errorText = _a.errorText,\n    loadingText = _a.loadingText,\n    recoveryText = _a.recoveryText,\n    onRecoveryClick = _a.onRecoveryClick,\n    _a$__internalRootRef = _a.__internalRootRef,\n    __internalRootRef = _a$__internalRootRef === void 0 ? null : _a$__internalRootRef,\n    props = __rest(_a, [\"fitHeight\", \"height\", \"xScaleType\", \"yScaleType\", \"xDomain\", \"yDomain\", \"xTickFormatter\", \"yTickFormatter\", \"highlightedSeries\", \"visibleSeries\", \"series\", \"onFilterChange\", \"onHighlightChange\", \"i18nStrings\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescription\", \"xTitle\", \"yTitle\", \"stackedBars\", \"horizontalBars\", \"hideFilter\", \"additionalFilters\", \"hideLegend\", \"legendTitle\", \"statusType\", \"detailPopoverSize\", \"detailPopoverFooter\", \"emphasizeBaselineAxis\", \"empty\", \"noMatch\", \"errorText\", \"loadingText\", \"recoveryText\", \"onRecoveryClick\", \"__internalRootRef\"]);\n  var baseProps = getBaseProps(props);\n  var containerRef = useRef(null);\n  useEffect(function () {\n    var gotBarSeries = externalSeries.some(function (s) {\n      return s.type === 'bar';\n    });\n    var gotLineSeries = externalSeries.some(function (s) {\n      return s.type === 'line';\n    });\n    if (xScaleType !== 'categorical' && gotBarSeries) {\n      warnOnce('MixedLineBarChart', \"Bar series cannot be used with a \".concat(xScaleType, \" scale. Use a categorical x axis instead.\"));\n    }\n    if (horizontalBars && gotLineSeries) {\n      warnOnce('MixedLineBarChart', \"Property horizontalBars can only be used with charts that contain only bar or threshold series.\");\n    }\n    var _iterator = _createForOfIteratorHelper(externalSeries),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var s = _step.value;\n        if (s.type === 'threshold' && s.x !== undefined && s.y !== undefined) {\n          warnOnce('MixedLineBarChart', \"Series of type \\\"threshold\\\" must contain either x or y property.\");\n        }\n        if (s.type === 'threshold' && s.x === undefined && s.y === undefined) {\n          warnOnce('MixedLineBarChart', \"Series of type \\\"threshold\\\" must contain either x or y property.\");\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }, [xScaleType, horizontalBars, externalSeries]);\n  var series = useMemo(function () {\n    // Generate series colors if not explicitly provided.\n    // The thresholds use a dedicated colour scale.\n    var colors = createCategoryColorScale(externalSeries, function (it) {\n      return isYThreshold(it) || isXThreshold(it);\n    }, function (it) {\n      return it.color || null;\n    });\n    return externalSeries.map(function (s, i) {\n      return {\n        index: i,\n        color: colors[i],\n        series: s\n      };\n    });\n  }, [externalSeries]);\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    highlightedPoint = _useState2[0],\n    setHighlightedPoint = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    highlightedGroupIndex = _useState4[0],\n    setHighlightedGroupIndex = _useState4[1];\n  var _useControllable = useControllable(controlledHighlightedSeries, controlledOnHighlightChange, null, {\n      componentName: 'MixedLineBarChart',\n      controlledProp: 'highlightedSeries',\n      changeHandler: 'onHighlightChange'\n    }),\n    _useControllable2 = _slicedToArray(_useControllable, 2),\n    _useControllable2$ = _useControllable2[0],\n    highlightedSeries = _useControllable2$ === void 0 ? null : _useControllable2$,\n    setHighlightedSeries = _useControllable2[1];\n  var _useState5 = useState(highlightedSeries),\n    _useState6 = _slicedToArray(_useState5, 2),\n    legendSeries = _useState6[0],\n    setLegendSeries = _useState6[1];\n  useEffect(function () {\n    setLegendSeries(controlledHighlightedSeries || null);\n  }, [controlledHighlightedSeries]);\n  var _useControllable3 = useControllable(controlledVisibleSeries, onFilterChange, externalSeries, {\n      componentName: 'MixedLineBarChart',\n      controlledProp: 'visibleSeries',\n      changeHandler: 'onFilterChange'\n    }),\n    _useControllable4 = _slicedToArray(_useControllable3, 2),\n    externalVisibleSeries = _useControllable4[0],\n    setExternalVisibleSeries = _useControllable4[1];\n  if (isDevelopment) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var previousSeries = usePrevious(externalSeries);\n    var hasPrevious = !!(previousSeries && previousSeries.length);\n    var hasCurrent = !!externalSeries.length;\n    if (hasPrevious && hasCurrent && externalSeries !== previousSeries && !controlledVisibleSeries && !hideFilter) {\n      warnOnce('MixedLineBarChart', 'The `series` value passed into the component changed. ' + 'This may cause problems with filtering - we recommend that you make the `series` value constant, ' + 'or provide a `visibleSeries` value that derives from the current `series` value.');\n    }\n  }\n  var visibleSeries = useMemo(function () {\n    return series.filter(function (s) {\n      return (externalVisibleSeries === null || externalVisibleSeries === void 0 ? void 0 : externalVisibleSeries.indexOf(s.series)) !== -1;\n    });\n  }, [series, externalVisibleSeries]);\n  var filterChange = function filterChange(selectedSeries) {\n    setExternalVisibleSeries(selectedSeries);\n    fireNonCancelableEvent(onFilterChange, {\n      visibleSeries: selectedSeries\n    });\n  };\n  var onHighlightChange = function onHighlightChange(series) {\n    setHighlightedSeries(series);\n    fireNonCancelableEvent(controlledOnHighlightChange, {\n      highlightedSeries: series\n    });\n    setLegendSeries(series);\n  };\n  var onBlur = function onBlur(event) {\n    if (event.relatedTarget && !nodeBelongs(containerRef.current, event.relatedTarget)) {\n      highlightedSeries && onHighlightChange(highlightedSeries);\n      setHighlightedPoint(null);\n      setHighlightedGroupIndex(null);\n      setLegendSeries(null);\n    }\n  };\n  var _getChartStatus = getChartStatus({\n      externalData: externalSeries,\n      visibleData: visibleSeries || [],\n      statusType: statusType\n    }),\n    isEmpty = _getChartStatus.isEmpty,\n    isNoMatch = _getChartStatus.isNoMatch,\n    showChart = _getChartStatus.showChart;\n  var showFilters = statusType === 'finished' && (!isEmpty || isNoMatch) && (additionalFilters || !hideFilter);\n  var showLegend = !hideLegend && !isEmpty && statusType === 'finished';\n  var reserveLegendSpace = !showChart && !hideLegend;\n  var reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);\n  var mergedRef = useMergeRefs(containerRef, __internalRootRef);\n  var filterItems = series.map(function (_ref) {\n    var series = _ref.series,\n      color = _ref.color;\n    return {\n      label: series.title,\n      type: chartLegendMap[series.type],\n      color: color,\n      datum: series\n    };\n  });\n  return React.createElement(ChartWrapper, Object.assign({\n    ref: mergedRef\n  }, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    fitHeight: !!fitHeight,\n    contentMinHeight: height,\n    defaultFilter: showFilters && !hideFilter ? React.createElement(Filter, {\n      series: filterItems,\n      onChange: filterChange,\n      selectedSeries: externalVisibleSeries || [],\n      i18nStrings: i18nStrings\n    }) : null,\n    additionalFilters: showFilters ? additionalFilters : null,\n    reserveFilterSpace: !!reserveFilterSpace,\n    reserveLegendSpace: !!reserveLegendSpace,\n    chartStatus: React.createElement(ChartStatusContainer, {\n      isEmpty: isEmpty,\n      isNoMatch: isNoMatch,\n      showChart: showChart,\n      statusType: statusType,\n      empty: empty,\n      noMatch: noMatch,\n      loadingText: loadingText,\n      errorText: errorText,\n      recoveryText: recoveryText,\n      onRecoveryClick: onRecoveryClick\n    }),\n    chart: showChart ? React.createElement(ChartContainer, {\n      fitHeight: fitHeight,\n      height: height,\n      xScaleType: xScaleType,\n      yScaleType: yScaleType,\n      xDomain: xDomain,\n      yDomain: yDomain,\n      xTickFormatter: xTickFormatter !== null && xTickFormatter !== void 0 ? xTickFormatter : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.xTickFormatter,\n      yTickFormatter: yTickFormatter !== null && yTickFormatter !== void 0 ? yTickFormatter : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.yTickFormatter,\n      emphasizeBaselineAxis: emphasizeBaselineAxis,\n      stackedBars: stackedBars,\n      horizontalBars: horizontalBars,\n      series: series,\n      visibleSeries: visibleSeries,\n      highlightedSeries: highlightedSeries,\n      onHighlightChange: onHighlightChange,\n      highlightedPoint: highlightedPoint,\n      setHighlightedPoint: setHighlightedPoint,\n      highlightedGroupIndex: highlightedGroupIndex,\n      setHighlightedGroupIndex: setHighlightedGroupIndex,\n      detailPopoverSize: detailPopoverSize,\n      detailPopoverFooter: detailPopoverFooter,\n      xTitle: xTitle,\n      yTitle: yTitle,\n      ariaLabel: ariaLabel,\n      ariaLabelledby: ariaLabelledby,\n      ariaDescription: ariaDescription,\n      i18nStrings: i18nStrings,\n      plotContainerRef: containerRef\n    }) : null,\n    legend: showLegend ? React.createElement(InternalChartLegend, {\n      series: series,\n      visibleSeries: externalVisibleSeries || [],\n      highlightedSeries: legendSeries,\n      onHighlightChange: onHighlightChange,\n      legendTitle: legendTitle,\n      ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel,\n      plotContainerRef: containerRef\n    }) : null,\n    onBlur: onBlur\n  }));\n}","map":{"version":3,"mappings":"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","names":["clsx","React","useEffect","useMemo","useRef","useState","getBaseProps","fireNonCancelableEvent","ChartStatusContainer","getChartStatus","useControllable","usePrevious","warnOnce","InternalChartLegend","ChartContainer","styles","isDevelopment","createCategoryColorScale","useMergeRefs","chartLegendMap","isXThreshold","isYThreshold","nodeBelongs","Filter","ChartWrapper","InternalMixedLineBarChart","_a","fitHeight","height","xScaleType","yScaleType","xDomain","yDomain","xTickFormatter","yTickFormatter","controlledHighlightedSeries","highlightedSeries","controlledVisibleSeries","visibleSeries","externalSeries","series","onFilterChange","controlledOnHighlightChange","onHighlightChange","i18nStrings","ariaLabel","ariaLabelledby","ariaDescription","xTitle","yTitle","stackedBars","horizontalBars","hideFilter","additionalFilters","hideLegend","legendTitle","statusType","detailPopoverSize","detailPopoverFooter","emphasizeBaselineAxis","empty","noMatch","errorText","loadingText","recoveryText","onRecoveryClick","__internalRootRef","props","baseProps","containerRef","gotBarSeries","some","s","type","gotLineSeries","x","undefined","y","colors","it","color","map","i","index","highlightedPoint","setHighlightedPoint","highlightedGroupIndex","setHighlightedGroupIndex","componentName","controlledProp","changeHandler","setHighlightedSeries","legendSeries","setLegendSeries","externalVisibleSeries","setExternalVisibleSeries","previousSeries","hasPrevious","length","hasCurrent","filter","indexOf","filterChange","selectedSeries","onBlur","event","relatedTarget","current","externalData","visibleData","isEmpty","isNoMatch","showChart","showFilters","showLegend","reserveLegendSpace","reserveFilterSpace","mergedRef","filterItems","label","title","datum","ref","className","root","contentMinHeight","defaultFilter","onChange","chartStatus","chart","plotContainerRef","legend","legendAriaLabel"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/mixed-line-bar-chart/lib/default/mixed-line-bar-chart/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport ChartStatusContainer, { getChartStatus } from '../internal/components/chart-status-container';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { ChartDataTypes, MixedLineBarChartProps } from './interfaces';\nimport InternalChartLegend from './chart-legend';\nimport ChartContainer from './chart-container';\nimport styles from './styles.css.js';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { isDevelopment } from '../internal/is-development';\nimport createCategoryColorScale from '../internal/utils/create-category-color-scale';\nimport { ScaledPoint } from './make-scaled-series';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { SomeRequired } from '../internal/types';\nimport { chartLegendMap, isXThreshold, isYThreshold } from './utils';\nimport { nodeBelongs } from '../internal/utils/node-belongs';\nimport Filter from '../internal/components/chart-filter';\nimport { ChartWrapper } from '../internal/components/chart-wrapper';\n\ntype InternalMixedLineBarChartProps<T extends ChartDataTypes> = SomeRequired<\n  MixedLineBarChartProps<T>,\n  | 'series'\n  | 'height'\n  | 'xScaleType'\n  | 'yScaleType'\n  | 'stackedBars'\n  | 'horizontalBars'\n  | 'statusType'\n  | 'detailPopoverSize'\n  | 'emphasizeBaselineAxis'\n> &\n  InternalBaseComponentProps;\n\nexport default function InternalMixedLineBarChart<T extends number | string | Date>({\n  fitHeight,\n  height,\n  xScaleType,\n  yScaleType,\n  xDomain,\n  yDomain,\n  xTickFormatter,\n  yTickFormatter,\n  highlightedSeries: controlledHighlightedSeries,\n  visibleSeries: controlledVisibleSeries,\n  series: externalSeries,\n  onFilterChange,\n  onHighlightChange: controlledOnHighlightChange,\n  i18nStrings,\n  ariaLabel,\n  ariaLabelledby,\n  ariaDescription,\n  xTitle,\n  yTitle,\n  stackedBars,\n  horizontalBars,\n  hideFilter,\n  additionalFilters,\n  hideLegend,\n  legendTitle,\n  statusType,\n  detailPopoverSize,\n  detailPopoverFooter,\n  emphasizeBaselineAxis,\n  empty,\n  noMatch,\n  errorText,\n  loadingText,\n  recoveryText,\n  onRecoveryClick,\n  __internalRootRef = null,\n  ...props\n}: InternalMixedLineBarChartProps<T>) {\n  const baseProps = getBaseProps(props);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const gotBarSeries = externalSeries.some(s => s.type === 'bar');\n    const gotLineSeries = externalSeries.some(s => s.type === 'line');\n\n    if (xScaleType !== 'categorical' && gotBarSeries) {\n      warnOnce(\n        'MixedLineBarChart',\n        `Bar series cannot be used with a ${xScaleType} scale. Use a categorical x axis instead.`\n      );\n    }\n\n    if (horizontalBars && gotLineSeries) {\n      warnOnce(\n        'MixedLineBarChart',\n        `Property horizontalBars can only be used with charts that contain only bar or threshold series.`\n      );\n    }\n\n    for (const s of externalSeries) {\n      if (s.type === 'threshold' && s.x !== undefined && s.y !== undefined) {\n        warnOnce('MixedLineBarChart', `Series of type \"threshold\" must contain either x or y property.`);\n      }\n      if (s.type === 'threshold' && s.x === undefined && s.y === undefined) {\n        warnOnce('MixedLineBarChart', `Series of type \"threshold\" must contain either x or y property.`);\n      }\n    }\n  }, [xScaleType, horizontalBars, externalSeries]);\n\n  const series = useMemo(() => {\n    // Generate series colors if not explicitly provided.\n    // The thresholds use a dedicated colour scale.\n    const colors = createCategoryColorScale(\n      externalSeries,\n      it => isYThreshold(it) || isXThreshold(it),\n      it => it.color || null\n    );\n\n    return externalSeries.map((s, i) => ({ index: i, color: colors[i], series: s }));\n  }, [externalSeries]);\n\n  const [highlightedPoint, setHighlightedPoint] = useState<ScaledPoint<T> | null>(null);\n  const [highlightedGroupIndex, setHighlightedGroupIndex] = useState<number | null>(null);\n  const [highlightedSeries = null, setHighlightedSeries] = useControllable(\n    controlledHighlightedSeries,\n    controlledOnHighlightChange,\n    null,\n    {\n      componentName: 'MixedLineBarChart',\n      controlledProp: 'highlightedSeries',\n      changeHandler: 'onHighlightChange',\n    }\n  );\n  const [legendSeries, setLegendSeries] = useState<MixedLineBarChartProps.ChartSeries<T> | null>(highlightedSeries);\n  useEffect(() => {\n    setLegendSeries(controlledHighlightedSeries || null);\n  }, [controlledHighlightedSeries]);\n\n  const [externalVisibleSeries, setExternalVisibleSeries] = useControllable(\n    controlledVisibleSeries,\n    onFilterChange,\n    externalSeries,\n    {\n      componentName: 'MixedLineBarChart',\n      controlledProp: 'visibleSeries',\n      changeHandler: 'onFilterChange',\n    }\n  );\n\n  if (isDevelopment) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const previousSeries = usePrevious(externalSeries);\n\n    const hasPrevious = !!(previousSeries && previousSeries.length);\n    const hasCurrent = !!externalSeries.length;\n\n    if (hasPrevious && hasCurrent && externalSeries !== previousSeries && !controlledVisibleSeries && !hideFilter) {\n      warnOnce(\n        'MixedLineBarChart',\n        'The `series` value passed into the component changed. ' +\n          'This may cause problems with filtering - we recommend that you make the `series` value constant, ' +\n          'or provide a `visibleSeries` value that derives from the current `series` value.'\n      );\n    }\n  }\n\n  const visibleSeries = useMemo(\n    () => series.filter(s => externalVisibleSeries?.indexOf(s.series) !== -1),\n    [series, externalVisibleSeries]\n  );\n\n  const filterChange = (selectedSeries: ReadonlyArray<MixedLineBarChartProps.ChartSeries<T>>) => {\n    setExternalVisibleSeries(selectedSeries);\n    fireNonCancelableEvent(onFilterChange, {\n      visibleSeries: selectedSeries,\n    });\n  };\n\n  const onHighlightChange = (series: MixedLineBarChartProps.ChartSeries<T> | null) => {\n    setHighlightedSeries(series);\n    fireNonCancelableEvent(controlledOnHighlightChange, {\n      highlightedSeries: series,\n    });\n    setLegendSeries(series);\n  };\n\n  const onBlur = (event: React.FocusEvent) => {\n    if (event.relatedTarget && !nodeBelongs(containerRef.current, event.relatedTarget)) {\n      highlightedSeries && onHighlightChange(highlightedSeries);\n      setHighlightedPoint(null);\n      setHighlightedGroupIndex(null);\n      setLegendSeries(null);\n    }\n  };\n\n  const { isEmpty, isNoMatch, showChart } = getChartStatus({\n    externalData: externalSeries,\n    visibleData: visibleSeries || [],\n    statusType,\n  });\n  const showFilters = statusType === 'finished' && (!isEmpty || isNoMatch) && (additionalFilters || !hideFilter);\n  const showLegend = !hideLegend && !isEmpty && statusType === 'finished';\n  const reserveLegendSpace = !showChart && !hideLegend;\n  const reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);\n  const mergedRef = useMergeRefs(containerRef, __internalRootRef);\n\n  const filterItems = series.map(({ series, color }) => ({\n    label: series.title,\n    type: chartLegendMap[series.type],\n    color,\n    datum: series,\n  }));\n\n  return (\n    <ChartWrapper\n      ref={mergedRef}\n      {...baseProps}\n      className={clsx(baseProps.className, styles.root)}\n      fitHeight={!!fitHeight}\n      contentMinHeight={height}\n      defaultFilter={\n        showFilters && !hideFilter ? (\n          <Filter\n            series={filterItems}\n            onChange={filterChange}\n            selectedSeries={externalVisibleSeries || []}\n            i18nStrings={i18nStrings}\n          />\n        ) : null\n      }\n      additionalFilters={showFilters ? additionalFilters : null}\n      reserveFilterSpace={!!reserveFilterSpace}\n      reserveLegendSpace={!!reserveLegendSpace}\n      chartStatus={\n        <ChartStatusContainer\n          isEmpty={isEmpty}\n          isNoMatch={isNoMatch}\n          showChart={showChart}\n          statusType={statusType}\n          empty={empty}\n          noMatch={noMatch}\n          loadingText={loadingText}\n          errorText={errorText}\n          recoveryText={recoveryText}\n          onRecoveryClick={onRecoveryClick}\n        />\n      }\n      chart={\n        showChart ? (\n          <ChartContainer\n            fitHeight={fitHeight}\n            height={height}\n            xScaleType={xScaleType}\n            yScaleType={yScaleType}\n            xDomain={xDomain}\n            yDomain={yDomain}\n            xTickFormatter={xTickFormatter ?? i18nStrings?.xTickFormatter}\n            yTickFormatter={yTickFormatter ?? i18nStrings?.yTickFormatter}\n            emphasizeBaselineAxis={emphasizeBaselineAxis}\n            stackedBars={stackedBars}\n            horizontalBars={horizontalBars}\n            series={series}\n            visibleSeries={visibleSeries}\n            highlightedSeries={highlightedSeries}\n            onHighlightChange={onHighlightChange}\n            highlightedPoint={highlightedPoint}\n            setHighlightedPoint={setHighlightedPoint}\n            highlightedGroupIndex={highlightedGroupIndex}\n            setHighlightedGroupIndex={setHighlightedGroupIndex}\n            detailPopoverSize={detailPopoverSize}\n            detailPopoverFooter={detailPopoverFooter}\n            xTitle={xTitle}\n            yTitle={yTitle}\n            ariaLabel={ariaLabel}\n            ariaLabelledby={ariaLabelledby}\n            ariaDescription={ariaDescription}\n            i18nStrings={i18nStrings}\n            plotContainerRef={containerRef}\n          />\n        ) : null\n      }\n      legend={\n        showLegend ? (\n          <InternalChartLegend\n            series={series}\n            visibleSeries={externalVisibleSeries || []}\n            highlightedSeries={legendSeries}\n            onHighlightChange={onHighlightChange}\n            legendTitle={legendTitle}\n            ariaLabel={i18nStrings?.legendAriaLabel}\n            plotContainerRef={containerRef}\n          />\n        ) : null\n      }\n      onBlur={onBlur}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}