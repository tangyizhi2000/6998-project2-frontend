{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { Segment } from './segment';\nimport styles from './styles.css.js';\nexport default function InternalSegmentedControl(_ref) {\n  let {\n    selectedId,\n    options,\n    label,\n    ariaLabelledby,\n    onChange\n  } = _ref;\n  const segmentByIdRef = useRef({});\n  const selectedOptions = (options || []).filter(option => {\n    return option.id === selectedId;\n  });\n  const currentSelectedOption = selectedOptions.length ? selectedOptions[0] : null;\n  const enabledSegments = (options || []).filter(option => !option.disabled);\n  const moveHighlight = (event, activeIndex) => {\n    var _a;\n    if (event.keyCode !== KeyCode.right && event.keyCode !== KeyCode.left) {\n      return;\n    }\n    let nextIndex = activeIndex;\n    if (event.keyCode === KeyCode.right) {\n      nextIndex = activeIndex + 1 === enabledSegments.length ? 0 : activeIndex + 1;\n    } else if (event.keyCode === KeyCode.left) {\n      nextIndex = activeIndex === 0 ? enabledSegments.length - 1 : activeIndex - 1;\n    }\n    const nextSegmentId = enabledSegments[nextIndex].id;\n    (_a = segmentByIdRef.current[nextSegmentId]) === null || _a === void 0 ? void 0 : _a.focus();\n  };\n  return React.createElement(\"div\", {\n    className: clsx(styles['segment-part'], styles[`segment-count-${options === null || options === void 0 ? void 0 : options.length}`]),\n    \"aria-label\": label,\n    \"aria-labelledby\": ariaLabelledby,\n    role: \"toolbar\"\n  }, options && options.map((option, index) => {\n    const isActive = selectedId === option.id;\n    const enabledSegmentIndex = enabledSegments.indexOf(option);\n    let tabIndex = isActive ? 0 : -1;\n    if (currentSelectedOption === null && enabledSegmentIndex === 0) {\n      tabIndex = 0;\n    }\n    return React.createElement(Segment, {\n      key: index,\n      id: option.id,\n      disabled: !!option.disabled,\n      iconName: option.iconName,\n      iconAlt: option.iconAlt,\n      iconUrl: option.iconUrl,\n      iconSvg: option.iconSvg,\n      text: option.text,\n      isActive: isActive,\n      tabIndex: tabIndex,\n      ref: node => {\n        if (node) {\n          segmentByIdRef.current[option.id] = node;\n        } else {\n          delete segmentByIdRef.current[option.id];\n        }\n      },\n      onClick: () => {\n        if (selectedId !== option.id) {\n          fireNonCancelableEvent(onChange, {\n            selectedId: option.id\n          });\n        }\n      },\n      onKeyDown: event => moveHighlight(event, enabledSegmentIndex)\n    });\n  }));\n}","map":{"version":3,"mappings":"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","names":["React","useRef","clsx","KeyCode","fireNonCancelableEvent","Segment","styles","InternalSegmentedControl","selectedId","options","label","ariaLabelledby","onChange","segmentByIdRef","selectedOptions","filter","option","id","currentSelectedOption","length","enabledSegments","disabled","moveHighlight","event","activeIndex","keyCode","right","left","nextIndex","nextSegmentId","current","focus","className","role","map","index","isActive","enabledSegmentIndex","indexOf","tabIndex","key","iconName","iconAlt","iconUrl","iconSvg","text","ref","node","onClick","onKeyDown"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/segmented-control/lib/default/segmented-control/internal-segmented-control.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { SegmentedControlProps } from './interfaces';\nimport { Segment } from './segment';\nimport styles from './styles.css.js';\n\nexport default function InternalSegmentedControl({\n  selectedId,\n  options,\n  label,\n  ariaLabelledby,\n  onChange,\n}: SegmentedControlProps) {\n  const segmentByIdRef = useRef<{ [id: string]: HTMLButtonElement }>({});\n  const selectedOptions = (options || []).filter(option => {\n    return option.id === selectedId;\n  });\n  const currentSelectedOption = selectedOptions.length ? selectedOptions[0] : null;\n  const enabledSegments = (options || []).filter(option => !option.disabled);\n\n  const moveHighlight = (event: React.KeyboardEvent<HTMLButtonElement>, activeIndex: number) => {\n    if (event.keyCode !== KeyCode.right && event.keyCode !== KeyCode.left) {\n      return;\n    }\n    let nextIndex = activeIndex;\n    if (event.keyCode === KeyCode.right) {\n      nextIndex = activeIndex + 1 === enabledSegments.length ? 0 : activeIndex + 1;\n    } else if (event.keyCode === KeyCode.left) {\n      nextIndex = activeIndex === 0 ? enabledSegments.length - 1 : activeIndex - 1;\n    }\n    const nextSegmentId = enabledSegments[nextIndex].id;\n    segmentByIdRef.current[nextSegmentId]?.focus();\n  };\n\n  return (\n    <div\n      className={clsx(styles['segment-part'], styles[`segment-count-${options?.length}`])}\n      aria-label={label}\n      aria-labelledby={ariaLabelledby}\n      role=\"toolbar\"\n    >\n      {options &&\n        options.map((option: SegmentedControlProps.Option, index) => {\n          const isActive = selectedId === option.id;\n          const enabledSegmentIndex = enabledSegments.indexOf(option);\n          let tabIndex = isActive ? 0 : -1;\n          if (currentSelectedOption === null && enabledSegmentIndex === 0) {\n            tabIndex = 0;\n          }\n          return (\n            <Segment\n              key={index}\n              id={option.id}\n              disabled={!!option.disabled}\n              iconName={option.iconName}\n              iconAlt={option.iconAlt}\n              iconUrl={option.iconUrl}\n              iconSvg={option.iconSvg}\n              text={option.text}\n              isActive={isActive}\n              tabIndex={tabIndex}\n              ref={node => {\n                if (node) {\n                  segmentByIdRef.current[option.id] = node;\n                } else {\n                  delete segmentByIdRef.current[option.id];\n                }\n              }}\n              onClick={() => {\n                if (selectedId !== option.id) {\n                  fireNonCancelableEvent(onChange, { selectedId: option.id });\n                }\n              }}\n              onKeyDown={event => moveHighlight(event, enabledSegmentIndex)}\n            />\n          );\n        })}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}