{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getBreakpointValue } from '../../breakpoints';\nimport { getOverflowParents, getOverflowParentDimensions } from '../../utils/scrollable-containers';\nimport styles from './styles.css.js';\nvar AVAILABLE_SPACE_RESERVE_DEFAULT = 50;\nvar AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL = 19; // 50 - 31\nvar AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL = 20;\nvar getClosestParentDimensions = function getClosestParentDimensions(element) {\n  var parents = getOverflowParents(element).map(function (el) {\n    var _el$getBoundingClient = el.getBoundingClientRect(),\n      height = _el$getBoundingClient.height,\n      width = _el$getBoundingClient.width,\n      top = _el$getBoundingClient.top,\n      left = _el$getBoundingClient.left;\n    return {\n      height: height,\n      width: width,\n      top: top,\n      left: left\n    };\n  });\n  return parents.shift();\n};\n// By default, most dropdowns should expand their content as necessary, but to a maximum of 465px (the XXS breakpoint).\n// This value was determined by UX but may be subject to change in the future, depending on the feedback.\nexport var defaultMaxDropdownWidth = getBreakpointValue('xxs');\nexport var getAvailableSpace = function getAvailableSpace(_ref) {\n  var trigger = _ref.trigger,\n    overflowParents = _ref.overflowParents,\n    _ref$stretchWidth = _ref.stretchWidth,\n    stretchWidth = _ref$stretchWidth === void 0 ? false : _ref$stretchWidth,\n    _ref$stretchHeight = _ref.stretchHeight,\n    stretchHeight = _ref$stretchHeight === void 0 ? false : _ref$stretchHeight,\n    isMobile = _ref.isMobile;\n  var availableSpaceReserveVertical = stretchHeight ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;\n  var availableSpaceReserveHorizontal = stretchWidth ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;\n  var _trigger$getBoundingC = trigger.getBoundingClientRect(),\n    triggerBottom = _trigger$getBoundingC.bottom,\n    triggerLeft = _trigger$getBoundingC.left,\n    triggerRight = _trigger$getBoundingC.right;\n  return overflowParents.reduce(function (_ref2, overflowParent) {\n    var above = _ref2.above,\n      below = _ref2.below,\n      left = _ref2.left,\n      right = _ref2.right;\n    var offsetTop = triggerBottom - overflowParent.top;\n    var currentAbove = offsetTop - trigger.offsetHeight - availableSpaceReserveVertical;\n    var currentBelow = overflowParent.height - offsetTop - availableSpaceReserveVertical;\n    var currentLeft = triggerRight - overflowParent.left - availableSpaceReserveHorizontal;\n    var currentRight = overflowParent.left + overflowParent.width - triggerLeft - availableSpaceReserveHorizontal;\n    return {\n      above: Math.min(above, currentAbove),\n      below: Math.min(below, currentBelow),\n      left: Math.min(left, currentLeft),\n      right: Math.min(right, currentRight)\n    };\n  }, {\n    above: Number.MAX_VALUE,\n    below: Number.MAX_VALUE,\n    left: Number.MAX_VALUE,\n    right: Number.MAX_VALUE\n  });\n};\nexport var getInteriorAvailableSpace = function getInteriorAvailableSpace(_ref3) {\n  var trigger = _ref3.trigger,\n    overflowParents = _ref3.overflowParents,\n    isMobile = _ref3.isMobile;\n  var AVAILABLE_SPACE_RESERVE_VERTICAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;\n  var AVAILABLE_SPACE_RESERVE_HORIZONTAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;\n  var _trigger$getBoundingC2 = trigger.getBoundingClientRect(),\n    triggerBottom = _trigger$getBoundingC2.bottom,\n    triggerTop = _trigger$getBoundingC2.top,\n    triggerLeft = _trigger$getBoundingC2.left,\n    triggerRight = _trigger$getBoundingC2.right;\n  return overflowParents.reduce(function (_ref4, overflowParent) {\n    var above = _ref4.above,\n      below = _ref4.below,\n      left = _ref4.left,\n      right = _ref4.right;\n    var currentAbove = triggerBottom - overflowParent.top - AVAILABLE_SPACE_RESERVE_VERTICAL;\n    var currentBelow = overflowParent.height - triggerTop + overflowParent.top - AVAILABLE_SPACE_RESERVE_VERTICAL;\n    var currentLeft = triggerLeft - overflowParent.left - AVAILABLE_SPACE_RESERVE_HORIZONTAL;\n    var currentRight = overflowParent.left + overflowParent.width - triggerRight - AVAILABLE_SPACE_RESERVE_HORIZONTAL;\n    return {\n      above: Math.min(above, currentAbove),\n      below: Math.min(below, currentBelow),\n      left: Math.min(left, currentLeft),\n      right: Math.min(right, currentRight)\n    };\n  }, {\n    above: Number.MAX_VALUE,\n    below: Number.MAX_VALUE,\n    left: Number.MAX_VALUE,\n    right: Number.MAX_VALUE\n  });\n};\nexport var getWidths = function getWidths(_ref5) {\n  var triggerElement = _ref5.triggerElement,\n    dropdownElement = _ref5.dropdownElement,\n    desiredMinWidth = _ref5.desiredMinWidth,\n    _ref5$stretchBeyondTr = _ref5.stretchBeyondTriggerWidth,\n    stretchBeyondTriggerWidth = _ref5$stretchBeyondTr === void 0 ? false : _ref5$stretchBeyondTr;\n  // Determine the width of the trigger\n  var triggerWidth = triggerElement.getBoundingClientRect().width;\n  // Minimum width is determined by either an explicit number (desiredMinWidth) or the trigger width\n  var minWidth = desiredMinWidth ? Math.min(triggerWidth, desiredMinWidth) : triggerWidth;\n  // If stretchBeyondTriggerWidth is true, the maximum width is the XS breakpoint (465px) or the trigger width (if bigger).\n  var maxWidth = stretchBeyondTriggerWidth ? Math.max(defaultMaxDropdownWidth, triggerWidth) : Number.MAX_VALUE;\n  // Determine the actual dropdown width, the size that it \"wants\" to be\n  var requiredWidth = dropdownElement.getBoundingClientRect().width;\n  // Try to achieve the required/desired width within the given parameters\n  var idealWidth = Math.min(Math.max(requiredWidth, minWidth), maxWidth);\n  return {\n    idealWidth: idealWidth,\n    minWidth: minWidth,\n    triggerWidth: triggerWidth\n  };\n};\nexport var hasEnoughSpaceToStretchBeyondTriggerWidth = function hasEnoughSpaceToStretchBeyondTriggerWidth(_ref6) {\n  var triggerElement = _ref6.triggerElement,\n    dropdownElement = _ref6.dropdownElement,\n    desiredMinWidth = _ref6.desiredMinWidth,\n    expandToViewport = _ref6.expandToViewport,\n    stretchWidth = _ref6.stretchWidth,\n    stretchHeight = _ref6.stretchHeight,\n    isMobile = _ref6.isMobile;\n  var overflowParents = getOverflowParentDimensions({\n    element: dropdownElement,\n    excludeClosestParent: false,\n    expandToViewport: expandToViewport,\n    canExpandOutsideViewport: stretchHeight\n  });\n  var _getWidths = getWidths({\n      triggerElement: triggerElement,\n      dropdownElement: dropdownElement,\n      desiredMinWidth: desiredMinWidth,\n      stretchBeyondTriggerWidth: true\n    }),\n    idealWidth = _getWidths.idealWidth;\n  var availableSpace = getAvailableSpace({\n    trigger: triggerElement,\n    overflowParents: overflowParents,\n    stretchWidth: stretchWidth,\n    stretchHeight: stretchHeight,\n    isMobile: isMobile\n  });\n  return idealWidth <= availableSpace.left || idealWidth <= availableSpace.right;\n};\nexport var getDropdownPosition = function getDropdownPosition(_ref7) {\n  var triggerElement = _ref7.triggerElement,\n    dropdownElement = _ref7.dropdownElement,\n    overflowParents = _ref7.overflowParents,\n    desiredMinWidth = _ref7.minWidth,\n    _ref7$preferCenter = _ref7.preferCenter,\n    preferCenter = _ref7$preferCenter === void 0 ? false : _ref7$preferCenter,\n    _ref7$stretchWidth = _ref7.stretchWidth,\n    stretchWidth = _ref7$stretchWidth === void 0 ? false : _ref7$stretchWidth,\n    _ref7$stretchHeight = _ref7.stretchHeight,\n    stretchHeight = _ref7$stretchHeight === void 0 ? false : _ref7$stretchHeight,\n    _ref7$isMobile = _ref7.isMobile,\n    isMobile = _ref7$isMobile === void 0 ? false : _ref7$isMobile,\n    _ref7$stretchBeyondTr = _ref7.stretchBeyondTriggerWidth,\n    stretchBeyondTriggerWidth = _ref7$stretchBeyondTr === void 0 ? false : _ref7$stretchBeyondTr;\n  // Determine the space available around the dropdown that it can grow in\n  var availableSpace = getAvailableSpace({\n    trigger: triggerElement,\n    overflowParents: overflowParents,\n    stretchWidth: stretchWidth,\n    stretchHeight: stretchHeight,\n    isMobile: isMobile\n  });\n  var _getWidths2 = getWidths({\n      triggerElement: triggerElement,\n      dropdownElement: dropdownElement,\n      desiredMinWidth: desiredMinWidth,\n      stretchBeyondTriggerWidth: stretchBeyondTriggerWidth\n    }),\n    idealWidth = _getWidths2.idealWidth,\n    minWidth = _getWidths2.minWidth,\n    triggerWidth = _getWidths2.triggerWidth;\n  var dropLeft;\n  var left = null;\n  var width = idealWidth;\n  //1. Can it be positioned with ideal width to the right?\n  if (idealWidth <= availableSpace.right) {\n    dropLeft = false;\n    //2. Can it be positioned with ideal width to the left?\n  } else if (idealWidth <= availableSpace.left) {\n    dropLeft = true;\n    //3. Fit into biggest available space either on left or right\n  } else {\n    dropLeft = availableSpace.left > availableSpace.right;\n    width = Math.max(availableSpace.left, availableSpace.right, minWidth);\n  }\n  if (preferCenter) {\n    var spillOver = (idealWidth - triggerWidth) / 2;\n    // availableSpace always includes the trigger width, but we want to exclude that\n    var availableOutsideLeft = availableSpace.left - triggerWidth;\n    var availableOutsideRight = availableSpace.right - triggerWidth;\n    var fitsInCenter = availableOutsideLeft >= spillOver && availableOutsideRight >= spillOver;\n    if (fitsInCenter) {\n      left = -spillOver;\n    }\n  }\n  var dropUp = availableSpace.below < dropdownElement.offsetHeight && availableSpace.above > availableSpace.below;\n  var availableHeight = dropUp ? availableSpace.above : availableSpace.below;\n  // Try and crop the bottom item when all options can't be displayed, affordance for \"there's more\"\n  var croppedHeight = stretchHeight ? availableHeight : Math.floor(availableHeight / 31) * 31 + 16;\n  return {\n    dropUp: dropUp,\n    dropLeft: dropLeft,\n    left: left === null ? 'auto' : \"\".concat(left, \"px\"),\n    height: \"\".concat(croppedHeight, \"px\"),\n    width: \"\".concat(width, \"px\")\n  };\n};\nexport var getInteriorDropdownPosition = function getInteriorDropdownPosition(trigger, dropdown, overflowParents, isMobile) {\n  var availableSpace = getInteriorAvailableSpace({\n    trigger: trigger,\n    overflowParents: overflowParents,\n    isMobile: isMobile\n  });\n  var _trigger$getBoundingC3 = trigger.getBoundingClientRect(),\n    triggerBottom = _trigger$getBoundingC3.bottom,\n    triggerTop = _trigger$getBoundingC3.top,\n    triggerWidth = _trigger$getBoundingC3.width;\n  var _getClosestParentDime = getClosestParentDimensions(trigger),\n    parentDropdownTop = _getClosestParentDime.top,\n    parentDropdownHeight = _getClosestParentDime.height;\n  var dropLeft;\n  var width = dropdown.getBoundingClientRect().width;\n  var top = triggerTop - parentDropdownTop;\n  if (width <= availableSpace.right) {\n    dropLeft = false;\n  } else if (width <= availableSpace.left) {\n    dropLeft = true;\n  } else {\n    dropLeft = availableSpace.left > availableSpace.right;\n    width = Math.max(availableSpace.left, availableSpace.right);\n  }\n  var left = dropLeft ? 0 - width : triggerWidth;\n  var dropUp = availableSpace.below < dropdown.offsetHeight && availableSpace.above > availableSpace.below;\n  var bottom = dropUp ? parentDropdownTop + parentDropdownHeight - triggerBottom : 0;\n  var availableHeight = dropUp ? availableSpace.above : availableSpace.below;\n  // Try and crop the bottom item when all options can't be displayed, affordance for \"there's more\"\n  var croppedHeight = Math.floor(availableHeight / 31) * 31 + 16;\n  return {\n    dropUp: dropUp,\n    dropLeft: dropLeft,\n    height: \"\".concat(croppedHeight, \"px\"),\n    width: \"\".concat(width, \"px\"),\n    top: \"\".concat(top, \"px\"),\n    bottom: \"\".concat(bottom, \"px\"),\n    left: \"\".concat(left, \"px\")\n  };\n};\nexport var calculatePosition = function calculatePosition(dropdownElement, triggerElement, verticalContainerElement, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth, stretchBeyondTriggerWidth) {\n  // cleaning previously assigned values,\n  // so that they are not reused in case of screen resize and similar events\n  verticalContainerElement.style.maxHeight = '';\n  dropdownElement.style.width = '';\n  dropdownElement.style.top = '';\n  dropdownElement.style.bottom = '';\n  dropdownElement.style.left = '';\n  dropdownElement.classList.remove(styles['dropdown-drop-left']);\n  dropdownElement.classList.remove(styles['dropdown-drop-right']);\n  dropdownElement.classList.remove(styles['dropdown-drop-up']);\n  var overflowParents = getOverflowParentDimensions({\n    element: dropdownElement,\n    excludeClosestParent: interior,\n    expandToViewport: expandToViewport,\n    canExpandOutsideViewport: stretchHeight\n  });\n  var position = interior ? getInteriorDropdownPosition(triggerElement, dropdownElement, overflowParents, isMobile) : getDropdownPosition({\n    triggerElement: triggerElement,\n    dropdownElement: dropdownElement,\n    overflowParents: overflowParents,\n    minWidth: minWidth,\n    preferCenter: preferCenter,\n    stretchWidth: stretchWidth,\n    stretchHeight: stretchHeight,\n    isMobile: isMobile,\n    stretchBeyondTriggerWidth: stretchBeyondTriggerWidth\n  });\n  var triggerBox = triggerElement.getBoundingClientRect();\n  return [position, triggerBox];\n};","map":{"version":3,"mappings":"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","names":["getBreakpointValue","getOverflowParents","getOverflowParentDimensions","styles","AVAILABLE_SPACE_RESERVE_DEFAULT","AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL","AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL","getClosestParentDimensions","element","parents","map","el","getBoundingClientRect","height","width","top","left","shift","defaultMaxDropdownWidth","getAvailableSpace","trigger","overflowParents","stretchWidth","stretchHeight","isMobile","availableSpaceReserveVertical","availableSpaceReserveHorizontal","triggerBottom","bottom","triggerLeft","triggerRight","right","reduce","overflowParent","above","below","offsetTop","currentAbove","offsetHeight","currentBelow","currentLeft","currentRight","Math","min","Number","MAX_VALUE","getInteriorAvailableSpace","AVAILABLE_SPACE_RESERVE_VERTICAL","AVAILABLE_SPACE_RESERVE_HORIZONTAL","triggerTop","getWidths","triggerElement","dropdownElement","desiredMinWidth","stretchBeyondTriggerWidth","triggerWidth","minWidth","maxWidth","max","requiredWidth","idealWidth","hasEnoughSpaceToStretchBeyondTriggerWidth","expandToViewport","excludeClosestParent","canExpandOutsideViewport","availableSpace","getDropdownPosition","preferCenter","dropLeft","spillOver","availableOutsideLeft","availableOutsideRight","fitsInCenter","dropUp","availableHeight","croppedHeight","floor","getInteriorDropdownPosition","dropdown","parentDropdownTop","parentDropdownHeight","calculatePosition","verticalContainerElement","interior","style","maxHeight","classList","remove","position","triggerBox"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/components/dropdown/lib/default/internal/components/dropdown/dropdown-fit-handler.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getBreakpointValue } from '../../breakpoints';\nimport { Dimensions, getOverflowParents, getOverflowParentDimensions } from '../../utils/scrollable-containers';\nimport styles from './styles.css.js';\n\nconst AVAILABLE_SPACE_RESERVE_DEFAULT = 50;\nconst AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL = 19; // 50 - 31\nconst AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL = 20;\n\ninterface AvailableSpace {\n  above: number;\n  below: number;\n  left: number;\n  right: number;\n}\nexport interface DropdownPosition {\n  height: string;\n  width: string;\n  dropUp: boolean;\n  dropLeft: boolean;\n  left: string;\n}\nexport interface InteriorDropdownPosition extends DropdownPosition {\n  bottom: string;\n  top: string;\n}\n\nconst getClosestParentDimensions = (element: HTMLElement): any => {\n  const parents = getOverflowParents(element).map(el => {\n    const { height, width, top, left } = el.getBoundingClientRect();\n    return {\n      height,\n      width,\n      top,\n      left,\n    };\n  });\n\n  return parents.shift();\n};\n\n// By default, most dropdowns should expand their content as necessary, but to a maximum of 465px (the XXS breakpoint).\n// This value was determined by UX but may be subject to change in the future, depending on the feedback.\nexport const defaultMaxDropdownWidth = getBreakpointValue('xxs');\n\nexport const getAvailableSpace = ({\n  trigger,\n  overflowParents,\n  stretchWidth = false,\n  stretchHeight = false,\n  isMobile,\n}: {\n  trigger: HTMLElement;\n  overflowParents: ReadonlyArray<Dimensions>;\n  stretchWidth?: boolean;\n  stretchHeight?: boolean;\n  isMobile?: boolean;\n}): AvailableSpace => {\n  const availableSpaceReserveVertical = stretchHeight\n    ? 0\n    : isMobile\n    ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL\n    : AVAILABLE_SPACE_RESERVE_DEFAULT;\n  const availableSpaceReserveHorizontal = stretchWidth\n    ? 0\n    : isMobile\n    ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL\n    : AVAILABLE_SPACE_RESERVE_DEFAULT;\n  const { bottom: triggerBottom, left: triggerLeft, right: triggerRight } = trigger.getBoundingClientRect();\n\n  return overflowParents.reduce(\n    ({ above, below, left, right }, overflowParent) => {\n      const offsetTop = triggerBottom - overflowParent.top;\n      const currentAbove = offsetTop - trigger.offsetHeight - availableSpaceReserveVertical;\n      const currentBelow = overflowParent.height - offsetTop - availableSpaceReserveVertical;\n      const currentLeft = triggerRight - overflowParent.left - availableSpaceReserveHorizontal;\n      const currentRight = overflowParent.left + overflowParent.width - triggerLeft - availableSpaceReserveHorizontal;\n\n      return {\n        above: Math.min(above, currentAbove),\n        below: Math.min(below, currentBelow),\n        left: Math.min(left, currentLeft),\n        right: Math.min(right, currentRight),\n      };\n    },\n    { above: Number.MAX_VALUE, below: Number.MAX_VALUE, left: Number.MAX_VALUE, right: Number.MAX_VALUE }\n  );\n};\n\nexport const getInteriorAvailableSpace = ({\n  trigger,\n  overflowParents,\n  isMobile,\n}: {\n  trigger: HTMLElement;\n  overflowParents: ReadonlyArray<Dimensions>;\n  isMobile?: boolean;\n}): AvailableSpace => {\n  const AVAILABLE_SPACE_RESERVE_VERTICAL = isMobile\n    ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL\n    : AVAILABLE_SPACE_RESERVE_DEFAULT;\n  const AVAILABLE_SPACE_RESERVE_HORIZONTAL = isMobile\n    ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL\n    : AVAILABLE_SPACE_RESERVE_DEFAULT;\n  const {\n    bottom: triggerBottom,\n    top: triggerTop,\n    left: triggerLeft,\n    right: triggerRight,\n  } = trigger.getBoundingClientRect();\n\n  return overflowParents.reduce(\n    ({ above, below, left, right }, overflowParent) => {\n      const currentAbove = triggerBottom - overflowParent.top - AVAILABLE_SPACE_RESERVE_VERTICAL;\n      const currentBelow = overflowParent.height - triggerTop + overflowParent.top - AVAILABLE_SPACE_RESERVE_VERTICAL;\n      const currentLeft = triggerLeft - overflowParent.left - AVAILABLE_SPACE_RESERVE_HORIZONTAL;\n      const currentRight =\n        overflowParent.left + overflowParent.width - triggerRight - AVAILABLE_SPACE_RESERVE_HORIZONTAL;\n\n      return {\n        above: Math.min(above, currentAbove),\n        below: Math.min(below, currentBelow),\n        left: Math.min(left, currentLeft),\n        right: Math.min(right, currentRight),\n      };\n    },\n    { above: Number.MAX_VALUE, below: Number.MAX_VALUE, left: Number.MAX_VALUE, right: Number.MAX_VALUE }\n  );\n};\n\nexport const getWidths = ({\n  triggerElement,\n  dropdownElement,\n  desiredMinWidth,\n  stretchBeyondTriggerWidth = false,\n}: {\n  triggerElement: HTMLElement;\n  dropdownElement: HTMLElement;\n  desiredMinWidth?: number;\n  stretchBeyondTriggerWidth?: boolean;\n}) => {\n  // Determine the width of the trigger\n  const triggerWidth = triggerElement.getBoundingClientRect().width;\n  // Minimum width is determined by either an explicit number (desiredMinWidth) or the trigger width\n  const minWidth = desiredMinWidth ? Math.min(triggerWidth, desiredMinWidth) : triggerWidth;\n  // If stretchBeyondTriggerWidth is true, the maximum width is the XS breakpoint (465px) or the trigger width (if bigger).\n  const maxWidth = stretchBeyondTriggerWidth ? Math.max(defaultMaxDropdownWidth, triggerWidth) : Number.MAX_VALUE;\n  // Determine the actual dropdown width, the size that it \"wants\" to be\n  const requiredWidth = dropdownElement.getBoundingClientRect().width;\n  // Try to achieve the required/desired width within the given parameters\n  const idealWidth = Math.min(Math.max(requiredWidth, minWidth), maxWidth);\n  return { idealWidth, minWidth, triggerWidth };\n};\n\nexport const hasEnoughSpaceToStretchBeyondTriggerWidth = ({\n  triggerElement,\n  dropdownElement,\n  desiredMinWidth,\n  expandToViewport,\n  stretchWidth,\n  stretchHeight,\n  isMobile,\n}: {\n  triggerElement: HTMLElement;\n  dropdownElement: HTMLElement;\n  desiredMinWidth?: number;\n  expandToViewport: boolean;\n  stretchWidth: boolean;\n  stretchHeight: boolean;\n  isMobile: boolean;\n}) => {\n  const overflowParents = getOverflowParentDimensions({\n    element: dropdownElement,\n    excludeClosestParent: false,\n    expandToViewport,\n    canExpandOutsideViewport: stretchHeight,\n  });\n  const { idealWidth } = getWidths({\n    triggerElement: triggerElement,\n    dropdownElement,\n    desiredMinWidth,\n    stretchBeyondTriggerWidth: true,\n  });\n  const availableSpace = getAvailableSpace({\n    trigger: triggerElement,\n    overflowParents,\n    stretchWidth,\n    stretchHeight,\n    isMobile,\n  });\n  return idealWidth <= availableSpace.left || idealWidth <= availableSpace.right;\n};\n\nexport const getDropdownPosition = ({\n  triggerElement,\n  dropdownElement,\n  overflowParents,\n  minWidth: desiredMinWidth,\n  preferCenter = false,\n  stretchWidth = false,\n  stretchHeight = false,\n  isMobile = false,\n  stretchBeyondTriggerWidth = false,\n}: {\n  triggerElement: HTMLElement;\n  dropdownElement: HTMLElement;\n  overflowParents: ReadonlyArray<Dimensions>;\n  minWidth?: number;\n  preferCenter?: boolean;\n  stretchWidth?: boolean;\n  stretchHeight?: boolean;\n  isMobile?: boolean;\n  stretchBeyondTriggerWidth?: boolean;\n}): DropdownPosition => {\n  // Determine the space available around the dropdown that it can grow in\n  const availableSpace = getAvailableSpace({\n    trigger: triggerElement,\n    overflowParents,\n    stretchWidth,\n    stretchHeight,\n    isMobile,\n  });\n  const { idealWidth, minWidth, triggerWidth } = getWidths({\n    triggerElement,\n    dropdownElement,\n    desiredMinWidth,\n    stretchBeyondTriggerWidth,\n  });\n\n  let dropLeft: boolean;\n  let left: number | null = null;\n  let width = idealWidth;\n\n  //1. Can it be positioned with ideal width to the right?\n  if (idealWidth <= availableSpace.right) {\n    dropLeft = false;\n    //2. Can it be positioned with ideal width to the left?\n  } else if (idealWidth <= availableSpace.left) {\n    dropLeft = true;\n    //3. Fit into biggest available space either on left or right\n  } else {\n    dropLeft = availableSpace.left > availableSpace.right;\n    width = Math.max(availableSpace.left, availableSpace.right, minWidth);\n  }\n\n  if (preferCenter) {\n    const spillOver = (idealWidth - triggerWidth) / 2;\n\n    // availableSpace always includes the trigger width, but we want to exclude that\n    const availableOutsideLeft = availableSpace.left - triggerWidth;\n    const availableOutsideRight = availableSpace.right - triggerWidth;\n\n    const fitsInCenter = availableOutsideLeft >= spillOver && availableOutsideRight >= spillOver;\n    if (fitsInCenter) {\n      left = -spillOver;\n    }\n  }\n\n  const dropUp = availableSpace.below < dropdownElement.offsetHeight && availableSpace.above > availableSpace.below;\n  const availableHeight = dropUp ? availableSpace.above : availableSpace.below;\n  // Try and crop the bottom item when all options can't be displayed, affordance for \"there's more\"\n  const croppedHeight = stretchHeight ? availableHeight : Math.floor(availableHeight / 31) * 31 + 16;\n\n  return {\n    dropUp,\n    dropLeft,\n    left: left === null ? 'auto' : `${left}px`,\n    height: `${croppedHeight}px`,\n    width: `${width}px`,\n  };\n};\n\nexport const getInteriorDropdownPosition = (\n  trigger: HTMLElement,\n  dropdown: HTMLElement,\n  overflowParents: ReadonlyArray<Dimensions>,\n  isMobile?: boolean\n): InteriorDropdownPosition => {\n  const availableSpace = getInteriorAvailableSpace({ trigger, overflowParents, isMobile });\n  const { bottom: triggerBottom, top: triggerTop, width: triggerWidth } = trigger.getBoundingClientRect();\n  const { top: parentDropdownTop, height: parentDropdownHeight } = getClosestParentDimensions(trigger);\n\n  let dropLeft;\n\n  let width = dropdown.getBoundingClientRect().width;\n  const top = triggerTop - parentDropdownTop;\n  if (width <= availableSpace.right) {\n    dropLeft = false;\n  } else if (width <= availableSpace.left) {\n    dropLeft = true;\n  } else {\n    dropLeft = availableSpace.left > availableSpace.right;\n    width = Math.max(availableSpace.left, availableSpace.right);\n  }\n\n  const left = dropLeft ? 0 - width : triggerWidth;\n\n  const dropUp = availableSpace.below < dropdown.offsetHeight && availableSpace.above > availableSpace.below;\n  const bottom = dropUp ? parentDropdownTop + parentDropdownHeight - triggerBottom : 0;\n  const availableHeight = dropUp ? availableSpace.above : availableSpace.below;\n  // Try and crop the bottom item when all options can't be displayed, affordance for \"there's more\"\n  const croppedHeight = Math.floor(availableHeight / 31) * 31 + 16;\n\n  return {\n    dropUp,\n    dropLeft,\n    height: `${croppedHeight}px`,\n    width: `${width}px`,\n    top: `${top}px`,\n    bottom: `${bottom}px`,\n    left: `${left}px`,\n  };\n};\n\nexport const calculatePosition = (\n  dropdownElement: HTMLDivElement,\n  triggerElement: HTMLDivElement,\n  verticalContainerElement: HTMLDivElement,\n  interior: boolean,\n  expandToViewport: boolean,\n  preferCenter: boolean,\n  stretchWidth: boolean,\n  stretchHeight: boolean,\n  isMobile: boolean,\n  minWidth?: number,\n  stretchBeyondTriggerWidth?: boolean\n): [DropdownPosition, DOMRect] => {\n  // cleaning previously assigned values,\n  // so that they are not reused in case of screen resize and similar events\n  verticalContainerElement.style.maxHeight = '';\n  dropdownElement.style.width = '';\n  dropdownElement.style.top = '';\n  dropdownElement.style.bottom = '';\n  dropdownElement.style.left = '';\n\n  dropdownElement.classList.remove(styles['dropdown-drop-left']);\n  dropdownElement.classList.remove(styles['dropdown-drop-right']);\n  dropdownElement.classList.remove(styles['dropdown-drop-up']);\n\n  const overflowParents = getOverflowParentDimensions({\n    element: dropdownElement,\n    excludeClosestParent: interior,\n    expandToViewport,\n    canExpandOutsideViewport: stretchHeight,\n  });\n  const position = interior\n    ? getInteriorDropdownPosition(triggerElement, dropdownElement, overflowParents, isMobile)\n    : getDropdownPosition({\n        triggerElement,\n        dropdownElement,\n        overflowParents,\n        minWidth,\n        preferCenter,\n        stretchWidth,\n        stretchHeight,\n        isMobile,\n        stretchBeyondTriggerWidth,\n      });\n  const triggerBox = triggerElement.getBoundingClientRect();\n  return [position, triggerBox];\n};\n"]},"metadata":{},"sourceType":"module"}