{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport Option from '../../internal/components/option';\nimport SelectableItem from '../../internal/components/selectable-item';\nimport { getBaseProps } from '../../internal/base-component';\nimport CheckboxIcon from '../../internal/components/checkbox-icon';\nconst MultiSelectItem = (_a, ref) => {\n  var {\n      option,\n      highlighted,\n      selected,\n      filteringValue,\n      hasCheckbox,\n      virtualPosition,\n      padBottom,\n      isNextSelected,\n      indeterminate,\n      screenReaderContent,\n      ariaPosinset,\n      ariaSetsize,\n      highlightType\n    } = _a,\n    restProps = __rest(_a, [\"option\", \"highlighted\", \"selected\", \"filteringValue\", \"hasCheckbox\", \"virtualPosition\", \"padBottom\", \"isNextSelected\", \"indeterminate\", \"screenReaderContent\", \"ariaPosinset\", \"ariaSetsize\", \"highlightType\"]);\n  const baseProps = getBaseProps(restProps);\n  const isParent = option.type === 'parent';\n  const isChild = option.type === 'child';\n  const wrappedOption = option.option;\n  const disabled = option.disabled || wrappedOption.disabled;\n  const className = clsx(styles.item, {\n    [styles.disabled]: disabled\n  });\n  return React.createElement(SelectableItem, Object.assign({\n    ariaChecked: isParent && indeterminate ? 'mixed' : Boolean(selected),\n    selected: selected,\n    isNextSelected: isNextSelected,\n    highlighted: highlighted,\n    disabled: disabled,\n    isParent: isParent,\n    isChild: isChild,\n    highlightType: highlightType,\n    ref: ref,\n    virtualPosition: virtualPosition,\n    padBottom: padBottom,\n    useInteractiveGroups: true,\n    screenReaderContent: screenReaderContent,\n    ariaPosinset: ariaPosinset,\n    ariaSetsize: ariaSetsize\n  }, baseProps), React.createElement(\"div\", {\n    className: className\n  }, hasCheckbox && React.createElement(\"div\", {\n    className: styles.checkbox\n  }, React.createElement(CheckboxIcon, {\n    checked: selected,\n    indeterminate: isParent && indeterminate,\n    disabled: option.disabled\n  })), React.createElement(Option, {\n    option: Object.assign(Object.assign({}, wrappedOption), {\n      disabled\n    }),\n    highlightedOption: highlighted,\n    selectedOption: selected,\n    highlightText: filteringValue,\n    isGroupOption: isParent\n  })));\n};\nexport default React.memo(React.forwardRef(MultiSelectItem));","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,MAAM,MAAM,kCAAkC;AACrD,OAAOC,cAAc,MAAM,2CAA2C;AACtE,SAASC,YAAY,QAAQ,+BAA+B;AAE5D,OAAOC,YAAY,MAAM,yCAAyC;AAkBlE,MAAMC,eAAe,GAAG,CACtBC,EAeY,EACZC,GAA8B,KAC5B;MAjBF;MACEC,MAAM;MACNC,WAAW;MACXC,QAAQ;MACRC,cAAc;MACdC,WAAW;MACXC,eAAe;MACfC,SAAS;MACTC,cAAc;MACdC,aAAa;MACbC,mBAAmB;MACnBC,YAAY;MACZC,WAAW;MACXC;IAAa,MAEH;IADPC,SAAS,cAdd,gNAeC,CADa;EAId,MAAMC,SAAS,GAAGnB,YAAY,CAACkB,SAAS,CAAC;EAEzC,MAAME,QAAQ,GAAGf,MAAM,CAACgB,IAAI,KAAK,QAAQ;EACzC,MAAMC,OAAO,GAAGjB,MAAM,CAACgB,IAAI,KAAK,OAAO;EACvC,MAAME,aAAa,GAAqBlB,MAAM,CAACA,MAAM;EACrD,MAAMmB,QAAQ,GAAGnB,MAAM,CAACmB,QAAQ,IAAID,aAAa,CAACC,QAAQ;EAC1D,MAAMC,SAAS,GAAG7B,IAAI,CAACC,MAAM,CAAC6B,IAAI,EAAE;IAClC,CAAC7B,MAAM,CAAC2B,QAAQ,GAAGA;GACpB,CAAC;EAEF,OACE7B,oBAACI,cAAc;IACb4B,WAAW,EAAEP,QAAQ,IAAIP,aAAa,GAAG,OAAO,GAAGe,OAAO,CAACrB,QAAQ,CAAC;IACpEA,QAAQ,EAAEA,QAAQ;IAClBK,cAAc,EAAEA,cAAc;IAC9BN,WAAW,EAAEA,WAAW;IACxBkB,QAAQ,EAAEA,QAAQ;IAClBJ,QAAQ,EAAEA,QAAQ;IAClBE,OAAO,EAAEA,OAAO;IAChBL,aAAa,EAAEA,aAAa;IAC5Bb,GAAG,EAAEA,GAAG;IACRM,eAAe,EAAEA,eAAe;IAChCC,SAAS,EAAEA,SAAS;IACpBkB,oBAAoB,EAAE,IAAI;IAC1Bf,mBAAmB,EAAEA,mBAAmB;IACxCC,YAAY,EAAEA,YAAY;IAC1BC,WAAW,EAAEA;EAAW,GACpBG,SAAS,GAEbxB;IAAK8B,SAAS,EAAEA;EAAS,GACtBhB,WAAW,IACVd;IAAK8B,SAAS,EAAE5B,MAAM,CAACiC;EAAQ,GAC7BnC,oBAACM,YAAY;IAAC8B,OAAO,EAAExB,QAAQ;IAAEM,aAAa,EAAEO,QAAQ,IAAIP,aAAa;IAAEW,QAAQ,EAAEnB,MAAM,CAACmB;EAAQ,EAAI,CAE3G,EACD7B,oBAACG,MAAM;IACLO,MAAM,kCAAOkB,aAAa;MAAEC;IAAQ;IACpCQ,iBAAiB,EAAE1B,WAAW;IAC9B2B,cAAc,EAAE1B,QAAQ;IACxB2B,aAAa,EAAE1B,cAAc;IAC7B2B,aAAa,EAAEf;EAAQ,EACvB,CACE,CACS;AAErB,CAAC;AAED,eAAezB,KAAK,CAACyC,IAAI,CAACzC,KAAK,CAAC0C,UAAU,CAACnC,eAAe,CAAC,CAAC","names":["React","clsx","styles","Option","SelectableItem","getBaseProps","CheckboxIcon","MultiSelectItem","_a","ref","option","highlighted","selected","filteringValue","hasCheckbox","virtualPosition","padBottom","isNextSelected","indeterminate","screenReaderContent","ariaPosinset","ariaSetsize","highlightType","restProps","baseProps","isParent","type","isChild","wrappedOption","disabled","className","item","ariaChecked","Boolean","useInteractiveGroups","checkbox","checked","highlightedOption","selectedOption","highlightText","isGroupOption","memo","forwardRef"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/select/parts/lib/default/select/parts/multiselect-item.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport Option from '../../internal/components/option';\nimport SelectableItem from '../../internal/components/selectable-item';\nimport { getBaseProps } from '../../internal/base-component';\nimport { DropdownOption, OptionDefinition } from '../../internal/components/option/interfaces';\nimport CheckboxIcon from '../../internal/components/checkbox-icon';\nimport { HighlightType } from '../../internal/components/options-list/utils/use-highlight-option.js';\nexport interface ItemProps {\n  option: DropdownOption;\n  highlighted?: boolean;\n  selected?: boolean;\n  indeterminate?: boolean;\n  filteringValue?: string;\n  hasCheckbox?: boolean;\n  virtualPosition?: number;\n  padBottom?: boolean;\n  isNextSelected?: boolean;\n  screenReaderContent?: string;\n  ariaPosinset?: number;\n  ariaSetsize?: number;\n  highlightType?: HighlightType;\n}\n\nconst MultiSelectItem = (\n  {\n    option,\n    highlighted,\n    selected,\n    filteringValue,\n    hasCheckbox,\n    virtualPosition,\n    padBottom,\n    isNextSelected,\n    indeterminate,\n    screenReaderContent,\n    ariaPosinset,\n    ariaSetsize,\n    highlightType,\n    ...restProps\n  }: ItemProps,\n  ref: React.Ref<HTMLDivElement>\n) => {\n  const baseProps = getBaseProps(restProps);\n\n  const isParent = option.type === 'parent';\n  const isChild = option.type === 'child';\n  const wrappedOption: OptionDefinition = option.option;\n  const disabled = option.disabled || wrappedOption.disabled;\n  const className = clsx(styles.item, {\n    [styles.disabled]: disabled,\n  });\n\n  return (\n    <SelectableItem\n      ariaChecked={isParent && indeterminate ? 'mixed' : Boolean(selected)}\n      selected={selected}\n      isNextSelected={isNextSelected}\n      highlighted={highlighted}\n      disabled={disabled}\n      isParent={isParent}\n      isChild={isChild}\n      highlightType={highlightType}\n      ref={ref}\n      virtualPosition={virtualPosition}\n      padBottom={padBottom}\n      useInteractiveGroups={true}\n      screenReaderContent={screenReaderContent}\n      ariaPosinset={ariaPosinset}\n      ariaSetsize={ariaSetsize}\n      {...baseProps}\n    >\n      <div className={className}>\n        {hasCheckbox && (\n          <div className={styles.checkbox}>\n            <CheckboxIcon checked={selected} indeterminate={isParent && indeterminate} disabled={option.disabled} />\n          </div>\n        )}\n        <Option\n          option={{ ...wrappedOption, disabled }}\n          highlightedOption={highlighted}\n          selectedOption={selected}\n          highlightText={filteringValue}\n          isGroupOption={isParent}\n        />\n      </div>\n    </SelectableItem>\n  );\n};\n\nexport default React.memo(React.forwardRef(MultiSelectItem));\n"]},"metadata":{},"sourceType":"module"}