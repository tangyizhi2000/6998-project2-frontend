{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { Label, LabelTag, Description, Tags, FilteringTags, OptionIcon } from './option-parts';\nimport { getBaseProps } from '../../base-component';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { isDevelopment } from '../../is-development';\nfunction validateStringValue(value, propertyName) {\n  if (typeof value !== 'undefined' && typeof value !== 'string') {\n    warnOnce('DropdownOption', `This component only supports string values, but \"option.${propertyName}\" has ${typeof value} type. The component may work incorrectly.`);\n  }\n}\nconst Option = _a => {\n  var _b, _c, _d, _e;\n  var {\n      option,\n      highlightText,\n      triggerVariant = false,\n      isGroupOption = false,\n      isGenericGroup = true,\n      highlightedOption = false,\n      selectedOption = false\n    } = _a,\n    restProps = __rest(_a, [\"option\", \"highlightText\", \"triggerVariant\", \"isGroupOption\", \"isGenericGroup\", \"highlightedOption\", \"selectedOption\"]);\n  if (!option) {\n    return null;\n  }\n  const {\n    disabled\n  } = option;\n  const baseProps = getBaseProps(restProps);\n  if (isDevelopment) {\n    validateStringValue(option.label, 'label');\n    validateStringValue(option.description, 'description');\n    validateStringValue(option.labelTag, 'labelTag');\n    (_b = option.tags) === null || _b === void 0 ? void 0 : _b.forEach((tag, index) => {\n      validateStringValue(tag, `tags[${index}]`);\n    });\n    (_c = option.filteringTags) === null || _c === void 0 ? void 0 : _c.forEach((tag, index) => {\n      validateStringValue(tag, `filteringTags[${index}]`);\n    });\n  }\n  const className = clsx(styles.option, disabled && styles.disabled, isGroupOption && styles.parent, highlightedOption && styles.highlighted);\n  const icon = option.__customIcon || React.createElement(OptionIcon, {\n    name: option.iconName,\n    url: option.iconUrl,\n    svg: option.iconSvg,\n    alt: option.iconAlt,\n    size: option.description || option.tags ? 'big' : 'normal'\n  });\n  // The option is conditionally assigned 'title' and 'aria-disabled' attributes to ensure it is viewed as a (generic) group  by assistive technology only when necessary.\n  // Omitting the props might be necessary if they are provided on the parent element to avoid nested groups.\n  // See https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/generic_role\n  const genericGroupProps = isGenericGroup ? {\n    title: (_d = option.label) !== null && _d !== void 0 ? _d : option.value,\n    'aria-disabled': disabled\n  } : undefined;\n  return React.createElement(\"span\", Object.assign({\n    \"data-value\": option.value,\n    className: className,\n    lang: option.lang\n  }, genericGroupProps, baseProps), icon, React.createElement(\"span\", {\n    className: clsx(styles.content)\n  }, React.createElement(\"span\", {\n    className: clsx(styles['label-content'])\n  }, React.createElement(Label, {\n    label: (_e = option.label) !== null && _e !== void 0 ? _e : option.value,\n    prefix: option.__labelPrefix,\n    highlightText: highlightText,\n    triggerVariant: triggerVariant\n  }), React.createElement(LabelTag, {\n    labelTag: option.labelTag,\n    highlightText: highlightText,\n    triggerVariant: triggerVariant\n  })), React.createElement(Description, {\n    description: option.description,\n    highlightedOption: highlightedOption,\n    selectedOption: selectedOption,\n    highlightText: highlightText,\n    triggerVariant: triggerVariant\n  }), React.createElement(Tags, {\n    tags: option.tags,\n    highlightedOption: highlightedOption,\n    selectedOption: selectedOption,\n    highlightText: highlightText,\n    triggerVariant: triggerVariant\n  }), React.createElement(FilteringTags, {\n    filteringTags: option.filteringTags,\n    highlightedOption: highlightedOption,\n    selectedOption: selectedOption,\n    highlightText: highlightText,\n    triggerVariant: triggerVariant\n  })));\n};\nexport default Option;","map":{"version":3,"mappings":"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","names":["React","clsx","styles","Label","LabelTag","Description","Tags","FilteringTags","OptionIcon","getBaseProps","warnOnce","isDevelopment","validateStringValue","value","propertyName","Option","_a","option","highlightText","triggerVariant","isGroupOption","isGenericGroup","highlightedOption","selectedOption","restProps","disabled","baseProps","label","description","labelTag","tags","forEach","tag","index","filteringTags","className","parent","highlighted","icon","__customIcon","name","iconName","url","iconUrl","svg","iconSvg","alt","iconAlt","size","genericGroupProps","title","undefined","lang","content","prefix","__labelPrefix"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/components/option/lib/default/internal/components/option/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { OptionProps } from './interfaces';\nimport { Label, LabelTag, Description, Tags, FilteringTags, OptionIcon } from './option-parts';\nimport { getBaseProps } from '../../base-component';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { isDevelopment } from '../../is-development';\n\nexport { OptionProps };\n\nfunction validateStringValue(value: string | undefined, propertyName: string) {\n  if (typeof value !== 'undefined' && typeof value !== 'string') {\n    warnOnce(\n      'DropdownOption',\n      `This component only supports string values, but \"option.${propertyName}\" has ${typeof value} type. The component may work incorrectly.`\n    );\n  }\n}\n\nconst Option = ({\n  option,\n  highlightText,\n  triggerVariant = false,\n  isGroupOption = false,\n  isGenericGroup = true,\n  highlightedOption = false,\n  selectedOption = false,\n  ...restProps\n}: OptionProps) => {\n  if (!option) {\n    return null;\n  }\n  const { disabled } = option;\n  const baseProps = getBaseProps(restProps);\n\n  if (isDevelopment) {\n    validateStringValue(option.label, 'label');\n    validateStringValue(option.description, 'description');\n    validateStringValue(option.labelTag, 'labelTag');\n    option.tags?.forEach((tag, index) => {\n      validateStringValue(tag, `tags[${index}]`);\n    });\n    option.filteringTags?.forEach((tag, index) => {\n      validateStringValue(tag, `filteringTags[${index}]`);\n    });\n  }\n\n  const className = clsx(\n    styles.option,\n    disabled && styles.disabled,\n    isGroupOption && styles.parent,\n    highlightedOption && styles.highlighted\n  );\n\n  const icon = option.__customIcon || (\n    <OptionIcon\n      name={option.iconName}\n      url={option.iconUrl}\n      svg={option.iconSvg}\n      alt={option.iconAlt}\n      size={option.description || option.tags ? 'big' : 'normal'}\n    />\n  );\n\n  // The option is conditionally assigned 'title' and 'aria-disabled' attributes to ensure it is viewed as a (generic) group  by assistive technology only when necessary.\n  // Omitting the props might be necessary if they are provided on the parent element to avoid nested groups.\n  // See https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/generic_role\n  const genericGroupProps = isGenericGroup\n    ? {\n        title: option.label ?? option.value,\n        'aria-disabled': disabled,\n      }\n    : undefined;\n\n  return (\n    <span data-value={option.value} className={className} lang={option.lang} {...genericGroupProps} {...baseProps}>\n      {icon}\n      <span className={clsx(styles.content)}>\n        <span className={clsx(styles['label-content'])}>\n          <Label\n            label={option.label ?? option.value}\n            prefix={option.__labelPrefix}\n            highlightText={highlightText}\n            triggerVariant={triggerVariant}\n          />\n          <LabelTag labelTag={option.labelTag} highlightText={highlightText} triggerVariant={triggerVariant} />\n        </span>\n        <Description\n          description={option.description}\n          highlightedOption={highlightedOption}\n          selectedOption={selectedOption}\n          highlightText={highlightText}\n          triggerVariant={triggerVariant}\n        />\n        <Tags\n          tags={option.tags}\n          highlightedOption={highlightedOption}\n          selectedOption={selectedOption}\n          highlightText={highlightText}\n          triggerVariant={triggerVariant}\n        />\n        <FilteringTags\n          filteringTags={option.filteringTags}\n          highlightedOption={highlightedOption}\n          selectedOption={selectedOption}\n          highlightText={highlightText}\n          triggerVariant={triggerVariant}\n        />\n      </span>\n    </span>\n  );\n};\n\nexport default Option;\n"]},"metadata":{},"sourceType":"module"}