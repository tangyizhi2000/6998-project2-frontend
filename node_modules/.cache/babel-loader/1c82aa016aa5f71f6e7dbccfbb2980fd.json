{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * The cache is used to avoid duplicate computations for the same initial state and path.\n * The cache must be invalidated once the items layout has changed e.g. as result of the operation commit.\n * The cache is a tree of nodes with the root node representing the initial state and empty path. The\n * rest of the tree store all previous state computations per path.\n */\nexport class LayoutEngineCacheNode {\n  constructor(state) {\n    this.position = null;\n    this.next = new Array();\n    this.state = state;\n  }\n  /**\n   * The function takes path position and the callback to compute the corresponding state if not yet cached.\n   * It returns the next cache node to take the next path position if available:\n   *\n   * const root = new LayoutEngineCacheNode(state)\n   *\n   * const x1y0 = root\n   *    .matches({ x: 0, y: 0 }, () => compute({ x: 0, y: 0 })) // computes\n   *    .matches({ x: 1, y: 0 }, () => compute({ x: 1, y: 0 })) // computes\n   *    .state;\n   *\n   * const x2y0 = root\n   *    .matches({ x: 0, y: 0 }, () => compute({ x: 0, y: 0 }))\n   *    .matches({ x: 1, y: 0 }, () => compute({ x: 1, y: 0 }))\n   *    .matches({ x: 2, y: 0 }, () => compute({ x: 2, y: 0 })) // computes\n   *    .state;\n   */\n  matches(position, compute) {\n    for (const nextNode of this.next) {\n      if (nextNode.position.x === position.x && nextNode.position.y === position.y) {\n        return nextNode;\n      }\n    }\n    const nextNode = new LayoutEngineCacheNode(compute());\n    nextNode.position = position;\n    this.next.push(nextNode);\n    return nextNode;\n  }\n}","map":{"version":3,"names":["LayoutEngineCacheNode","constructor","state","position","next","Array","matches","compute","nextNode","x","y","push"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/board-components/internal/layout-engine/engine-cache.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * The cache is used to avoid duplicate computations for the same initial state and path.\n * The cache must be invalidated once the items layout has changed e.g. as result of the operation commit.\n * The cache is a tree of nodes with the root node representing the initial state and empty path. The\n * rest of the tree store all previous state computations per path.\n */\nexport class LayoutEngineCacheNode {\n    constructor(state) {\n        this.position = null;\n        this.next = new Array();\n        this.state = state;\n    }\n    /**\n     * The function takes path position and the callback to compute the corresponding state if not yet cached.\n     * It returns the next cache node to take the next path position if available:\n     *\n     * const root = new LayoutEngineCacheNode(state)\n     *\n     * const x1y0 = root\n     *    .matches({ x: 0, y: 0 }, () => compute({ x: 0, y: 0 })) // computes\n     *    .matches({ x: 1, y: 0 }, () => compute({ x: 1, y: 0 })) // computes\n     *    .state;\n     *\n     * const x2y0 = root\n     *    .matches({ x: 0, y: 0 }, () => compute({ x: 0, y: 0 }))\n     *    .matches({ x: 1, y: 0 }, () => compute({ x: 1, y: 0 }))\n     *    .matches({ x: 2, y: 0 }, () => compute({ x: 2, y: 0 })) // computes\n     *    .state;\n     */\n    matches(position, compute) {\n        for (const nextNode of this.next) {\n            if (nextNode.position.x === position.x && nextNode.position.y === position.y) {\n                return nextNode;\n            }\n        }\n        const nextNode = new LayoutEngineCacheNode(compute());\n        nextNode.position = position;\n        this.next.push(nextNode);\n        return nextNode;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,qBAAqB,CAAC;EAC/BC,WAAW,CAACC,KAAK,EAAE;IACf,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,IAAI,GAAG,IAAIC,KAAK,EAAE;IACvB,IAAI,CAACH,KAAK,GAAGA,KAAK;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,OAAO,CAACH,QAAQ,EAAEI,OAAO,EAAE;IACvB,KAAK,MAAMC,QAAQ,IAAI,IAAI,CAACJ,IAAI,EAAE;MAC9B,IAAII,QAAQ,CAACL,QAAQ,CAACM,CAAC,KAAKN,QAAQ,CAACM,CAAC,IAAID,QAAQ,CAACL,QAAQ,CAACO,CAAC,KAAKP,QAAQ,CAACO,CAAC,EAAE;QAC1E,OAAOF,QAAQ;MACnB;IACJ;IACA,MAAMA,QAAQ,GAAG,IAAIR,qBAAqB,CAACO,OAAO,EAAE,CAAC;IACrDC,QAAQ,CAACL,QAAQ,GAAGA,QAAQ;IAC5B,IAAI,CAACC,IAAI,CAACO,IAAI,CAACH,QAAQ,CAAC;IACxB,OAAOA,QAAQ;EACnB;AACJ"},"metadata":{},"sourceType":"module"}