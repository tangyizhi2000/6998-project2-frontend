{"ast":null,"code":"import { KeyCode } from '../../internal/keycode';\nconst KEYBOARD_SINGLE_STEP_SIZE = 10;\nconst KEYBOARD_MULTIPLE_STEPS_SIZE = 60;\nconst getCurrentSize = panelRef => {\n  if (!panelRef || !panelRef.current) {\n    return {\n      panelHeight: 0,\n      panelWidth: 0\n    };\n  }\n  return {\n    panelHeight: panelRef.current.clientHeight,\n    panelWidth: panelRef.current.clientWidth\n  };\n};\nexport const useKeyboardEvents = _ref => {\n  let {\n    position,\n    onResize,\n    panelRef\n  } = _ref;\n  return event => {\n    let currentSize;\n    let maxSize;\n    const {\n      panelHeight,\n      panelWidth\n    } = getCurrentSize(panelRef);\n    if (position === 'side') {\n      currentSize = panelWidth;\n      // don't need the exact max size as it's constrained in the set size function\n      maxSize = window.innerWidth;\n    } else {\n      currentSize = panelHeight;\n      // don't need the exact max size as it's constrained in the set size function\n      maxSize = window.innerHeight;\n    }\n    const primaryGrowKey = position === 'bottom' ? KeyCode.up : KeyCode.left;\n    const primaryShrinkKey = position === 'bottom' ? KeyCode.down : KeyCode.right;\n    const altGrowKey = position === 'bottom' ? KeyCode.right : KeyCode.down;\n    const altShrinkKey = position === 'bottom' ? KeyCode.left : KeyCode.up;\n    let isEventHandled = true;\n    switch (event.keyCode) {\n      case primaryGrowKey:\n      case altGrowKey:\n        onResize(currentSize + KEYBOARD_SINGLE_STEP_SIZE);\n        break;\n      case primaryShrinkKey:\n      case altShrinkKey:\n        onResize(currentSize - KEYBOARD_SINGLE_STEP_SIZE);\n        break;\n      case KeyCode.pageUp:\n        onResize(currentSize + KEYBOARD_MULTIPLE_STEPS_SIZE);\n        break;\n      case KeyCode.pageDown:\n        onResize(currentSize - KEYBOARD_MULTIPLE_STEPS_SIZE);\n        break;\n      case KeyCode.home:\n        onResize(maxSize);\n        break;\n      case KeyCode.end:\n        onResize(0);\n        break;\n      default:\n        isEventHandled = false;\n    }\n    if (isEventHandled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n};","map":{"version":3,"mappings":"AAGA,SAASA,OAAO,QAAQ,wBAAwB;AAGhD,MAAMC,yBAAyB,GAAG,EAAE;AACpC,MAAMC,4BAA4B,GAAG,EAAE;AAEvC,MAAMC,cAAc,GAAIC,QAA0C,IAAI;EACpE,IAAI,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACC,OAAO,EAAE;IAClC,OAAO;MACLC,WAAW,EAAE,CAAC;MACdC,UAAU,EAAE;KACb;;EAGH,OAAO;IACLD,WAAW,EAAEF,QAAQ,CAACC,OAAO,CAACG,YAAY;IAC1CD,UAAU,EAAEH,QAAQ,CAACC,OAAO,CAACI;GAC9B;AACH,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,QAAuD;EAAA,IAAtD;IAAEC,QAAQ;IAAEC,QAAQ;IAAER;EAAQ,CAAoB;EAClF,OAAQS,KAA0B,IAAI;IACpC,IAAIC,WAAW;IACf,IAAIC,OAAO;IAEX,MAAM;MAAET,WAAW;MAAEC;IAAU,CAAE,GAAGJ,cAAc,CAACC,QAAQ,CAAC;IAE5D,IAAIO,QAAQ,KAAK,MAAM,EAAE;MACvBG,WAAW,GAAGP,UAAU;MACxB;MACAQ,OAAO,GAAGC,MAAM,CAACC,UAAU;KAC5B,MAAM;MACLH,WAAW,GAAGR,WAAW;MACzB;MACAS,OAAO,GAAGC,MAAM,CAACE,WAAW;;IAG9B,MAAMC,cAAc,GAAGR,QAAQ,KAAK,QAAQ,GAAGX,OAAO,CAACoB,EAAE,GAAGpB,OAAO,CAACqB,IAAI;IACxE,MAAMC,gBAAgB,GAAGX,QAAQ,KAAK,QAAQ,GAAGX,OAAO,CAACuB,IAAI,GAAGvB,OAAO,CAACwB,KAAK;IAC7E,MAAMC,UAAU,GAAGd,QAAQ,KAAK,QAAQ,GAAGX,OAAO,CAACwB,KAAK,GAAGxB,OAAO,CAACuB,IAAI;IACvE,MAAMG,YAAY,GAAGf,QAAQ,KAAK,QAAQ,GAAGX,OAAO,CAACqB,IAAI,GAAGrB,OAAO,CAACoB,EAAE;IAEtE,IAAIO,cAAc,GAAG,IAAI;IACzB,QAAQd,KAAK,CAACe,OAAO;MACnB,KAAKT,cAAc;MACnB,KAAKM,UAAU;QACbb,QAAQ,CAACE,WAAW,GAAGb,yBAAyB,CAAC;QAEjD;MACF,KAAKqB,gBAAgB;MACrB,KAAKI,YAAY;QACfd,QAAQ,CAACE,WAAW,GAAGb,yBAAyB,CAAC;QACjD;MACF,KAAKD,OAAO,CAAC6B,MAAM;QACjBjB,QAAQ,CAACE,WAAW,GAAGZ,4BAA4B,CAAC;QACpD;MACF,KAAKF,OAAO,CAAC8B,QAAQ;QACnBlB,QAAQ,CAACE,WAAW,GAAGZ,4BAA4B,CAAC;QACpD;MACF,KAAKF,OAAO,CAAC+B,IAAI;QACfnB,QAAQ,CAACG,OAAO,CAAC;QACjB;MACF,KAAKf,OAAO,CAACgC,GAAG;QACdpB,QAAQ,CAAC,CAAC,CAAC;QACX;MACF;QACEe,cAAc,GAAG,KAAK;IAAC;IAG3B,IAAIA,cAAc,EAAE;MAClBd,KAAK,CAACoB,cAAc,EAAE;MACtBpB,KAAK,CAACqB,eAAe,EAAE;;EAE3B,CAAC;AACH,CAAC","names":["KeyCode","KEYBOARD_SINGLE_STEP_SIZE","KEYBOARD_MULTIPLE_STEPS_SIZE","getCurrentSize","panelRef","current","panelHeight","panelWidth","clientHeight","clientWidth","useKeyboardEvents","position","onResize","event","currentSize","maxSize","window","innerWidth","innerHeight","primaryGrowKey","up","left","primaryShrinkKey","down","right","altGrowKey","altShrinkKey","isEventHandled","keyCode","pageUp","pageDown","home","end","preventDefault","stopPropagation"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/app-layout/utils/lib/default/app-layout/utils/use-keyboard-events.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { KeyCode } from '../../internal/keycode';\nimport { SizeControlProps } from './interfaces';\n\nconst KEYBOARD_SINGLE_STEP_SIZE = 10;\nconst KEYBOARD_MULTIPLE_STEPS_SIZE = 60;\n\nconst getCurrentSize = (panelRef?: React.RefObject<HTMLDivElement>) => {\n  if (!panelRef || !panelRef.current) {\n    return {\n      panelHeight: 0,\n      panelWidth: 0,\n    };\n  }\n\n  return {\n    panelHeight: panelRef.current.clientHeight,\n    panelWidth: panelRef.current.clientWidth,\n  };\n};\n\nexport const useKeyboardEvents = ({ position, onResize, panelRef }: SizeControlProps) => {\n  return (event: React.KeyboardEvent) => {\n    let currentSize;\n    let maxSize;\n\n    const { panelHeight, panelWidth } = getCurrentSize(panelRef);\n\n    if (position === 'side') {\n      currentSize = panelWidth;\n      // don't need the exact max size as it's constrained in the set size function\n      maxSize = window.innerWidth;\n    } else {\n      currentSize = panelHeight;\n      // don't need the exact max size as it's constrained in the set size function\n      maxSize = window.innerHeight;\n    }\n\n    const primaryGrowKey = position === 'bottom' ? KeyCode.up : KeyCode.left;\n    const primaryShrinkKey = position === 'bottom' ? KeyCode.down : KeyCode.right;\n    const altGrowKey = position === 'bottom' ? KeyCode.right : KeyCode.down;\n    const altShrinkKey = position === 'bottom' ? KeyCode.left : KeyCode.up;\n\n    let isEventHandled = true;\n    switch (event.keyCode) {\n      case primaryGrowKey:\n      case altGrowKey:\n        onResize(currentSize + KEYBOARD_SINGLE_STEP_SIZE);\n\n        break;\n      case primaryShrinkKey:\n      case altShrinkKey:\n        onResize(currentSize - KEYBOARD_SINGLE_STEP_SIZE);\n        break;\n      case KeyCode.pageUp:\n        onResize(currentSize + KEYBOARD_MULTIPLE_STEPS_SIZE);\n        break;\n      case KeyCode.pageDown:\n        onResize(currentSize - KEYBOARD_MULTIPLE_STEPS_SIZE);\n        break;\n      case KeyCode.home:\n        onResize(maxSize);\n        break;\n      case KeyCode.end:\n        onResize(0);\n        break;\n      default:\n        isEventHandled = false;\n    }\n\n    if (isEventHandled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}