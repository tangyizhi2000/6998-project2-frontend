{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport function isCellStatesEqual(s1, s2) {\n  if (s1 && s2) {\n    return s1.padLeft === s2.padLeft && s1.lastLeft === s2.lastLeft && s1.lastRight === s2.lastRight && s1.offset.left === s2.offset.left && s1.offset.right === s2.offset.right;\n  }\n  return s1 === s2;\n}\nexport function isWrapperStatesEqual(s1, s2) {\n  return s1.scrollPaddingLeft === s2.scrollPaddingLeft && s1.scrollPaddingRight === s2.scrollPaddingRight;\n}\nexport function updateCellOffsets(cells, props) {\n  var _a, _b, _c, _d, _e, _f;\n  const totalColumns = props.visibleColumns.length;\n  const firstColumnsWidths = [];\n  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsFirst); i++) {\n    const element = cells[props.visibleColumns[i]];\n    const cellWidth = (_a = element === null || element === void 0 ? void 0 : element.getBoundingClientRect().width) !== null && _a !== void 0 ? _a : 0;\n    firstColumnsWidths[i] = ((_b = firstColumnsWidths[i - 1]) !== null && _b !== void 0 ? _b : 0) + cellWidth;\n  }\n  const lastColumnsWidths = [];\n  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsLast); i++) {\n    const element = cells[props.visibleColumns[totalColumns - 1 - i]];\n    const cellWidth = (_c = element === null || element === void 0 ? void 0 : element.getBoundingClientRect().width) !== null && _c !== void 0 ? _c : 0;\n    lastColumnsWidths[i] = ((_d = lastColumnsWidths[i - 1]) !== null && _d !== void 0 ? _d : 0) + cellWidth;\n  }\n  const stickyWidthLeft = (_e = firstColumnsWidths[props.stickyColumnsFirst - 1]) !== null && _e !== void 0 ? _e : 0;\n  const stickyWidthRight = (_f = lastColumnsWidths[props.stickyColumnsLast - 1]) !== null && _f !== void 0 ? _f : 0;\n  const offsets = props.visibleColumns.reduce((map, columnId, columnIndex) => {\n    var _a, _b;\n    return map.set(columnId, {\n      first: (_a = firstColumnsWidths[columnIndex - 1]) !== null && _a !== void 0 ? _a : 0,\n      last: (_b = lastColumnsWidths[totalColumns - 1 - columnIndex - 1]) !== null && _b !== void 0 ? _b : 0\n    });\n  }, new Map());\n  return {\n    offsets,\n    stickyWidthLeft,\n    stickyWidthRight\n  };\n}","map":{"version":3,"mappings":"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","names":["isCellStatesEqual","s1","s2","padLeft","lastLeft","lastRight","offset","left","right","isWrapperStatesEqual","scrollPaddingLeft","scrollPaddingRight","updateCellOffsets","cells","props","totalColumns","visibleColumns","length","firstColumnsWidths","i","Math","min","stickyColumnsFirst","element","cellWidth","getBoundingClientRect","width","lastColumnsWidths","stickyColumnsLast","stickyWidthLeft","stickyWidthRight","offsets","reduce","map","columnId","columnIndex","set","first","last","Map"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/table/sticky-columns/lib/default/table/sticky-columns/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { CellOffsets, StickyColumnsCellState, StickyColumnsProps, StickyColumnsWrapperState } from './interfaces';\n\nexport function isCellStatesEqual(s1: null | StickyColumnsCellState, s2: null | StickyColumnsCellState): boolean {\n  if (s1 && s2) {\n    return (\n      s1.padLeft === s2.padLeft &&\n      s1.lastLeft === s2.lastLeft &&\n      s1.lastRight === s2.lastRight &&\n      s1.offset.left === s2.offset.left &&\n      s1.offset.right === s2.offset.right\n    );\n  }\n  return s1 === s2;\n}\n\nexport function isWrapperStatesEqual(s1: StickyColumnsWrapperState, s2: StickyColumnsWrapperState): boolean {\n  return s1.scrollPaddingLeft === s2.scrollPaddingLeft && s1.scrollPaddingRight === s2.scrollPaddingRight;\n}\n\nexport function updateCellOffsets(cells: Record<PropertyKey, HTMLElement>, props: StickyColumnsProps): CellOffsets {\n  const totalColumns = props.visibleColumns.length;\n\n  const firstColumnsWidths: number[] = [];\n  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsFirst); i++) {\n    const element = cells[props.visibleColumns[i]];\n    const cellWidth = element?.getBoundingClientRect().width ?? 0;\n    firstColumnsWidths[i] = (firstColumnsWidths[i - 1] ?? 0) + cellWidth;\n  }\n\n  const lastColumnsWidths: number[] = [];\n  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsLast); i++) {\n    const element = cells[props.visibleColumns[totalColumns - 1 - i]];\n    const cellWidth = element?.getBoundingClientRect().width ?? 0;\n    lastColumnsWidths[i] = (lastColumnsWidths[i - 1] ?? 0) + cellWidth;\n  }\n\n  const stickyWidthLeft = firstColumnsWidths[props.stickyColumnsFirst - 1] ?? 0;\n  const stickyWidthRight = lastColumnsWidths[props.stickyColumnsLast - 1] ?? 0;\n  const offsets = props.visibleColumns.reduce(\n    (map, columnId, columnIndex) =>\n      map.set(columnId, {\n        first: firstColumnsWidths[columnIndex - 1] ?? 0,\n        last: lastColumnsWidths[totalColumns - 1 - columnIndex - 1] ?? 0,\n      }),\n    new Map()\n  );\n\n  return { offsets, stickyWidthLeft, stickyWidthRight };\n}\n"]},"metadata":{},"sourceType":"module"}