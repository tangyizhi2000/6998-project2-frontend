{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef, useState } from 'react';\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { awsuiPluginsInternal } from '../../internal/plugins/api';\nimport { sortByPriority } from '../../internal/plugins/helpers/utils';\nimport { convertRuntimeDrawers } from '../runtime-api';\nimport { togglesConfig } from '../toggles';\nexport var TOOLS_DRAWER_ID = 'awsui-internal-tools';\nfunction getToolsDrawerItem(props) {\n  if (props.toolsHide) {\n    return null;\n  }\n  var _togglesConfig$tools = togglesConfig.tools,\n    iconName = _togglesConfig$tools.iconName,\n    getLabels = _togglesConfig$tools.getLabels;\n  var _getLabels = getLabels(props.ariaLabels),\n    mainLabel = _getLabels.mainLabel,\n    closeLabel = _getLabels.closeLabel,\n    openLabel = _getLabels.openLabel;\n  return {\n    id: TOOLS_DRAWER_ID,\n    content: props.tools,\n    resizable: false,\n    ariaLabels: {\n      triggerButton: openLabel,\n      closeButton: closeLabel,\n      content: mainLabel\n    },\n    trigger: {\n      iconName: iconName\n    }\n  };\n}\nfunction useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange) {\n  var _useState = useState({\n      before: [],\n      after: []\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    runtimeDrawers = _useState2[0],\n    setRuntimeDrawers = _useState2[1];\n  var onActiveDrawerChangeStable = useStableCallback(onActiveDrawerChange);\n  var drawerWasOpenRef = useRef(false);\n  drawerWasOpenRef.current = drawerWasOpenRef.current || !!activeDrawerId;\n  useEffect(function () {\n    if (disableRuntimeDrawers) {\n      return;\n    }\n    var unsubscribe = awsuiPluginsInternal.appLayout.onDrawersRegistered(function (drawers) {\n      setRuntimeDrawers(convertRuntimeDrawers(drawers));\n      if (!drawerWasOpenRef.current) {\n        var defaultActiveDrawer = sortByPriority(drawers).find(function (drawer) {\n          return drawer.defaultActive;\n        });\n        if (defaultActiveDrawer) {\n          onActiveDrawerChangeStable(defaultActiveDrawer.id);\n        }\n      }\n    });\n    return function () {\n      unsubscribe();\n      setRuntimeDrawers({\n        before: [],\n        after: []\n      });\n    };\n  }, [disableRuntimeDrawers, onActiveDrawerChangeStable]);\n  return runtimeDrawers;\n}\nfunction applyToolsDrawer(toolsProps, runtimeDrawers) {\n  var drawers = [].concat(_toConsumableArray(runtimeDrawers.before), _toConsumableArray(runtimeDrawers.after));\n  if (drawers.length === 0) {\n    return null;\n  }\n  var toolsItem = getToolsDrawerItem(toolsProps);\n  if (toolsItem) {\n    drawers.unshift(toolsItem);\n  }\n  return drawers;\n}\nexport function useDrawers(_ref, toolsProps) {\n  var ownDrawers = _ref.drawers,\n    disableRuntimeDrawers = _ref.__disableRuntimeDrawers;\n  var _a, _b;\n  var _useControllable = useControllable(ownDrawers === null || ownDrawers === void 0 ? void 0 : ownDrawers.activeDrawerId, ownDrawers === null || ownDrawers === void 0 ? void 0 : ownDrawers.onChange, undefined, {\n      componentName: 'AppLayout',\n      controlledProp: 'activeDrawerId',\n      changeHandler: 'onChange'\n    }),\n    _useControllable2 = _slicedToArray(_useControllable, 2),\n    activeDrawerId = _useControllable2[0],\n    setActiveDrawerId = _useControllable2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    drawerSizes = _useState4[0],\n    setDrawerSizes = _useState4[1];\n  function onActiveDrawerResize(_ref2) {\n    var id = _ref2.id,\n      size = _ref2.size;\n    setDrawerSizes(function (oldSizes) {\n      return Object.assign(Object.assign({}, oldSizes), _defineProperty({}, id, size));\n    });\n    fireNonCancelableEvent(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.onResize, {\n      id: id,\n      size: size\n    });\n    fireNonCancelableEvent(ownDrawers === null || ownDrawers === void 0 ? void 0 : ownDrawers.onResize, {\n      id: id,\n      size: size\n    });\n  }\n  function onActiveDrawerChange(newDrawerId) {\n    setActiveDrawerId(newDrawerId);\n    if (hasOwnDrawers) {\n      fireNonCancelableEvent(ownDrawers === null || ownDrawers === void 0 ? void 0 : ownDrawers.onChange, newDrawerId);\n    } else if (!toolsProps.toolsHide) {\n      toolsProps.onToolsToggle(newDrawerId === TOOLS_DRAWER_ID);\n    }\n  }\n  var hasOwnDrawers = !!(ownDrawers === null || ownDrawers === void 0 ? void 0 : ownDrawers.items);\n  var runtimeDrawers = useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange);\n  var combinedDrawers = hasOwnDrawers ? [].concat(_toConsumableArray(runtimeDrawers.before), _toConsumableArray(ownDrawers.items), _toConsumableArray(runtimeDrawers.after)) : applyToolsDrawer(toolsProps, runtimeDrawers);\n  // support toolsOpen in runtime-drawers-only mode\n  var activeDrawerIdResolved = toolsProps.toolsOpen && !hasOwnDrawers ? TOOLS_DRAWER_ID : activeDrawerId;\n  var activeDrawer = combinedDrawers === null || combinedDrawers === void 0 ? void 0 : combinedDrawers.find(function (drawer) {\n    return drawer.id === activeDrawerIdResolved;\n  });\n  // ensure that id is only defined when the drawer exists\n  activeDrawerIdResolved = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;\n  return {\n    ariaLabel: ownDrawers === null || ownDrawers === void 0 ? void 0 : ownDrawers.ariaLabel,\n    overflowAriaLabel: ownDrawers === null || ownDrawers === void 0 ? void 0 : ownDrawers.overflowAriaLabel,\n    overflowWithBadgeAriaLabel: ownDrawers === null || ownDrawers === void 0 ? void 0 : ownDrawers.overflowWithBadgeAriaLabel,\n    drawers: combinedDrawers,\n    activeDrawer: activeDrawer,\n    activeDrawerId: activeDrawerIdResolved,\n    activeDrawerSize: activeDrawerIdResolved ? (_b = (_a = drawerSizes[activeDrawerIdResolved]) !== null && _a !== void 0 ? _a : activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _b !== void 0 ? _b : toolsProps.toolsWidth : toolsProps.toolsWidth,\n    onActiveDrawerChange: onActiveDrawerChange,\n    onActiveDrawerResize: onActiveDrawerResize\n  };\n}","map":{"version":3,"mappings":"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","names":["useEffect","useRef","useState","useStableCallback","useControllable","fireNonCancelableEvent","awsuiPluginsInternal","sortByPriority","convertRuntimeDrawers","togglesConfig","TOOLS_DRAWER_ID","getToolsDrawerItem","props","toolsHide","tools","iconName","getLabels","ariaLabels","mainLabel","closeLabel","openLabel","id","content","resizable","triggerButton","closeButton","trigger","useRuntimeDrawers","disableRuntimeDrawers","activeDrawerId","onActiveDrawerChange","before","after","runtimeDrawers","setRuntimeDrawers","onActiveDrawerChangeStable","drawerWasOpenRef","current","unsubscribe","appLayout","onDrawersRegistered","drawers","defaultActiveDrawer","find","drawer","defaultActive","applyToolsDrawer","toolsProps","length","toolsItem","unshift","useDrawers","ownDrawers","__disableRuntimeDrawers","onChange","undefined","componentName","controlledProp","changeHandler","setActiveDrawerId","drawerSizes","setDrawerSizes","onActiveDrawerResize","size","Object","oldSizes","activeDrawer","onResize","newDrawerId","hasOwnDrawers","onToolsToggle","items","combinedDrawers","activeDrawerIdResolved","toolsOpen","ariaLabel","overflowAriaLabel","overflowWithBadgeAriaLabel","activeDrawerSize","defaultSize","toolsWidth"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/app-layout/utils/lib/default/app-layout/utils/use-drawers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\nimport { DrawerItem, InternalDrawerProps } from '../drawer/interfaces';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { awsuiPluginsInternal } from '../../internal/plugins/api';\nimport { sortByPriority } from '../../internal/plugins/helpers/utils';\nimport { convertRuntimeDrawers, DrawersLayout } from '../runtime-api';\nimport { AppLayoutProps } from '../interfaces';\nimport { togglesConfig } from '../toggles';\n\nexport const TOOLS_DRAWER_ID = 'awsui-internal-tools';\n\ninterface ToolsProps {\n  toolsHide: boolean | undefined;\n  toolsOpen: boolean | undefined;\n  toolsWidth: number;\n  tools: React.ReactNode | undefined;\n  onToolsToggle: (newOpen: boolean) => void;\n  ariaLabels: AppLayoutProps.Labels | undefined;\n}\n\ntype DrawerChangeHandler = (newDrawerId: string | undefined) => void;\n\nfunction getToolsDrawerItem(props: ToolsProps): DrawerItem | null {\n  if (props.toolsHide) {\n    return null;\n  }\n  const { iconName, getLabels } = togglesConfig.tools;\n  const { mainLabel, closeLabel, openLabel } = getLabels(props.ariaLabels);\n  return {\n    id: TOOLS_DRAWER_ID,\n    content: props.tools,\n    resizable: false,\n    ariaLabels: {\n      triggerButton: openLabel,\n      closeButton: closeLabel,\n      content: mainLabel,\n    },\n    trigger: {\n      iconName: iconName,\n    },\n  };\n}\n\nfunction useRuntimeDrawers(\n  disableRuntimeDrawers: boolean | undefined,\n  activeDrawerId: string | undefined,\n  onActiveDrawerChange: DrawerChangeHandler\n) {\n  const [runtimeDrawers, setRuntimeDrawers] = useState<DrawersLayout>({ before: [], after: [] });\n  const onActiveDrawerChangeStable = useStableCallback(onActiveDrawerChange);\n\n  const drawerWasOpenRef = useRef(false);\n  drawerWasOpenRef.current = drawerWasOpenRef.current || !!activeDrawerId;\n\n  useEffect(() => {\n    if (disableRuntimeDrawers) {\n      return;\n    }\n    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawersRegistered(drawers => {\n      setRuntimeDrawers(convertRuntimeDrawers(drawers));\n      if (!drawerWasOpenRef.current) {\n        const defaultActiveDrawer = sortByPriority(drawers).find(drawer => drawer.defaultActive);\n        if (defaultActiveDrawer) {\n          onActiveDrawerChangeStable(defaultActiveDrawer.id);\n        }\n      }\n    });\n    return () => {\n      unsubscribe();\n      setRuntimeDrawers({ before: [], after: [] });\n    };\n  }, [disableRuntimeDrawers, onActiveDrawerChangeStable]);\n\n  return runtimeDrawers;\n}\n\nfunction applyToolsDrawer(toolsProps: ToolsProps, runtimeDrawers: DrawersLayout) {\n  const drawers = [...runtimeDrawers.before, ...runtimeDrawers.after];\n  if (drawers.length === 0) {\n    return null;\n  }\n  const toolsItem = getToolsDrawerItem(toolsProps);\n  if (toolsItem) {\n    drawers.unshift(toolsItem);\n  }\n\n  return drawers;\n}\n\nexport function useDrawers(\n  {\n    drawers: ownDrawers,\n    __disableRuntimeDrawers: disableRuntimeDrawers,\n  }: InternalDrawerProps & { __disableRuntimeDrawers?: boolean },\n  toolsProps: ToolsProps\n) {\n  const [activeDrawerId, setActiveDrawerId] = useControllable(\n    ownDrawers?.activeDrawerId,\n    ownDrawers?.onChange,\n    undefined,\n    {\n      componentName: 'AppLayout',\n      controlledProp: 'activeDrawerId',\n      changeHandler: 'onChange',\n    }\n  );\n  const [drawerSizes, setDrawerSizes] = useState<Record<string, number>>({});\n\n  function onActiveDrawerResize({ id, size }: { id: string; size: number }) {\n    setDrawerSizes(oldSizes => ({ ...oldSizes, [id]: size }));\n    fireNonCancelableEvent(activeDrawer?.onResize, { id, size });\n    fireNonCancelableEvent(ownDrawers?.onResize, { id, size });\n  }\n\n  function onActiveDrawerChange(newDrawerId: string | undefined) {\n    setActiveDrawerId(newDrawerId);\n    if (hasOwnDrawers) {\n      fireNonCancelableEvent(ownDrawers?.onChange, newDrawerId);\n    } else if (!toolsProps.toolsHide) {\n      toolsProps.onToolsToggle(newDrawerId === TOOLS_DRAWER_ID);\n    }\n  }\n\n  const hasOwnDrawers = !!ownDrawers?.items;\n  const runtimeDrawers = useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange);\n  const combinedDrawers = hasOwnDrawers\n    ? [...runtimeDrawers.before, ...ownDrawers.items, ...runtimeDrawers.after]\n    : applyToolsDrawer(toolsProps, runtimeDrawers);\n  // support toolsOpen in runtime-drawers-only mode\n  let activeDrawerIdResolved = toolsProps.toolsOpen && !hasOwnDrawers ? TOOLS_DRAWER_ID : activeDrawerId;\n  const activeDrawer = combinedDrawers?.find(drawer => drawer.id === activeDrawerIdResolved);\n  // ensure that id is only defined when the drawer exists\n  activeDrawerIdResolved = activeDrawer?.id;\n\n  return {\n    ariaLabel: ownDrawers?.ariaLabel,\n    overflowAriaLabel: ownDrawers?.overflowAriaLabel,\n    overflowWithBadgeAriaLabel: ownDrawers?.overflowWithBadgeAriaLabel,\n    drawers: combinedDrawers,\n    activeDrawer,\n    activeDrawerId: activeDrawerIdResolved,\n    activeDrawerSize: activeDrawerIdResolved\n      ? drawerSizes[activeDrawerIdResolved] ?? activeDrawer?.defaultSize ?? toolsProps.toolsWidth\n      : toolsProps.toolsWidth,\n    onActiveDrawerChange,\n    onActiveDrawerResize,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}