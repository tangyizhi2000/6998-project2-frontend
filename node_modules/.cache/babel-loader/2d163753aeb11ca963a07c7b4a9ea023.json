{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef } from 'react';\nimport { useStickyScrollbar } from './use-sticky-scrollbar';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport { useAppLayoutContext } from '../../internal/context/app-layout-context';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { browserScrollbarSize } from '../../internal/utils/browser-scrollbar-size';\nimport { useVisualRefresh } from '../../internal/hooks/use-visual-mode';\nexport default forwardRef(StickyScrollbar);\nfunction StickyScrollbar(_ref, ref) {\n  var wrapperRef = _ref.wrapperRef,\n    tableRef = _ref.tableRef,\n    onScroll = _ref.onScroll,\n    hasStickyColumns = _ref.hasStickyColumns;\n  var isVisualRefresh = useVisualRefresh();\n  var scrollbarRef = React.useRef(null);\n  var scrollbarContentRef = React.useRef(null);\n  var mergedRef = useMergeRefs(ref, scrollbarRef);\n  /**\n   * If the height of the scrollbar is 0, we're likely on a platform that uses\n   * overlay scrollbars (e.g. Mac).\n   */\n  var offsetScrollbar = hasStickyColumns || browserScrollbarSize().height === 0;\n  /**\n   * Use the appropriate AppLayout context (Classic or Visual Refresh) to determine\n   * the offsetBottom value to be used in the useStickyScrollbar hook.\n   */\n  var _useAppLayoutContext = useAppLayoutContext(),\n    stickyOffsetBottom = _useAppLayoutContext.stickyOffsetBottom;\n  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, stickyOffsetBottom, offsetScrollbar);\n  return React.createElement(\"div\", {\n    ref: mergedRef,\n    className: clsx(styles['sticky-scrollbar'], offsetScrollbar && styles['sticky-scrollbar-offset'], isVisualRefresh && styles['is-visual-refresh']),\n    onScroll: onScroll\n  }, React.createElement(\"div\", {\n    ref: scrollbarContentRef,\n    className: styles['sticky-scrollbar-content']\n  }));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,kBAAkB,QAAQ,wBAAwB;AAC3D,SAASC,YAAY,QAAQ,qCAAqC;AAClE,SAASC,mBAAmB,QAAQ,2CAA2C;AAC/E,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,oBAAoB,QAAQ,6CAA6C;AAClF,SAASC,gBAAgB,QAAQ,sCAAsC;AASvE,eAAeP,UAAU,CAACQ,eAAe,CAAC;AAE1C,SAASA,eAAe,OAEtBC,GAA8B;EAAA,IAD5BC,UAAU,QAAVA,UAAU;IAAEC,QAAQ,QAARA,QAAQ;IAAEC,QAAQ,QAARA,QAAQ;IAAEC,gBAAgB,QAAhBA,gBAAgB;EAGlD,IAAMC,eAAe,GAAGP,gBAAgB,EAAE;EAC1C,IAAMQ,YAAY,GAAGhB,KAAK,CAACiB,MAAM,CAAiB,IAAI,CAAC;EACvD,IAAMC,mBAAmB,GAAGlB,KAAK,CAACiB,MAAM,CAAiB,IAAI,CAAC;EAC9D,IAAME,SAAS,GAAGhB,YAAY,CAACO,GAAG,EAAEM,YAAY,CAAC;EAEjD;;;;EAIA,IAAMI,eAAe,GAAGN,gBAAgB,IAAIP,oBAAoB,EAAE,CAACc,MAAM,KAAK,CAAC;EAE/E;;;;EAIA,2BAA+BjB,mBAAmB,EAAE;IAA5CkB,kBAAkB,wBAAlBA,kBAAkB;EAE1BpB,kBAAkB,CAACc,YAAY,EAAEE,mBAAmB,EAAEN,QAAQ,EAAED,UAAU,EAAEW,kBAAkB,EAAEF,eAAe,CAAC;EAChH,OACEpB;IACEU,GAAG,EAAES,SAAS;IACdI,SAAS,EAAElB,IAAI,CACbC,MAAM,CAAC,kBAAkB,CAAC,EAC1Bc,eAAe,IAAId,MAAM,CAAC,yBAAyB,CAAC,EACpDS,eAAe,IAAIT,MAAM,CAAC,mBAAmB,CAAC,CAC/C;IACDO,QAAQ,EAAEA;EAAQ,GAElBb;IAAKU,GAAG,EAAEQ,mBAAmB;IAAEK,SAAS,EAAEjB,MAAM,CAAC,0BAA0B;EAAC,EAAI,CAC5E;AAEV","names":["React","forwardRef","useStickyScrollbar","useMergeRefs","useAppLayoutContext","clsx","styles","browserScrollbarSize","useVisualRefresh","StickyScrollbar","ref","wrapperRef","tableRef","onScroll","hasStickyColumns","isVisualRefresh","scrollbarRef","useRef","scrollbarContentRef","mergedRef","offsetScrollbar","height","stickyOffsetBottom","className"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/table/sticky-scrollbar/lib/default/table/sticky-scrollbar/sticky-scrollbar.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef } from 'react';\nimport { useStickyScrollbar } from './use-sticky-scrollbar';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport { useAppLayoutContext } from '../../internal/context/app-layout-context';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { browserScrollbarSize } from '../../internal/utils/browser-scrollbar-size';\nimport { useVisualRefresh } from '../../internal/hooks/use-visual-mode';\n\ninterface StickyScrollbarProps {\n  wrapperRef: React.RefObject<HTMLDivElement>;\n  tableRef: React.RefObject<HTMLTableElement>;\n  onScroll?: React.UIEventHandler<HTMLDivElement>;\n  hasStickyColumns?: boolean;\n}\n\nexport default forwardRef(StickyScrollbar);\n\nfunction StickyScrollbar(\n  { wrapperRef, tableRef, onScroll, hasStickyColumns }: StickyScrollbarProps,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const isVisualRefresh = useVisualRefresh();\n  const scrollbarRef = React.useRef<HTMLDivElement>(null);\n  const scrollbarContentRef = React.useRef<HTMLDivElement>(null);\n  const mergedRef = useMergeRefs(ref, scrollbarRef);\n\n  /**\n   * If the height of the scrollbar is 0, we're likely on a platform that uses\n   * overlay scrollbars (e.g. Mac).\n   */\n  const offsetScrollbar = hasStickyColumns || browserScrollbarSize().height === 0;\n\n  /**\n   * Use the appropriate AppLayout context (Classic or Visual Refresh) to determine\n   * the offsetBottom value to be used in the useStickyScrollbar hook.\n   */\n  const { stickyOffsetBottom } = useAppLayoutContext();\n\n  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, stickyOffsetBottom, offsetScrollbar);\n  return (\n    <div\n      ref={mergedRef}\n      className={clsx(\n        styles['sticky-scrollbar'],\n        offsetScrollbar && styles['sticky-scrollbar-offset'],\n        isVisualRefresh && styles['is-visual-refresh']\n      )}\n      onScroll={onScroll}\n    >\n      <div ref={scrollbarContentRef} className={styles['sticky-scrollbar-content']} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}