{"ast":null,"code":"import _toConsumableArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { getTrackableValue } from '../utils';\nimport { joinStrings } from '../../internal/utils/strings';\nimport { ItemSet } from './utils';\nexport function useSelection(_ref) {\n  var items = _ref.items,\n    _ref$selectedItems = _ref.selectedItems,\n    selectedItems = _ref$selectedItems === void 0 ? [] : _ref$selectedItems,\n    selectionType = _ref.selectionType,\n    _ref$isItemDisabled = _ref.isItemDisabled,\n    isItemDisabled = _ref$isItemDisabled === void 0 ? function () {\n      return false;\n    } : _ref$isItemDisabled,\n    trackBy = _ref.trackBy,\n    onSelectionChange = _ref.onSelectionChange,\n    ariaLabels = _ref.ariaLabels,\n    loading = _ref.loading;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    shiftPressed = _useState2[0],\n    setShiftPressed = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    lastClickedItem = _useState4[0],\n    setLastClickedItem = _useState4[1];\n  var selectionName = useUniqueId();\n  var finalSelectedItems = selectionType === 'single' ? selectedItems.slice(0, 1) : selectedItems;\n  var selectedSet = new ItemSet(trackBy, finalSelectedItems);\n  var itemIndexesMap = new Map();\n  items.forEach(function (item, i) {\n    return itemIndexesMap.set(getTrackableValue(trackBy, item), i);\n  });\n  var isItemSelected = selectedSet.has.bind(selectedSet);\n  var getItemState = function getItemState(item) {\n    return {\n      disabled: isItemDisabled(item),\n      selected: isItemSelected(item)\n    };\n  };\n  var _ref2 = selectionType ? items.reduce(function (_ref4, item) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n        allDisabled = _ref5[0],\n        allEnabledSelected = _ref5[1];\n      var _getItemState = getItemState(item),\n        disabled = _getItemState.disabled,\n        selected = _getItemState.selected;\n      return [\n      // all items are disabled (or none are present)\n      allDisabled && disabled,\n      // all enabled items are selected (or none are present)\n      allEnabledSelected && (selected || disabled)];\n    }, [true, true]) : [true, true],\n    _ref3 = _slicedToArray(_ref2, 2),\n    allDisabled = _ref3[0],\n    allEnabledSelected = _ref3[1];\n  // the page has at least one selected item\n  var hasSelected = finalSelectedItems.length > 0;\n  var handleToggleAll = function handleToggleAll() {\n    var requestedItems = new ItemSet(trackBy, items);\n    var newSelectedItems = allEnabledSelected ? deselectItems(requestedItems) : selectItems(requestedItems);\n    fireNonCancelableEvent(onSelectionChange, {\n      selectedItems: newSelectedItems\n    });\n  };\n  var getRequestedItems = function getRequestedItems(item) {\n    var requestedItems = new ItemSet(trackBy, [item]);\n    var lastClickedItemIndex = lastClickedItem ? itemIndexesMap.get(getTrackableValue(trackBy, lastClickedItem)) : -1;\n    if (lastClickedItemIndex === undefined) {\n      lastClickedItemIndex = -1;\n    }\n    // we use lastClickedItemIndex to determine if filtering/sorting/pagination\n    // made previously selected item invisible, therefore we reset state for shift-select\n    if (shiftPressed && lastClickedItemIndex !== -1) {\n      // item is always in items\n      var currentItemIndex = itemIndexesMap.get(getTrackableValue(trackBy, item));\n      var start = Math.min(currentItemIndex, lastClickedItemIndex);\n      var end = Math.max(currentItemIndex, lastClickedItemIndex);\n      items.slice(start, end + 1).forEach(function (item) {\n        return requestedItems.put(item);\n      });\n    }\n    return requestedItems;\n  };\n  var deselectItems = function deselectItems(requestedItems) {\n    var newSelectedItems = [];\n    selectedItems.forEach(function (selectedItem) {\n      var toUnselect = requestedItems.has(selectedItem);\n      if (!toUnselect || isItemDisabled(selectedItem)) {\n        newSelectedItems.push(selectedItem);\n      }\n    });\n    return newSelectedItems;\n  };\n  var selectItems = function selectItems(requestedItems) {\n    var newSelectedItems = _toConsumableArray(selectedItems);\n    requestedItems.forEach(function (newItem) {\n      var _getItemState2 = getItemState(newItem),\n        selected = _getItemState2.selected,\n        disabled = _getItemState2.disabled;\n      if (!selected && !disabled) {\n        newSelectedItems.push(newItem);\n      }\n    });\n    return newSelectedItems;\n  };\n  var handleToggleItem = function handleToggleItem(item) {\n    return function () {\n      var _getItemState3 = getItemState(item),\n        disabled = _getItemState3.disabled,\n        selected = _getItemState3.selected;\n      if (disabled || selectionType === 'single' && selected) {\n        return;\n      }\n      if (selectionType === 'single') {\n        fireNonCancelableEvent(onSelectionChange, {\n          selectedItems: [item]\n        });\n      } else {\n        var requestedItems = getRequestedItems(item);\n        var _selectedItems = selected ? deselectItems(requestedItems) : selectItems(requestedItems);\n        fireNonCancelableEvent(onSelectionChange, {\n          selectedItems: _selectedItems\n        });\n        setLastClickedItem(item);\n      }\n    };\n  };\n  return {\n    isItemSelected: isItemSelected,\n    getSelectAllProps: function getSelectAllProps() {\n      var _a;\n      if (!selectionType) {\n        throw new Error('Invariant violation: calling selection props with missing selection type.');\n      }\n      return {\n        name: selectionName,\n        disabled: allDisabled || !!loading,\n        selectionType: selectionType,\n        indeterminate: hasSelected && !allEnabledSelected,\n        checked: hasSelected && allEnabledSelected,\n        onChange: handleToggleAll,\n        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.allItemsSelectionLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, {\n          selectedItems: selectedItems\n        }))\n      };\n    },\n    getItemSelectionProps: function getItemSelectionProps(item) {\n      var _a;\n      if (!selectionType) {\n        throw new Error('Invariant violation: calling selection props with missing selection type.');\n      }\n      return {\n        name: selectionName,\n        selectionType: selectionType,\n        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.itemSelectionLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, {\n          selectedItems: selectedItems\n        }, item)),\n        onChange: handleToggleItem(item),\n        checked: isItemSelected(item),\n        disabled: isItemDisabled(item)\n      };\n    },\n    updateShiftToggle: function updateShiftToggle(value) {\n      setShiftPressed(value);\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["useState","fireNonCancelableEvent","useUniqueId","getTrackableValue","joinStrings","ItemSet","useSelection","items","selectedItems","selectionType","isItemDisabled","trackBy","onSelectionChange","ariaLabels","loading","shiftPressed","setShiftPressed","lastClickedItem","setLastClickedItem","selectionName","finalSelectedItems","slice","selectedSet","itemIndexesMap","Map","forEach","item","i","set","isItemSelected","has","bind","getItemState","disabled","selected","reduce","allDisabled","allEnabledSelected","hasSelected","length","handleToggleAll","requestedItems","newSelectedItems","deselectItems","selectItems","getRequestedItems","lastClickedItemIndex","get","undefined","currentItemIndex","start","Math","min","end","max","put","toUnselect","selectedItem","push","newItem","handleToggleItem","getSelectAllProps","Error","name","indeterminate","checked","onChange","ariaLabel","selectionGroupLabel","allItemsSelectionLabel","getItemSelectionProps","itemSelectionLabel","updateShiftToggle","value"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/table/selection/lib/default/table/selection/use-selection.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { TableProps } from '../interfaces';\nimport { getTrackableValue } from '../utils';\nimport { joinStrings } from '../../internal/utils/strings';\nimport { SelectionProps } from './interfaces';\nimport { ItemSet } from './utils';\n\nexport function useSelection<T>({\n  items,\n  selectedItems = [],\n  selectionType,\n  isItemDisabled = () => false,\n  trackBy,\n  onSelectionChange,\n  ariaLabels,\n  loading,\n}: Pick<\n  TableProps<T>,\n  | 'ariaLabels'\n  | 'items'\n  | 'selectedItems'\n  | 'selectionType'\n  | 'isItemDisabled'\n  | 'trackBy'\n  | 'onSelectionChange'\n  | 'loading'\n>) {\n  const [shiftPressed, setShiftPressed] = useState(false);\n  const [lastClickedItem, setLastClickedItem] = useState<T | null>(null);\n  const selectionName = useUniqueId();\n  const finalSelectedItems = selectionType === 'single' ? selectedItems.slice(0, 1) : selectedItems;\n  const selectedSet = new ItemSet(trackBy, finalSelectedItems);\n  const itemIndexesMap = new Map();\n  items.forEach((item, i) => itemIndexesMap.set(getTrackableValue(trackBy, item), i));\n  const isItemSelected = selectedSet.has.bind(selectedSet);\n  const getItemState = (item: T) => ({\n    disabled: isItemDisabled(item),\n    selected: isItemSelected(item),\n  });\n  const [allDisabled, allEnabledSelected] = selectionType\n    ? items.reduce(\n        ([allDisabled, allEnabledSelected], item) => {\n          const { disabled, selected } = getItemState(item);\n          return [\n            // all items are disabled (or none are present)\n            allDisabled && disabled,\n            // all enabled items are selected (or none are present)\n            allEnabledSelected && (selected || disabled),\n          ];\n        },\n        [true, true]\n      )\n    : [true, true];\n\n  // the page has at least one selected item\n  const hasSelected = finalSelectedItems.length > 0;\n\n  const handleToggleAll = () => {\n    const requestedItems = new ItemSet(trackBy, items);\n    const newSelectedItems = allEnabledSelected ? deselectItems(requestedItems) : selectItems(requestedItems);\n    fireNonCancelableEvent(onSelectionChange, { selectedItems: newSelectedItems });\n  };\n\n  const getRequestedItems = (item: T) => {\n    const requestedItems = new ItemSet(trackBy, [item]);\n    let lastClickedItemIndex = lastClickedItem ? itemIndexesMap.get(getTrackableValue(trackBy, lastClickedItem)) : -1;\n    if (lastClickedItemIndex === undefined) {\n      lastClickedItemIndex = -1;\n    }\n    // we use lastClickedItemIndex to determine if filtering/sorting/pagination\n    // made previously selected item invisible, therefore we reset state for shift-select\n    if (shiftPressed && lastClickedItemIndex !== -1) {\n      // item is always in items\n      const currentItemIndex = itemIndexesMap.get(getTrackableValue(trackBy, item)) as number;\n      const start = Math.min(currentItemIndex, lastClickedItemIndex);\n      const end = Math.max(currentItemIndex, lastClickedItemIndex);\n      items.slice(start, end + 1).forEach(item => requestedItems.put(item));\n    }\n    return requestedItems;\n  };\n\n  const deselectItems = (requestedItems: ItemSet<T>) => {\n    const newSelectedItems: Array<T> = [];\n    selectedItems.forEach(selectedItem => {\n      const toUnselect = requestedItems.has(selectedItem);\n      if (!toUnselect || isItemDisabled(selectedItem)) {\n        newSelectedItems.push(selectedItem);\n      }\n    });\n    return newSelectedItems;\n  };\n\n  const selectItems = (requestedItems: ItemSet<T>) => {\n    const newSelectedItems = [...selectedItems];\n    requestedItems.forEach(newItem => {\n      const { selected, disabled } = getItemState(newItem);\n      if (!selected && !disabled) {\n        newSelectedItems.push(newItem);\n      }\n    });\n    return newSelectedItems;\n  };\n\n  const handleToggleItem = (item: T) => () => {\n    const { disabled, selected } = getItemState(item);\n    if (disabled || (selectionType === 'single' && selected)) {\n      return;\n    }\n    if (selectionType === 'single') {\n      fireNonCancelableEvent(onSelectionChange, { selectedItems: [item] });\n    } else {\n      const requestedItems = getRequestedItems(item);\n      const selectedItems = selected ? deselectItems(requestedItems) : selectItems(requestedItems);\n      fireNonCancelableEvent(onSelectionChange, { selectedItems });\n      setLastClickedItem(item);\n    }\n  };\n\n  return {\n    isItemSelected,\n    getSelectAllProps: (): SelectionProps => {\n      if (!selectionType) {\n        throw new Error('Invariant violation: calling selection props with missing selection type.');\n      }\n      return {\n        name: selectionName,\n        disabled: allDisabled || !!loading,\n        selectionType: selectionType,\n        indeterminate: hasSelected && !allEnabledSelected,\n        checked: hasSelected && allEnabledSelected,\n        onChange: handleToggleAll,\n        ariaLabel: joinStrings(\n          ariaLabels?.selectionGroupLabel,\n          ariaLabels?.allItemsSelectionLabel?.({ selectedItems })\n        ),\n      };\n    },\n    getItemSelectionProps: (item: T): SelectionProps => {\n      if (!selectionType) {\n        throw new Error('Invariant violation: calling selection props with missing selection type.');\n      }\n      return {\n        name: selectionName,\n        selectionType: selectionType,\n        ariaLabel: joinStrings(\n          ariaLabels?.selectionGroupLabel,\n          ariaLabels?.itemSelectionLabel?.({ selectedItems }, item)\n        ),\n        onChange: handleToggleItem(item),\n        checked: isItemSelected(item),\n        disabled: isItemDisabled(item),\n      };\n    },\n    updateShiftToggle: (value: boolean) => {\n      setShiftPressed(value);\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}