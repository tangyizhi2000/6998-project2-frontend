{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport ResizeHandler from '../../split-panel/icons/resize-handler';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { usePointerEvents } from './use-pointer-events';\nimport { useKeyboardEvents } from './use-keyboard-events';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from '../visual-refresh/styles.css.js';\nfunction useResize(drawerRefObject, _ref) {\n  var activeDrawer = _ref.activeDrawer,\n    activeDrawerSize = _ref.activeDrawerSize,\n    onActiveDrawerResize = _ref.onActiveDrawerResize,\n    drawersRefs = _ref.drawersRefs,\n    isToolsOpen = _ref.isToolsOpen,\n    drawersMaxWidth = _ref.drawersMaxWidth;\n  var _a, _b;\n  var toolsWidth = 290;\n  var MIN_WIDTH = Math.min((_a = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _a !== void 0 ? _a : Number.POSITIVE_INFINITY, toolsWidth);\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    relativeSize = _useState2[0],\n    setRelativeSize = _useState2[1];\n  var drawerSize = !activeDrawer && !isToolsOpen ? 0 : activeDrawerSize;\n  useEffect(function () {\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    var handle = requestAnimationFrame(function () {\n      var maxSize = drawersMaxWidth;\n      setRelativeSize((drawerSize - MIN_WIDTH) / (maxSize - MIN_WIDTH) * 100);\n    });\n    return function () {\n      return cancelAnimationFrame(handle);\n    };\n  }, [drawerSize, drawersMaxWidth, MIN_WIDTH]);\n  var setSidePanelWidth = function setSidePanelWidth(width) {\n    var maxWidth = drawersMaxWidth;\n    var size = getLimitedValue(MIN_WIDTH, width, maxWidth);\n    var id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;\n    if (id && maxWidth >= MIN_WIDTH) {\n      onActiveDrawerResize({\n        size: size,\n        id: id\n      });\n    }\n  };\n  var sizeControlProps = {\n    position: 'side',\n    panelRef: drawerRefObject,\n    handleRef: drawersRefs.slider,\n    onResize: setSidePanelWidth,\n    hasTransitions: true\n  };\n  var onSliderPointerDown = usePointerEvents(sizeControlProps);\n  var onKeyDown = useKeyboardEvents(sizeControlProps);\n  var resizeHandle = React.createElement(\"div\", {\n    ref: drawersRefs.slider,\n    role: \"slider\",\n    tabIndex: 0,\n    \"aria-label\": (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.resizeHandle,\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": relativeSize,\n    className: clsx(splitPanelStyles.slider, splitPanelStyles[\"slider-side\"], testutilStyles['drawers-slider']),\n    onKeyDown: onKeyDown,\n    onPointerDown: onSliderPointerDown\n  }, React.createElement(ResizeHandler, {\n    className: clsx(splitPanelStyles['slider-icon'], splitPanelStyles[\"slider-icon-side\"])\n  }));\n  return {\n    resizeHandle: React.createElement(\"div\", {\n      className: styles['drawer-slider']\n    }, resizeHandle),\n    drawerSize: drawerSize\n  };\n}\nexport default useResize;","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","clsx","ResizeHandler","getLimitedValue","usePointerEvents","useKeyboardEvents","splitPanelStyles","testutilStyles","styles","useResize","drawerRefObject","activeDrawer","activeDrawerSize","onActiveDrawerResize","drawersRefs","isToolsOpen","drawersMaxWidth","toolsWidth","MIN_WIDTH","Math","min","defaultSize","Number","POSITIVE_INFINITY","relativeSize","setRelativeSize","drawerSize","handle","requestAnimationFrame","maxSize","cancelAnimationFrame","setSidePanelWidth","width","maxWidth","size","id","sizeControlProps","position","panelRef","handleRef","slider","onResize","hasTransitions","onSliderPointerDown","onKeyDown","resizeHandle","ref","role","tabIndex","ariaLabels","className","onPointerDown"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/app-layout/utils/lib/default/app-layout/utils/use-resize.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useEffect } from 'react';\n\nimport clsx from 'clsx';\n\nimport ResizeHandler from '../../split-panel/icons/resize-handler';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { usePointerEvents } from './use-pointer-events';\nimport { useKeyboardEvents } from './use-keyboard-events';\nimport { DrawerItem } from '../drawer/interfaces';\n\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from '../visual-refresh/styles.css.js';\nimport { DrawerFocusControlRefs } from './use-drawer-focus-control';\nimport { SizeControlProps } from './interfaces';\n\nexport interface DrawerResizeProps {\n  activeDrawer: DrawerItem | undefined;\n  activeDrawerSize: number;\n  onActiveDrawerResize: (detail: { id: string; size: number }) => void;\n  drawersRefs: DrawerFocusControlRefs;\n  isToolsOpen: boolean;\n  drawersMaxWidth: number;\n}\n\nfunction useResize(\n  drawerRefObject: React.RefObject<HTMLDivElement>,\n  { activeDrawer, activeDrawerSize, onActiveDrawerResize, drawersRefs, isToolsOpen, drawersMaxWidth }: DrawerResizeProps\n) {\n  const toolsWidth = 290;\n  const MIN_WIDTH = Math.min(activeDrawer?.defaultSize ?? Number.POSITIVE_INFINITY, toolsWidth);\n  const [relativeSize, setRelativeSize] = useState(0);\n\n  const drawerSize = !activeDrawer && !isToolsOpen ? 0 : activeDrawerSize;\n\n  useEffect(() => {\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    const handle = requestAnimationFrame(() => {\n      const maxSize = drawersMaxWidth;\n      setRelativeSize(((drawerSize - MIN_WIDTH) / (maxSize - MIN_WIDTH)) * 100);\n    });\n    return () => cancelAnimationFrame(handle);\n  }, [drawerSize, drawersMaxWidth, MIN_WIDTH]);\n\n  const setSidePanelWidth = (width: number) => {\n    const maxWidth = drawersMaxWidth;\n    const size = getLimitedValue(MIN_WIDTH, width, maxWidth);\n    const id = activeDrawer?.id;\n\n    if (id && maxWidth >= MIN_WIDTH) {\n      onActiveDrawerResize({ size, id });\n    }\n  };\n\n  const sizeControlProps: SizeControlProps = {\n    position: 'side',\n    panelRef: drawerRefObject,\n    handleRef: drawersRefs.slider,\n    onResize: setSidePanelWidth,\n    hasTransitions: true,\n  };\n\n  const onSliderPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n\n  const resizeHandle = (\n    <div\n      ref={drawersRefs.slider}\n      role=\"slider\"\n      tabIndex={0}\n      aria-label={activeDrawer?.ariaLabels?.resizeHandle}\n      aria-valuemax={100}\n      aria-valuemin={0}\n      aria-valuenow={relativeSize}\n      className={clsx(splitPanelStyles.slider, splitPanelStyles[`slider-side`], testutilStyles['drawers-slider'])}\n      onKeyDown={onKeyDown}\n      onPointerDown={onSliderPointerDown}\n    >\n      <ResizeHandler className={clsx(splitPanelStyles['slider-icon'], splitPanelStyles[`slider-icon-side`])} />\n    </div>\n  );\n\n  return { resizeHandle: <div className={styles['drawer-slider']}>{resizeHandle}</div>, drawerSize };\n}\n\nexport default useResize;\n"]},"metadata":{},"sourceType":"module"}