{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter } from \"tslib\";\nimport { useCallback, useState } from 'react';\nimport { fireCancelableEvent } from '../internal/events';\nexport function useCellEditing(_ref) {\n  var _this = this;\n  let {\n    onCancel,\n    onSubmit\n  } = _ref;\n  const [currentEditCell, setCurrentEditCell] = useState(null);\n  const [lastSuccessfulEditCell, setLastSuccessfulEditCell] = useState(null);\n  const [currentEditLoading, setCurrentEditLoading] = useState(false);\n  const startEdit = cellId => {\n    setLastSuccessfulEditCell(null);\n    setCurrentEditCell(cellId);\n  };\n  const cancelEdit = useCallback(() => setCurrentEditCell(null), []);\n  const completeEdit = (cellId, editCancelled) => {\n    const eventCancelled = fireCancelableEvent(onCancel, {});\n    if (!eventCancelled) {\n      setCurrentEditCell(null);\n      if (!editCancelled) {\n        setLastSuccessfulEditCell(cellId);\n      }\n    }\n  };\n  const checkEditing = _ref2 => {\n    let {\n      rowIndex,\n      colIndex\n    } = _ref2;\n    return rowIndex === (currentEditCell === null || currentEditCell === void 0 ? void 0 : currentEditCell.rowIndex) && colIndex === currentEditCell.colIndex;\n  };\n  const checkLastSuccessfulEdit = _ref3 => {\n    let {\n      rowIndex,\n      colIndex\n    } = _ref3;\n    return rowIndex === (lastSuccessfulEditCell === null || lastSuccessfulEditCell === void 0 ? void 0 : lastSuccessfulEditCell.rowIndex) && colIndex === lastSuccessfulEditCell.colIndex;\n  };\n  const submitEdit = onSubmit ? function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return __awaiter(_this, void 0, void 0, function* () {\n      setCurrentEditLoading(true);\n      try {\n        yield onSubmit(...args);\n      } finally {\n        setCurrentEditLoading(false);\n      }\n    });\n  } : undefined;\n  return {\n    isLoading: currentEditLoading,\n    startEdit,\n    cancelEdit,\n    checkEditing,\n    checkLastSuccessfulEdit,\n    completeEdit,\n    submitEdit\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;;AAEA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAE7C,SAAiCC,mBAAmB,QAAQ,oBAAoB;AAYhF,OAAM,SAAUC,cAAc,OAAyC;EAAA;EAAA,IAAxC;IAAEC,QAAQ;IAAEC;EAAQ,CAAoB;EACrE,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAgB,IAAI,CAAC;EAC3E,MAAM,CAACO,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGR,QAAQ,CAAgB,IAAI,CAAC;EACzF,MAAM,CAACS,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEnE,MAAMW,SAAS,GAAIC,MAAc,IAAI;IACnCJ,yBAAyB,CAAC,IAAI,CAAC;IAC/BF,kBAAkB,CAACM,MAAM,CAAC;EAC5B,CAAC;EAED,MAAMC,UAAU,GAAGd,WAAW,CAAC,MAAMO,kBAAkB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;EAElE,MAAMQ,YAAY,GAAG,CAACF,MAAc,EAAEG,aAAsB,KAAI;IAC9D,MAAMC,cAAc,GAAGf,mBAAmB,CAACE,QAAQ,EAAE,EAAE,CAAC;IACxD,IAAI,CAACa,cAAc,EAAE;MACnBV,kBAAkB,CAAC,IAAI,CAAC;MACxB,IAAI,CAACS,aAAa,EAAE;QAClBP,yBAAyB,CAACI,MAAM,CAAC;;;EAGvC,CAAC;EAED,MAAMK,YAAY,GAAG;IAAA,IAAC;MAAEC,QAAQ;MAAEC;IAAQ,CAAU;IAAA,OAClDD,QAAQ,MAAKb,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEa,QAAQ,KAAIC,QAAQ,KAAKd,eAAe,CAACc,QAAQ;EAAA;EAEjF,MAAMC,uBAAuB,GAAG;IAAA,IAAC;MAAEF,QAAQ;MAAEC;IAAQ,CAAU;IAAA,OAC7DD,QAAQ,MAAKX,sBAAsB,aAAtBA,sBAAsB,uBAAtBA,sBAAsB,CAAEW,QAAQ,KAAIC,QAAQ,KAAKZ,sBAAsB,CAACY,QAAQ;EAAA;EAE/F,MAAME,UAAU,GAAGjB,QAAQ,GACvB;IAAA,kCAAUkB,IAAiC;MAAjCA,IAAiC;IAAA;IAAA,OAAIC;MAC7Cb,qBAAqB,CAAC,IAAI,CAAC;MAC3B,IAAI;QACF,MAAMN,QAAQ,CAAC,GAAGkB,IAAI,CAAC;OACxB,SAAS;QACRZ,qBAAqB,CAAC,KAAK,CAAC;;IAEhC,CAAC;EAAA,IACDc,SAAS;EAEb,OAAO;IACLC,SAAS,EAAEhB,kBAAkB;IAC7BE,SAAS;IACTE,UAAU;IACVI,YAAY;IACZG,uBAAuB;IACvBN,YAAY;IACZO;GACD;AACH","names":["useCallback","useState","fireCancelableEvent","useCellEditing","onCancel","onSubmit","currentEditCell","setCurrentEditCell","lastSuccessfulEditCell","setLastSuccessfulEditCell","currentEditLoading","setCurrentEditLoading","startEdit","cellId","cancelEdit","completeEdit","editCancelled","eventCancelled","checkEditing","rowIndex","colIndex","checkLastSuccessfulEdit","submitEdit","args","__awaiter","undefined","isLoading"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/table/lib/default/table/use-cell-editing.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useCallback, useState } from 'react';\nimport { TableProps } from './interfaces';\nimport { CancelableEventHandler, fireCancelableEvent } from '../internal/events';\n\nexport interface CellId {\n  rowIndex: number;\n  colIndex: number;\n}\n\ninterface CellEditingProps {\n  onCancel?: CancelableEventHandler;\n  onSubmit?: TableProps.SubmitEditFunction<any>;\n}\n\nexport function useCellEditing({ onCancel, onSubmit }: CellEditingProps) {\n  const [currentEditCell, setCurrentEditCell] = useState<null | CellId>(null);\n  const [lastSuccessfulEditCell, setLastSuccessfulEditCell] = useState<null | CellId>(null);\n  const [currentEditLoading, setCurrentEditLoading] = useState(false);\n\n  const startEdit = (cellId: CellId) => {\n    setLastSuccessfulEditCell(null);\n    setCurrentEditCell(cellId);\n  };\n\n  const cancelEdit = useCallback(() => setCurrentEditCell(null), []);\n\n  const completeEdit = (cellId: CellId, editCancelled: boolean) => {\n    const eventCancelled = fireCancelableEvent(onCancel, {});\n    if (!eventCancelled) {\n      setCurrentEditCell(null);\n      if (!editCancelled) {\n        setLastSuccessfulEditCell(cellId);\n      }\n    }\n  };\n\n  const checkEditing = ({ rowIndex, colIndex }: CellId) =>\n    rowIndex === currentEditCell?.rowIndex && colIndex === currentEditCell.colIndex;\n\n  const checkLastSuccessfulEdit = ({ rowIndex, colIndex }: CellId) =>\n    rowIndex === lastSuccessfulEditCell?.rowIndex && colIndex === lastSuccessfulEditCell.colIndex;\n\n  const submitEdit = onSubmit\n    ? async (...args: Parameters<typeof onSubmit>) => {\n        setCurrentEditLoading(true);\n        try {\n          await onSubmit(...args);\n        } finally {\n          setCurrentEditLoading(false);\n        }\n      }\n    : undefined;\n\n  return {\n    isLoading: currentEditLoading,\n    startEdit,\n    cancelEdit,\n    checkEditing,\n    checkLastSuccessfulEdit,\n    completeEdit,\n    submitEdit,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}