{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport function parseDate(value) {\n  var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var _value$split = value.split('-'),\n    _value$split2 = _slicedToArray(_value$split, 3),\n    yearString = _value$split2[0],\n    monthString = _value$split2[1],\n    dayString = _value$split2[2];\n  var year = Number(yearString);\n  var month = Number(monthString);\n  var day = Number(dayString);\n  if (strict) {\n    if (isNaN(year) || isNaN(month) || isNaN(day)) {\n      return null;\n    }\n  }\n  return new Date(year, (month || 1) - 1, day || 1);\n}","map":{"version":3,"mappings":";AAAA;AACA;AASA,OAAM,SAAUA,SAAS,CAACC,KAAa,EAAgB;EAAA,IAAdC,MAAM,uEAAG,KAAK;EACrD,mBAA6CD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;IAAA;IAAtDC,UAAU;IAAEC,WAAW;IAAEC,SAAS;EAEzC,IAAMC,IAAI,GAAGC,MAAM,CAACJ,UAAU,CAAC;EAC/B,IAAMK,KAAK,GAAGD,MAAM,CAACH,WAAW,CAAC;EACjC,IAAMK,GAAG,GAAGF,MAAM,CAACF,SAAS,CAAC;EAE7B,IAAIJ,MAAM,EAAE;IACV,IAAIS,KAAK,CAACJ,IAAI,CAAC,IAAII,KAAK,CAACF,KAAK,CAAC,IAAIE,KAAK,CAACD,GAAG,CAAC,EAAE;MAC7C,OAAO,IAAI;;;EAIf,OAAO,IAAIE,IAAI,CAACL,IAAI,EAAE,CAACE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAEC,GAAG,IAAI,CAAC,CAAC;AACnD","names":["parseDate","value","strict","split","yearString","monthString","dayString","year","Number","month","day","isNaN","Date"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/utils/date-time/lib/default/internal/utils/date-time/parse-date.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Parses date string and returns Date object or null.\n *\n * We cannot use new Date(string) constructor, because it produces GMT time that may have different date than the local.\n */\nexport function parseDate(value: string): Date;\nexport function parseDate(value: string, strict: boolean): Date | null;\nexport function parseDate(value: string, strict = false): Date | null {\n  const [yearString, monthString, dayString] = value.split('-');\n\n  const year = Number(yearString);\n  const month = Number(monthString);\n  const day = Number(dayString);\n\n  if (strict) {\n    if (isNaN(year) || isNaN(month) || isNaN(day)) {\n      return null;\n    }\n  }\n\n  return new Date(year, (month || 1) - 1, day || 1);\n}\n"]},"metadata":{},"sourceType":"module"}