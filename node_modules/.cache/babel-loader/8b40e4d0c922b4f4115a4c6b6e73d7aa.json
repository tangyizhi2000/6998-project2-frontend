{"ast":null,"code":"import _toConsumableArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport InternalSpaceBetween from '../space-between/internal';\nimport InternalToggle from '../toggle/internal';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport styles from './styles.css.js';\nvar isVisible = function isVisible(id, visibleIds) {\n  return visibleIds.indexOf(id) !== -1;\n};\nvar className = function className(suffix) {\n  return {\n    className: styles[\"visible-content-\".concat(suffix)]\n  };\n};\nexport default function VisibleContentPreference(_ref) {\n  var title = _ref.title,\n    options = _ref.options,\n    _ref$value = _ref.value,\n    value = _ref$value === void 0 ? [] : _ref$value,\n    onChange = _ref.onChange;\n  var idPrefix = useUniqueId('visible-content');\n  var flatOptionsIds = options.reduce(function (ids, group) {\n    return [].concat(_toConsumableArray(ids), _toConsumableArray(group.options.reduce(function (groupIds, option) {\n      return [].concat(_toConsumableArray(groupIds), [option.id]);\n    }, [])));\n  }, []);\n  var onToggle = function onToggle(id) {\n    if (!isVisible(id, value)) {\n      onChange([].concat(_toConsumableArray(value), [id]).sort(function (firstId, secondId) {\n        return flatOptionsIds.indexOf(firstId) - flatOptionsIds.indexOf(secondId);\n      }));\n    } else {\n      onChange(value.filter(function (currentId) {\n        return currentId !== id;\n      }));\n    }\n  };\n  var selectionOption = function selectionOption(option, optionGroupIndex, optionIndex) {\n    var labelId = \"\".concat(idPrefix, \"-\").concat(optionGroupIndex, \"-\").concat(optionIndex);\n    return React.createElement(\"div\", Object.assign({\n      key: optionIndex\n    }, className('option')), React.createElement(\"label\", Object.assign({}, className('option-label'), {\n      htmlFor: labelId\n    }), option.label), React.createElement(\"div\", Object.assign({}, className('toggle')), React.createElement(InternalToggle, {\n      checked: isVisible(option.id, value),\n      onChange: function onChange() {\n        return onToggle(option.id);\n      },\n      disabled: option.editable === false,\n      controlId: labelId\n    })));\n  };\n  var outerGroupLabelId = \"\".concat(idPrefix, \"-outer\");\n  return React.createElement(\"div\", {\n    className: styles['visible-content']\n  }, React.createElement(\"h3\", Object.assign({}, className('title'), {\n    id: outerGroupLabelId\n  }), title), React.createElement(InternalSpaceBetween, Object.assign({}, className('groups'), {\n    size: \"xs\"\n  }), options.map(function (optionGroup, optionGroupIndex) {\n    var groupLabelId = \"\".concat(idPrefix, \"-\").concat(optionGroupIndex);\n    return React.createElement(\"div\", Object.assign({\n      key: optionGroupIndex\n    }, className('group'), {\n      role: \"group\",\n      \"aria-labelledby\": \"\".concat(outerGroupLabelId, \" \").concat(groupLabelId)\n    }), React.createElement(\"div\", Object.assign({}, className('group-label'), {\n      id: groupLabelId\n    }), optionGroup.label), React.createElement(\"div\", null, optionGroup.options.map(function (option, optionIndex) {\n      return selectionOption(option, optionGroupIndex, optionIndex);\n    })));\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","InternalSpaceBetween","InternalToggle","useUniqueId","styles","isVisible","id","visibleIds","indexOf","className","suffix","VisibleContentPreference","title","options","value","onChange","idPrefix","flatOptionsIds","reduce","ids","group","groupIds","option","onToggle","sort","firstId","secondId","filter","currentId","selectionOption","optionGroupIndex","optionIndex","labelId","key","htmlFor","label","checked","disabled","editable","controlId","outerGroupLabelId","size","map","optionGroup","groupLabelId","role"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/collection-preferences/lib/default/collection-preferences/visible-content.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport InternalSpaceBetween from '../space-between/internal';\nimport InternalToggle from '../toggle/internal';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\n\nimport { CollectionPreferencesProps } from './interfaces';\nimport styles from './styles.css.js';\n\nconst isVisible = (id: string, visibleIds: ReadonlyArray<string>) => visibleIds.indexOf(id) !== -1;\n\ninterface ClassNameProps {\n  className: string;\n}\nconst className = (suffix: string): ClassNameProps => ({\n  className: styles[`visible-content-${suffix}`],\n});\n\ninterface VisibleContentPreferenceProps extends CollectionPreferencesProps.VisibleContentPreference {\n  onChange: (value: ReadonlyArray<string>) => void;\n  value?: ReadonlyArray<string>;\n}\n\nexport default function VisibleContentPreference({\n  title,\n  options,\n  value = [],\n  onChange,\n}: VisibleContentPreferenceProps) {\n  const idPrefix = useUniqueId('visible-content');\n\n  const flatOptionsIds = options.reduce<string[]>(\n    (ids, group) => [...ids, ...group.options.reduce<string[]>((groupIds, option) => [...groupIds, option.id], [])],\n    []\n  );\n\n  const onToggle = (id: string) => {\n    if (!isVisible(id, value)) {\n      onChange(\n        [...value, id].sort((firstId, secondId) => flatOptionsIds.indexOf(firstId) - flatOptionsIds.indexOf(secondId))\n      );\n    } else {\n      onChange(value.filter(currentId => currentId !== id));\n    }\n  };\n\n  const selectionOption = (\n    option: CollectionPreferencesProps.VisibleContentOption,\n    optionGroupIndex: number,\n    optionIndex: number\n  ) => {\n    const labelId = `${idPrefix}-${optionGroupIndex}-${optionIndex}`;\n    return (\n      <div key={optionIndex} {...className('option')}>\n        <label {...className('option-label')} htmlFor={labelId}>\n          {option.label}\n        </label>\n        <div {...className('toggle')}>\n          <InternalToggle\n            checked={isVisible(option.id, value)}\n            onChange={() => onToggle(option.id)}\n            disabled={option.editable === false}\n            controlId={labelId}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  const outerGroupLabelId = `${idPrefix}-outer`;\n  return (\n    <div className={styles['visible-content']}>\n      <h3 {...className('title')} id={outerGroupLabelId}>\n        {title}\n      </h3>\n      <InternalSpaceBetween {...className('groups')} size=\"xs\">\n        {options.map((optionGroup, optionGroupIndex) => {\n          const groupLabelId = `${idPrefix}-${optionGroupIndex}`;\n          return (\n            <div\n              key={optionGroupIndex}\n              {...className('group')}\n              role=\"group\"\n              aria-labelledby={`${outerGroupLabelId} ${groupLabelId}`}\n            >\n              <div {...className('group-label')} id={groupLabelId}>\n                {optionGroup.label}\n              </div>\n              <div>\n                {optionGroup.options.map((option, optionIndex) =>\n                  selectionOption(option, optionGroupIndex, optionIndex)\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </InternalSpaceBetween>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}