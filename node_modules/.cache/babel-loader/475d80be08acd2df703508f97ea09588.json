{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef } from 'react';\nimport { KeyCode } from '../../internal/keycode';\nimport { filterOptions, isInteractive, isGroupInteractive, isGroup } from '../../internal/components/option/utils/filter-options';\nimport { useDebounceCallback } from '../../internal/hooks/use-debounce-callback';\nexport const isChar = keyCode => {\n  return [0, KeyCode.enter, KeyCode.space, KeyCode.tab].indexOf(keyCode) === -1;\n};\nexport const isRepeatedChar = str => str.split('').every(c => c === str[0]);\nfunction findMatchingOption(options, searchText, currentHighlight, useInteractiveGroups) {\n  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n  const filter = searchText => filterOptions(options, searchText, true).filter(option => interactivityCheck(option));\n  const matchingOptions = filter(searchText);\n  if (matchingOptions.length === 1) {\n    return matchingOptions[0];\n  }\n  // Hit the same char over and over, we assume they want to cycle through\n  if (currentHighlight && searchText.length > 1 && isRepeatedChar(searchText)) {\n    const matchingOptions = filter(searchText[0]);\n    if (matchingOptions.length > 0) {\n      //handling OptionGroups when useInteractiveGroups is set\n      let active = isGroup(currentHighlight) ? matchingOptions.map(_ref => {\n        let {\n          option\n        } = _ref;\n        return option;\n      }).indexOf(currentHighlight) : matchingOptions.map(_ref2 => {\n        let {\n          option\n        } = _ref2;\n        return option.value;\n      }).indexOf(currentHighlight.value);\n      // Pick the next thing (if something with this prefix wasn't selected\n      // we'll end up with the first option)\n      active += 1;\n      active = active % matchingOptions.length;\n      return matchingOptions[active];\n    }\n  }\n  // We have multiple things that start with this prefix.  Based on the\n  // behavior of native select, this is considered after the repeated case\n  if (matchingOptions.length > 0) {\n    return matchingOptions[0];\n  }\n  return null;\n}\nexport function useNativeSearch(_ref3) {\n  let {\n    isEnabled,\n    options,\n    highlightOption,\n    highlightedOption,\n    useInteractiveGroups\n  } = _ref3;\n  const value = useRef('');\n  const delayedResetValue = useDebounceCallback(() => value.current = '', 500);\n  return event => {\n    if (!isEnabled) {\n      return;\n    }\n    const {\n      charCode\n    } = event;\n    if (!isChar(charCode)) {\n      return;\n    }\n    delayedResetValue();\n    const newValue = value.current + String.fromCharCode(charCode);\n    value.current = newValue;\n    const nextHighlight = findMatchingOption(options, newValue, highlightedOption, useInteractiveGroups);\n    if (nextHighlight) {\n      highlightOption(nextHighlight);\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["useRef","KeyCode","filterOptions","isInteractive","isGroupInteractive","isGroup","useDebounceCallback","isChar","keyCode","enter","space","tab","indexOf","isRepeatedChar","str","split","every","c","findMatchingOption","options","searchText","currentHighlight","useInteractiveGroups","interactivityCheck","filter","option","matchingOptions","length","active","map","value","useNativeSearch","isEnabled","highlightOption","highlightedOption","delayedResetValue","current","event","charCode","newValue","String","fromCharCode","nextHighlight"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/select/utils/lib/default/select/utils/use-native-search.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport { KeyCode } from '../../internal/keycode';\nimport {\n  filterOptions,\n  isInteractive,\n  isGroupInteractive,\n  isGroup,\n} from '../../internal/components/option/utils/filter-options';\nimport { DropdownOption, OptionDefinition, OptionGroup } from '../../internal/components/option/interfaces';\nimport { useDebounceCallback } from '../../internal/hooks/use-debounce-callback';\n\nexport const isChar = (keyCode: number): boolean => {\n  return [0, KeyCode.enter, KeyCode.space, KeyCode.tab].indexOf(keyCode) === -1;\n};\n\nexport const isRepeatedChar = (str: string) => str.split('').every(c => c === str[0]);\n\ninterface UseNativeSearchProps {\n  isEnabled: boolean;\n  options: ReadonlyArray<DropdownOption>;\n  highlightOption: (option: DropdownOption) => void;\n  highlightedOption: OptionDefinition | undefined | null;\n  useInteractiveGroups?: boolean;\n}\n\nfunction findMatchingOption(\n  options: ReadonlyArray<DropdownOption>,\n  searchText: string,\n  currentHighlight: OptionDefinition | OptionGroup | undefined | null,\n  useInteractiveGroups?: boolean\n) {\n  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n  const filter = (searchText: string) =>\n    filterOptions(options, searchText, true).filter(option => interactivityCheck(option));\n  const matchingOptions = filter(searchText);\n\n  if (matchingOptions.length === 1) {\n    return matchingOptions[0];\n  }\n\n  // Hit the same char over and over, we assume they want to cycle through\n  if (currentHighlight && searchText.length > 1 && isRepeatedChar(searchText)) {\n    const matchingOptions = filter(searchText[0]);\n\n    if (matchingOptions.length > 0) {\n      //handling OptionGroups when useInteractiveGroups is set\n      let active: number = isGroup(currentHighlight)\n        ? matchingOptions.map(({ option }) => option).indexOf(currentHighlight)\n        : matchingOptions\n            .map(({ option }) => (option as OptionDefinition).value)\n            .indexOf((currentHighlight as OptionDefinition).value);\n\n      // Pick the next thing (if something with this prefix wasn't selected\n      // we'll end up with the first option)\n      active += 1;\n      active = active % matchingOptions.length;\n      return matchingOptions[active];\n    }\n  }\n\n  // We have multiple things that start with this prefix.  Based on the\n  // behavior of native select, this is considered after the repeated case\n  if (matchingOptions.length > 0) {\n    return matchingOptions[0];\n  }\n  return null;\n}\n\nexport function useNativeSearch({\n  isEnabled,\n  options,\n  highlightOption,\n  highlightedOption,\n  useInteractiveGroups,\n}: UseNativeSearchProps) {\n  const value = useRef('');\n\n  const delayedResetValue = useDebounceCallback(() => (value.current = ''), 500);\n\n  return (event: React.KeyboardEvent) => {\n    if (!isEnabled) {\n      return;\n    }\n\n    const { charCode } = event;\n    if (!isChar(charCode)) {\n      return;\n    }\n    delayedResetValue();\n    const newValue = value.current + String.fromCharCode(charCode);\n    value.current = newValue;\n\n    const nextHighlight = findMatchingOption(options, newValue, highlightedOption, useInteractiveGroups);\n    if (nextHighlight) {\n      highlightOption(nextHighlight);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}