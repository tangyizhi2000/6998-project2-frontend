{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo } from 'react';\nimport { line, area } from 'd3-shape';\nexport default memo(AreaSeries);\nfunction AreaSeries(_ref) {\n  let {\n    data,\n    color,\n    chartAreaClipPath\n  } = _ref;\n  const areaGenerator = area().x(p => p.scaled.x).y0(p => p.scaled.y0).y1(p => p.scaled.y1);\n  const areaPath = areaGenerator(data) || '';\n  const lineGenerator = line().x(p => p.scaled.x).y(p => p.scaled.y1);\n  const linePath = lineGenerator(data) || '';\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    \"aria-hidden\": true,\n    fill: color,\n    stroke: color,\n    style: {\n      opacity: 0.4\n    },\n    clipPath: `url(#${chartAreaClipPath})`,\n    d: areaPath\n  }), React.createElement(\"path\", {\n    \"aria-hidden\": true,\n    stroke: color,\n    clipPath: `url(#${chartAreaClipPath})`,\n    d: linePath\n  }));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,IAAI,QAAQ,OAAO;AACnC,SAASC,IAAI,EAAEC,IAAI,QAAQ,UAAU;AASrC,eAAeF,IAAI,CAACG,UAAU,CAAsB;AAEpD,SAASA,UAAU,OAA0D;EAAA,IAAtD;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAiB,CAAsB;EAC3E,MAAMC,aAAa,GAAGL,IAAI,EAA2B,CAClDM,CAAC,CAAEC,CAA0B,IAAKA,CAAC,CAACC,MAAM,CAACF,CAAC,CAAC,CAC7CG,EAAE,CAAEF,CAA0B,IAAKA,CAAC,CAACC,MAAM,CAACC,EAAE,CAAC,CAC/CC,EAAE,CAAEH,CAA0B,IAAKA,CAAC,CAACC,MAAM,CAACE,EAAE,CAAC;EAClD,MAAMC,QAAQ,GAAGN,aAAa,CAACH,IAAiC,CAAC,IAAI,EAAE;EAEvE,MAAMU,aAAa,GAAGb,IAAI,EAA2B,CAClDO,CAAC,CAAEC,CAA0B,IAAKA,CAAC,CAACC,MAAM,CAACF,CAAC,CAAC,CAC7CO,CAAC,CAAEN,CAA0B,IAAKA,CAAC,CAACC,MAAM,CAACE,EAAE,CAAC;EACjD,MAAMI,QAAQ,GAAGF,aAAa,CAACV,IAAiC,CAAC,IAAI,EAAE;EAEvE,OACEL,0CACEA;IAAA,eACe,IAAI;IACjBkB,IAAI,EAAEZ,KAAK;IACXa,MAAM,EAAEb,KAAK;IACbc,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAE;IACvBC,QAAQ,EAAE,QAAQf,iBAAiB,GAAG;IACtCgB,CAAC,EAAET;EAAQ,EACX,EACFd;IAAA,eAAmB,IAAI;IAAEmB,MAAM,EAAEb,KAAK;IAAEgB,QAAQ,EAAE,QAAQf,iBAAiB,GAAG;IAAEgB,CAAC,EAAEN;EAAQ,EAAI,CAC9F;AAEP","names":["React","memo","line","area","AreaSeries","data","color","chartAreaClipPath","areaGenerator","x","p","scaled","y0","y1","areaPath","lineGenerator","y","linePath","fill","stroke","style","opacity","clipPath","d"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/area-chart/elements/lib/default/area-chart/elements/area-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo } from 'react';\nimport { line, area } from 'd3-shape';\nimport { ChartModel } from '../model';\n\nexport interface AreaSeriesProps<T> {\n  data: readonly ChartModel.PlotPoint<T>[];\n  color: string;\n  chartAreaClipPath: string;\n}\n\nexport default memo(AreaSeries) as typeof AreaSeries;\n\nfunction AreaSeries<T>({ data, color, chartAreaClipPath }: AreaSeriesProps<T>) {\n  const areaGenerator = area<ChartModel.PlotPoint<T>>()\n    .x((p: ChartModel.PlotPoint<T>) => p.scaled.x)\n    .y0((p: ChartModel.PlotPoint<T>) => p.scaled.y0)\n    .y1((p: ChartModel.PlotPoint<T>) => p.scaled.y1);\n  const areaPath = areaGenerator(data as ChartModel.PlotPoint<T>[]) || '';\n\n  const lineGenerator = line<ChartModel.PlotPoint<T>>()\n    .x((p: ChartModel.PlotPoint<T>) => p.scaled.x)\n    .y((p: ChartModel.PlotPoint<T>) => p.scaled.y1);\n  const linePath = lineGenerator(data as ChartModel.PlotPoint<T>[]) || '';\n\n  return (\n    <>\n      <path\n        aria-hidden={true}\n        fill={color}\n        stroke={color}\n        style={{ opacity: 0.4 }}\n        clipPath={`url(#${chartAreaClipPath})`}\n        d={areaPath}\n      />\n      <path aria-hidden={true} stroke={color} clipPath={`url(#${chartAreaClipPath})`} d={linePath} />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}