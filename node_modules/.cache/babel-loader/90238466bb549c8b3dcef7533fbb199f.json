{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useSelector } from '../async-store';\nimport { useInternalI18n } from '../../i18n/context';\nexport default function useHighlightDetails(_ref) {\n  let {\n    model,\n    xTickFormatter,\n    yTickFormatter,\n    detailTotalFormatter,\n    detailTotalLabel\n  } = _ref;\n  const i18n = useInternalI18n('area-chart');\n  const hX = useSelector(model.interactions, state => state.highlightedX);\n  const hPoint = useSelector(model.interactions, state => state.highlightedPoint);\n  const isPopoverPinned = useSelector(model.interactions, state => state.isPopoverPinned);\n  if (!hX) {\n    return null;\n  }\n  const [firstPoint] = hX;\n  const highlightIndex = firstPoint.index.x;\n  const seriesPoints = [...model.computed.plot.xs[highlightIndex]];\n  const detailsTotal = seriesPoints.reduce((total, point) => total + point.value, 0);\n  const formattedX = xTickFormatter ? xTickFormatter(firstPoint.x) : firstPoint.x.toString();\n  const seriesTitle = hPoint ? getInternalSeries(hPoint).title : '';\n  const formattedY = hPoint ? getInternalSeries(hPoint).formatValue(hPoint.value, hPoint.x) : '';\n  const seriesDetails = seriesPoints.map(point => {\n    const {\n      title,\n      formatValue,\n      color,\n      markerType\n    } = getInternalSeries(point);\n    const isDimmed = Boolean(hPoint) && point !== hPoint;\n    return {\n      key: title,\n      value: formatValue(point.value, point.x),\n      color,\n      markerType,\n      isDimmed\n    };\n  });\n  const totalDetails = [{\n    key: i18n('i18nStrings.detailTotalLabel', detailTotalLabel) || '',\n    value: detailTotalFormatter ? detailTotalFormatter(detailsTotal) : yTickFormatter ? yTickFormatter(detailsTotal) : detailsTotal\n  }];\n  const pointDetails = hPoint ? seriesDetails[hPoint.index.s] : null;\n  const activeLabel = `${seriesTitle} ${formattedX} ${formattedY}, ${totalDetails[0].key} ${totalDetails[0].value}`;\n  return {\n    isPopoverPinned,\n    highlightIndex,\n    formattedX,\n    seriesTitle,\n    formattedY,\n    activeLabel,\n    seriesDetails,\n    totalDetails,\n    pointDetails\n  };\n  function getInternalSeries(point) {\n    return model.getInternalSeries(model.series[point.index.s]);\n  }\n}","map":{"version":3,"mappings":"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","names":["useSelector","useInternalI18n","useHighlightDetails","model","xTickFormatter","yTickFormatter","detailTotalFormatter","detailTotalLabel","i18n","hX","interactions","state","highlightedX","hPoint","highlightedPoint","isPopoverPinned","firstPoint","highlightIndex","index","x","seriesPoints","computed","plot","xs","detailsTotal","reduce","total","point","value","formattedX","toString","seriesTitle","getInternalSeries","title","formattedY","formatValue","seriesDetails","map","color","markerType","isDimmed","Boolean","key","totalDetails","pointDetails","s","activeLabel","series"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/area-chart/elements/lib/default/area-chart/elements/use-highlight-details.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useSelector } from '../async-store';\nimport { CartesianChartProps } from '../../internal/components/cartesian-chart/interfaces';\nimport { ChartSeriesDetailItem } from '../../internal/components/chart-series-details';\nimport { useInternalI18n } from '../../i18n/context';\nimport { AreaChartProps } from '../interfaces';\nimport { ChartModel } from '../model';\n\nexport interface HighlightDetails {\n  isPopoverPinned: boolean;\n  highlightIndex: number;\n  formattedX: string;\n  seriesTitle: string;\n  formattedY: number | string;\n  seriesDetails: readonly ChartSeriesDetailItem[];\n  totalDetails: readonly ChartSeriesDetailItem[];\n  pointDetails: null | ChartSeriesDetailItem;\n  activeLabel: string;\n}\n\nexport default function useHighlightDetails<T extends AreaChartProps.DataTypes>({\n  model,\n  xTickFormatter,\n  yTickFormatter,\n  detailTotalFormatter,\n  detailTotalLabel,\n}: {\n  model: ChartModel<T>;\n  xTickFormatter?: CartesianChartProps.TickFormatter<T>;\n  yTickFormatter?: CartesianChartProps.TickFormatter<number>;\n  detailTotalFormatter?: CartesianChartProps.TickFormatter<number>;\n  detailTotalLabel?: string;\n}): null | HighlightDetails {\n  const i18n = useInternalI18n('area-chart');\n  const hX = useSelector(model.interactions, state => state.highlightedX);\n  const hPoint = useSelector(model.interactions, state => state.highlightedPoint);\n  const isPopoverPinned = useSelector(model.interactions, state => state.isPopoverPinned);\n\n  if (!hX) {\n    return null;\n  }\n\n  const [firstPoint] = hX;\n  const highlightIndex = firstPoint.index.x;\n  const seriesPoints = [...model.computed.plot.xs[highlightIndex]];\n  const detailsTotal = seriesPoints.reduce((total, point) => total + point.value, 0);\n  const formattedX = xTickFormatter ? xTickFormatter(firstPoint.x) : firstPoint.x.toString();\n  const seriesTitle = hPoint ? getInternalSeries(hPoint).title : '';\n  const formattedY = hPoint ? getInternalSeries(hPoint).formatValue(hPoint.value, hPoint.x) : '';\n  const seriesDetails = seriesPoints.map(point => {\n    const { title, formatValue, color, markerType } = getInternalSeries(point);\n    const isDimmed = Boolean(hPoint) && point !== hPoint;\n    return { key: title, value: formatValue(point.value, point.x), color, markerType, isDimmed };\n  });\n  const totalDetails = [\n    {\n      key: i18n('i18nStrings.detailTotalLabel', detailTotalLabel) || '',\n      value: detailTotalFormatter\n        ? detailTotalFormatter(detailsTotal)\n        : yTickFormatter\n        ? yTickFormatter(detailsTotal)\n        : detailsTotal,\n    },\n  ];\n  const pointDetails = hPoint ? seriesDetails[hPoint.index.s] : null;\n  const activeLabel = `${seriesTitle} ${formattedX} ${formattedY}, ${totalDetails[0].key} ${totalDetails[0].value}`;\n\n  return {\n    isPopoverPinned,\n    highlightIndex,\n    formattedX,\n    seriesTitle,\n    formattedY,\n    activeLabel,\n    seriesDetails,\n    totalDetails,\n    pointDetails,\n  };\n\n  function getInternalSeries(point: ChartModel.PlotPoint<T>) {\n    return model.getInternalSeries(model.series[point.index.s]);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}