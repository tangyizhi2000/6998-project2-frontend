{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useLayoutEffect } from 'react';\nimport { useMergeRefs } from '../../hooks/use-merge-refs';\nimport { getBaseProps } from '../../base-component';\nimport { fireCancelableEvent, fireNonCancelableEvent } from '../../events';\nimport { useFormFieldContext } from '../../context/form-field-context';\nimport InternalInput from '../../../input/internal';\nimport useMask from './use-mask';\nimport MaskFormat from './utils/mask-format';\nconst MaskedInput = React.forwardRef((_a, ref) => {\n  var {\n      value,\n      onBlur,\n      onChange,\n      onKeyDown,\n      mask,\n      autofix = false,\n      disableAutocompleteOnBlur = false\n    } = _a,\n    rest = __rest(_a, [\"value\", \"onBlur\", \"onChange\", \"onKeyDown\", \"mask\", \"autofix\", \"disableAutocompleteOnBlur\"]);\n  const baseProps = getBaseProps(rest);\n  const formFieldContext = useFormFieldContext(rest);\n  const inputRef = React.useRef(null);\n  const [cursorPosition, setCursorPosition] = useState(null);\n  useLayoutEffect(() => {\n    var _a;\n    if (cursorPosition !== null) {\n      (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.setSelectionRange(cursorPosition, cursorPosition);\n    }\n  }, [cursorPosition, inputRef]);\n  const _b = useMask({\n      format: new MaskFormat(mask),\n      value,\n      inputRef,\n      autofix,\n      disableAutocompleteOnBlur,\n      onChange: value => !rest.readOnly && fireNonCancelableEvent(onChange, {\n        value\n      }),\n      onKeyDown: event => !rest.readOnly && onKeyDown && fireCancelableEvent(onKeyDown, event.detail, event),\n      onBlur: () => fireNonCancelableEvent(onBlur),\n      setPosition: setCursorPosition\n    }),\n    {\n      onPaste\n    } = _b,\n    maskProps = __rest(_b, [\"onPaste\"]);\n  const inputProps = Object.assign(Object.assign(Object.assign(Object.assign({}, rest), baseProps), formFieldContext), maskProps);\n  const mergedRef = useMergeRefs(ref, inputRef);\n  return React.createElement(InternalInput, Object.assign({}, inputProps, {\n    ref: mergedRef,\n    __nativeAttributes: {\n      onPaste\n    }\n  }));\n});\nexport { useMask };\nexport default MaskedInput;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAASC,QAAQ,EAAEC,eAAe,QAAQ,OAAO;AAC7D,SAASC,YAAY,QAAQ,4BAA4B;AAEzD,SAASC,YAAY,QAAQ,sBAAsB;AACnD,SAASC,mBAAmB,EAAEC,sBAAsB,QAAQ,cAAc;AAE1E,SAASC,mBAAmB,QAAQ,kCAAkC;AAEtE,OAAOC,aAAa,MAAM,yBAAyB;AAEnD,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,UAAU,MAAM,qBAAqB;AAI5C,MAAMC,WAAW,GAAGX,KAAK,CAACY,UAAU,CAClC,CACEC,EASmB,EACnBC,GAA8B,KAC5B;MAXF;MACEC,KAAK;MACLC,MAAM;MACNC,QAAQ;MACRC,SAAS;MACTC,IAAI;MACJC,OAAO,GAAG,KAAK;MACfC,yBAAyB,GAAG;IAAK,MAEhB;IADdC,IAAI,cART,4FASC,CADQ;EAIT,MAAMC,SAAS,GAAGnB,YAAY,CAACkB,IAAI,CAAC;EACpC,MAAME,gBAAgB,GAAGjB,mBAAmB,CAACe,IAAI,CAAC;EAClD,MAAMG,QAAQ,GAAGzB,KAAK,CAAC0B,MAAM,CAAmB,IAAI,CAAC;EACrD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG3B,QAAQ,CAAgB,IAAI,CAAC;EAEzEC,eAAe,CAAC,MAAK;;IACnB,IAAIyB,cAAc,KAAK,IAAI,EAAE;MAC3B,cAAQ,CAACE,OAAO,0CAAEC,iBAAiB,CAACH,cAAc,EAAEA,cAAc,CAAC;;EAEvE,CAAC,EAAE,CAACA,cAAc,EAAEF,QAAQ,CAAC,CAAC;EAE9B,MAAMM,KAA4BtB,OAAO,CAAC;MACxCuB,MAAM,EAAE,IAAItB,UAAU,CAACS,IAAI,CAAC;MAC5BJ,KAAK;MACLU,QAAQ;MACRL,OAAO;MACPC,yBAAyB;MACzBJ,QAAQ,EAAGF,KAAa,IAAK,CAACO,IAAI,CAACW,QAAQ,IAAI3B,sBAAsB,CAACW,QAAQ,EAAE;QAAEF;MAAK,CAAE,CAAC;MAC1FG,SAAS,EAAGgB,KAAkB,IAC5B,CAACZ,IAAI,CAACW,QAAQ,IAAIf,SAAS,IAAIb,mBAAmB,CAACa,SAAS,EAAEgB,KAAK,CAACC,MAAM,EAAED,KAAK,CAAC;MACpFlB,MAAM,EAAE,MAAMV,sBAAsB,CAACU,MAAM,CAAC;MAC5CoB,WAAW,EAAER;KACd,CAAC;IAXI;MAAES;IAAO,MAWb;IAXkBC,SAAS,cAAvB,WAAyB,CAW7B;EAEF,MAAMC,UAAU,+DAAQjB,IAAI,GAAKC,SAAS,GAAKC,gBAAgB,GAAKc,SAAS,CAAE;EAC/E,MAAME,SAAS,GAAGrC,YAAY,CAACW,GAAG,EAAEW,QAAQ,CAAC;EAC7C,OACEzB,oBAACQ,aAAa,oBACR+B,UAAU;IACdzB,GAAG,EAAE0B,SAAS;IACdC,kBAAkB,EAAE;MAClBJ;;EACD,GACD;AAEN,CAAC,CACF;AAED,SAA2B5B,OAAO;AAClC,eAAeE,WAAW","names":["React","useState","useLayoutEffect","useMergeRefs","getBaseProps","fireCancelableEvent","fireNonCancelableEvent","useFormFieldContext","InternalInput","useMask","MaskFormat","MaskedInput","forwardRef","_a","ref","value","onBlur","onChange","onKeyDown","mask","autofix","disableAutocompleteOnBlur","rest","baseProps","formFieldContext","inputRef","useRef","cursorPosition","setCursorPosition","current","setSelectionRange","_b","format","readOnly","event","detail","setPosition","onPaste","maskProps","inputProps","mergedRef","__nativeAttributes"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/components/masked-input/lib/default/internal/components/masked-input/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Ref, useState, useLayoutEffect } from 'react';\nimport { useMergeRefs } from '../../hooks/use-merge-refs';\n\nimport { getBaseProps } from '../../base-component';\nimport { fireCancelableEvent, fireNonCancelableEvent } from '../../events';\n\nimport { useFormFieldContext } from '../../context/form-field-context';\n\nimport InternalInput from '../../../input/internal';\n\nimport useMask from './use-mask';\nimport MaskFormat from './utils/mask-format';\n\nimport { MaskedInputProps } from './interfaces';\n\nconst MaskedInput = React.forwardRef(\n  (\n    {\n      value,\n      onBlur,\n      onChange,\n      onKeyDown,\n      mask,\n      autofix = false,\n      disableAutocompleteOnBlur = false,\n      ...rest\n    }: MaskedInputProps,\n    ref: Ref<MaskedInputProps.Ref>\n  ) => {\n    const baseProps = getBaseProps(rest);\n    const formFieldContext = useFormFieldContext(rest);\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const [cursorPosition, setCursorPosition] = useState<number | null>(null);\n\n    useLayoutEffect(() => {\n      if (cursorPosition !== null) {\n        inputRef.current?.setSelectionRange(cursorPosition, cursorPosition);\n      }\n    }, [cursorPosition, inputRef]);\n\n    const { onPaste, ...maskProps } = useMask({\n      format: new MaskFormat(mask),\n      value,\n      inputRef,\n      autofix,\n      disableAutocompleteOnBlur,\n      onChange: (value: string) => !rest.readOnly && fireNonCancelableEvent(onChange, { value }),\n      onKeyDown: (event: CustomEvent) =>\n        !rest.readOnly && onKeyDown && fireCancelableEvent(onKeyDown, event.detail, event),\n      onBlur: () => fireNonCancelableEvent(onBlur),\n      setPosition: setCursorPosition,\n    });\n\n    const inputProps = { ...rest, ...baseProps, ...formFieldContext, ...maskProps };\n    const mergedRef = useMergeRefs(ref, inputRef);\n    return (\n      <InternalInput\n        {...inputProps}\n        ref={mergedRef}\n        __nativeAttributes={{\n          onPaste,\n        }}\n      />\n    );\n  }\n);\n\nexport { MaskedInputProps, useMask };\nexport default MaskedInput;\n"]},"metadata":{},"sourceType":"module"}