{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport InternalIcon from '../../icon/internal';\nimport ItemsList from '../items-list';\nimport MobileExpandableGroup from '../mobile-expandable-group/mobile-expandable-group';\nimport Tooltip from '../tooltip.js';\nimport useHiddenDescription from '../utils/use-hidden-description.js';\nimport { getMenuItemProps } from '../utils/menu-item.js';\nvar MobileExpandableCategoryElement = function MobileExpandableCategoryElement(_ref) {\n  var _clsx, _clsx3;\n  var item = _ref.item,\n    onItemActivate = _ref.onItemActivate,\n    onGroupToggle = _ref.onGroupToggle,\n    targetItem = _ref.targetItem,\n    isHighlighted = _ref.isHighlighted,\n    isKeyboardHighlight = _ref.isKeyboardHighlight,\n    isExpanded = _ref.isExpanded,\n    highlightItem = _ref.highlightItem,\n    disabled = _ref.disabled,\n    variant = _ref.variant;\n  var highlighted = isHighlighted(item);\n  var expanded = isExpanded(item);\n  var isKeyboardHighlighted = isKeyboardHighlight(item);\n  var triggerRef = React.useRef(null);\n  useEffect(function () {\n    if (triggerRef.current && highlighted && !expanded) {\n      triggerRef.current.focus();\n    }\n  }, [expanded, highlighted]);\n  var onClick = function onClick(e) {\n    if (!disabled) {\n      e.preventDefault();\n      onGroupToggle(item, e);\n    }\n  };\n  var onHover = function onHover() {\n    highlightItem(item);\n  };\n  var isDisabledWithReason = !!item.disabledReason && item.disabled;\n  var _useHiddenDescription = useHiddenDescription(item.disabledReason),\n    targetProps = _useHiddenDescription.targetProps,\n    descriptionEl = _useHiddenDescription.descriptionEl;\n  var trigger = item.text && React.createElement(\"span\", Object.assign({\n    className: clsx(styles.header, styles['expandable-header'], styles[\"variant-\".concat(variant)], (_clsx = {}, _defineProperty(_clsx, styles.highlighted, highlighted), _defineProperty(_clsx, styles['rolled-down'], expanded), _defineProperty(_clsx, styles.disabled, disabled), _defineProperty(_clsx, styles['is-focused'], isKeyboardHighlighted), _clsx)),\n    // We are using the roving tabindex technique to manage the focus state of the dropdown.\n    // The current element will always have tabindex=0 which means that it can be tabbed to,\n    // while all other items have tabindex=-1 so we can focus them when necessary.\n    tabIndex: highlighted ? 0 : -1,\n    ref: triggerRef\n  }, getMenuItemProps({\n    parent: true,\n    disabled: disabled,\n    expanded: expanded\n  }), isDisabledWithReason ? targetProps : {}), item.text, React.createElement(\"span\", {\n    className: clsx(styles['expand-icon'], _defineProperty({}, styles['expand-icon-up'], expanded))\n  }, React.createElement(InternalIcon, {\n    name: \"caret-down-filled\"\n  })));\n  var content;\n  if (isDisabledWithReason) {\n    content = React.createElement(React.Fragment, null, descriptionEl, React.createElement(Tooltip, {\n      content: item.disabledReason\n    }, trigger));\n  } else if (disabled) {\n    content = trigger;\n  } else {\n    content = React.createElement(MobileExpandableGroup, {\n      open: expanded,\n      trigger: trigger\n    }, item.items && expanded && React.createElement(\"ul\", {\n      role: \"menu\",\n      \"aria-label\": item.text,\n      className: clsx(styles['items-list-container'])\n    }, React.createElement(ItemsList, {\n      items: item.items,\n      onItemActivate: onItemActivate,\n      onGroupToggle: onGroupToggle,\n      targetItem: targetItem,\n      isHighlighted: isHighlighted,\n      isKeyboardHighlight: isKeyboardHighlight,\n      isExpanded: isExpanded,\n      highlightItem: highlightItem,\n      hasCategoryHeader: true,\n      variant: variant\n    })));\n  }\n  return React.createElement(\"li\", {\n    className: clsx(styles.category, styles[\"variant-\".concat(variant)], styles.expandable, (_clsx3 = {}, _defineProperty(_clsx3, styles.expanded, expanded), _defineProperty(_clsx3, styles.disabled, disabled), _defineProperty(_clsx3, styles.highlighted, highlighted || expanded), _defineProperty(_clsx3, styles.expandable, true), _clsx3)),\n    role: \"presentation\",\n    onClick: onClick,\n    onMouseEnter: onHover,\n    onTouchStart: onHover,\n    \"data-testid\": item.id\n  }, content);\n};\nexport default MobileExpandableCategoryElement;","map":{"version":3,"mappings":"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","names":["React","useEffect","clsx","styles","InternalIcon","ItemsList","MobileExpandableGroup","Tooltip","useHiddenDescription","getMenuItemProps","MobileExpandableCategoryElement","item","onItemActivate","onGroupToggle","targetItem","isHighlighted","isKeyboardHighlight","isExpanded","highlightItem","disabled","variant","highlighted","expanded","isKeyboardHighlighted","triggerRef","useRef","current","focus","onClick","e","preventDefault","onHover","isDisabledWithReason","disabledReason","targetProps","descriptionEl","trigger","text","className","header","tabIndex","ref","parent","name","content","open","items","role","hasCategoryHeader","category","expandable","onMouseEnter","onTouchStart","id"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/button-dropdown/category-elements/lib/default/button-dropdown/category-elements/mobile-expandable-category-element.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\n\nimport InternalIcon from '../../icon/internal';\nimport ItemsList from '../items-list';\nimport MobileExpandableGroup from '../mobile-expandable-group/mobile-expandable-group';\nimport { CategoryProps } from '../interfaces';\nimport Tooltip from '../tooltip.js';\nimport useHiddenDescription from '../utils/use-hidden-description.js';\nimport { getMenuItemProps } from '../utils/menu-item.js';\n\nconst MobileExpandableCategoryElement = ({\n  item,\n  onItemActivate,\n  onGroupToggle,\n  targetItem,\n  isHighlighted,\n  isKeyboardHighlight,\n  isExpanded,\n  highlightItem,\n  disabled,\n  variant,\n}: CategoryProps) => {\n  const highlighted = isHighlighted(item);\n  const expanded = isExpanded(item);\n  const isKeyboardHighlighted = isKeyboardHighlight(item);\n  const triggerRef = React.useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    if (triggerRef.current && highlighted && !expanded) {\n      triggerRef.current.focus();\n    }\n  }, [expanded, highlighted]);\n\n  const onClick = (e: React.MouseEvent) => {\n    if (!disabled) {\n      e.preventDefault();\n      onGroupToggle(item, e);\n    }\n  };\n\n  const onHover = () => {\n    highlightItem(item);\n  };\n\n  const isDisabledWithReason = !!item.disabledReason && item.disabled;\n  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);\n  const trigger = item.text && (\n    <span\n      className={clsx(styles.header, styles['expandable-header'], styles[`variant-${variant}`], {\n        [styles.highlighted]: highlighted,\n        [styles['rolled-down']]: expanded,\n        [styles.disabled]: disabled,\n        [styles['is-focused']]: isKeyboardHighlighted,\n      })}\n      // We are using the roving tabindex technique to manage the focus state of the dropdown.\n      // The current element will always have tabindex=0 which means that it can be tabbed to,\n      // while all other items have tabindex=-1 so we can focus them when necessary.\n      tabIndex={highlighted ? 0 : -1}\n      ref={triggerRef}\n      {...getMenuItemProps({ parent: true, disabled, expanded })}\n      {...(isDisabledWithReason ? targetProps : {})}\n    >\n      {item.text}\n      <span\n        className={clsx(styles['expand-icon'], {\n          [styles['expand-icon-up']]: expanded,\n        })}\n      >\n        <InternalIcon name=\"caret-down-filled\" />\n      </span>\n    </span>\n  );\n\n  let content: React.ReactNode;\n\n  if (isDisabledWithReason) {\n    content = (\n      <>\n        {descriptionEl}\n        <Tooltip content={item.disabledReason}>{trigger}</Tooltip>\n      </>\n    );\n  } else if (disabled) {\n    content = trigger;\n  } else {\n    content = (\n      <MobileExpandableGroup open={expanded} trigger={trigger}>\n        {item.items && expanded && (\n          <ul role=\"menu\" aria-label={item.text} className={clsx(styles['items-list-container'])}>\n            <ItemsList\n              items={item.items}\n              onItemActivate={onItemActivate}\n              onGroupToggle={onGroupToggle}\n              targetItem={targetItem}\n              isHighlighted={isHighlighted}\n              isKeyboardHighlight={isKeyboardHighlight}\n              isExpanded={isExpanded}\n              highlightItem={highlightItem}\n              hasCategoryHeader={true}\n              variant={variant}\n            />\n          </ul>\n        )}\n      </MobileExpandableGroup>\n    );\n  }\n\n  return (\n    <li\n      className={clsx(styles.category, styles[`variant-${variant}`], styles.expandable, {\n        [styles.expanded]: expanded,\n        [styles.disabled]: disabled,\n        [styles.highlighted]: highlighted || expanded,\n        [styles.expandable]: true,\n      })}\n      role=\"presentation\"\n      onClick={onClick}\n      onMouseEnter={onHover}\n      onTouchStart={onHover}\n      data-testid={item.id}\n    >\n      {content}\n    </li>\n  );\n};\n\nexport default MobileExpandableCategoryElement;\n"]},"metadata":{},"sourceType":"module"}