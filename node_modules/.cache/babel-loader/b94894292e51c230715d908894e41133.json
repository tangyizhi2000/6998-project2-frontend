{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ResizeObserver, ResizeObserverEntry } from '@juggle/resize-observer';\nimport { useEffect, useLayoutEffect } from 'react';\nimport { useStableCallback } from '../stable-callback';\n/**\n * Attaches resize-observer to the referenced element.\n *\n * @remarks\n *\n * The hook has no control over the referenced element. It is up to the consumer to ensure\n * the element lifecycle and notify the hook by updating the `elementRef`.\n *\n * @example\n * With React reference\n * ```\n * const ref = useRef(null)\n * useResizeObserver(ref, (entry) => setState(getWidth(entry)))\n * ```\n *\n * @example\n * With ID reference\n * ```\n * const getElement = useCallback(() => document.getElementById(id), [id])\n * useResizeObserver(getElement, (entry) => setState(getWidth(entry)))\n * ```\n *\n * @param elementRef React reference or memoized getter for the target element\n * @param onObserve Function to fire when observation occurs\n */\nexport function useResizeObserver(elementRef, onObserve) {\n  var stableOnObserve = useStableCallback(onObserve);\n  // This effect provides a synchronous update required to prevent flakiness when initial state and first observed state are different.\n  // Can potentially conflict with React concurrent mode: https://17.reactjs.org/docs/concurrent-mode-intro.html.\n  // TODO: A possible solution would be to make consumers not render any content until the first (asynchronous) observation is available.\n  useLayoutEffect(function () {\n    var element = typeof elementRef === 'function' ? elementRef() : elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n    if (element) {\n      onObserve(convertResizeObserverEntry(new ResizeObserverEntry(element)));\n    }\n  },\n  // This effect is only needed for the first render to provide a synchronous update.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  useEffect(function () {\n    var element = typeof elementRef === 'function' ? elementRef() : elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n    if (element) {\n      var connected_1 = true;\n      var observer_1 = new ResizeObserver(function (entries) {\n        // Prevent observe notifications on already unmounted component.\n        if (connected_1) {\n          stableOnObserve(convertResizeObserverEntry(entries[0]));\n        }\n      });\n      observer_1.observe(element);\n      return function () {\n        connected_1 = false;\n        observer_1.disconnect();\n      };\n    }\n  }, [elementRef, stableOnObserve]);\n}\nfunction convertResizeObserverEntry(entry) {\n  return {\n    target: entry.target,\n    contentBoxWidth: entry.contentBoxSize[0].inlineSize,\n    contentBoxHeight: entry.contentBoxSize[0].blockSize,\n    borderBoxWidth: entry.borderBoxSize[0].inlineSize,\n    borderBoxHeight: entry.borderBoxSize[0].blockSize\n  };\n}","map":{"version":3,"names":["ResizeObserver","ResizeObserverEntry","useEffect","useLayoutEffect","useStableCallback","useResizeObserver","elementRef","onObserve","stableOnObserve","element","current","convertResizeObserverEntry","connected_1","observer_1","entries","observe","disconnect","entry","target","contentBoxWidth","contentBoxSize","inlineSize","contentBoxHeight","blockSize","borderBoxWidth","borderBoxSize","borderBoxHeight"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/component-toolkit/lib/internal/container-queries/use-resize-observer.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ResizeObserver, ResizeObserverEntry } from '@juggle/resize-observer';\nimport { useEffect, useLayoutEffect } from 'react';\nimport { useStableCallback } from '../stable-callback';\n/**\n * Attaches resize-observer to the referenced element.\n *\n * @remarks\n *\n * The hook has no control over the referenced element. It is up to the consumer to ensure\n * the element lifecycle and notify the hook by updating the `elementRef`.\n *\n * @example\n * With React reference\n * ```\n * const ref = useRef(null)\n * useResizeObserver(ref, (entry) => setState(getWidth(entry)))\n * ```\n *\n * @example\n * With ID reference\n * ```\n * const getElement = useCallback(() => document.getElementById(id), [id])\n * useResizeObserver(getElement, (entry) => setState(getWidth(entry)))\n * ```\n *\n * @param elementRef React reference or memoized getter for the target element\n * @param onObserve Function to fire when observation occurs\n */\nexport function useResizeObserver(elementRef, onObserve) {\n    var stableOnObserve = useStableCallback(onObserve);\n    // This effect provides a synchronous update required to prevent flakiness when initial state and first observed state are different.\n    // Can potentially conflict with React concurrent mode: https://17.reactjs.org/docs/concurrent-mode-intro.html.\n    // TODO: A possible solution would be to make consumers not render any content until the first (asynchronous) observation is available.\n    useLayoutEffect(function () {\n        var element = typeof elementRef === 'function' ? elementRef() : elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n        if (element) {\n            onObserve(convertResizeObserverEntry(new ResizeObserverEntry(element)));\n        }\n    }, \n    // This effect is only needed for the first render to provide a synchronous update.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n    useEffect(function () {\n        var element = typeof elementRef === 'function' ? elementRef() : elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n        if (element) {\n            var connected_1 = true;\n            var observer_1 = new ResizeObserver(function (entries) {\n                // Prevent observe notifications on already unmounted component.\n                if (connected_1) {\n                    stableOnObserve(convertResizeObserverEntry(entries[0]));\n                }\n            });\n            observer_1.observe(element);\n            return function () {\n                connected_1 = false;\n                observer_1.disconnect();\n            };\n        }\n    }, [elementRef, stableOnObserve]);\n}\nfunction convertResizeObserverEntry(entry) {\n    return {\n        target: entry.target,\n        contentBoxWidth: entry.contentBoxSize[0].inlineSize,\n        contentBoxHeight: entry.contentBoxSize[0].blockSize,\n        borderBoxWidth: entry.borderBoxSize[0].inlineSize,\n        borderBoxHeight: entry.borderBoxSize[0].blockSize\n    };\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,cAAc,EAAEC,mBAAmB,QAAQ,yBAAyB;AAC7E,SAASC,SAAS,EAAEC,eAAe,QAAQ,OAAO;AAClD,SAASC,iBAAiB,QAAQ,oBAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiB,CAACC,UAAU,EAAEC,SAAS,EAAE;EACrD,IAAIC,eAAe,GAAGJ,iBAAiB,CAACG,SAAS,CAAC;EAClD;EACA;EACA;EACAJ,eAAe,CAAC,YAAY;IACxB,IAAIM,OAAO,GAAG,OAAOH,UAAU,KAAK,UAAU,GAAGA,UAAU,EAAE,GAAGA,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACI,OAAO;IAC1I,IAAID,OAAO,EAAE;MACTF,SAAS,CAACI,0BAA0B,CAAC,IAAIV,mBAAmB,CAACQ,OAAO,CAAC,CAAC,CAAC;IAC3E;EACJ,CAAC;EACD;EACA;EACA,EAAE,CAAC;EACHP,SAAS,CAAC,YAAY;IAClB,IAAIO,OAAO,GAAG,OAAOH,UAAU,KAAK,UAAU,GAAGA,UAAU,EAAE,GAAGA,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACI,OAAO;IAC1I,IAAID,OAAO,EAAE;MACT,IAAIG,WAAW,GAAG,IAAI;MACtB,IAAIC,UAAU,GAAG,IAAIb,cAAc,CAAC,UAAUc,OAAO,EAAE;QACnD;QACA,IAAIF,WAAW,EAAE;UACbJ,eAAe,CAACG,0BAA0B,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D;MACJ,CAAC,CAAC;MACFD,UAAU,CAACE,OAAO,CAACN,OAAO,CAAC;MAC3B,OAAO,YAAY;QACfG,WAAW,GAAG,KAAK;QACnBC,UAAU,CAACG,UAAU,EAAE;MAC3B,CAAC;IACL;EACJ,CAAC,EAAE,CAACV,UAAU,EAAEE,eAAe,CAAC,CAAC;AACrC;AACA,SAASG,0BAA0B,CAACM,KAAK,EAAE;EACvC,OAAO;IACHC,MAAM,EAAED,KAAK,CAACC,MAAM;IACpBC,eAAe,EAAEF,KAAK,CAACG,cAAc,CAAC,CAAC,CAAC,CAACC,UAAU;IACnDC,gBAAgB,EAAEL,KAAK,CAACG,cAAc,CAAC,CAAC,CAAC,CAACG,SAAS;IACnDC,cAAc,EAAEP,KAAK,CAACQ,aAAa,CAAC,CAAC,CAAC,CAACJ,UAAU;IACjDK,eAAe,EAAET,KAAK,CAACQ,aAAa,CAAC,CAAC,CAAC,CAACF;EAC5C,CAAC;AACL"},"metadata":{},"sourceType":"module"}