{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useState, useRef, useEffect } from 'react';\nimport InternalBox from '../box/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { S3InContext } from './s3-in-context';\nimport { S3Modal } from './s3-modal';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nimport { useFormFieldContext } from '../contexts/form-field';\nconst S3ResourceSelector = React.forwardRef((_a, ref) => {\n  var {\n      i18nStrings,\n      inputPlaceholder,\n      alert,\n      resource,\n      viewHref,\n      invalid,\n      selectableItemsTypes = [],\n      inputAriaDescribedby,\n      bucketsVisibleColumns = ['Name', 'CreationDate'],\n      bucketsIsItemDisabled,\n      fetchBuckets,\n      fetchObjects,\n      objectsVisibleColumns = ['Key', 'LastModified', 'Size'],\n      objectsIsItemDisabled,\n      fetchVersions,\n      versionsVisibleColumns = ['ID', 'LastModified', 'Size'],\n      versionsIsItemDisabled,\n      onChange,\n      ariaLabel\n    } = _a,\n    rest = __rest(_a, [\"i18nStrings\", \"inputPlaceholder\", \"alert\", \"resource\", \"viewHref\", \"invalid\", \"selectableItemsTypes\", \"inputAriaDescribedby\", \"bucketsVisibleColumns\", \"bucketsIsItemDisabled\", \"fetchBuckets\", \"fetchObjects\", \"objectsVisibleColumns\", \"objectsIsItemDisabled\", \"fetchVersions\", \"versionsVisibleColumns\", \"versionsIsItemDisabled\", \"onChange\", \"ariaLabel\"]);\n  checkSafeUrl('S3ResourceSelector', viewHref);\n  const {\n    __internalRootRef\n  } = useBaseComponent('S3ResourceSelector');\n  const [modalOpen, setModalOpen] = useState(false);\n  const inContextRef = useRef(null);\n  const modalWasSubmitted = useRef(false);\n  useForwardFocus(ref, inContextRef);\n  const {\n    ariaLabelledby,\n    ariaDescribedby\n  } = useFormFieldContext(rest);\n  useEffect(() => {\n    var _a;\n    // Focus uriInput only when modal was submitted.\n    // When it was dismissed, the focus naturally goes to previously focused element (browse button)\n    if (!modalOpen && modalWasSubmitted.current) {\n      modalWasSubmitted.current = false;\n      (_a = inContextRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [modalOpen]);\n  const baseProps = getBaseProps(rest);\n  const modalProps = {\n    alert,\n    i18nStrings,\n    fetchBuckets,\n    selectableItemsTypes,\n    bucketsVisibleColumns,\n    bucketsIsItemDisabled,\n    fetchObjects,\n    objectsVisibleColumns,\n    objectsIsItemDisabled,\n    fetchVersions,\n    versionsVisibleColumns,\n    versionsIsItemDisabled,\n    onSubmit: resource => {\n      fireNonCancelableEvent(onChange, {\n        resource\n      });\n      setModalOpen(false);\n      modalWasSubmitted.current = true;\n    },\n    onDismiss: () => setModalOpen(false)\n  };\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: __internalRootRef,\n    role: \"group\",\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-label\": ariaLabel\n  }), React.createElement(S3InContext, {\n    ref: inContextRef,\n    selectableItemsTypes: selectableItemsTypes,\n    i18nStrings: i18nStrings,\n    inputPlaceholder: inputPlaceholder,\n    resource: resource,\n    viewHref: viewHref,\n    invalid: invalid,\n    inputAriaDescribedby: inputAriaDescribedby,\n    fetchVersions: fetchVersions,\n    onBrowse: () => setModalOpen(true),\n    onChange: (resource, errorText) => fireNonCancelableEvent(onChange, {\n      resource,\n      errorText\n    })\n  }), !modalOpen && alert && React.createElement(InternalBox, {\n    className: styles.alert,\n    margin: {\n      top: 's'\n    }\n  }, alert), modalOpen && React.createElement(S3Modal, Object.assign({}, modalProps)));\n});\napplyDisplayName(S3ResourceSelector, 'S3ResourceSelector');\nexport default S3ResourceSelector;","map":{"version":3,"mappings":"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","names":["clsx","React","useState","useRef","useEffect","InternalBox","getBaseProps","fireNonCancelableEvent","useForwardFocus","applyDisplayName","S3InContext","S3Modal","styles","useBaseComponent","checkSafeUrl","useFormFieldContext","S3ResourceSelector","forwardRef","_a","ref","i18nStrings","inputPlaceholder","alert","resource","viewHref","invalid","selectableItemsTypes","inputAriaDescribedby","bucketsVisibleColumns","bucketsIsItemDisabled","fetchBuckets","fetchObjects","objectsVisibleColumns","objectsIsItemDisabled","fetchVersions","versionsVisibleColumns","versionsIsItemDisabled","onChange","ariaLabel","rest","__internalRootRef","modalOpen","setModalOpen","inContextRef","modalWasSubmitted","ariaLabelledby","ariaDescribedby","current","focus","baseProps","modalProps","onSubmit","onDismiss","className","root","role","onBrowse","errorText","margin","top"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/s3-resource-selector/lib/default/s3-resource-selector/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useState, useRef, useEffect } from 'react';\nimport InternalBox from '../box/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { S3InContext, S3InContextRef } from './s3-in-context';\nimport { S3ResourceSelectorProps } from './interfaces';\nimport { S3Modal, S3ModalProps } from './s3-modal';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nimport { useFormFieldContext } from '../contexts/form-field';\n\nexport { S3ResourceSelectorProps };\n\nconst S3ResourceSelector = React.forwardRef(\n  (\n    {\n      i18nStrings,\n      inputPlaceholder,\n      alert,\n      resource,\n      viewHref,\n      invalid,\n      selectableItemsTypes = [],\n      inputAriaDescribedby,\n      bucketsVisibleColumns = ['Name', 'CreationDate'],\n      bucketsIsItemDisabled,\n      fetchBuckets,\n      fetchObjects,\n      objectsVisibleColumns = ['Key', 'LastModified', 'Size'],\n      objectsIsItemDisabled,\n      fetchVersions,\n      versionsVisibleColumns = ['ID', 'LastModified', 'Size'],\n      versionsIsItemDisabled,\n      onChange,\n      ariaLabel,\n      ...rest\n    }: S3ResourceSelectorProps,\n    ref: React.Ref<S3ResourceSelectorProps.Ref>\n  ) => {\n    checkSafeUrl('S3ResourceSelector', viewHref);\n    const { __internalRootRef } = useBaseComponent('S3ResourceSelector');\n    const [modalOpen, setModalOpen] = useState(false);\n    const inContextRef = useRef<S3InContextRef>(null);\n    const modalWasSubmitted = useRef<boolean>(false);\n    useForwardFocus(ref, inContextRef);\n    const { ariaLabelledby, ariaDescribedby } = useFormFieldContext(rest);\n\n    useEffect(() => {\n      // Focus uriInput only when modal was submitted.\n      // When it was dismissed, the focus naturally goes to previously focused element (browse button)\n      if (!modalOpen && modalWasSubmitted.current) {\n        modalWasSubmitted.current = false;\n        inContextRef.current?.focus();\n      }\n    }, [modalOpen]);\n\n    const baseProps = getBaseProps(rest);\n    const modalProps: S3ModalProps = {\n      alert,\n      i18nStrings,\n      fetchBuckets,\n      selectableItemsTypes,\n      bucketsVisibleColumns,\n      bucketsIsItemDisabled,\n      fetchObjects,\n      objectsVisibleColumns,\n      objectsIsItemDisabled,\n      fetchVersions,\n      versionsVisibleColumns,\n      versionsIsItemDisabled,\n      onSubmit: resource => {\n        fireNonCancelableEvent(onChange, { resource });\n        setModalOpen(false);\n        modalWasSubmitted.current = true;\n      },\n      onDismiss: () => setModalOpen(false),\n    };\n    return (\n      <div\n        {...baseProps}\n        className={clsx(styles.root, baseProps.className)}\n        ref={__internalRootRef}\n        role=\"group\"\n        aria-labelledby={ariaLabelledby}\n        aria-describedby={ariaDescribedby}\n        aria-label={ariaLabel}\n      >\n        <S3InContext\n          ref={inContextRef}\n          selectableItemsTypes={selectableItemsTypes}\n          i18nStrings={i18nStrings}\n          inputPlaceholder={inputPlaceholder}\n          resource={resource}\n          viewHref={viewHref}\n          invalid={invalid}\n          inputAriaDescribedby={inputAriaDescribedby}\n          fetchVersions={fetchVersions}\n          onBrowse={() => setModalOpen(true)}\n          onChange={(resource, errorText) => fireNonCancelableEvent(onChange, { resource, errorText })}\n        />\n        {!modalOpen && alert && (\n          <InternalBox className={styles.alert} margin={{ top: 's' }}>\n            {alert}\n          </InternalBox>\n        )}\n        {modalOpen && <S3Modal {...modalProps} />}\n      </div>\n    );\n  }\n);\n\napplyDisplayName(S3ResourceSelector, 'S3ResourceSelector');\nexport default S3ResourceSelector;\n"]},"metadata":{},"sourceType":"module"}