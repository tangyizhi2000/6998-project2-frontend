{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport { MobileTriggers as DrawersMobileTriggers } from './drawers';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nexport default function MobileToolbar() {\n  var _a, _b, _c;\n  const {\n    ariaLabels,\n    breadcrumbs,\n    drawers,\n    handleNavigationClick,\n    handleToolsClick,\n    hasDrawerViewportOverlay,\n    isMobile,\n    isNavigationOpen,\n    isToolsOpen,\n    navigationHide,\n    navigationRefs,\n    toolsHide,\n    toolsRefs\n  } = useAppLayoutInternals();\n  if (!isMobile || navigationHide && !breadcrumbs && toolsHide && (!drawers || drawers.length === 0)) {\n    return null;\n  }\n  return React.createElement(\"section\", {\n    className: clsx(styles['mobile-toolbar'], [testutilStyles['mobile-bar']], {\n      [styles['has-breadcrumbs']]: breadcrumbs,\n      [styles.unfocusable]: hasDrawerViewportOverlay\n    }, testutilStyles['mobile-bar'], 'awsui-context-content-header')\n  }, !navigationHide && React.createElement(\"nav\", {\n    \"aria-hidden\": isNavigationOpen,\n    className: clsx(styles['mobile-toolbar-nav'], {\n      [testutilStyles['drawer-closed']]: !isNavigationOpen\n    })\n  }, React.createElement(InternalButton, {\n    ariaLabel: (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _a !== void 0 ? _a : undefined,\n    ariaExpanded: isNavigationOpen ? undefined : false,\n    iconName: \"menu\",\n    formAction: \"none\",\n    onClick: () => handleNavigationClick(true),\n    variant: \"icon\",\n    className: testutilStyles['navigation-toggle'],\n    ref: navigationRefs.toggle,\n    disabled: hasDrawerViewportOverlay,\n    __nativeAttributes: {\n      'aria-haspopup': isNavigationOpen ? undefined : true\n    }\n  })), breadcrumbs && React.createElement(\"div\", {\n    className: clsx(styles['mobile-toolbar-breadcrumbs'], testutilStyles.breadcrumbs)\n  }, breadcrumbs), drawers ? React.createElement(DrawersMobileTriggers, null) : !toolsHide && React.createElement(\"aside\", {\n    \"aria-hidden\": isToolsOpen,\n    \"aria-label\": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _b !== void 0 ? _b : undefined,\n    className: clsx(styles['mobile-toolbar-tools'], {\n      [testutilStyles['drawer-closed']]: !isToolsOpen\n    })\n  }, React.createElement(InternalButton, {\n    className: testutilStyles['tools-toggle'],\n    ariaExpanded: isToolsOpen,\n    disabled: hasDrawerViewportOverlay,\n    ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _c !== void 0 ? _c : undefined,\n    iconName: \"status-info\",\n    formAction: \"none\",\n    onClick: () => handleToolsClick(true),\n    variant: \"icon\",\n    ref: toolsRefs.toggle,\n    __nativeAttributes: {\n      'aria-haspopup': true\n    }\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","clsx","InternalButton","MobileTriggers","DrawersMobileTriggers","useAppLayoutInternals","styles","testutilStyles","MobileToolbar","ariaLabels","breadcrumbs","drawers","handleNavigationClick","handleToolsClick","hasDrawerViewportOverlay","isMobile","isNavigationOpen","isToolsOpen","navigationHide","navigationRefs","toolsHide","toolsRefs","length","className","unfocusable","ariaLabel","navigationToggle","undefined","ariaExpanded","iconName","formAction","onClick","variant","ref","toggle","disabled","__nativeAttributes","tools","toolsToggle"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh/lib/default/app-layout/visual-refresh/mobile-toolbar.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport { MobileTriggers as DrawersMobileTriggers } from './drawers';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\n\nexport default function MobileToolbar() {\n  const {\n    ariaLabels,\n    breadcrumbs,\n    drawers,\n    handleNavigationClick,\n    handleToolsClick,\n    hasDrawerViewportOverlay,\n    isMobile,\n    isNavigationOpen,\n    isToolsOpen,\n    navigationHide,\n    navigationRefs,\n    toolsHide,\n    toolsRefs,\n  } = useAppLayoutInternals();\n\n  if (!isMobile || (navigationHide && !breadcrumbs && toolsHide && (!drawers || drawers.length === 0))) {\n    return null;\n  }\n\n  return (\n    <section\n      className={clsx(\n        styles['mobile-toolbar'],\n        [testutilStyles['mobile-bar']],\n        {\n          [styles['has-breadcrumbs']]: breadcrumbs,\n          [styles.unfocusable]: hasDrawerViewportOverlay,\n        },\n        testutilStyles['mobile-bar'],\n        'awsui-context-content-header'\n      )}\n    >\n      {!navigationHide && (\n        <nav\n          aria-hidden={isNavigationOpen}\n          className={clsx(styles['mobile-toolbar-nav'], { [testutilStyles['drawer-closed']]: !isNavigationOpen })}\n        >\n          <InternalButton\n            ariaLabel={ariaLabels?.navigationToggle ?? undefined}\n            ariaExpanded={isNavigationOpen ? undefined : false}\n            iconName=\"menu\"\n            formAction=\"none\"\n            onClick={() => handleNavigationClick(true)}\n            variant=\"icon\"\n            className={testutilStyles['navigation-toggle']}\n            ref={navigationRefs.toggle}\n            disabled={hasDrawerViewportOverlay}\n            __nativeAttributes={{ 'aria-haspopup': isNavigationOpen ? undefined : true }}\n          />\n        </nav>\n      )}\n\n      {breadcrumbs && (\n        <div className={clsx(styles['mobile-toolbar-breadcrumbs'], testutilStyles.breadcrumbs)}>{breadcrumbs}</div>\n      )}\n\n      {drawers ? (\n        <DrawersMobileTriggers />\n      ) : (\n        !toolsHide && (\n          <aside\n            aria-hidden={isToolsOpen}\n            aria-label={ariaLabels?.tools ?? undefined}\n            className={clsx(styles['mobile-toolbar-tools'], { [testutilStyles['drawer-closed']]: !isToolsOpen })}\n          >\n            <InternalButton\n              className={testutilStyles['tools-toggle']}\n              ariaExpanded={isToolsOpen}\n              disabled={hasDrawerViewportOverlay}\n              ariaLabel={ariaLabels?.toolsToggle ?? undefined}\n              iconName=\"status-info\"\n              formAction=\"none\"\n              onClick={() => handleToolsClick(true)}\n              variant=\"icon\"\n              ref={toolsRefs.toggle}\n              __nativeAttributes={{ 'aria-haspopup': true }}\n            />\n          </aside>\n        )\n      )}\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}