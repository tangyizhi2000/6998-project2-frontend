{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\nimport { SplitPanelProvider } from '../split-panel';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * If there is no Split Panel in the AppLayout context then the SplitPanel\n * will pass through the AppLayout children without the context.\n */\nfunction SplitPanel(_ref) {\n  var children = _ref.children;\n  var _useAppLayoutInternal = useAppLayoutInternals(),\n    footerHeight = _useAppLayoutInternal.footerHeight,\n    handleSplitPanelClick = _useAppLayoutInternal.handleSplitPanelClick,\n    handleSplitPanelPreferencesChange = _useAppLayoutInternal.handleSplitPanelPreferencesChange,\n    handleSplitPanelResize = _useAppLayoutInternal.handleSplitPanelResize,\n    headerHeight = _useAppLayoutInternal.headerHeight,\n    isSplitPanelForcedPosition = _useAppLayoutInternal.isSplitPanelForcedPosition,\n    isSplitPanelOpen = _useAppLayoutInternal.isSplitPanelOpen,\n    setSplitPanelReportedSize = _useAppLayoutInternal.setSplitPanelReportedSize,\n    setSplitPanelReportedHeaderHeight = _useAppLayoutInternal.setSplitPanelReportedHeaderHeight,\n    setSplitPanelToggle = _useAppLayoutInternal.setSplitPanelToggle,\n    splitPanelPosition = _useAppLayoutInternal.splitPanelPosition,\n    splitPanelRefs = _useAppLayoutInternal.splitPanelRefs,\n    splitPanelSize = _useAppLayoutInternal.splitPanelSize;\n  var props = {\n    bottomOffset: 0,\n    getMaxHeight: function getMaxHeight() {\n      var availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    getMaxWidth: function getMaxWidth() {\n      return document.documentElement.clientWidth;\n    },\n    isForcedPosition: isSplitPanelForcedPosition,\n    isOpen: isSplitPanelOpen,\n    leftOffset: 0,\n    onPreferencesChange: handleSplitPanelPreferencesChange,\n    onResize: handleSplitPanelResize,\n    onToggle: handleSplitPanelClick,\n    position: splitPanelPosition,\n    reportSize: setSplitPanelReportedSize,\n    reportHeaderHeight: setSplitPanelReportedHeaderHeight,\n    rightOffset: 0,\n    size: splitPanelSize || 0,\n    topOffset: 0,\n    setSplitPanelToggle: setSplitPanelToggle,\n    refs: splitPanelRefs\n  };\n  return React.createElement(SplitPanelProvider, Object.assign({}, props), children);\n}\n/**\n * This is the render function for the SplitPanel when it is in bottom position.\n * The Split Panel container will be another row entry in the grid definition in\n * the Layout component. The start and finish columns will be variable based\n * on the presence and state of the Navigation and Tools components.\n */\nfunction SplitPanelBottom() {\n  var _useAppLayoutInternal2 = useAppLayoutInternals(),\n    disableBodyScroll = _useAppLayoutInternal2.disableBodyScroll,\n    hasOpenDrawer = _useAppLayoutInternal2.hasOpenDrawer,\n    isNavigationOpen = _useAppLayoutInternal2.isNavigationOpen,\n    isSplitPanelOpen = _useAppLayoutInternal2.isSplitPanelOpen,\n    splitPanel = _useAppLayoutInternal2.splitPanel,\n    splitPanelPosition = _useAppLayoutInternal2.splitPanelPosition,\n    splitPanelReportedSize = _useAppLayoutInternal2.splitPanelReportedSize,\n    splitPanelReportedHeaderHeight = _useAppLayoutInternal2.splitPanelReportedHeaderHeight;\n  if (!splitPanel) {\n    return null;\n  }\n  return React.createElement(Transition, {\n    in: isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false,\n    exit: false\n  }, function (state, transitionEventsRef) {\n    var _clsx, _style;\n    return React.createElement(\"section\", {\n      className: clsx(styles['split-panel-bottom'], styles[\"position-\".concat(splitPanelPosition)], (_clsx = {}, _defineProperty(_clsx, styles.animating, state === 'entering'), _defineProperty(_clsx, styles['disable-body-scroll'], disableBodyScroll), _defineProperty(_clsx, styles['has-open-drawer'], hasOpenDrawer), _defineProperty(_clsx, styles['is-navigation-open'], isNavigationOpen), _defineProperty(_clsx, styles['is-split-panel-open'], isSplitPanelOpen), _clsx)),\n      ref: transitionEventsRef,\n      style: (_style = {}, _defineProperty(_style, customCssProps.splitPanelReportedSize, \"\".concat(splitPanelReportedSize, \"px\")), _defineProperty(_style, customCssProps.splitPanelReportedHeaderSize, \"\".concat(splitPanelReportedHeaderHeight, \"px\")), _style)\n    }, React.createElement(SplitPanel, null), splitPanelPosition === 'bottom' && splitPanel);\n  });\n}\n/**\n * This is the render function for the SplitPanel when it is side position.\n * The Split Panel will not be within the grid defined in the Layout component\n * but instead a direct child of the Tools component. The width constraints\n * for this position are computed in the Tools component.\n */\n/**\n * This component has no opening animations because it causes lots of rerenders that makes the component lag. *\n */\nfunction SplitPanelSide() {\n  var _style2;\n  var _useAppLayoutInternal3 = useAppLayoutInternals(),\n    isSplitPanelOpen = _useAppLayoutInternal3.isSplitPanelOpen,\n    splitPanel = _useAppLayoutInternal3.splitPanel,\n    splitPanelPosition = _useAppLayoutInternal3.splitPanelPosition,\n    splitPanelMaxWidth = _useAppLayoutInternal3.splitPanelMaxWidth,\n    splitPanelMinWidth = _useAppLayoutInternal3.splitPanelMinWidth,\n    splitPanelControlId = _useAppLayoutInternal3.splitPanelControlId;\n  if (!splitPanel) {\n    return null;\n  }\n  return React.createElement(\"section\", {\n    id: splitPanelControlId,\n    \"aria-hidden\": !isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false,\n    className: clsx(styles['split-panel-side'], styles[\"position-\".concat(splitPanelPosition)], _defineProperty({}, styles['is-split-panel-open'], isSplitPanelOpen)),\n    style: (_style2 = {}, _defineProperty(_style2, customCssProps.splitPanelMaxWidth, \"\".concat(splitPanelMaxWidth, \"px\")), _defineProperty(_style2, customCssProps.splitPanelMinWidth, \"\".concat(splitPanelMinWidth, \"px\")), _style2)\n  }, splitPanelPosition === 'side' && splitPanel);\n}\n/**\n * This logic will determine what the Split Panel position should be. It reconciles the possibility\n * of being in forced position with the current selected position in the settings.\n */\nexport function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {\n  var splitPanelPosition = 'bottom';\n  if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === 'side') {\n    splitPanelPosition = 'side';\n  }\n  return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\nexport default SplitPanel;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,qBAAqB,QAAQ,WAAW;AACjD,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,kBAAkB,QAAiC,gBAAgB;AAE5E,SAASC,UAAU,QAAQ,sCAAsC;AACjE,OAAOC,cAAc,MAAM,gDAAgD;AAE3E;;;;AAIA,SAASC,UAAU,OAA+C;EAAA,IAA5CC,QAAQ,QAARA,QAAQ;EAC5B,4BAcIN,qBAAqB,EAAE;IAbzBO,YAAY,yBAAZA,YAAY;IACZC,qBAAqB,yBAArBA,qBAAqB;IACrBC,iCAAiC,yBAAjCA,iCAAiC;IACjCC,sBAAsB,yBAAtBA,sBAAsB;IACtBC,YAAY,yBAAZA,YAAY;IACZC,0BAA0B,yBAA1BA,0BAA0B;IAC1BC,gBAAgB,yBAAhBA,gBAAgB;IAChBC,yBAAyB,yBAAzBA,yBAAyB;IACzBC,iCAAiC,yBAAjCA,iCAAiC;IACjCC,mBAAmB,yBAAnBA,mBAAmB;IACnBC,kBAAkB,yBAAlBA,kBAAkB;IAClBC,cAAc,yBAAdA,cAAc;IACdC,cAAc,yBAAdA,cAAc;EAGhB,IAAMC,KAAK,GAA4B;IACrCC,YAAY,EAAE,CAAC;IACfC,YAAY,EAAE,wBAAK;MACjB,IAAMC,eAAe,GAAGC,QAAQ,CAACC,eAAe,CAACC,YAAY,GAAGf,YAAY,GAAGJ,YAAY;MAC3F;MACA,OAAOgB,eAAe,GAAG,GAAG,GAAGA,eAAe,GAAG,EAAE,GAAGA,eAAe,GAAG,GAAG;IAC7E,CAAC;IACDI,WAAW,EAAE;MAAA,OAAMH,QAAQ,CAACC,eAAe,CAACG,WAAW;IAAA;IACvDC,gBAAgB,EAAEjB,0BAA0B;IAC5CkB,MAAM,EAAEjB,gBAAgB;IACxBkB,UAAU,EAAE,CAAC;IACbC,mBAAmB,EAAEvB,iCAAiC;IACtDwB,QAAQ,EAAEvB,sBAAsB;IAChCwB,QAAQ,EAAE1B,qBAAqB;IAC/B2B,QAAQ,EAAElB,kBAAkB;IAC5BmB,UAAU,EAAEtB,yBAAyB;IACrCuB,kBAAkB,EAAEtB,iCAAiC;IACrDuB,WAAW,EAAE,CAAC;IACdC,IAAI,EAAEpB,cAAc,IAAI,CAAC;IACzBqB,SAAS,EAAE,CAAC;IACZxB,mBAAmB,EAAnBA,mBAAmB;IACnByB,IAAI,EAAEvB;GACP;EAED,OAAOpB,oBAACI,kBAAkB,oBAAKkB,KAAK,GAAGd,QAAQ,CAAsB;AACvE;AAEA;;;;;;AAMA,SAASoC,gBAAgB;EACvB,6BASI1C,qBAAqB,EAAE;IARzB2C,iBAAiB,0BAAjBA,iBAAiB;IACjBC,aAAa,0BAAbA,aAAa;IACbC,gBAAgB,0BAAhBA,gBAAgB;IAChBhC,gBAAgB,0BAAhBA,gBAAgB;IAChBiC,UAAU,0BAAVA,UAAU;IACV7B,kBAAkB,0BAAlBA,kBAAkB;IAClB8B,sBAAsB,0BAAtBA,sBAAsB;IACtBC,8BAA8B,0BAA9BA,8BAA8B;EAGhC,IAAI,CAACF,UAAU,EAAE;IACf,OAAO,IAAI;;EAGb,OACEhD,oBAACK,UAAU;IAAC8C,EAAE,EAAEpC,gBAAgB,aAAhBA,gBAAgB,cAAhBA,gBAAgB,GAAI,KAAK;IAAEqC,IAAI,EAAE;EAAK,GACnD,UAACC,KAAK,EAAEC,mBAAmB;IAAA;IAAA,OAC1BtD;MACEuD,SAAS,EAAEtD,IAAI,CAACE,MAAM,CAAC,oBAAoB,CAAC,EAAEA,MAAM,oBAAagB,kBAAkB,EAAG,sCACnFhB,MAAM,CAACqD,SAAS,EAAGH,KAAK,KAAK,UAAU,0BACvClD,MAAM,CAAC,qBAAqB,CAAC,EAAG0C,iBAAiB,0BACjD1C,MAAM,CAAC,iBAAiB,CAAC,EAAG2C,aAAa,0BACzC3C,MAAM,CAAC,oBAAoB,CAAC,EAAG4C,gBAAgB,0BAC/C5C,MAAM,CAAC,qBAAqB,CAAC,EAAGY,gBAAgB,UACjD;MACF0C,GAAG,EAAEH,mBAAmB;MACxBI,KAAK,wCACFpD,cAAc,CAAC2C,sBAAsB,YAAMA,sBAAsB,kCACjE3C,cAAc,CAACqD,4BAA4B,YAAMT,8BAA8B;IACjF,GAEDlD,oBAACO,UAAU,OAAc,EACxBY,kBAAkB,KAAK,QAAQ,IAAI6B,UAAU,CACtC;EAAA,CACX,CACU;AAEjB;AAEA;;;;;;AAOA;;;AAIA,SAASY,cAAc;EAAA;EACrB,6BAOI1D,qBAAqB,EAAE;IANzBa,gBAAgB,0BAAhBA,gBAAgB;IAChBiC,UAAU,0BAAVA,UAAU;IACV7B,kBAAkB,0BAAlBA,kBAAkB;IAClB0C,kBAAkB,0BAAlBA,kBAAkB;IAClBC,kBAAkB,0BAAlBA,kBAAkB;IAClBC,mBAAmB,0BAAnBA,mBAAmB;EAGrB,IAAI,CAACf,UAAU,EAAE;IACf,OAAO,IAAI;;EAGb,OACEhD;IACEgE,EAAE,EAAED,mBAAmB;IAAA,eACV,CAAChD,gBAAgB,IAAII,kBAAkB,KAAK,QAAQ,GAAG,IAAI,GAAG,KAAK;IAChFoC,SAAS,EAAEtD,IAAI,CAACE,MAAM,CAAC,kBAAkB,CAAC,EAAEA,MAAM,oBAAagB,kBAAkB,EAAG,sBACjFhB,MAAM,CAAC,qBAAqB,CAAC,EAAGY,gBAAgB,EACjD;IACF2C,KAAK,0CACFpD,cAAc,CAACuD,kBAAkB,YAAMA,kBAAkB,mCACzDvD,cAAc,CAACwD,kBAAkB,YAAMA,kBAAkB;EAC3D,GAEA3C,kBAAkB,KAAK,MAAM,IAAI6B,UAAU,CACpC;AAEd;AAEA;;;;AAIA,OAAM,SAAUiB,qBAAqB,CACnCnD,0BAAmC,EACnCoD,qBAAuE;EAEvE,IAAI/C,kBAAkB,GAAsC,QAAQ;EAEpE,IAAI,CAACL,0BAA0B,IAAI,sBAAqB,aAArBoD,qBAAqB,uBAArBA,qBAAqB,CAAE7B,QAAQ,MAAK,MAAM,EAAE;IAC7ElB,kBAAkB,GAAG,MAAM;;EAG7B,OAAOA,kBAAkB;AAC3B;AACAZ,UAAU,CAAC4D,MAAM,GAAGvB,gBAAgB;AACpCrC,UAAU,CAAC6D,IAAI,GAAGR,cAAc;AAEhC,eAAerD,UAAU","names":["React","clsx","useAppLayoutInternals","styles","SplitPanelProvider","Transition","customCssProps","SplitPanel","children","footerHeight","handleSplitPanelClick","handleSplitPanelPreferencesChange","handleSplitPanelResize","headerHeight","isSplitPanelForcedPosition","isSplitPanelOpen","setSplitPanelReportedSize","setSplitPanelReportedHeaderHeight","setSplitPanelToggle","splitPanelPosition","splitPanelRefs","splitPanelSize","props","bottomOffset","getMaxHeight","availableHeight","document","documentElement","clientHeight","getMaxWidth","clientWidth","isForcedPosition","isOpen","leftOffset","onPreferencesChange","onResize","onToggle","position","reportSize","reportHeaderHeight","rightOffset","size","topOffset","refs","SplitPanelBottom","disableBodyScroll","hasOpenDrawer","isNavigationOpen","splitPanel","splitPanelReportedSize","splitPanelReportedHeaderHeight","in","exit","state","transitionEventsRef","className","animating","ref","style","splitPanelReportedHeaderSize","SplitPanelSide","splitPanelMaxWidth","splitPanelMinWidth","splitPanelControlId","id","getSplitPanelPosition","splitPanelPreferences","Bottom","Side"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh/lib/default/app-layout/visual-refresh/split-panel.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\nimport { SplitPanelProvider, SplitPanelProviderProps } from '../split-panel';\nimport { AppLayoutProps } from '../interfaces';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\n/**\n * If there is no Split Panel in the AppLayout context then the SplitPanel\n * will pass through the AppLayout children without the context.\n */\nfunction SplitPanel({ children }: React.PropsWithChildren<unknown>) {\n  const {\n    footerHeight,\n    handleSplitPanelClick,\n    handleSplitPanelPreferencesChange,\n    handleSplitPanelResize,\n    headerHeight,\n    isSplitPanelForcedPosition,\n    isSplitPanelOpen,\n    setSplitPanelReportedSize,\n    setSplitPanelReportedHeaderHeight,\n    setSplitPanelToggle,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelSize,\n  } = useAppLayoutInternals();\n\n  const props: SplitPanelProviderProps = {\n    bottomOffset: 0,\n    getMaxHeight: () => {\n      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    getMaxWidth: () => document.documentElement.clientWidth,\n    isForcedPosition: isSplitPanelForcedPosition,\n    isOpen: isSplitPanelOpen,\n    leftOffset: 0,\n    onPreferencesChange: handleSplitPanelPreferencesChange,\n    onResize: handleSplitPanelResize,\n    onToggle: handleSplitPanelClick,\n    position: splitPanelPosition,\n    reportSize: setSplitPanelReportedSize,\n    reportHeaderHeight: setSplitPanelReportedHeaderHeight,\n    rightOffset: 0,\n    size: splitPanelSize || 0,\n    topOffset: 0,\n    setSplitPanelToggle,\n    refs: splitPanelRefs,\n  };\n\n  return <SplitPanelProvider {...props}>{children}</SplitPanelProvider>;\n}\n\n/**\n * This is the render function for the SplitPanel when it is in bottom position.\n * The Split Panel container will be another row entry in the grid definition in\n * the Layout component. The start and finish columns will be variable based\n * on the presence and state of the Navigation and Tools components.\n */\nfunction SplitPanelBottom() {\n  const {\n    disableBodyScroll,\n    hasOpenDrawer,\n    isNavigationOpen,\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelPosition,\n    splitPanelReportedSize,\n    splitPanelReportedHeaderHeight,\n  } = useAppLayoutInternals();\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return (\n    <Transition in={isSplitPanelOpen ?? false} exit={false}>\n      {(state, transitionEventsRef) => (\n        <section\n          className={clsx(styles['split-panel-bottom'], styles[`position-${splitPanelPosition}`], {\n            [styles.animating]: state === 'entering',\n            [styles['disable-body-scroll']]: disableBodyScroll,\n            [styles['has-open-drawer']]: hasOpenDrawer,\n            [styles['is-navigation-open']]: isNavigationOpen,\n            [styles['is-split-panel-open']]: isSplitPanelOpen,\n          })}\n          ref={transitionEventsRef}\n          style={{\n            [customCssProps.splitPanelReportedSize]: `${splitPanelReportedSize}px`,\n            [customCssProps.splitPanelReportedHeaderSize]: `${splitPanelReportedHeaderHeight}px`,\n          }}\n        >\n          <SplitPanel></SplitPanel>\n          {splitPanelPosition === 'bottom' && splitPanel}\n        </section>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * This is the render function for the SplitPanel when it is side position.\n * The Split Panel will not be within the grid defined in the Layout component\n * but instead a direct child of the Tools component. The width constraints\n * for this position are computed in the Tools component.\n */\n\n/**\n * This component has no opening animations because it causes lots of rerenders that makes the component lag. *\n */\n\nfunction SplitPanelSide() {\n  const {\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelPosition,\n    splitPanelMaxWidth,\n    splitPanelMinWidth,\n    splitPanelControlId,\n  } = useAppLayoutInternals();\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return (\n    <section\n      id={splitPanelControlId}\n      aria-hidden={!isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false}\n      className={clsx(styles['split-panel-side'], styles[`position-${splitPanelPosition}`], {\n        [styles['is-split-panel-open']]: isSplitPanelOpen,\n      })}\n      style={{\n        [customCssProps.splitPanelMaxWidth]: `${splitPanelMaxWidth}px`,\n        [customCssProps.splitPanelMinWidth]: `${splitPanelMinWidth}px`,\n      }}\n    >\n      {splitPanelPosition === 'side' && splitPanel}\n    </section>\n  );\n}\n\n/**\n * This logic will determine what the Split Panel position should be. It reconciles the possibility\n * of being in forced position with the current selected position in the settings.\n */\nexport function getSplitPanelPosition(\n  isSplitPanelForcedPosition: boolean,\n  splitPanelPreferences: AppLayoutProps.SplitPanelPreferences | undefined\n) {\n  let splitPanelPosition: AppLayoutProps.SplitPanelPosition = 'bottom';\n\n  if (!isSplitPanelForcedPosition && splitPanelPreferences?.position === 'side') {\n    splitPanelPosition = 'side';\n  }\n\n  return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\n\nexport default SplitPanel;\n"]},"metadata":{},"sourceType":"module"}