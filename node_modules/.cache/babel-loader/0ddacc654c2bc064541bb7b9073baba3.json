{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __rest } from \"tslib\";\nimport { useMemo, useState } from 'react';\nimport { filterOptions } from './utils/utils';\nimport { generateTestIndexes } from '../internal/components/options-list/utils/test-indexes';\nimport { useHighlightedOption } from '../internal/components/options-list/utils/use-highlight-option';\nconst isHighlightable = option => {\n  return !!option && option.type !== 'parent';\n};\nconst isInteractive = option => !!option && !option.disabled && option.type !== 'parent';\nexport const useAutosuggestItems = _ref => {\n  let {\n    options,\n    filterValue,\n    filterText,\n    filteringType,\n    hideEnteredTextLabel,\n    onSelectItem\n  } = _ref;\n  const [showAll, setShowAll] = useState(false);\n  const {\n    items,\n    getItemGroup\n  } = useMemo(() => createItems(options), [options]);\n  const filteredItems = useMemo(() => {\n    const filteredItems = filteringType === 'auto' && !showAll ? filterOptions(items, filterText) : [...items];\n    if (filterValue && !hideEnteredTextLabel) {\n      filteredItems.unshift({\n        value: filterValue,\n        type: 'use-entered',\n        option: {\n          value: filterValue\n        }\n      });\n    }\n    generateTestIndexes(filteredItems, getItemGroup);\n    return filteredItems;\n  }, [items, getItemGroup, filterValue, filterText, filteringType, showAll, hideEnteredTextLabel]);\n  const [highlightedOptionState, highlightedOptionHandlers] = useHighlightedOption({\n    options: filteredItems,\n    isHighlightable\n  });\n  const selectHighlightedOptionWithKeyboard = () => {\n    if (highlightedOptionState.highlightedOption && isInteractive(highlightedOptionState.highlightedOption)) {\n      onSelectItem(highlightedOptionState.highlightedOption);\n      return true;\n    }\n    return false;\n  };\n  const highlightVisibleOptionWithMouse = index => {\n    if (filteredItems[index] && isHighlightable(filteredItems[index])) {\n      highlightedOptionHandlers.setHighlightedIndexWithMouse(index);\n    }\n  };\n  const selectVisibleOptionWithMouse = index => {\n    if (filteredItems[index] && isInteractive(filteredItems[index])) {\n      onSelectItem(filteredItems[index]);\n    }\n  };\n  return [Object.assign(Object.assign({}, highlightedOptionState), {\n    items: filteredItems,\n    showAll,\n    getItemGroup\n  }), Object.assign(Object.assign({}, highlightedOptionHandlers), {\n    setShowAll,\n    selectHighlightedOptionWithKeyboard,\n    highlightVisibleOptionWithMouse,\n    selectVisibleOptionWithMouse\n  })];\n};\nfunction createItems(options) {\n  const items = [];\n  const itemToGroup = new WeakMap();\n  const getItemGroup = item => itemToGroup.get(item);\n  for (const option of options) {\n    if (isGroup(option)) {\n      for (const item of flattenGroup(option)) {\n        items.push(item);\n      }\n    } else {\n      items.push(Object.assign(Object.assign({}, option), {\n        option\n      }));\n    }\n  }\n  function flattenGroup(group) {\n    const {\n        options\n      } = group,\n      rest = __rest(group, [\"options\"]);\n    let hasOnlyDisabledChildren = true;\n    const items = [Object.assign(Object.assign({}, rest), {\n      type: 'parent',\n      option: group\n    })];\n    for (const option of options) {\n      if (!option.disabled) {\n        hasOnlyDisabledChildren = false;\n      }\n      const childOption = Object.assign(Object.assign({}, option), {\n        type: 'child',\n        disabled: option.disabled || rest.disabled,\n        option\n      });\n      items.push(childOption);\n      itemToGroup.set(childOption, group);\n    }\n    items[0].disabled = items[0].disabled || hasOnlyDisabledChildren;\n    return items;\n  }\n  return {\n    items,\n    getItemGroup\n  };\n}\nfunction isGroup(optionOrGroup) {\n  return 'options' in optionOrGroup;\n}","map":{"version":3,"mappings":"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","names":["useMemo","useState","filterOptions","generateTestIndexes","useHighlightedOption","isHighlightable","option","type","isInteractive","disabled","useAutosuggestItems","options","filterValue","filterText","filteringType","hideEnteredTextLabel","onSelectItem","showAll","setShowAll","items","getItemGroup","createItems","filteredItems","unshift","value","highlightedOptionState","highlightedOptionHandlers","selectHighlightedOptionWithKeyboard","highlightedOption","highlightVisibleOptionWithMouse","index","setHighlightedIndexWithMouse","selectVisibleOptionWithMouse","itemToGroup","WeakMap","item","get","isGroup","flattenGroup","push","group","rest","hasOnlyDisabledChildren","childOption","set","optionOrGroup"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/autosuggest/lib/default/autosuggest/options-controller.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useMemo, useState } from 'react';\nimport { filterOptions } from './utils/utils';\nimport { generateTestIndexes } from '../internal/components/options-list/utils/test-indexes';\nimport { AutosuggestItem, AutosuggestProps } from './interfaces';\nimport {\n  HighlightedOptionHandlers,\n  HighlightedOptionState,\n  useHighlightedOption,\n} from '../internal/components/options-list/utils/use-highlight-option';\n\ntype Options = AutosuggestProps.Options;\n\nexport interface UseAutosuggestItemsProps {\n  options: Options;\n  filterValue: string;\n  filterText: string;\n  filteringType: AutosuggestProps.FilteringType;\n  hideEnteredTextLabel?: boolean;\n  onSelectItem: (option: AutosuggestItem) => void;\n}\n\nexport interface AutosuggestItemsState extends HighlightedOptionState<AutosuggestItem> {\n  items: readonly AutosuggestItem[];\n  showAll: boolean;\n  getItemGroup: (item: AutosuggestItem) => undefined | AutosuggestProps.OptionGroup;\n}\n\nexport interface AutosuggestItemsHandlers extends HighlightedOptionHandlers<AutosuggestItem> {\n  setShowAll(value: boolean): void;\n  selectHighlightedOptionWithKeyboard(): boolean;\n  highlightVisibleOptionWithMouse(index: number): void;\n  selectVisibleOptionWithMouse(index: number): void;\n}\n\nconst isHighlightable = (option?: AutosuggestItem) => {\n  return !!option && option.type !== 'parent';\n};\n\nconst isInteractive = (option?: AutosuggestItem) => !!option && !option.disabled && option.type !== 'parent';\n\nexport const useAutosuggestItems = ({\n  options,\n  filterValue,\n  filterText,\n  filteringType,\n  hideEnteredTextLabel,\n  onSelectItem,\n}: UseAutosuggestItemsProps): [AutosuggestItemsState, AutosuggestItemsHandlers] => {\n  const [showAll, setShowAll] = useState(false);\n\n  const { items, getItemGroup } = useMemo(() => createItems(options), [options]);\n\n  const filteredItems = useMemo(() => {\n    const filteredItems = filteringType === 'auto' && !showAll ? filterOptions(items, filterText) : [...items];\n    if (filterValue && !hideEnteredTextLabel) {\n      filteredItems.unshift({ value: filterValue, type: 'use-entered', option: { value: filterValue } });\n    }\n    generateTestIndexes(filteredItems, getItemGroup);\n    return filteredItems;\n  }, [items, getItemGroup, filterValue, filterText, filteringType, showAll, hideEnteredTextLabel]);\n\n  const [highlightedOptionState, highlightedOptionHandlers] = useHighlightedOption({\n    options: filteredItems,\n    isHighlightable,\n  });\n\n  const selectHighlightedOptionWithKeyboard = () => {\n    if (highlightedOptionState.highlightedOption && isInteractive(highlightedOptionState.highlightedOption)) {\n      onSelectItem(highlightedOptionState.highlightedOption);\n      return true;\n    }\n    return false;\n  };\n\n  const highlightVisibleOptionWithMouse = (index: number) => {\n    if (filteredItems[index] && isHighlightable(filteredItems[index])) {\n      highlightedOptionHandlers.setHighlightedIndexWithMouse(index);\n    }\n  };\n\n  const selectVisibleOptionWithMouse = (index: number) => {\n    if (filteredItems[index] && isInteractive(filteredItems[index])) {\n      onSelectItem(filteredItems[index]);\n    }\n  };\n\n  return [\n    { ...highlightedOptionState, items: filteredItems, showAll, getItemGroup },\n    {\n      ...highlightedOptionHandlers,\n      setShowAll,\n      selectHighlightedOptionWithKeyboard,\n      highlightVisibleOptionWithMouse,\n      selectVisibleOptionWithMouse,\n    },\n  ];\n};\n\nfunction createItems(options: Options) {\n  const items: AutosuggestItem[] = [];\n  const itemToGroup = new WeakMap<AutosuggestItem, AutosuggestProps.OptionGroup>();\n  const getItemGroup = (item: AutosuggestItem) => itemToGroup.get(item);\n\n  for (const option of options) {\n    if (isGroup(option)) {\n      for (const item of flattenGroup(option)) {\n        items.push(item);\n      }\n    } else {\n      items.push({ ...option, option });\n    }\n  }\n\n  function flattenGroup(group: AutosuggestProps.OptionGroup) {\n    const { options, ...rest } = group;\n\n    let hasOnlyDisabledChildren = true;\n\n    const items: AutosuggestItem[] = [{ ...rest, type: 'parent', option: group }];\n\n    for (const option of options) {\n      if (!option.disabled) {\n        hasOnlyDisabledChildren = false;\n      }\n\n      const childOption: AutosuggestItem = {\n        ...option,\n        type: 'child',\n        disabled: option.disabled || rest.disabled,\n        option,\n      };\n\n      items.push(childOption);\n\n      itemToGroup.set(childOption, group);\n    }\n\n    items[0].disabled = items[0].disabled || hasOnlyDisabledChildren;\n\n    return items;\n  }\n\n  return { items, getItemGroup };\n}\n\nfunction isGroup(optionOrGroup: AutosuggestProps.Option): optionOrGroup is AutosuggestProps.OptionGroup {\n  return 'options' in optionOrGroup;\n}\n"]},"metadata":{},"sourceType":"module"}