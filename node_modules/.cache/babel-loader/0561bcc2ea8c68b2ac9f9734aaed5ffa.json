{"ast":null,"code":"import { useRef } from 'react';\nexport default function useLiveAnnouncements(_ref) {\n  var isDragging = _ref.isDragging,\n    liveAnnouncementDndStarted = _ref.liveAnnouncementDndStarted,\n    liveAnnouncementDndItemReordered = _ref.liveAnnouncementDndItemReordered,\n    liveAnnouncementDndItemCommitted = _ref.liveAnnouncementDndItemCommitted,\n    liveAnnouncementDndDiscarded = _ref.liveAnnouncementDndDiscarded,\n    sortedOptions = _ref.sortedOptions;\n  var isFirstAnnouncement = useRef(true);\n  if (!isDragging) {\n    isFirstAnnouncement.current = true;\n  }\n  return {\n    onDragStart: function onDragStart(_ref2) {\n      var active = _ref2.active;\n      if (active && liveAnnouncementDndStarted) {\n        var index = sortedOptions.findIndex(function (option) {\n          return option.id === active.id;\n        });\n        return liveAnnouncementDndStarted(index + 1, sortedOptions.length);\n      }\n    },\n    onDragOver: function onDragOver(_ref3) {\n      var active = _ref3.active,\n        over = _ref3.over;\n      if (liveAnnouncementDndItemReordered) {\n        // Don't announce on the first dragOver because it's redundant with onDragStart.\n        if (isFirstAnnouncement.current) {\n          isFirstAnnouncement.current = false;\n          if (!over || over.id === active.id) {\n            return;\n          }\n        }\n        var initialIndex = sortedOptions.findIndex(function (option) {\n          return option.id === active.id;\n        });\n        var currentIdex = over ? sortedOptions.findIndex(function (option) {\n          return option.id === over.id;\n        }) : initialIndex;\n        return liveAnnouncementDndItemReordered(initialIndex + 1, currentIdex + 1, sortedOptions.length);\n      }\n    },\n    onDragEnd: function onDragEnd(_ref4) {\n      var active = _ref4.active,\n        over = _ref4.over;\n      if (liveAnnouncementDndItemCommitted) {\n        var initialIndex = sortedOptions.findIndex(function (option) {\n          return option.id === active.id;\n        });\n        var finalIndex = over ? sortedOptions.findIndex(function (option) {\n          return option.id === over.id;\n        }) : initialIndex;\n        return liveAnnouncementDndItemCommitted(initialIndex + 1, finalIndex + 1, sortedOptions.length);\n      }\n    },\n    onDragCancel: function onDragCancel() {\n      return liveAnnouncementDndDiscarded;\n    }\n  };\n}","map":{"version":3,"mappings":"AAIA,SAASA,MAAM,QAAQ,OAAO;AAE9B,eAAc,SAAUC,oBAAoB,OAU3C;EAAA,IATCC,UAAU,QAAVA,UAAU;IACVC,0BAA0B,QAA1BA,0BAA0B;IAC1BC,gCAAgC,QAAhCA,gCAAgC;IAChCC,gCAAgC,QAAhCA,gCAAgC;IAChCC,4BAA4B,QAA5BA,4BAA4B;IAC5BC,aAAa,QAAbA,aAAa;EAKb,IAAMC,mBAAmB,GAAGR,MAAM,CAAC,IAAI,CAAC;EACxC,IAAI,CAACE,UAAU,EAAE;IACfM,mBAAmB,CAACC,OAAO,GAAG,IAAI;;EAGpC,OAAO;IACLC,WAAW,8BAA2B;MAAA,IAAxBC,MAAM,SAANA,MAAM;MAClB,IAAIA,MAAM,IAAIR,0BAA0B,EAAE;QACxC,IAAMS,KAAK,GAAGL,aAAa,CAACM,SAAS,CAAC,gBAAM;UAAA,OAAIC,MAAM,CAACC,EAAE,KAAKJ,MAAM,CAACI,EAAE;QAAA,EAAC;QACxE,OAAOZ,0BAA0B,CAACS,KAAK,GAAG,CAAC,EAAEL,aAAa,CAACS,MAAM,CAAC;;IAEtE,CAAC;IACDC,UAAU,6BAAgC;MAAA,IAA7BN,MAAM,SAANA,MAAM;QAAEO,IAAI,SAAJA,IAAI;MACvB,IAAId,gCAAgC,EAAE;QACpC;QACA,IAAII,mBAAmB,CAACC,OAAO,EAAE;UAC/BD,mBAAmB,CAACC,OAAO,GAAG,KAAK;UACnC,IAAI,CAACS,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAKJ,MAAM,CAACI,EAAE,EAAE;YAClC;;;QAGJ,IAAMI,YAAY,GAAGZ,aAAa,CAACM,SAAS,CAAC,gBAAM;UAAA,OAAIC,MAAM,CAACC,EAAE,KAAKJ,MAAM,CAACI,EAAE;QAAA,EAAC;QAC/E,IAAMK,WAAW,GAAGF,IAAI,GAAGX,aAAa,CAACM,SAAS,CAAC,gBAAM;UAAA,OAAIC,MAAM,CAACC,EAAE,KAAKG,IAAI,CAACH,EAAE;QAAA,EAAC,GAAGI,YAAY;QAClG,OAAOf,gCAAgC,CAACe,YAAY,GAAG,CAAC,EAAEC,WAAW,GAAG,CAAC,EAAEb,aAAa,CAACS,MAAM,CAAC;;IAEpG,CAAC;IACDK,SAAS,4BAA+B;MAAA,IAA5BV,MAAM,SAANA,MAAM;QAAEO,IAAI,SAAJA,IAAI;MACtB,IAAIb,gCAAgC,EAAE;QACpC,IAAMc,YAAY,GAAGZ,aAAa,CAACM,SAAS,CAAC,gBAAM;UAAA,OAAIC,MAAM,CAACC,EAAE,KAAKJ,MAAM,CAACI,EAAE;QAAA,EAAC;QAC/E,IAAMO,UAAU,GAAGJ,IAAI,GAAGX,aAAa,CAACM,SAAS,CAAC,gBAAM;UAAA,OAAIC,MAAM,CAACC,EAAE,KAAKG,IAAI,CAACH,EAAE;QAAA,EAAC,GAAGI,YAAY;QACjG,OAAOd,gCAAgC,CAACc,YAAY,GAAG,CAAC,EAAEG,UAAU,GAAG,CAAC,EAAEf,aAAa,CAACS,MAAM,CAAC;;IAEnG,CAAC;IACDO,YAAY;MACV,OAAOjB,4BAA4B;IACrC;GACD;AACH","names":["useRef","useLiveAnnouncements","isDragging","liveAnnouncementDndStarted","liveAnnouncementDndItemReordered","liveAnnouncementDndItemCommitted","liveAnnouncementDndDiscarded","sortedOptions","isFirstAnnouncement","current","onDragStart","active","index","findIndex","option","id","length","onDragOver","over","initialIndex","currentIdex","onDragEnd","finalIndex","onDragCancel"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/collection-preferences/content-display/lib/default/collection-preferences/content-display/use-live-announcements.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CollectionPreferencesProps } from '../interfaces';\nimport { DragEndEvent, DragOverEvent, DragStartEvent } from '@dnd-kit/core';\nimport { useRef } from 'react';\n\nexport default function useLiveAnnouncements({\n  isDragging,\n  liveAnnouncementDndStarted,\n  liveAnnouncementDndItemReordered,\n  liveAnnouncementDndItemCommitted,\n  liveAnnouncementDndDiscarded,\n  sortedOptions,\n}: Partial<CollectionPreferencesProps.ContentDisplayPreference> & {\n  isDragging: boolean;\n  sortedOptions: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>;\n}) {\n  const isFirstAnnouncement = useRef(true);\n  if (!isDragging) {\n    isFirstAnnouncement.current = true;\n  }\n\n  return {\n    onDragStart({ active }: DragStartEvent) {\n      if (active && liveAnnouncementDndStarted) {\n        const index = sortedOptions.findIndex(option => option.id === active.id);\n        return liveAnnouncementDndStarted(index + 1, sortedOptions.length);\n      }\n    },\n    onDragOver({ active, over }: DragOverEvent) {\n      if (liveAnnouncementDndItemReordered) {\n        // Don't announce on the first dragOver because it's redundant with onDragStart.\n        if (isFirstAnnouncement.current) {\n          isFirstAnnouncement.current = false;\n          if (!over || over.id === active.id) {\n            return;\n          }\n        }\n        const initialIndex = sortedOptions.findIndex(option => option.id === active.id);\n        const currentIdex = over ? sortedOptions.findIndex(option => option.id === over.id) : initialIndex;\n        return liveAnnouncementDndItemReordered(initialIndex + 1, currentIdex + 1, sortedOptions.length);\n      }\n    },\n    onDragEnd({ active, over }: DragEndEvent) {\n      if (liveAnnouncementDndItemCommitted) {\n        const initialIndex = sortedOptions.findIndex(option => option.id === active.id);\n        const finalIndex = over ? sortedOptions.findIndex(option => option.id === over.id) : initialIndex;\n        return liveAnnouncementDndItemCommitted(initialIndex + 1, finalIndex + 1, sortedOptions.length);\n      }\n    },\n    onDragCancel() {\n      return liveAnnouncementDndDiscarded;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}