{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { addMinutes } from 'date-fns';\nimport { joinDateTime } from '.';\nimport { formatDate } from './format-date';\nimport { formatTime } from './format-time';\nimport { parseTimezoneOffset } from './parse-timezone-offset';\n/**\n * Re-formats an ISO8601 date string so that it is expressed using the\n * target timezone offset. The returned date string still represents the\n * same instant in time, but contains no visible offset.\n *\n * Example:\n * ```\n * shiftTimezoneOffset(\"2020-01-01T09:00:00+03:00\", 2 * 60) === \"2020-01-01T08:00:00\"\n * ```\n */\nexport function shiftTimezoneOffset(dateString, targetTimezoneOffset) {\n  var _dateString$split = dateString.split('T'),\n    _dateString$split2 = _slicedToArray(_dateString$split, 2),\n    datePart = _dateString$split2[0],\n    _dateString$split2$ = _dateString$split2[1],\n    timeAndOffsetPart = _dateString$split2$ === void 0 ? '' : _dateString$split2$;\n  var _timeAndOffsetPart$sp = timeAndOffsetPart.split(/-|\\+|Z/),\n    _timeAndOffsetPart$sp2 = _slicedToArray(_timeAndOffsetPart$sp, 1),\n    timePart = _timeAndOffsetPart$sp2[0];\n  var valueWithoutOffset = joinDateTime(datePart, timePart);\n  var originalTimezoneOffset = parseTimezoneOffset(dateString);\n  var date = new Date(valueWithoutOffset);\n  targetTimezoneOffset = targetTimezoneOffset !== null && targetTimezoneOffset !== void 0 ? targetTimezoneOffset : 0 - date.getTimezoneOffset();\n  var adjustedDate = addMinutes(date, targetTimezoneOffset - originalTimezoneOffset);\n  return joinDateTime(formatDate(adjustedDate), formatTime(adjustedDate));\n}","map":{"version":3,"mappings":";AAAA;AACA;AAEA,SAASA,UAAU,QAAQ,UAAU;AACrC,SAASC,YAAY,QAAQ,GAAG;AAChC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,mBAAmB,QAAQ,yBAAyB;AAE7D;;;;;;;;;;AAUA,OAAM,SAAUC,mBAAmB,CAACC,UAAkB,EAAEC,oBAA6B;EACnF,wBAA2CD,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC;IAAA;IAAzDC,QAAQ;IAAA;IAAEC,iBAAiB,oCAAG,EAAE;EACvC,4BAAmBA,iBAAiB,CAACF,KAAK,CAAC,QAAQ,CAAC;IAAA;IAA7CG,QAAQ;EACf,IAAMC,kBAAkB,GAAGX,YAAY,CAACQ,QAAQ,EAAEE,QAAQ,CAAC;EAC3D,IAAME,sBAAsB,GAAGT,mBAAmB,CAACE,UAAU,CAAC;EAE9D,IAAMQ,IAAI,GAAG,IAAIC,IAAI,CAACH,kBAAkB,CAAC;EACzCL,oBAAoB,GAAGA,oBAAoB,aAApBA,oBAAoB,cAApBA,oBAAoB,GAAI,CAAC,GAAGO,IAAI,CAACE,iBAAiB,EAAE;EAC3E,IAAMC,YAAY,GAAGjB,UAAU,CAACc,IAAI,EAAEP,oBAAoB,GAAGM,sBAAsB,CAAC;EAEpF,OAAOZ,YAAY,CAACC,UAAU,CAACe,YAAY,CAAC,EAAEd,UAAU,CAACc,YAAY,CAAC,CAAC;AACzE","names":["addMinutes","joinDateTime","formatDate","formatTime","parseTimezoneOffset","shiftTimezoneOffset","dateString","targetTimezoneOffset","split","datePart","timeAndOffsetPart","timePart","valueWithoutOffset","originalTimezoneOffset","date","Date","getTimezoneOffset","adjustedDate"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/utils/date-time/lib/default/internal/utils/date-time/shift-timezone-offset.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { addMinutes } from 'date-fns';\nimport { joinDateTime } from '.';\nimport { formatDate } from './format-date';\nimport { formatTime } from './format-time';\nimport { parseTimezoneOffset } from './parse-timezone-offset';\n\n/**\n * Re-formats an ISO8601 date string so that it is expressed using the\n * target timezone offset. The returned date string still represents the\n * same instant in time, but contains no visible offset.\n *\n * Example:\n * ```\n * shiftTimezoneOffset(\"2020-01-01T09:00:00+03:00\", 2 * 60) === \"2020-01-01T08:00:00\"\n * ```\n */\nexport function shiftTimezoneOffset(dateString: string, targetTimezoneOffset?: number) {\n  const [datePart, timeAndOffsetPart = ''] = dateString.split('T');\n  const [timePart] = timeAndOffsetPart.split(/-|\\+|Z/);\n  const valueWithoutOffset = joinDateTime(datePart, timePart);\n  const originalTimezoneOffset = parseTimezoneOffset(dateString);\n\n  const date = new Date(valueWithoutOffset);\n  targetTimezoneOffset = targetTimezoneOffset ?? 0 - date.getTimezoneOffset();\n  const adjustedDate = addMinutes(date, targetTimezoneOffset - originalTimezoneOffset);\n\n  return joinDateTime(formatDate(adjustedDate), formatTime(adjustedDate));\n}\n"]},"metadata":{},"sourceType":"module"}