{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useImperativeHandle, useRef } from 'react';\nimport OptionsList from '../internal/components/options-list';\nimport AutosuggestOption from './autosuggest-option';\nimport { getOptionProps } from './plain-list';\nimport styles from './styles.css.js';\nimport { useVirtual } from '../internal/hooks/use-virtual';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nconst VirtualList = _ref => {\n  let {\n    autosuggestItemsState,\n    handleLoadMore,\n    menuProps,\n    enteredTextLabel,\n    highlightedA11yProps,\n    hasDropdownStatus,\n    highlightText,\n    listBottom,\n    screenReaderContent\n  } = _ref;\n  const scrollRef = useRef(null);\n  // update component, when it gets wider or narrower to reposition items\n  const [width, strutRef] = useContainerQuery(rect => rect.contentBoxWidth, []);\n  useImperativeHandle(strutRef, () => scrollRef.current);\n  const rowVirtualizer = useVirtual({\n    items: autosuggestItemsState.items,\n    parentRef: scrollRef,\n    // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n    // when the height of any option could have changed:\n    // 1: because the component got resized (width property got updated)\n    // 2: because the option changed its content (highlightText property controls the highlight and the visibility of hidden tags)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    estimateSize: useCallback(() => 31, [width, highlightText])\n  });\n  useEffect(() => {\n    if (autosuggestItemsState.highlightType === 'keyboard') {\n      rowVirtualizer.scrollToIndex(autosuggestItemsState.highlightedIndex);\n    }\n  }, [autosuggestItemsState.highlightType, autosuggestItemsState.highlightedIndex, rowVirtualizer]);\n  return React.createElement(OptionsList, Object.assign({}, menuProps, {\n    onLoadMore: handleLoadMore,\n    ref: scrollRef,\n    open: true,\n    // to prevent closing the list when clicking the scrollbar on IE11\n    nativeAttributes: {\n      unselectable: 'on'\n    }\n  }), React.createElement(\"div\", {\n    \"aria-hidden\": \"true\",\n    key: \"total-size\",\n    className: styles['layout-strut'],\n    style: {\n      height: rowVirtualizer.totalSize + (autosuggestItemsState.items.length === 1 ? 1 : 0)\n    }\n  }), rowVirtualizer.virtualItems.map(virtualRow => {\n    const {\n      index,\n      start,\n      measureRef\n    } = virtualRow;\n    const item = autosuggestItemsState.items[index];\n    const optionProps = getOptionProps(index, item, autosuggestItemsState.items, highlightedA11yProps, autosuggestItemsState.highlightedOption, hasDropdownStatus);\n    return React.createElement(AutosuggestOption, Object.assign({\n      key: index,\n      ref: measureRef,\n      highlightText: highlightText,\n      option: item,\n      highlighted: item === autosuggestItemsState.highlightedOption,\n      current: item.value === highlightText,\n      \"data-mouse-target\": index,\n      enteredTextLabel: enteredTextLabel,\n      virtualPosition: start + (index === 0 ? 1 : 0),\n      screenReaderContent: screenReaderContent,\n      ariaSetsize: autosuggestItemsState.items.length,\n      ariaPosinset: index + 1,\n      highlightType: autosuggestItemsState.highlightType\n    }, optionProps));\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n};\nexport default VirtualList;","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useImperativeHandle","useRef","OptionsList","AutosuggestOption","getOptionProps","styles","useVirtual","useContainerQuery","VirtualList","autosuggestItemsState","handleLoadMore","menuProps","enteredTextLabel","highlightedA11yProps","hasDropdownStatus","highlightText","listBottom","screenReaderContent","scrollRef","width","strutRef","rect","contentBoxWidth","current","rowVirtualizer","items","parentRef","estimateSize","highlightType","scrollToIndex","highlightedIndex","onLoadMore","ref","open","nativeAttributes","unselectable","key","className","style","height","totalSize","length","virtualItems","map","virtualRow","index","start","measureRef","item","optionProps","highlightedOption","option","highlighted","value","virtualPosition","ariaSetsize","ariaPosinset","role"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/autosuggest/lib/default/autosuggest/virtual-list.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useImperativeHandle, useRef } from 'react';\n\nimport OptionsList from '../internal/components/options-list';\n\nimport AutosuggestOption from './autosuggest-option';\nimport { getOptionProps, ListProps } from './plain-list';\nimport styles from './styles.css.js';\nimport { useVirtual } from '../internal/hooks/use-virtual';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nconst VirtualList = ({\n  autosuggestItemsState,\n  handleLoadMore,\n  menuProps,\n  enteredTextLabel,\n  highlightedA11yProps,\n  hasDropdownStatus,\n  highlightText,\n  listBottom,\n  screenReaderContent,\n}: ListProps) => {\n  const scrollRef = useRef<HTMLUListElement>(null);\n  // update component, when it gets wider or narrower to reposition items\n  const [width, strutRef] = useContainerQuery(rect => rect.contentBoxWidth, []);\n  useImperativeHandle(strutRef, () => scrollRef.current);\n\n  const rowVirtualizer = useVirtual({\n    items: autosuggestItemsState.items,\n    parentRef: scrollRef,\n    // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n    // when the height of any option could have changed:\n    // 1: because the component got resized (width property got updated)\n    // 2: because the option changed its content (highlightText property controls the highlight and the visibility of hidden tags)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    estimateSize: useCallback(() => 31, [width, highlightText]),\n  });\n\n  useEffect(() => {\n    if (autosuggestItemsState.highlightType === 'keyboard') {\n      rowVirtualizer.scrollToIndex(autosuggestItemsState.highlightedIndex);\n    }\n  }, [autosuggestItemsState.highlightType, autosuggestItemsState.highlightedIndex, rowVirtualizer]);\n\n  return (\n    <OptionsList\n      {...menuProps}\n      onLoadMore={handleLoadMore}\n      ref={scrollRef}\n      open={true}\n      // to prevent closing the list when clicking the scrollbar on IE11\n      nativeAttributes={{ unselectable: 'on' }}\n    >\n      <div\n        aria-hidden=\"true\"\n        key=\"total-size\"\n        className={styles['layout-strut']}\n        style={{ height: rowVirtualizer.totalSize + (autosuggestItemsState.items.length === 1 ? 1 : 0) }}\n      />\n      {rowVirtualizer.virtualItems.map(virtualRow => {\n        const { index, start, measureRef } = virtualRow;\n        const item = autosuggestItemsState.items[index];\n        const optionProps = getOptionProps(\n          index,\n          item,\n          autosuggestItemsState.items,\n          highlightedA11yProps,\n          autosuggestItemsState.highlightedOption,\n          hasDropdownStatus\n        );\n\n        return (\n          <AutosuggestOption\n            key={index}\n            ref={measureRef}\n            highlightText={highlightText}\n            option={item}\n            highlighted={item === autosuggestItemsState.highlightedOption}\n            current={item.value === highlightText}\n            data-mouse-target={index}\n            enteredTextLabel={enteredTextLabel}\n            virtualPosition={start + (index === 0 ? 1 : 0)}\n            screenReaderContent={screenReaderContent}\n            ariaSetsize={autosuggestItemsState.items.length}\n            ariaPosinset={index + 1}\n            highlightType={autosuggestItemsState.highlightType}\n            {...optionProps}\n          />\n        );\n      })}\n      {listBottom ? (\n        <li role=\"option\" className={styles['list-bottom']}>\n          {listBottom}\n        </li>\n      ) : null}\n    </OptionsList>\n  );\n};\n\nexport default VirtualList;\n"]},"metadata":{},"sourceType":"module"}