{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport RadioButton from './radio-button';\nimport styles from './styles.css.js';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport useRadioGroupForwardFocus from '../internal/hooks/forward-focus/radio-group';\nconst InternalRadioGroup = React.forwardRef((_a, ref) => {\n  var {\n      name,\n      value,\n      items,\n      ariaLabel,\n      ariaRequired,\n      ariaControls,\n      onChange,\n      __internalRootRef = null\n    } = _a,\n    props = __rest(_a, [\"name\", \"value\", \"items\", \"ariaLabel\", \"ariaRequired\", \"ariaControls\", \"onChange\", \"__internalRootRef\"]);\n  const {\n    ariaDescribedby,\n    ariaLabelledby\n  } = useFormFieldContext(props);\n  const baseProps = getBaseProps(props);\n  const generatedName = useUniqueId('awsui-radio-');\n  const [radioButtonRef, radioButtonRefIndex] = useRadioGroupForwardFocus(ref, items, value);\n  return React.createElement(\"div\", Object.assign({\n    role: \"radiogroup\",\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-label\": ariaLabel,\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-required\": ariaRequired,\n    \"aria-controls\": ariaControls\n  }, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: __internalRootRef\n  }), items && items.map((item, index) => React.createElement(RadioButton, {\n    key: item.value,\n    ref: index === radioButtonRefIndex ? radioButtonRef : undefined,\n    checked: item.value === value,\n    name: name || generatedName,\n    value: item.value,\n    label: item.label,\n    description: item.description,\n    disabled: item.disabled,\n    onChange: onChange,\n    controlId: item.controlId\n  })));\n});\nexport default InternalRadioGroup;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,4BAA4B;AAEzD,OAAOC,WAAW,MAAM,gBAAgB;AACxC,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,mBAAmB,QAAQ,wCAAwC;AAC5E,SAASC,WAAW,QAAQ,iCAAiC;AAE7D,OAAOC,yBAAyB,MAAM,6CAA6C;AAInF,MAAMC,kBAAkB,GAAGP,KAAK,CAACQ,UAAU,CACzC,CACEC,EAU0B,EAC1BC,GAAmC,KACjC;MAZF;MACEC,IAAI;MACJC,KAAK;MACLC,KAAK;MACLC,SAAS;MACTC,YAAY;MACZC,YAAY;MACZC,QAAQ;MACRC,iBAAiB,GAAG;IAAI,MAEA;IADrBC,KAAK,cATV,wGAUC,CADS;EAIV,MAAM;IAAEC,eAAe;IAAEC;EAAc,CAAE,GAAGjB,mBAAmB,CAACe,KAAK,CAAC;EACtE,MAAMG,SAAS,GAAGrB,YAAY,CAACkB,KAAK,CAAC;EACrC,MAAMI,aAAa,GAAGlB,WAAW,CAAC,cAAc,CAAC;EAEjD,MAAM,CAACmB,cAAc,EAAEC,mBAAmB,CAAC,GAAGnB,yBAAyB,CAACI,GAAG,EAAEG,KAAK,EAAED,KAAK,CAAC;EAE1F,OACEZ;IACE0B,IAAI,EAAC,YAAY;IAAA,mBACAL,cAAc;IAAA,cACnBP,SAAS;IAAA,oBACHM,eAAe;IAAA,iBAClBL,YAAY;IAAA,iBACZC;EAAY,GACvBM,SAAS;IACbK,SAAS,EAAE5B,IAAI,CAACuB,SAAS,CAACK,SAAS,EAAExB,MAAM,CAACyB,IAAI,CAAC;IACjDlB,GAAG,EAAEQ;EAAiB,IAErBL,KAAK,IACJA,KAAK,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KACpB/B,oBAACE,WAAW;IACV8B,GAAG,EAAEF,IAAI,CAAClB,KAAK;IACfF,GAAG,EAAEqB,KAAK,KAAKN,mBAAmB,GAAGD,cAAc,GAAGS,SAAS;IAC/DC,OAAO,EAAEJ,IAAI,CAAClB,KAAK,KAAKA,KAAK;IAC7BD,IAAI,EAAEA,IAAI,IAAIY,aAAa;IAC3BX,KAAK,EAAEkB,IAAI,CAAClB,KAAK;IACjBuB,KAAK,EAAEL,IAAI,CAACK,KAAK;IACjBC,WAAW,EAAEN,IAAI,CAACM,WAAW;IAC7BC,QAAQ,EAAEP,IAAI,CAACO,QAAQ;IACvBpB,QAAQ,EAAEA,QAAQ;IAClBqB,SAAS,EAAER,IAAI,CAACQ;EAAS,EAE5B,CAAC,CACA;AAEV,CAAC,CACF;AAED,eAAe/B,kBAAkB","names":["clsx","React","getBaseProps","RadioButton","styles","useFormFieldContext","useUniqueId","useRadioGroupForwardFocus","InternalRadioGroup","forwardRef","_a","ref","name","value","items","ariaLabel","ariaRequired","ariaControls","onChange","__internalRootRef","props","ariaDescribedby","ariaLabelledby","baseProps","generatedName","radioButtonRef","radioButtonRefIndex","role","className","root","map","item","index","key","undefined","checked","label","description","disabled","controlId"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/radio-group/lib/default/radio-group/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { RadioGroupProps } from './interfaces';\nimport RadioButton from './radio-button';\nimport styles from './styles.css.js';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport useRadioGroupForwardFocus from '../internal/hooks/forward-focus/radio-group';\n\ntype InternalRadioGroupProps = RadioGroupProps & InternalBaseComponentProps;\n\nconst InternalRadioGroup = React.forwardRef(\n  (\n    {\n      name,\n      value,\n      items,\n      ariaLabel,\n      ariaRequired,\n      ariaControls,\n      onChange,\n      __internalRootRef = null,\n      ...props\n    }: InternalRadioGroupProps,\n    ref: React.Ref<RadioGroupProps.Ref>\n  ) => {\n    const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(props);\n    const baseProps = getBaseProps(props);\n    const generatedName = useUniqueId('awsui-radio-');\n\n    const [radioButtonRef, radioButtonRefIndex] = useRadioGroupForwardFocus(ref, items, value);\n\n    return (\n      <div\n        role=\"radiogroup\"\n        aria-labelledby={ariaLabelledby}\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedby}\n        aria-required={ariaRequired}\n        aria-controls={ariaControls}\n        {...baseProps}\n        className={clsx(baseProps.className, styles.root)}\n        ref={__internalRootRef}\n      >\n        {items &&\n          items.map((item, index) => (\n            <RadioButton\n              key={item.value}\n              ref={index === radioButtonRefIndex ? radioButtonRef : undefined}\n              checked={item.value === value}\n              name={name || generatedName}\n              value={item.value}\n              label={item.label}\n              description={item.description}\n              disabled={item.disabled}\n              onChange={onChange}\n              controlId={item.controlId}\n            />\n          ))}\n      </div>\n    );\n  }\n);\n\nexport default InternalRadioGroup;\n"]},"metadata":{},"sourceType":"module"}