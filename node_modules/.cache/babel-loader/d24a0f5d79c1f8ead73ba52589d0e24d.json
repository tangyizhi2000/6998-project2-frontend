{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport { KeyCode } from '../../../internal/keycode';\nimport { isSameMonth, isAfter, isBefore, addMonths, min, max } from 'date-fns';\nimport InternalSpaceBetween from '../../../space-between/internal';\nimport { Grid } from './grid';\nimport styles from '../../styles.css.js';\nimport { hasValue } from '../../../internal/utils/has-value';\nimport { useDateCache } from '../../../internal/hooks/use-date-cache';\nimport { moveNextDay, movePrevDay, moveNextWeek, movePrevWeek, getBaseDate } from '../../../calendar/utils/navigation';\nimport { findDateToFocus } from '../utils';\nfunction isVisible(date, baseDate, isSingleGrid) {\n  if (isSingleGrid) {\n    return isSameMonth(date, baseDate);\n  }\n  var previousMonth = addMonths(baseDate, -1);\n  return isSameMonth(date, previousMonth) || isSameMonth(date, baseDate);\n}\nexport var Grids = function Grids(_ref) {\n  var baseDate = _ref.baseDate,\n    selectedStartDate = _ref.selectedStartDate,\n    selectedEndDate = _ref.selectedEndDate,\n    focusedDate = _ref.focusedDate,\n    onFocusedDateChange = _ref.onFocusedDateChange,\n    isDateEnabled = _ref.isDateEnabled,\n    isSingleGrid = _ref.isSingleGrid,\n    onSelectDate = _ref.onSelectDate,\n    onChangeMonth = _ref.onChangeMonth,\n    locale = _ref.locale,\n    startOfWeek = _ref.startOfWeek,\n    todayAriaLabel = _ref.todayAriaLabel,\n    headingIdPrefix = _ref.headingIdPrefix;\n  var containerRef = useRef(null);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    gridHasFocus = _useState2[0],\n    setGridHasFocus = _useState2[1];\n  var focusedDateRef = useRef(null);\n  var dateCache = useDateCache();\n  baseDate = dateCache(baseDate);\n  focusedDate = focusedDate ? dateCache(focusedDate) : null;\n  useEffect(function () {\n    if (focusedDate && !isVisible(focusedDate, baseDate, isSingleGrid)) {\n      var direction = isAfter(focusedDate, baseDate) ? -1 : 1;\n      var newMonth = !isSingleGrid && direction === -1 ? addMonths(baseDate, -1) : baseDate;\n      var nearestBaseDate = getBaseDate(newMonth, isDateEnabled);\n      var newFocusedDate = findDateToFocus(focusedDate, nearestBaseDate, isDateEnabled);\n      onFocusedDateChange(newFocusedDate);\n    }\n  }, [baseDate, focusedDate, isSingleGrid, isDateEnabled, onFocusedDateChange]);\n  var onGridKeyDownHandler = function onGridKeyDownHandler(e) {\n    var updatedFocusDate;\n    if (focusedDate === null) {\n      return;\n    }\n    switch (e.keyCode) {\n      case KeyCode.space:\n      case KeyCode.enter:\n        e.preventDefault();\n        if (focusedDate) {\n          onSelectDate(focusedDate);\n        }\n        return;\n      case KeyCode.right:\n        e.preventDefault();\n        updatedFocusDate = moveNextDay(focusedDate, isDateEnabled);\n        break;\n      case KeyCode.left:\n        e.preventDefault();\n        updatedFocusDate = movePrevDay(focusedDate, isDateEnabled);\n        break;\n      case KeyCode.up:\n        e.preventDefault();\n        updatedFocusDate = movePrevWeek(focusedDate, isDateEnabled);\n        break;\n      case KeyCode.down:\n        e.preventDefault();\n        updatedFocusDate = moveNextWeek(focusedDate, isDateEnabled);\n        break;\n      default:\n        return;\n    }\n    var updatedDateIsVisible = isVisible(updatedFocusDate, baseDate, isSingleGrid);\n    if (!updatedDateIsVisible) {\n      var newMonthIsOnLeftSide = !isSingleGrid && isBefore(updatedFocusDate, baseDate);\n      onChangeMonth(newMonthIsOnLeftSide ? addMonths(updatedFocusDate, 1) : updatedFocusDate);\n    }\n    onFocusedDateChange(updatedFocusDate);\n  };\n  useEffect(function () {\n    // focus current date if the focus is already inside the calendar\n    if (focusedDate !== null && gridHasFocus) {\n      if (focusedDateRef.current && focusedDateRef.current !== document.activeElement) {\n        focusedDateRef.current.focus();\n      }\n    }\n  }, [focusedDate, gridHasFocus]);\n  var onGridBlur = function onGridBlur(event) {\n    var _a;\n    /*\n     IE11 does not support event.relatedTarget, but sets document.activeElement to the newly\n     focused element before the onBlur handler is called.\n          However, other browsers do not make any guarantees for the value of document.activeElement\n     during the execution of an onBlur handler. Therefore, we have to use event.relatedTarget\n     instead.\n     */\n    var newFocusTarget = event.relatedTarget || document.activeElement;\n    var newFocusTargetIsInGrid = (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(newFocusTarget);\n    if (newFocusTarget && !newFocusTargetIsInGrid && gridHasFocus) {\n      setGridHasFocus(false);\n    }\n  };\n  var onGridFocus = function onGridFocus() {\n    if (!gridHasFocus) {\n      setGridHasFocus(true);\n    }\n  };\n  var isRangeVisible = selectedStartDate && selectedEndDate || gridHasFocus;\n  var rangeEnds = [selectedStartDate !== null && selectedStartDate !== void 0 ? selectedStartDate : focusedDate, selectedEndDate !== null && selectedEndDate !== void 0 ? selectedEndDate : focusedDate].filter(hasValue);\n  var rangeStartDate = min(rangeEnds);\n  var rangeEndDate = max(rangeEnds);\n  return React.createElement(\"div\", {\n    ref: containerRef,\n    onFocus: onGridFocus,\n    onBlur: onGridBlur\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"xs\",\n    direction: \"horizontal\"\n  }, !isSingleGrid && React.createElement(Grid, {\n    className: styles['first-grid'],\n    baseDate: addMonths(baseDate, -1),\n    selectedEndDate: selectedEndDate,\n    selectedStartDate: selectedStartDate,\n    rangeStartDate: isRangeVisible ? rangeStartDate : null,\n    rangeEndDate: isRangeVisible ? rangeEndDate : null,\n    focusedDate: focusedDate,\n    focusedDateRef: focusedDateRef,\n    isDateEnabled: isDateEnabled,\n    onSelectDate: onSelectDate,\n    onGridKeyDownHandler: onGridKeyDownHandler,\n    onFocusedDateChange: onFocusedDateChange,\n    locale: locale,\n    startOfWeek: startOfWeek,\n    todayAriaLabel: todayAriaLabel,\n    ariaLabelledby: \"\".concat(headingIdPrefix, \"-prevmonth\")\n  }), React.createElement(Grid, {\n    className: styles['second-grid'],\n    baseDate: baseDate,\n    selectedEndDate: selectedEndDate,\n    selectedStartDate: selectedStartDate,\n    rangeStartDate: isRangeVisible ? rangeStartDate : null,\n    rangeEndDate: isRangeVisible ? rangeEndDate : null,\n    focusedDate: focusedDate,\n    focusedDateRef: focusedDateRef,\n    isDateEnabled: isDateEnabled,\n    onSelectDate: onSelectDate,\n    onGridKeyDownHandler: onGridKeyDownHandler,\n    onFocusedDateChange: onFocusedDateChange,\n    locale: locale,\n    startOfWeek: startOfWeek,\n    todayAriaLabel: todayAriaLabel,\n    ariaLabelledby: \"\".concat(headingIdPrefix, \"-currentmonth\")\n  })));\n};","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","useState","KeyCode","isSameMonth","isAfter","isBefore","addMonths","min","max","InternalSpaceBetween","Grid","styles","hasValue","useDateCache","moveNextDay","movePrevDay","moveNextWeek","movePrevWeek","getBaseDate","findDateToFocus","isVisible","date","baseDate","isSingleGrid","previousMonth","Grids","selectedStartDate","selectedEndDate","focusedDate","onFocusedDateChange","isDateEnabled","onSelectDate","onChangeMonth","locale","startOfWeek","todayAriaLabel","headingIdPrefix","containerRef","gridHasFocus","setGridHasFocus","focusedDateRef","dateCache","direction","newMonth","nearestBaseDate","newFocusedDate","onGridKeyDownHandler","e","updatedFocusDate","keyCode","space","enter","preventDefault","right","left","up","down","updatedDateIsVisible","newMonthIsOnLeftSide","current","document","activeElement","focus","onGridBlur","event","newFocusTarget","relatedTarget","newFocusTargetIsInGrid","contains","onGridFocus","isRangeVisible","rangeEnds","filter","rangeStartDate","rangeEndDate","ref","onFocus","onBlur","size","className","ariaLabelledby"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/lib/default/date-range-picker/calendar/grids/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport { KeyCode } from '../../../internal/keycode';\nimport { isSameMonth, isAfter, isBefore, addMonths, min, max } from 'date-fns';\n\nimport { DateRangePickerProps, DayIndex } from '../../interfaces';\nimport InternalSpaceBetween from '../../../space-between/internal';\nimport { Grid } from './grid';\nimport styles from '../../styles.css.js';\n\nimport { hasValue } from '../../../internal/utils/has-value';\nimport { useDateCache } from '../../../internal/hooks/use-date-cache';\nimport { moveNextDay, movePrevDay, moveNextWeek, movePrevWeek, getBaseDate } from '../../../calendar/utils/navigation';\nimport { findDateToFocus } from '../utils';\n\nfunction isVisible(date: Date, baseDate: Date, isSingleGrid: boolean) {\n  if (isSingleGrid) {\n    return isSameMonth(date, baseDate);\n  }\n\n  const previousMonth = addMonths(baseDate, -1);\n\n  return isSameMonth(date, previousMonth) || isSameMonth(date, baseDate);\n}\n\nexport interface GridProps {\n  baseDate: Date;\n  selectedStartDate: Date | null;\n  selectedEndDate: Date | null;\n\n  focusedDate: Date | null;\n  onFocusedDateChange: React.Dispatch<React.SetStateAction<Date | null>>;\n\n  isDateEnabled: DateRangePickerProps.IsDateEnabledFunction;\n  isSingleGrid: boolean;\n\n  onSelectDate: (date: Date) => void;\n  onChangeMonth: (date: Date) => void;\n\n  locale: string;\n  startOfWeek: DayIndex;\n  todayAriaLabel?: string;\n  headingIdPrefix: string;\n}\n\nexport const Grids = ({\n  baseDate,\n  selectedStartDate,\n  selectedEndDate,\n\n  focusedDate,\n  onFocusedDateChange,\n\n  isDateEnabled,\n  isSingleGrid,\n\n  onSelectDate,\n  onChangeMonth,\n\n  locale,\n  startOfWeek,\n  todayAriaLabel,\n  headingIdPrefix,\n}: GridProps) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [gridHasFocus, setGridHasFocus] = useState(false);\n\n  const focusedDateRef = useRef<HTMLTableCellElement>(null);\n\n  const dateCache = useDateCache();\n  baseDate = dateCache(baseDate);\n  focusedDate = focusedDate ? dateCache(focusedDate) : null;\n\n  useEffect(() => {\n    if (focusedDate && !isVisible(focusedDate, baseDate, isSingleGrid)) {\n      const direction = isAfter(focusedDate, baseDate) ? -1 : 1;\n\n      const newMonth = !isSingleGrid && direction === -1 ? addMonths(baseDate, -1) : baseDate;\n      const nearestBaseDate = getBaseDate(newMonth, isDateEnabled);\n\n      const newFocusedDate = findDateToFocus(focusedDate, nearestBaseDate, isDateEnabled);\n\n      onFocusedDateChange(newFocusedDate);\n    }\n  }, [baseDate, focusedDate, isSingleGrid, isDateEnabled, onFocusedDateChange]);\n\n  const onGridKeyDownHandler = (e: React.KeyboardEvent) => {\n    let updatedFocusDate;\n\n    if (focusedDate === null) {\n      return;\n    }\n\n    switch (e.keyCode) {\n      case KeyCode.space:\n      case KeyCode.enter:\n        e.preventDefault();\n        if (focusedDate) {\n          onSelectDate(focusedDate);\n        }\n        return;\n      case KeyCode.right:\n        e.preventDefault();\n        updatedFocusDate = moveNextDay(focusedDate, isDateEnabled);\n        break;\n      case KeyCode.left:\n        e.preventDefault();\n        updatedFocusDate = movePrevDay(focusedDate, isDateEnabled);\n        break;\n      case KeyCode.up:\n        e.preventDefault();\n        updatedFocusDate = movePrevWeek(focusedDate, isDateEnabled);\n        break;\n      case KeyCode.down:\n        e.preventDefault();\n        updatedFocusDate = moveNextWeek(focusedDate, isDateEnabled);\n        break;\n      default:\n        return;\n    }\n\n    const updatedDateIsVisible = isVisible(updatedFocusDate, baseDate, isSingleGrid);\n\n    if (!updatedDateIsVisible) {\n      const newMonthIsOnLeftSide = !isSingleGrid && isBefore(updatedFocusDate, baseDate);\n\n      onChangeMonth(newMonthIsOnLeftSide ? addMonths(updatedFocusDate, 1) : updatedFocusDate);\n    }\n    onFocusedDateChange(updatedFocusDate);\n  };\n\n  useEffect(() => {\n    // focus current date if the focus is already inside the calendar\n    if (focusedDate !== null && gridHasFocus) {\n      if (focusedDateRef.current && focusedDateRef.current !== document.activeElement) {\n        focusedDateRef.current.focus();\n      }\n    }\n  }, [focusedDate, gridHasFocus]);\n\n  const onGridBlur = (event: React.FocusEvent) => {\n    /*\n     IE11 does not support event.relatedTarget, but sets document.activeElement to the newly\n     focused element before the onBlur handler is called.\n\n     However, other browsers do not make any guarantees for the value of document.activeElement\n     during the execution of an onBlur handler. Therefore, we have to use event.relatedTarget\n     instead.\n     */\n    const newFocusTarget = event.relatedTarget || document.activeElement;\n    const newFocusTargetIsInGrid = containerRef.current?.contains(newFocusTarget as Node);\n    if (newFocusTarget && !newFocusTargetIsInGrid && gridHasFocus) {\n      setGridHasFocus(false);\n    }\n  };\n\n  const onGridFocus = () => {\n    if (!gridHasFocus) {\n      setGridHasFocus(true);\n    }\n  };\n\n  const isRangeVisible = (selectedStartDate && selectedEndDate) || gridHasFocus;\n\n  const rangeEnds: Date[] = [selectedStartDate ?? focusedDate, selectedEndDate ?? focusedDate].filter(hasValue);\n\n  const rangeStartDate = min(rangeEnds);\n  const rangeEndDate = max(rangeEnds);\n\n  return (\n    <div ref={containerRef} onFocus={onGridFocus} onBlur={onGridBlur}>\n      <InternalSpaceBetween size=\"xs\" direction=\"horizontal\">\n        {!isSingleGrid && (\n          <Grid\n            className={styles['first-grid']}\n            baseDate={addMonths(baseDate, -1)}\n            selectedEndDate={selectedEndDate}\n            selectedStartDate={selectedStartDate}\n            rangeStartDate={isRangeVisible ? rangeStartDate : null}\n            rangeEndDate={isRangeVisible ? rangeEndDate : null}\n            focusedDate={focusedDate}\n            focusedDateRef={focusedDateRef}\n            isDateEnabled={isDateEnabled}\n            onSelectDate={onSelectDate}\n            onGridKeyDownHandler={onGridKeyDownHandler}\n            onFocusedDateChange={onFocusedDateChange}\n            locale={locale}\n            startOfWeek={startOfWeek}\n            todayAriaLabel={todayAriaLabel}\n            ariaLabelledby={`${headingIdPrefix}-prevmonth`}\n          />\n        )}\n        <Grid\n          className={styles['second-grid']}\n          baseDate={baseDate}\n          selectedEndDate={selectedEndDate}\n          selectedStartDate={selectedStartDate}\n          rangeStartDate={isRangeVisible ? rangeStartDate : null}\n          rangeEndDate={isRangeVisible ? rangeEndDate : null}\n          focusedDate={focusedDate}\n          focusedDateRef={focusedDateRef}\n          isDateEnabled={isDateEnabled}\n          onSelectDate={onSelectDate}\n          onGridKeyDownHandler={onGridKeyDownHandler}\n          onFocusedDateChange={onFocusedDateChange}\n          locale={locale}\n          startOfWeek={startOfWeek}\n          todayAriaLabel={todayAriaLabel}\n          ariaLabelledby={`${headingIdPrefix}-currentmonth`}\n        />\n      </InternalSpaceBetween>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}