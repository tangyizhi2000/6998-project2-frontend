{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport { InternalButton } from '../../button/internal';\nimport SplitPanel from './split-panel';\nimport TriggerButton from './trigger-button';\nimport { useAppLayoutInternals } from './context';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport OverflowMenu from '../drawer/overflow-menu';\nimport { splitItems } from '../drawer/drawers-helpers';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\n/**\n * The Drawers root component is mounted in the AppLayout index file. It will only\n * render if the drawers are defined, and it will take over the mounting of and\n * rendering of the Tools and SplitPanel (side position) if they exist. If drawers\n * do not exist then the Tools and SplitPanel will be handled by the Tools component.\n */\nexport default function Drawers() {\n  var _clsx;\n  var _useAppLayoutInternal = useAppLayoutInternals(),\n    disableBodyScroll = _useAppLayoutInternal.disableBodyScroll,\n    drawers = _useAppLayoutInternal.drawers,\n    drawersTriggerCount = _useAppLayoutInternal.drawersTriggerCount,\n    hasDrawerViewportOverlay = _useAppLayoutInternal.hasDrawerViewportOverlay,\n    hasOpenDrawer = _useAppLayoutInternal.hasOpenDrawer,\n    isNavigationOpen = _useAppLayoutInternal.isNavigationOpen,\n    navigationHide = _useAppLayoutInternal.navigationHide,\n    isMobile = _useAppLayoutInternal.isMobile;\n  var isUnfocusable = hasDrawerViewportOverlay && isNavigationOpen && !navigationHide;\n  if (!drawers || drawersTriggerCount === 0) {\n    return null;\n  }\n  return React.createElement(\"div\", {\n    className: clsx(styles['drawers-container'], (_clsx = {}, _defineProperty(_clsx, styles['disable-body-scroll'], disableBodyScroll), _defineProperty(_clsx, styles['has-open-drawer'], hasOpenDrawer), _defineProperty(_clsx, styles.unfocusable, isUnfocusable), _clsx))\n  }, React.createElement(SplitPanel.Side, null), React.createElement(ActiveDrawer, null), !isMobile && React.createElement(DesktopTriggers, null));\n}\nfunction ActiveDrawer() {\n  var _clsx2, _clsx3;\n  var _a, _b, _c, _d;\n  var _useAppLayoutInternal2 = useAppLayoutInternals(),\n    activeDrawerId = _useAppLayoutInternal2.activeDrawerId,\n    ariaLabels = _useAppLayoutInternal2.ariaLabels,\n    drawers = _useAppLayoutInternal2.drawers,\n    drawersRefs = _useAppLayoutInternal2.drawersRefs,\n    handleDrawersClick = _useAppLayoutInternal2.handleDrawersClick,\n    handleToolsClick = _useAppLayoutInternal2.handleToolsClick,\n    hasDrawerViewportOverlay = _useAppLayoutInternal2.hasDrawerViewportOverlay,\n    isMobile = _useAppLayoutInternal2.isMobile,\n    isNavigationOpen = _useAppLayoutInternal2.isNavigationOpen,\n    navigationHide = _useAppLayoutInternal2.navigationHide,\n    loseDrawersFocus = _useAppLayoutInternal2.loseDrawersFocus,\n    resizeHandle = _useAppLayoutInternal2.resizeHandle,\n    drawerSize = _useAppLayoutInternal2.drawerSize,\n    drawersMaxWidth = _useAppLayoutInternal2.drawersMaxWidth,\n    drawerRef = _useAppLayoutInternal2.drawerRef;\n  var activeDrawer = (_a = drawers === null || drawers === void 0 ? void 0 : drawers.find(function (item) {\n    return item.id === activeDrawerId;\n  })) !== null && _a !== void 0 ? _a : null;\n  var MIN_WIDTH = 290;\n  var computedAriaLabels = {\n    closeButton: activeDrawerId ? (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,\n    content: activeDrawerId ? (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.content : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools\n  };\n  var isHidden = !activeDrawerId;\n  var isUnfocusable = isHidden || hasDrawerViewportOverlay && isNavigationOpen && !navigationHide;\n  var isToolsDrawer = activeDrawerId === TOOLS_DRAWER_ID;\n  var toolsContent = (_d = drawers === null || drawers === void 0 ? void 0 : drawers.find(function (drawer) {\n    return drawer.id === TOOLS_DRAWER_ID;\n  })) === null || _d === void 0 ? void 0 : _d.content;\n  var size = Math.max(Math.min(drawersMaxWidth, drawerSize), MIN_WIDTH);\n  return React.createElement(\"aside\", {\n    id: activeDrawerId,\n    \"aria-hidden\": isHidden,\n    \"aria-label\": computedAriaLabels.content,\n    className: clsx(styles.drawer, (_clsx2 = {}, _defineProperty(_clsx2, styles['is-drawer-open'], activeDrawerId), _defineProperty(_clsx2, styles.unfocusable, isUnfocusable), _defineProperty(_clsx2, testutilStyles['active-drawer'], activeDrawerId), _defineProperty(_clsx2, testutilStyles.tools, isToolsDrawer), _clsx2)),\n    style: Object.assign({}, !isMobile && drawerSize && _defineProperty({}, customCssProps.drawerSize, \"\".concat(size, \"px\"))),\n    ref: drawerRef,\n    onBlur: function onBlur(e) {\n      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n        loseDrawersFocus();\n      }\n    }\n  }, !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && resizeHandle, React.createElement(\"div\", {\n    className: styles['drawer-content-container']\n  }, React.createElement(\"div\", {\n    className: clsx(styles['drawer-close-button'])\n  }, React.createElement(InternalButton, {\n    ariaLabel: computedAriaLabels.closeButton,\n    className: clsx((_clsx3 = {}, _defineProperty(_clsx3, testutilStyles['active-drawer-close-button'], activeDrawerId), _defineProperty(_clsx3, testutilStyles['tools-close'], isToolsDrawer), _clsx3)),\n    formAction: \"none\",\n    iconName: isMobile ? 'close' : 'angle-right',\n    onClick: function onClick() {\n      handleDrawersClick(activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : undefined);\n      handleToolsClick(false);\n    },\n    ref: drawersRefs.close,\n    variant: \"icon\"\n  })), toolsContent && React.createElement(\"div\", {\n    className: clsx(styles['drawer-content'], activeDrawerId !== TOOLS_DRAWER_ID && styles['drawer-content-hidden'])\n  }, toolsContent), activeDrawerId !== TOOLS_DRAWER_ID && React.createElement(\"div\", {\n    className: styles['drawer-content']\n  }, activeDrawerId && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content))));\n}\n/**\n * The DesktopTriggers will render the trigger buttons for Tools, Drawers, and the\n * SplitPanel in non mobile viewports. Changes to the activeDrawerId need to be\n * tracked by the previousActiveDrawerId property in order to appropriately apply\n * the ref required to manage focus control.\n */\nfunction DesktopTriggers() {\n  var _clsx4, _clsx5;\n  var _useAppLayoutInternal3 = useAppLayoutInternals(),\n    activeDrawerId = _useAppLayoutInternal3.activeDrawerId,\n    drawers = _useAppLayoutInternal3.drawers,\n    drawersAriaLabel = _useAppLayoutInternal3.drawersAriaLabel,\n    drawersOverflowAriaLabel = _useAppLayoutInternal3.drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel = _useAppLayoutInternal3.drawersOverflowWithBadgeAriaLabel,\n    drawersRefs = _useAppLayoutInternal3.drawersRefs,\n    drawersTriggerCount = _useAppLayoutInternal3.drawersTriggerCount,\n    handleDrawersClick = _useAppLayoutInternal3.handleDrawersClick,\n    handleSplitPanelClick = _useAppLayoutInternal3.handleSplitPanelClick,\n    hasOpenDrawer = _useAppLayoutInternal3.hasOpenDrawer,\n    isSplitPanelOpen = _useAppLayoutInternal3.isSplitPanelOpen,\n    splitPanel = _useAppLayoutInternal3.splitPanel,\n    splitPanelControlId = _useAppLayoutInternal3.splitPanelControlId,\n    splitPanelDisplayed = _useAppLayoutInternal3.splitPanelDisplayed,\n    splitPanelPosition = _useAppLayoutInternal3.splitPanelPosition,\n    splitPanelRefs = _useAppLayoutInternal3.splitPanelRefs,\n    splitPanelToggle = _useAppLayoutInternal3.splitPanelToggle,\n    splitPanelReportedHeaderHeight = _useAppLayoutInternal3.splitPanelReportedHeaderHeight,\n    splitPanelReportedSize = _useAppLayoutInternal3.splitPanelReportedSize;\n  var hasMultipleTriggers = drawersTriggerCount > 1;\n  var hasSplitPanel = splitPanel && splitPanelDisplayed && splitPanelPosition === 'side';\n  var previousActiveDrawerId = useRef(activeDrawerId);\n  var _useContainerQuery = useContainerQuery(function (rect) {\n      return rect.contentBoxHeight;\n    }),\n    _useContainerQuery2 = _slicedToArray(_useContainerQuery, 2),\n    containerHeight = _useContainerQuery2[0],\n    triggersContainerRef = _useContainerQuery2[1];\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n  var splitPanelHeight = isSplitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : splitPanelReportedHeaderHeight;\n  var getIndexOfOverflowItem = function getIndexOfOverflowItem() {\n    if (containerHeight) {\n      var ITEM_HEIGHT = 48;\n      var overflowSpot = activeDrawerId && isSplitPanelOpen ? (containerHeight - splitPanelReportedHeaderHeight) / 1.5 : (containerHeight - splitPanelHeight) / 1.5;\n      var index = Math.floor(overflowSpot / ITEM_HEIGHT);\n      var splitPanelItem = 0;\n      if (hasSplitPanel && splitPanelToggle.displayed) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n    return 0;\n  };\n  var _splitItems = splitItems(drawers !== null && drawers !== void 0 ? drawers : undefined, getIndexOfOverflowItem(), activeDrawerId),\n    visibleItems = _splitItems.visibleItems,\n    overflowItems = _splitItems.overflowItems;\n  var overflowMenuHasBadge = !!overflowItems.find(function (item) {\n    return item.badge;\n  });\n  return React.createElement(\"aside\", {\n    className: clsx(styles['drawers-desktop-triggers-container'], (_clsx4 = {}, _defineProperty(_clsx4, styles['has-multiple-triggers'], hasMultipleTriggers), _defineProperty(_clsx4, styles['has-open-drawer'], hasOpenDrawer), _clsx4)),\n    \"aria-label\": drawersAriaLabel,\n    ref: triggersContainerRef,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles['drawers-trigger-content'], (_clsx5 = {}, _defineProperty(_clsx5, styles['has-multiple-triggers'], hasMultipleTriggers), _defineProperty(_clsx5, styles['has-open-drawer'], hasOpenDrawer), _clsx5)),\n    role: \"toolbar\",\n    \"aria-orientation\": \"vertical\"\n  }, visibleItems.map(function (item) {\n    var _a;\n    return React.createElement(TriggerButton, {\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      ariaExpanded: item.id === activeDrawerId,\n      ariaControls: activeDrawerId === item.id ? item.id : undefined,\n      className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']),\n      iconName: item.trigger.iconName,\n      iconSvg: item.trigger.iconSvg,\n      key: item.id,\n      onClick: function onClick() {\n        return handleDrawersClick(item.id);\n      },\n      ref: item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined,\n      selected: item.id === activeDrawerId,\n      badge: item.badge,\n      testId: \"awsui-app-layout-trigger-\".concat(item.id)\n    });\n  }), overflowItems.length > 0 && React.createElement(OverflowMenu, {\n    items: overflowItems,\n    ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel,\n    customTriggerBuilder: function customTriggerBuilder(_ref2) {\n      var onClick = _ref2.onClick,\n        triggerRef = _ref2.triggerRef,\n        ariaLabel = _ref2.ariaLabel,\n        ariaExpanded = _ref2.ariaExpanded,\n        testUtilsClass = _ref2.testUtilsClass;\n      return React.createElement(TriggerButton, {\n        ref: triggerRef,\n        ariaLabel: ariaLabel,\n        ariaExpanded: ariaExpanded,\n        badge: overflowMenuHasBadge,\n        className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testUtilsClass),\n        iconName: \"ellipsis\",\n        onClick: onClick\n      });\n    },\n    onItemClick: function onItemClick(_ref3) {\n      var detail = _ref3.detail;\n      handleDrawersClick(detail.id);\n    }\n  }), hasSplitPanel && splitPanelToggle.displayed && React.createElement(TriggerButton, {\n    ariaLabel: splitPanelToggle.ariaLabel,\n    ariaControls: splitPanelControlId,\n    ariaExpanded: !!isSplitPanelOpen,\n    className: clsx(styles['drawers-trigger'], splitPanelStyles['open-button']),\n    iconName: \"view-vertical\",\n    onClick: function onClick() {\n      return handleSplitPanelClick();\n    },\n    selected: hasSplitPanel && isSplitPanelOpen,\n    ref: splitPanelRefs.toggle\n  })));\n}\n/**\n * The MobileTriggers will be mounted inside of the AppBar component and\n * only rendered when Drawers are defined in mobile viewports. The same logic\n * will in the AppBar component will suppress the rendering of the legacy\n * trigger button for the Tools drawer.\n */\nexport function MobileTriggers() {\n  var _useAppLayoutInternal4 = useAppLayoutInternals(),\n    activeDrawerId = _useAppLayoutInternal4.activeDrawerId,\n    drawers = _useAppLayoutInternal4.drawers,\n    drawersAriaLabel = _useAppLayoutInternal4.drawersAriaLabel,\n    drawersOverflowAriaLabel = _useAppLayoutInternal4.drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel = _useAppLayoutInternal4.drawersOverflowWithBadgeAriaLabel,\n    drawersRefs = _useAppLayoutInternal4.drawersRefs,\n    handleDrawersClick = _useAppLayoutInternal4.handleDrawersClick,\n    hasDrawerViewportOverlay = _useAppLayoutInternal4.hasDrawerViewportOverlay;\n  var previousActiveDrawerId = useRef(activeDrawerId);\n  if (!drawers) {\n    return null;\n  }\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n  var _splitItems2 = splitItems(drawers, 2, activeDrawerId),\n    visibleItems = _splitItems2.visibleItems,\n    overflowItems = _splitItems2.overflowItems;\n  var overflowMenuHasBadge = !!overflowItems.find(function (item) {\n    return item.badge;\n  });\n  return React.createElement(\"aside\", {\n    \"aria-hidden\": hasDrawerViewportOverlay,\n    className: clsx(_defineProperty({}, styles.unfocusable, hasDrawerViewportOverlay)),\n    \"aria-label\": drawersAriaLabel,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles['drawers-mobile-triggers-container']),\n    role: \"toolbar\",\n    \"aria-orientation\": \"horizontal\"\n  }, visibleItems.map(function (item) {\n    var _a;\n    return React.createElement(InternalButton, {\n      ariaExpanded: item.id === activeDrawerId,\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']),\n      disabled: hasDrawerViewportOverlay,\n      ref: item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined,\n      formAction: \"none\",\n      iconName: item.trigger.iconName,\n      iconSvg: item.trigger.iconSvg,\n      badge: item.badge,\n      key: item.id,\n      onClick: function onClick() {\n        return handleDrawersClick(item.id);\n      },\n      variant: \"icon\",\n      __nativeAttributes: {\n        'aria-haspopup': true,\n        'data-testid': \"awsui-app-layout-trigger-\".concat(item.id)\n      }\n    });\n  }), overflowItems.length > 0 && React.createElement(OverflowMenu, {\n    items: overflowItems,\n    ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel,\n    onItemClick: function onItemClick(_ref4) {\n      var detail = _ref4.detail;\n      return handleDrawersClick(detail.id);\n    }\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","useRef","clsx","customCssProps","InternalButton","SplitPanel","TriggerButton","useAppLayoutInternals","splitPanelStyles","styles","testutilStyles","useContainerQuery","OverflowMenu","splitItems","TOOLS_DRAWER_ID","Drawers","disableBodyScroll","drawers","drawersTriggerCount","hasDrawerViewportOverlay","hasOpenDrawer","isNavigationOpen","navigationHide","isMobile","isUnfocusable","className","unfocusable","Side","ActiveDrawer","DesktopTriggers","activeDrawerId","ariaLabels","drawersRefs","handleDrawersClick","handleToolsClick","loseDrawersFocus","resizeHandle","drawerSize","drawersMaxWidth","drawerRef","activeDrawer","find","item","id","MIN_WIDTH","computedAriaLabels","closeButton","toolsClose","content","tools","isHidden","isToolsDrawer","toolsContent","drawer","size","Math","max","min","style","ref","onBlur","e","relatedTarget","currentTarget","contains","resizable","ariaLabel","formAction","iconName","onClick","undefined","close","variant","drawersAriaLabel","drawersOverflowAriaLabel","drawersOverflowWithBadgeAriaLabel","handleSplitPanelClick","isSplitPanelOpen","splitPanel","splitPanelControlId","splitPanelDisplayed","splitPanelPosition","splitPanelRefs","splitPanelToggle","splitPanelReportedHeaderHeight","splitPanelReportedSize","hasMultipleTriggers","hasSplitPanel","previousActiveDrawerId","rect","contentBoxHeight","containerHeight","triggersContainerRef","current","splitPanelHeight","getIndexOfOverflowItem","ITEM_HEIGHT","overflowSpot","index","floor","splitPanelItem","displayed","visibleItems","overflowItems","overflowMenuHasBadge","badge","role","map","triggerButton","ariaExpanded","ariaControls","trigger","iconSvg","key","toggle","selected","testId","length","items","customTriggerBuilder","triggerRef","testUtilsClass","onItemClick","detail","MobileTriggers","disabled","__nativeAttributes"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh/lib/default/app-layout/visual-refresh/drawers.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport { InternalButton } from '../../button/internal';\nimport SplitPanel from './split-panel';\nimport TriggerButton from './trigger-button';\nimport { useAppLayoutInternals } from './context';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport OverflowMenu from '../drawer/overflow-menu';\nimport { splitItems } from '../drawer/drawers-helpers';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\n\n/**\n * The Drawers root component is mounted in the AppLayout index file. It will only\n * render if the drawers are defined, and it will take over the mounting of and\n * rendering of the Tools and SplitPanel (side position) if they exist. If drawers\n * do not exist then the Tools and SplitPanel will be handled by the Tools component.\n */\nexport default function Drawers() {\n  const {\n    disableBodyScroll,\n    drawers,\n    drawersTriggerCount,\n    hasDrawerViewportOverlay,\n    hasOpenDrawer,\n    isNavigationOpen,\n    navigationHide,\n    isMobile,\n  } = useAppLayoutInternals();\n\n  const isUnfocusable = hasDrawerViewportOverlay && isNavigationOpen && !navigationHide;\n\n  if (!drawers || drawersTriggerCount === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className={clsx(styles['drawers-container'], {\n        [styles['disable-body-scroll']]: disableBodyScroll,\n        [styles['has-open-drawer']]: hasOpenDrawer,\n        [styles.unfocusable]: isUnfocusable,\n      })}\n    >\n      <SplitPanel.Side />\n      <ActiveDrawer />\n      {!isMobile && <DesktopTriggers />}\n    </div>\n  );\n}\n\nfunction ActiveDrawer() {\n  const {\n    activeDrawerId,\n    ariaLabels,\n    drawers,\n    drawersRefs,\n    handleDrawersClick,\n    handleToolsClick,\n    hasDrawerViewportOverlay,\n    isMobile,\n    isNavigationOpen,\n    navigationHide,\n    loseDrawersFocus,\n    resizeHandle,\n    drawerSize,\n    drawersMaxWidth,\n    drawerRef,\n  } = useAppLayoutInternals();\n\n  const activeDrawer = drawers?.find(item => item.id === activeDrawerId) ?? null;\n  const MIN_WIDTH = 290;\n\n  const computedAriaLabels = {\n    closeButton: activeDrawerId ? activeDrawer?.ariaLabels?.closeButton : ariaLabels?.toolsClose,\n    content: activeDrawerId ? activeDrawer?.ariaLabels?.content : ariaLabels?.tools,\n  };\n\n  const isHidden = !activeDrawerId;\n  const isUnfocusable = isHidden || (hasDrawerViewportOverlay && isNavigationOpen && !navigationHide);\n  const isToolsDrawer = activeDrawerId === TOOLS_DRAWER_ID;\n  const toolsContent = drawers?.find(drawer => drawer.id === TOOLS_DRAWER_ID)?.content;\n\n  const size = Math.max(Math.min(drawersMaxWidth, drawerSize), MIN_WIDTH);\n\n  return (\n    <aside\n      id={activeDrawerId}\n      aria-hidden={isHidden}\n      aria-label={computedAriaLabels.content}\n      className={clsx(styles.drawer, {\n        [styles['is-drawer-open']]: activeDrawerId,\n        [styles.unfocusable]: isUnfocusable,\n        [testutilStyles['active-drawer']]: activeDrawerId,\n        [testutilStyles.tools]: isToolsDrawer,\n      })}\n      style={{\n        ...(!isMobile && drawerSize && { [customCssProps.drawerSize]: `${size}px` }),\n      }}\n      ref={drawerRef}\n      onBlur={e => {\n        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n          loseDrawersFocus();\n        }\n      }}\n    >\n      {!isMobile && activeDrawer?.resizable && resizeHandle}\n      <div className={styles['drawer-content-container']}>\n        <div className={clsx(styles['drawer-close-button'])}>\n          <InternalButton\n            ariaLabel={computedAriaLabels.closeButton}\n            className={clsx({\n              [testutilStyles['active-drawer-close-button']]: activeDrawerId,\n              [testutilStyles['tools-close']]: isToolsDrawer,\n            })}\n            formAction=\"none\"\n            iconName={isMobile ? 'close' : 'angle-right'}\n            onClick={() => {\n              handleDrawersClick(activeDrawerId ?? undefined);\n              handleToolsClick(false);\n            }}\n            ref={drawersRefs.close}\n            variant=\"icon\"\n          />\n        </div>\n        {toolsContent && (\n          <div\n            className={clsx(\n              styles['drawer-content'],\n              activeDrawerId !== TOOLS_DRAWER_ID && styles['drawer-content-hidden']\n            )}\n          >\n            {toolsContent}\n          </div>\n        )}\n        {activeDrawerId !== TOOLS_DRAWER_ID && (\n          <div className={styles['drawer-content']}>{activeDrawerId && activeDrawer?.content}</div>\n        )}\n      </div>\n    </aside>\n  );\n}\n\n/**\n * The DesktopTriggers will render the trigger buttons for Tools, Drawers, and the\n * SplitPanel in non mobile viewports. Changes to the activeDrawerId need to be\n * tracked by the previousActiveDrawerId property in order to appropriately apply\n * the ref required to manage focus control.\n */\nfunction DesktopTriggers() {\n  const {\n    activeDrawerId,\n    drawers,\n    drawersAriaLabel,\n    drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel,\n    drawersRefs,\n    drawersTriggerCount,\n    handleDrawersClick,\n    handleSplitPanelClick,\n    hasOpenDrawer,\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelControlId,\n    splitPanelDisplayed,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelToggle,\n    splitPanelReportedHeaderHeight,\n    splitPanelReportedSize,\n  } = useAppLayoutInternals();\n\n  const hasMultipleTriggers = drawersTriggerCount > 1;\n  const hasSplitPanel = splitPanel && splitPanelDisplayed && splitPanelPosition === 'side';\n\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  const [containerHeight, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxHeight);\n\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n\n  const splitPanelHeight =\n    isSplitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : splitPanelReportedHeaderHeight;\n\n  const getIndexOfOverflowItem = () => {\n    if (containerHeight) {\n      const ITEM_HEIGHT = 48;\n      const overflowSpot =\n        activeDrawerId && isSplitPanelOpen\n          ? (containerHeight - splitPanelReportedHeaderHeight) / 1.5\n          : (containerHeight - splitPanelHeight) / 1.5;\n\n      const index = Math.floor(overflowSpot / ITEM_HEIGHT);\n\n      let splitPanelItem = 0;\n      if (hasSplitPanel && splitPanelToggle.displayed) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n\n    return 0;\n  };\n\n  const { visibleItems, overflowItems } = splitItems(drawers ?? undefined, getIndexOfOverflowItem(), activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <aside\n      className={clsx(styles['drawers-desktop-triggers-container'], {\n        [styles['has-multiple-triggers']]: hasMultipleTriggers,\n        [styles['has-open-drawer']]: hasOpenDrawer,\n      })}\n      aria-label={drawersAriaLabel}\n      ref={triggersContainerRef}\n      role=\"region\"\n    >\n      <div\n        className={clsx(styles['drawers-trigger-content'], {\n          [styles['has-multiple-triggers']]: hasMultipleTriggers,\n          [styles['has-open-drawer']]: hasOpenDrawer,\n        })}\n        role=\"toolbar\"\n        aria-orientation=\"vertical\"\n      >\n        {visibleItems.map(item => {\n          return (\n            <TriggerButton\n              ariaLabel={item.ariaLabels?.triggerButton}\n              ariaExpanded={item.id === activeDrawerId}\n              ariaControls={activeDrawerId === item.id ? item.id : undefined}\n              className={clsx(\n                styles['drawers-trigger'],\n                testutilStyles['drawers-trigger'],\n                item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n              )}\n              iconName={item.trigger.iconName}\n              iconSvg={item.trigger.iconSvg}\n              key={item.id}\n              onClick={() => handleDrawersClick(item.id)}\n              ref={item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined}\n              selected={item.id === activeDrawerId}\n              badge={item.badge}\n              testId={`awsui-app-layout-trigger-${item.id}`}\n            />\n          );\n        })}\n\n        {overflowItems.length > 0 && (\n          <OverflowMenu\n            items={overflowItems}\n            ariaLabel={overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel}\n            customTriggerBuilder={({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => (\n              <TriggerButton\n                ref={triggerRef}\n                ariaLabel={ariaLabel}\n                ariaExpanded={ariaExpanded}\n                badge={overflowMenuHasBadge}\n                className={clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testUtilsClass)}\n                iconName=\"ellipsis\"\n                onClick={onClick}\n              />\n            )}\n            onItemClick={({ detail }) => {\n              handleDrawersClick(detail.id);\n            }}\n          />\n        )}\n        {hasSplitPanel && splitPanelToggle.displayed && (\n          <TriggerButton\n            ariaLabel={splitPanelToggle.ariaLabel}\n            ariaControls={splitPanelControlId}\n            ariaExpanded={!!isSplitPanelOpen}\n            className={clsx(styles['drawers-trigger'], splitPanelStyles['open-button'])}\n            iconName=\"view-vertical\"\n            onClick={() => handleSplitPanelClick()}\n            selected={hasSplitPanel && isSplitPanelOpen}\n            ref={splitPanelRefs.toggle}\n          />\n        )}\n      </div>\n    </aside>\n  );\n}\n\n/**\n * The MobileTriggers will be mounted inside of the AppBar component and\n * only rendered when Drawers are defined in mobile viewports. The same logic\n * will in the AppBar component will suppress the rendering of the legacy\n * trigger button for the Tools drawer.\n */\nexport function MobileTriggers() {\n  const {\n    activeDrawerId,\n    drawers,\n    drawersAriaLabel,\n    drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel,\n    drawersRefs,\n    handleDrawersClick,\n    hasDrawerViewportOverlay,\n  } = useAppLayoutInternals();\n\n  const previousActiveDrawerId = useRef(activeDrawerId);\n\n  if (!drawers) {\n    return null;\n  }\n\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n\n  const { visibleItems, overflowItems } = splitItems(drawers, 2, activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <aside\n      aria-hidden={hasDrawerViewportOverlay}\n      className={clsx({\n        [styles.unfocusable]: hasDrawerViewportOverlay,\n      })}\n      aria-label={drawersAriaLabel}\n      role=\"region\"\n    >\n      <div className={clsx(styles['drawers-mobile-triggers-container'])} role=\"toolbar\" aria-orientation=\"horizontal\">\n        {visibleItems.map(item => (\n          <InternalButton\n            ariaExpanded={item.id === activeDrawerId}\n            ariaLabel={item.ariaLabels?.triggerButton}\n            className={clsx(\n              styles['drawers-trigger'],\n              testutilStyles['drawers-trigger'],\n              item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n            )}\n            disabled={hasDrawerViewportOverlay}\n            ref={item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined}\n            formAction=\"none\"\n            iconName={item.trigger.iconName}\n            iconSvg={item.trigger.iconSvg}\n            badge={item.badge}\n            key={item.id}\n            onClick={() => handleDrawersClick(item.id)}\n            variant=\"icon\"\n            __nativeAttributes={{ 'aria-haspopup': true, 'data-testid': `awsui-app-layout-trigger-${item.id}` }}\n          />\n        ))}\n        {overflowItems.length > 0 && (\n          <OverflowMenu\n            items={overflowItems}\n            ariaLabel={overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel}\n            onItemClick={({ detail }) => handleDrawersClick(detail.id)}\n          />\n        )}\n      </div>\n    </aside>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}