{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef } from 'react';\nimport { fireNonCancelableEvent } from '../internal/events/index';\n/**\n * This hook generates `onBlur`, `onFocus` and `onLoadItems` handlers that make sure an `onLoadItems` event\n * fires exactly once every time control they are used on gets focused.\n * It is necessary to do this because Autosuggest and Select dedupe their `onLoadItems` events stopping\n * the same event from firing twice in a row. This means, refocusing the control sometimes results in\n * `onLoadItems` firing, but sometimes not.\n */\nexport const useLoadItems = (onLoadItems, focusFilteringText, currentFilteringProperty, currentFilteringText, currentFilteringOperator) => {\n  const focusIn = useRef(false);\n  const handleBlur = () => {\n    focusIn.current = true;\n  };\n  const fireLoadItems = detail => {\n    var _a;\n    fireNonCancelableEvent(onLoadItems, Object.assign(Object.assign({}, detail), {\n      filteringText: (_a = currentFilteringText !== null && currentFilteringText !== void 0 ? currentFilteringText : detail.filteringText) !== null && _a !== void 0 ? _a : '',\n      filteringProperty: currentFilteringProperty,\n      filteringOperator: currentFilteringOperator\n    }));\n    focusIn.current = false;\n  };\n  const handleFocus = () => {\n    if (focusIn.current) {\n      fireLoadItems({\n        firstPage: true,\n        samePage: false,\n        filteringText: focusFilteringText\n      });\n    }\n  };\n  const handleLoadItems = _ref => {\n    let {\n      detail\n    } = _ref;\n    return fireLoadItems(detail);\n  };\n  return {\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onLoadItems: handleLoadItems\n  };\n};","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,MAAM,QAAQ,OAAO;AAE9B,SAASC,sBAAsB,QAAmC,0BAA0B;AAK5F;;;;;;;AAOA,OAAO,MAAMC,YAAY,GAAG,CAC1BC,WAAwD,EACxDC,kBAA2B,EAC3BC,wBAA4C,EAC5CC,oBAA6B,EAC7BC,wBAA6C,KAC3C;EACF,MAAMC,OAAO,GAAGR,MAAM,CAAU,KAAK,CAAC;EACtC,MAAMS,UAAU,GAAG,MAAK;IACtBD,OAAO,CAACE,OAAO,GAAG,IAAI;EACxB,CAAC;EACD,MAAMC,aAAa,GAAIC,MAAyE,IAAI;;IAClGX,sBAAsB,CAACE,WAAW,kCAC7BS,MAAM;MACTC,aAAa,EAAE,0BAAoB,aAApBP,oBAAoB,cAApBA,oBAAoB,GAAIM,MAAM,CAACC,aAAa,mCAAI,EAAE;MACjEC,iBAAiB,EAAET,wBAAwB;MAC3CU,iBAAiB,EAAER;IAAwB,GAC3C;IACFC,OAAO,CAACE,OAAO,GAAG,KAAK;EACzB,CAAC;EACD,MAAMM,WAAW,GAAG,MAAK;IACvB,IAAIR,OAAO,CAACE,OAAO,EAAE;MACnBC,aAAa,CAAC;QAAEM,SAAS,EAAE,IAAI;QAAEC,QAAQ,EAAE,KAAK;QAAEL,aAAa,EAAET;MAAkB,CAAE,CAAC;;EAE1F,CAAC;EACD,MAAMe,eAAe,GAAgE;IAAA,IAAC;MAAEP;IAAM,CAAE;IAAA,OAC9FD,aAAa,CAACC,MAAM,CAAC;EAAA;EACvB,OAAO;IACLQ,MAAM,EAAEX,UAAU;IAClBY,OAAO,EAAEL,WAAW;IACpBb,WAAW,EAAEgB;GACd;AACH,CAAC","names":["useRef","fireNonCancelableEvent","useLoadItems","onLoadItems","focusFilteringText","currentFilteringProperty","currentFilteringText","currentFilteringOperator","focusIn","handleBlur","current","fireLoadItems","detail","filteringText","filteringProperty","filteringOperator","handleFocus","firstPage","samePage","handleLoadItems","onBlur","onFocus"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/property-filter/lib/default/property-filter/use-load-items.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef } from 'react';\n\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../internal/events/index';\nimport { AutosuggestProps } from '../autosuggest/interfaces';\n\nimport { ComparisonOperator, FilteringProperty, LoadItemsDetail } from './interfaces';\n\n/**\n * This hook generates `onBlur`, `onFocus` and `onLoadItems` handlers that make sure an `onLoadItems` event\n * fires exactly once every time control they are used on gets focused.\n * It is necessary to do this because Autosuggest and Select dedupe their `onLoadItems` events stopping\n * the same event from firing twice in a row. This means, refocusing the control sometimes results in\n * `onLoadItems` firing, but sometimes not.\n */\nexport const useLoadItems = (\n  onLoadItems?: NonCancelableEventHandler<LoadItemsDetail>,\n  focusFilteringText?: string,\n  currentFilteringProperty?: FilteringProperty,\n  currentFilteringText?: string,\n  currentFilteringOperator?: ComparisonOperator\n) => {\n  const focusIn = useRef<boolean>(false);\n  const handleBlur = () => {\n    focusIn.current = true;\n  };\n  const fireLoadItems = (detail: { firstPage: boolean; samePage: boolean; filteringText?: string }) => {\n    fireNonCancelableEvent(onLoadItems, {\n      ...detail,\n      filteringText: currentFilteringText ?? detail.filteringText ?? '',\n      filteringProperty: currentFilteringProperty,\n      filteringOperator: currentFilteringOperator,\n    });\n    focusIn.current = false;\n  };\n  const handleFocus = () => {\n    if (focusIn.current) {\n      fireLoadItems({ firstPage: true, samePage: false, filteringText: focusFilteringText });\n    }\n  };\n  const handleLoadItems: NonCancelableEventHandler<AutosuggestProps.LoadItemsDetail> = ({ detail }) =>\n    fireLoadItems(detail);\n  return {\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onLoadItems: handleLoadItems,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}