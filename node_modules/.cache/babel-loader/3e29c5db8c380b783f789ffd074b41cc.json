{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isItemGroup } from './utils';\nexport default function createItemsTree(items) {\n  const itemToIndex = new Map();\n  const indexToItem = new Map();\n  const flatIndices = [];\n  traverseItems(items, (item, index) => {\n    const indexKey = stringifyIndex(index);\n    itemToIndex.set(item, indexKey);\n    indexToItem.set(indexKey, item);\n    flatIndices.push(indexKey);\n  });\n  return {\n    getItem: index => {\n      const indexKey = stringifyIndex(index);\n      return indexToItem.get(indexKey) || null;\n    },\n    getItemIndex: item => {\n      const indexKey = itemToIndex.get(item);\n      if (!indexKey) {\n        throw new Error('Invariant violation: item is not found.');\n      }\n      return parseIndex(indexKey);\n    },\n    getSequentialIndex: (index, direction) => {\n      const indexKey = stringifyIndex(index);\n      const position = flatIndices.indexOf(indexKey);\n      const nextIndexKey = flatIndices[position + direction];\n      if (!nextIndexKey) {\n        return null;\n      }\n      return parseIndex(nextIndexKey);\n    },\n    getParentIndex: item => {\n      const indexKey = itemToIndex.get(item);\n      if (!indexKey) {\n        throw new Error('Invariant violation: item is not found.');\n      }\n      const index = parseIndex(indexKey);\n      // No parent\n      if (index.length === 1) {\n        return null;\n      }\n      return index.slice(0, index.length - 1);\n    }\n  };\n}\nfunction traverseItems(items, act) {\n  let parentIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  items.forEach((item, index) => {\n    const itemIndex = [...parentIndex, index];\n    act(item, itemIndex);\n    if (isItemGroup(item)) {\n      traverseItems(item.items, act, itemIndex);\n    }\n  });\n}\nfunction stringifyIndex(index) {\n  return index.join('-');\n}\nfunction parseIndex(index) {\n  return index.split('-').map(it => parseInt(it));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,WAAW,QAAQ,SAAS;AAqBrC,eAAc,SAAUC,eAAe,CAACC,KAAgC;EACtE,MAAMC,WAAW,GAAG,IAAIC,GAAG,EAA2C;EACtE,MAAMC,WAAW,GAAG,IAAID,GAAG,EAA2C;EACtE,MAAME,WAAW,GAAa,EAAE;EAEhCC,aAAa,CAACL,KAAK,EAAE,CAACM,IAAI,EAAEC,KAAK,KAAI;IACnC,MAAMC,QAAQ,GAAGC,cAAc,CAACF,KAAK,CAAC;IACtCN,WAAW,CAACS,GAAG,CAACJ,IAAI,EAAEE,QAAQ,CAAC;IAC/BL,WAAW,CAACO,GAAG,CAACF,QAAQ,EAAEF,IAAI,CAAC;IAC/BF,WAAW,CAACO,IAAI,CAACH,QAAQ,CAAC;EAC5B,CAAC,CAAC;EAEF,OAAO;IACLI,OAAO,EAAGL,KAAgB,IAA4C;MACpE,MAAMC,QAAQ,GAAGC,cAAc,CAACF,KAAK,CAAC;MAEtC,OAAOJ,WAAW,CAACU,GAAG,CAACL,QAAQ,CAAC,IAAI,IAAI;IAC1C,CAAC;IACDM,YAAY,EAAGR,IAAqC,IAAe;MACjE,MAAME,QAAQ,GAAGP,WAAW,CAACY,GAAG,CAACP,IAAI,CAAC;MAEtC,IAAI,CAACE,QAAQ,EAAE;QACb,MAAM,IAAIO,KAAK,CAAC,yCAAyC,CAAC;;MAG5D,OAAOC,UAAU,CAACR,QAAQ,CAAC;IAC7B,CAAC;IACDS,kBAAkB,EAAE,CAACV,KAAgB,EAAEW,SAAiB,KAAsB;MAC5E,MAAMV,QAAQ,GAAGC,cAAc,CAACF,KAAK,CAAC;MACtC,MAAMY,QAAQ,GAAGf,WAAW,CAACgB,OAAO,CAACZ,QAAQ,CAAC;MAE9C,MAAMa,YAAY,GAAGjB,WAAW,CAACe,QAAQ,GAAGD,SAAS,CAAC;MAEtD,IAAI,CAACG,YAAY,EAAE;QACjB,OAAO,IAAI;;MAGb,OAAOL,UAAU,CAACK,YAAY,CAAC;IACjC,CAAC;IACDC,cAAc,EAAGhB,IAAqC,IAAsB;MAC1E,MAAME,QAAQ,GAAGP,WAAW,CAACY,GAAG,CAACP,IAAI,CAAC;MAEtC,IAAI,CAACE,QAAQ,EAAE;QACb,MAAM,IAAIO,KAAK,CAAC,yCAAyC,CAAC;;MAG5D,MAAMR,KAAK,GAAGS,UAAU,CAACR,QAAQ,CAAC;MAElC;MACA,IAAID,KAAK,CAACgB,MAAM,KAAK,CAAC,EAAE;QACtB,OAAO,IAAI;;MAGb,OAAOhB,KAAK,CAACiB,KAAK,CAAC,CAAC,EAAEjB,KAAK,CAACgB,MAAM,GAAG,CAAC,CAAC;IACzC;GACD;AACH;AAEA,SAASlB,aAAa,CACpBL,KAAgC,EAChCyB,GAAsE,EAC3C;EAAA,IAA3BC,kFAAyB,EAAE;EAE3B1B,KAAK,CAAC2B,OAAO,CAAC,CAACrB,IAAI,EAAEC,KAAK,KAAI;IAC5B,MAAMqB,SAAS,GAAG,CAAC,GAAGF,WAAW,EAAEnB,KAAK,CAAC;IACzCkB,GAAG,CAACnB,IAAI,EAAEsB,SAAS,CAAC;IAEpB,IAAI9B,WAAW,CAACQ,IAAI,CAAC,EAAE;MACrBD,aAAa,CAACC,IAAI,CAACN,KAAK,EAAEyB,GAAG,EAAEG,SAAS,CAAC;;EAE7C,CAAC,CAAC;AACJ;AAEA,SAASnB,cAAc,CAACF,KAAgB;EACtC,OAAOA,KAAK,CAACsB,IAAI,CAAC,GAAG,CAAC;AACxB;AAEA,SAASb,UAAU,CAACT,KAAa;EAC/B,OAAOA,KAAK,CAACuB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,EAAE,IAAIC,QAAQ,CAACD,EAAE,CAAC,CAAC;AACjD","names":["isItemGroup","createItemsTree","items","itemToIndex","Map","indexToItem","flatIndices","traverseItems","item","index","indexKey","stringifyIndex","set","push","getItem","get","getItemIndex","Error","parseIndex","getSequentialIndex","direction","position","indexOf","nextIndexKey","getParentIndex","length","slice","act","parentIndex","forEach","itemIndex","join","split","map","it","parseInt"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/button-dropdown/utils/lib/default/button-dropdown/utils/create-items-tree.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isItemGroup } from './utils';\nimport { ButtonDropdownProps } from '../interfaces';\n\n// The function turns a tree of items into a structure optimized for lookup of\n// items and corresponding indices as well as iteration on indices in the given order.\n\n// As trees are multidimensional, the index is represented as an array\nexport type TreeIndex = number[];\n\ninterface ItemsTreeApi {\n  // Returns an item for the given tree index or null if not found\n  getItem: (index: TreeIndex) => ButtonDropdownProps.ItemOrGroup | null;\n  // Returns the tree index of the given item. The item must be present\n  // in the tree (referential comparison), or an error will be thrown\n  getItemIndex: (item: ButtonDropdownProps.ItemOrGroup) => TreeIndex;\n  // Returns the index of next or previous sequential node or null if out of bounds\n  getSequentialIndex: (index: TreeIndex, direction: -1 | 1) => TreeIndex | null;\n  // Returns parent tree index of a given item or null if no parent is present\n  getParentIndex: (item: ButtonDropdownProps.ItemOrGroup) => TreeIndex | null;\n}\n\nexport default function createItemsTree(items: ButtonDropdownProps.Items): ItemsTreeApi {\n  const itemToIndex = new Map<ButtonDropdownProps.ItemOrGroup, string>();\n  const indexToItem = new Map<string, ButtonDropdownProps.ItemOrGroup>();\n  const flatIndices: string[] = [];\n\n  traverseItems(items, (item, index) => {\n    const indexKey = stringifyIndex(index);\n    itemToIndex.set(item, indexKey);\n    indexToItem.set(indexKey, item);\n    flatIndices.push(indexKey);\n  });\n\n  return {\n    getItem: (index: TreeIndex): ButtonDropdownProps.ItemOrGroup | null => {\n      const indexKey = stringifyIndex(index);\n\n      return indexToItem.get(indexKey) || null;\n    },\n    getItemIndex: (item: ButtonDropdownProps.ItemOrGroup): TreeIndex => {\n      const indexKey = itemToIndex.get(item);\n\n      if (!indexKey) {\n        throw new Error('Invariant violation: item is not found.');\n      }\n\n      return parseIndex(indexKey);\n    },\n    getSequentialIndex: (index: TreeIndex, direction: -1 | 1): TreeIndex | null => {\n      const indexKey = stringifyIndex(index);\n      const position = flatIndices.indexOf(indexKey);\n\n      const nextIndexKey = flatIndices[position + direction];\n\n      if (!nextIndexKey) {\n        return null;\n      }\n\n      return parseIndex(nextIndexKey);\n    },\n    getParentIndex: (item: ButtonDropdownProps.ItemOrGroup): TreeIndex | null => {\n      const indexKey = itemToIndex.get(item);\n\n      if (!indexKey) {\n        throw new Error('Invariant violation: item is not found.');\n      }\n\n      const index = parseIndex(indexKey);\n\n      // No parent\n      if (index.length === 1) {\n        return null;\n      }\n\n      return index.slice(0, index.length - 1);\n    },\n  };\n}\n\nfunction traverseItems(\n  items: ButtonDropdownProps.Items,\n  act: (item: ButtonDropdownProps.ItemOrGroup, index: TreeIndex) => void,\n  parentIndex: TreeIndex = []\n) {\n  items.forEach((item, index) => {\n    const itemIndex = [...parentIndex, index];\n    act(item, itemIndex);\n\n    if (isItemGroup(item)) {\n      traverseItems(item.items, act, itemIndex);\n    }\n  });\n}\n\nfunction stringifyIndex(index: TreeIndex): string {\n  return index.join('-');\n}\n\nfunction parseIndex(index: string): TreeIndex {\n  return index.split('-').map(it => parseInt(it));\n}\n"]},"metadata":{},"sourceType":"module"}