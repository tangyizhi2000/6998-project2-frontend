{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Icon from '../../icon/internal';\nimport { TableTdElement } from './td-element';\nimport { InlineEditor } from './inline-editor';\nimport LiveRegion from '../../internal/components/live-region/index.js';\nimport { useInternalI18n } from '../../i18n/context';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nvar submitHandlerFallback = function submitHandlerFallback() {\n  throw new Error('The function `handleSubmit` is required for editable columns');\n};\nfunction TableCellEditable(_a) {\n  var _b, _c, _d;\n  var className = _a.className,\n    item = _a.item,\n    column = _a.column,\n    isEditing = _a.isEditing,\n    onEditStart = _a.onEditStart,\n    _onEditEnd = _a.onEditEnd,\n    submitEdit = _a.submitEdit,\n    ariaLabels = _a.ariaLabels,\n    isVisualRefresh = _a.isVisualRefresh,\n    _a$successfulEdit = _a.successfulEdit,\n    successfulEdit = _a$successfulEdit === void 0 ? false : _a$successfulEdit,\n    rest = __rest(_a, [\"className\", \"item\", \"column\", \"isEditing\", \"onEditStart\", \"onEditEnd\", \"submitEdit\", \"ariaLabels\", \"isVisualRefresh\", \"successfulEdit\"]);\n  var i18n = useInternalI18n('table');\n  var editActivateRef = useRef(null);\n  var tdNativeAttributes = {\n    'data-inline-editing-active': isEditing.toString()\n  };\n  var isFocusMoveNeededRef = useRef(false);\n  useEffect(function () {\n    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {\n      isFocusMoveNeededRef.current = false;\n      editActivateRef.current.focus();\n    }\n  }, [isEditing]);\n  // To improve the initial page render performance we only show the edit icon when necessary.\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    hasHover = _useState2[0],\n    setHasHover = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    hasFocus = _useState4[0],\n    setHasFocus = _useState4[1];\n  var showIcon = hasHover || hasFocus;\n  var prevSuccessfulEdit = usePrevious(successfulEdit);\n  var prevHasFocus = usePrevious(hasFocus);\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showSuccessIcon = _useState6[0],\n    setShowSuccessIcon = _useState6[1];\n  useEffect(function () {\n    // Hide the success icon after a successful edit, when cell loses focus.\n    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {\n      setShowSuccessIcon(false);\n    }\n    // Show success icon right after a successful edit, when `successfulEdit` switches to true.\n    if (successfulEdit && !prevSuccessfulEdit) {\n      setShowSuccessIcon(true);\n    }\n  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);\n  return React.createElement(TableTdElement, Object.assign({}, rest, {\n    nativeAttributes: tdNativeAttributes,\n    className: clsx(className, styles['body-cell-editable'], isEditing && styles['body-cell-edit-active'], showSuccessIcon && showIcon && styles['body-cell-has-success'], isVisualRefresh && styles['is-visual-refresh']),\n    onClick: !isEditing ? onEditStart : undefined,\n    onMouseEnter: function onMouseEnter() {\n      return setHasHover(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setHasHover(false);\n    }\n  }), isEditing ? React.createElement(InlineEditor, {\n    ariaLabels: ariaLabels,\n    column: column,\n    item: item,\n    onEditEnd: function onEditEnd(options) {\n      setShowSuccessIcon(false);\n      isFocusMoveNeededRef.current = options.refocusCell;\n      _onEditEnd(options.cancelled);\n    },\n    submitEdit: submitEdit !== null && submitEdit !== void 0 ? submitEdit : submitHandlerFallback\n  }) : React.createElement(React.Fragment, null, column.cell(item), showSuccessIcon && showIcon && React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: styles['body-cell-success'],\n    \"aria-label\": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column),\n    role: \"img\",\n    onMouseDown: function onMouseDown(e) {\n      // Prevent the editor's Button blur event to be fired when clicking the success icon.\n      // This prevents unfocusing the button and triggers the `TableTdElement` onClick event which initiates the edit mode.\n      e.preventDefault();\n    }\n  }, React.createElement(Icon, {\n    name: \"status-positive\",\n    variant: \"success\"\n  })), React.createElement(LiveRegion, null, i18n('ariaLabels.successfulEditLabel', (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column)))), React.createElement(\"button\", {\n    className: styles['body-cell-editor'],\n    \"aria-label\": (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column, item),\n    ref: editActivateRef,\n    onFocus: function onFocus() {\n      return setHasFocus(true);\n    },\n    onBlur: function onBlur() {\n      return setHasFocus(false);\n    }\n  }, showIcon && React.createElement(Icon, {\n    name: \"edit\"\n  }))));\n}\nexport function TableBodyCell(_a) {\n  var isEditable = _a.isEditable,\n    rest = __rest(_a, [\"isEditable\"]);\n  if (isEditable || rest.isEditing) {\n    return React.createElement(TableCellEditable, Object.assign({}, rest));\n  }\n  var column = rest.column,\n    item = rest.item;\n  return React.createElement(TableTdElement, Object.assign({}, rest), column.cell(item));\n}","map":{"version":3,"mappings":"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","names":["clsx","styles","React","useEffect","useRef","useState","Icon","TableTdElement","InlineEditor","LiveRegion","useInternalI18n","usePrevious","submitHandlerFallback","Error","TableCellEditable","_a","className","item","column","isEditing","onEditStart","onEditEnd","submitEdit","ariaLabels","isVisualRefresh","successfulEdit","rest","i18n","editActivateRef","tdNativeAttributes","toString","isFocusMoveNeededRef","current","focus","hasHover","setHasHover","hasFocus","setHasFocus","showIcon","prevSuccessfulEdit","prevHasFocus","showSuccessIcon","setShowSuccessIcon","nativeAttributes","onClick","undefined","onMouseEnter","onMouseLeave","options","refocusCell","cancelled","cell","successfulEditLabel","role","onMouseDown","e","preventDefault","name","variant","activateEditLabel","ref","onFocus","onBlur","TableBodyCell","isEditable"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/table/body-cell/lib/default/table/body-cell/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Icon from '../../icon/internal';\nimport { TableProps } from '../interfaces';\nimport { TableTdElement, TableTdElementProps } from './td-element';\nimport { InlineEditor } from './inline-editor';\nimport LiveRegion from '../../internal/components/live-region/index.js';\nimport { useInternalI18n } from '../../i18n/context';\nimport { usePrevious } from '../../internal/hooks/use-previous';\n\nconst submitHandlerFallback = () => {\n  throw new Error('The function `handleSubmit` is required for editable columns');\n};\n\ninterface TableBodyCellProps<ItemType> extends TableTdElementProps {\n  column: TableProps.ColumnDefinition<ItemType>;\n  item: ItemType;\n  isEditing: boolean;\n  successfulEdit?: boolean;\n  onEditStart: () => void;\n  onEditEnd: (cancelled: boolean) => void;\n  submitEdit?: TableProps.SubmitEditFunction<ItemType>;\n  ariaLabels: TableProps['ariaLabels'];\n}\n\nfunction TableCellEditable<ItemType>({\n  className,\n  item,\n  column,\n  isEditing,\n  onEditStart,\n  onEditEnd,\n  submitEdit,\n  ariaLabels,\n  isVisualRefresh,\n  successfulEdit = false,\n  ...rest\n}: TableBodyCellProps<ItemType>) {\n  const i18n = useInternalI18n('table');\n  const editActivateRef = useRef<HTMLButtonElement>(null);\n  const tdNativeAttributes = {\n    'data-inline-editing-active': isEditing.toString(),\n  };\n  const isFocusMoveNeededRef = useRef(false);\n\n  useEffect(() => {\n    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {\n      isFocusMoveNeededRef.current = false;\n      editActivateRef.current.focus();\n    }\n  }, [isEditing]);\n  // To improve the initial page render performance we only show the edit icon when necessary.\n  const [hasHover, setHasHover] = useState(false);\n  const [hasFocus, setHasFocus] = useState(false);\n  const showIcon = hasHover || hasFocus;\n\n  const prevSuccessfulEdit = usePrevious(successfulEdit);\n  const prevHasFocus = usePrevious(hasFocus);\n  const [showSuccessIcon, setShowSuccessIcon] = useState(false);\n\n  useEffect(() => {\n    // Hide the success icon after a successful edit, when cell loses focus.\n    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {\n      setShowSuccessIcon(false);\n    }\n    // Show success icon right after a successful edit, when `successfulEdit` switches to true.\n    if (successfulEdit && !prevSuccessfulEdit) {\n      setShowSuccessIcon(true);\n    }\n  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);\n\n  return (\n    <TableTdElement\n      {...rest}\n      nativeAttributes={tdNativeAttributes as TableTdElementProps['nativeAttributes']}\n      className={clsx(\n        className,\n        styles['body-cell-editable'],\n        isEditing && styles['body-cell-edit-active'],\n        showSuccessIcon && showIcon && styles['body-cell-has-success'],\n        isVisualRefresh && styles['is-visual-refresh']\n      )}\n      onClick={!isEditing ? onEditStart : undefined}\n      onMouseEnter={() => setHasHover(true)}\n      onMouseLeave={() => setHasHover(false)}\n    >\n      {isEditing ? (\n        <InlineEditor\n          ariaLabels={ariaLabels}\n          column={column}\n          item={item}\n          onEditEnd={options => {\n            setShowSuccessIcon(false);\n            isFocusMoveNeededRef.current = options.refocusCell;\n            onEditEnd(options.cancelled);\n          }}\n          submitEdit={submitEdit ?? submitHandlerFallback}\n        />\n      ) : (\n        <>\n          {column.cell(item)}\n          {showSuccessIcon && showIcon && (\n            <>\n              <span\n                className={styles['body-cell-success']}\n                aria-label={ariaLabels?.successfulEditLabel?.(column)}\n                role=\"img\"\n                onMouseDown={e => {\n                  // Prevent the editor's Button blur event to be fired when clicking the success icon.\n                  // This prevents unfocusing the button and triggers the `TableTdElement` onClick event which initiates the edit mode.\n                  e.preventDefault();\n                }}\n              >\n                <Icon name=\"status-positive\" variant=\"success\" />\n              </span>\n              <LiveRegion>\n                {i18n('ariaLabels.successfulEditLabel', ariaLabels?.successfulEditLabel?.(column))}\n              </LiveRegion>\n            </>\n          )}\n          <button\n            className={styles['body-cell-editor']}\n            aria-label={ariaLabels?.activateEditLabel?.(column, item)}\n            ref={editActivateRef}\n            onFocus={() => setHasFocus(true)}\n            onBlur={() => setHasFocus(false)}\n          >\n            {showIcon && <Icon name=\"edit\" />}\n          </button>\n        </>\n      )}\n    </TableTdElement>\n  );\n}\n\nexport function TableBodyCell<ItemType>({\n  isEditable,\n  ...rest\n}: TableBodyCellProps<ItemType> & { isEditable: boolean }) {\n  if (isEditable || rest.isEditing) {\n    return <TableCellEditable {...rest} />;\n  }\n  const { column, item } = rest;\n  return <TableTdElement {...rest}>{column.cell(item)}</TableTdElement>;\n}\n"]},"metadata":{},"sourceType":"module"}