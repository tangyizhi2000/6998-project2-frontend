{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport InternalAlert from './internal';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { FunnelMetrics } from '../internal/analytics';\nimport { useFunnel, useFunnelStep, useFunnelSubStep } from '../internal/analytics/hooks/use-funnel';\nimport { getNameFromSelector, getSubStepAllSelector } from '../internal/analytics/selectors';\nvar Alert = React.forwardRef(function (_a, ref) {\n  var _a$type = _a.type,\n    type = _a$type === void 0 ? 'info' : _a$type,\n    _a$visible = _a.visible,\n    visible = _a$visible === void 0 ? true : _a$visible,\n    props = __rest(_a, [\"type\", \"visible\"]);\n  var baseComponentProps = useBaseComponent('Alert');\n  var _useFunnel = useFunnel(),\n    funnelInteractionId = _useFunnel.funnelInteractionId,\n    submissionAttempt = _useFunnel.submissionAttempt,\n    funnelState = _useFunnel.funnelState,\n    errorCount = _useFunnel.errorCount;\n  var _useFunnelStep = useFunnelStep(),\n    stepNumber = _useFunnelStep.stepNumber,\n    stepNameSelector = _useFunnelStep.stepNameSelector;\n  var _useFunnelSubStep = useFunnelSubStep(),\n    subStepSelector = _useFunnelSubStep.subStepSelector,\n    subStepNameSelector = _useFunnelSubStep.subStepNameSelector;\n  useEffect(function () {\n    var _a, _b, _c;\n    if (funnelInteractionId && visible && type === 'error' && funnelState.current !== 'complete') {\n      var stepName = getNameFromSelector(stepNameSelector);\n      var subStepName = getNameFromSelector(subStepNameSelector);\n      errorCount.current++;\n      // We don't want to report an error if it is hidden, e.g. inside an Expandable Section.\n      var errorIsVisible = ((_c = (_b = (_a = baseComponentProps.__internalRootRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0) > 0;\n      if (errorIsVisible) {\n        if (subStepSelector) {\n          FunnelMetrics.funnelSubStepError({\n            funnelInteractionId: funnelInteractionId,\n            subStepSelector: subStepSelector,\n            subStepName: subStepName,\n            subStepNameSelector: subStepNameSelector,\n            stepNumber: stepNumber,\n            stepName: stepName,\n            stepNameSelector: stepNameSelector,\n            subStepAllSelector: getSubStepAllSelector()\n          });\n        } else {\n          FunnelMetrics.funnelError({\n            funnelInteractionId: funnelInteractionId\n          });\n        }\n      }\n      return function () {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        errorCount.current--;\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [funnelInteractionId, visible, submissionAttempt, errorCount]);\n  return React.createElement(InternalAlert, Object.assign({\n    type: type,\n    visible: visible\n  }, props, baseComponentProps, {\n    ref: ref\n  }));\n});\napplyDisplayName(Alert, 'Alert');\nexport default Alert;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,gBAAgB,QAAQ,sCAAsC;AAEvE,OAAOC,aAAa,MAAM,YAAY;AACtC,OAAOC,gBAAgB,MAAM,sCAAsC;AACnE,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,SAAS,EAAEC,aAAa,EAAEC,gBAAgB,QAAQ,wCAAwC;AACnG,SAASC,mBAAmB,EAAEC,qBAAqB,QAAQ,iCAAiC;AAI5F,IAAMC,KAAK,GAAGX,KAAK,CAACY,UAAU,CAC5B,UAACC,EAAuD,EAAEC,GAA8B,EAAI;gBAA5DD,EAAwB,CAArDE,IAAI;IAAJA,IAAI,wBAAG,MAAM;IAAA,aAAgBF,EAAwB,CAAtCG,OAAO;IAAPA,OAAO,2BAAG,IAAI;IAAKC,KAAK,cAAzC,mBAA2C,CAAF;EACxC,IAAMC,kBAAkB,GAAGd,gBAAgB,CAAC,OAAO,CAAC;EAEpD,iBAA4EE,SAAS,EAAE;IAA/Ea,mBAAmB,cAAnBA,mBAAmB;IAAEC,iBAAiB,cAAjBA,iBAAiB;IAAEC,WAAW,cAAXA,WAAW;IAAEC,UAAU,cAAVA,UAAU;EACvE,qBAAyCf,aAAa,EAAE;IAAhDgB,UAAU,kBAAVA,UAAU;IAAEC,gBAAgB,kBAAhBA,gBAAgB;EACpC,wBAAiDhB,gBAAgB,EAAE;IAA3DiB,eAAe,qBAAfA,eAAe;IAAEC,mBAAmB,qBAAnBA,mBAAmB;EAE5CzB,SAAS,CAAC,YAAK;;IACb,IAAIkB,mBAAmB,IAAIH,OAAO,IAAID,IAAI,KAAK,OAAO,IAAIM,WAAW,CAACM,OAAO,KAAK,UAAU,EAAE;MAC5F,IAAMC,QAAQ,GAAGnB,mBAAmB,CAACe,gBAAgB,CAAC;MACtD,IAAMK,WAAW,GAAGpB,mBAAmB,CAACiB,mBAAmB,CAAC;MAE5DJ,UAAU,CAACK,OAAO,EAAE;MAEpB;MACA,IAAMG,cAAc,GAAG,CAAC,oCAAkB,CAACC,iBAAiB,CAACJ,OAAO,0CAAEK,qBAAqB,EAAE,0CAAEC,KAAK,mCAAI,CAAC,IAAI,CAAC;MAE9G,IAAIH,cAAc,EAAE;QAClB,IAAIL,eAAe,EAAE;UACnBpB,aAAa,CAAC6B,kBAAkB,CAAC;YAC/Bf,mBAAmB,EAAnBA,mBAAmB;YACnBM,eAAe,EAAfA,eAAe;YACfI,WAAW,EAAXA,WAAW;YACXH,mBAAmB,EAAnBA,mBAAmB;YACnBH,UAAU,EAAVA,UAAU;YACVK,QAAQ,EAARA,QAAQ;YACRJ,gBAAgB,EAAhBA,gBAAgB;YAChBW,kBAAkB,EAAEzB,qBAAqB;WAC1C,CAAC;SACH,MAAM;UACLL,aAAa,CAAC+B,WAAW,CAAC;YACxBjB,mBAAmB,EAAnBA;WACD,CAAC;;;MAIN,OAAO,YAAK;QACV;QACAG,UAAU,CAACK,OAAO,EAAE;MACtB,CAAC;;IAGH;EACF,CAAC,EAAE,CAACR,mBAAmB,EAAEH,OAAO,EAAEI,iBAAiB,EAAEE,UAAU,CAAC,CAAC;EAEjE,OAAOtB,oBAACG,aAAa;IAACY,IAAI,EAAEA,IAAI;IAAEC,OAAO,EAAEA;EAAO,GAAMC,KAAK,EAAMC,kBAAkB;IAAEJ,GAAG,EAAEA;EAAG,GAAI;AACrG,CAAC,CACF;AAEDZ,gBAAgB,CAACS,KAAK,EAAE,OAAO,CAAC;AAChC,eAAeA,KAAK","names":["React","useEffect","applyDisplayName","InternalAlert","useBaseComponent","FunnelMetrics","useFunnel","useFunnelStep","useFunnelSubStep","getNameFromSelector","getSubStepAllSelector","Alert","forwardRef","_a","ref","type","visible","props","baseComponentProps","funnelInteractionId","submissionAttempt","funnelState","errorCount","stepNumber","stepNameSelector","subStepSelector","subStepNameSelector","current","stepName","subStepName","errorIsVisible","__internalRootRef","getBoundingClientRect","width","funnelSubStepError","subStepAllSelector","funnelError"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/alert/lib/default/alert/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { AlertProps } from './interfaces';\nimport InternalAlert from './internal';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { FunnelMetrics } from '../internal/analytics';\nimport { useFunnel, useFunnelStep, useFunnelSubStep } from '../internal/analytics/hooks/use-funnel';\nimport { getNameFromSelector, getSubStepAllSelector } from '../internal/analytics/selectors';\n\nexport { AlertProps };\n\nconst Alert = React.forwardRef(\n  ({ type = 'info', visible = true, ...props }: AlertProps, ref: React.Ref<AlertProps.Ref>) => {\n    const baseComponentProps = useBaseComponent('Alert');\n\n    const { funnelInteractionId, submissionAttempt, funnelState, errorCount } = useFunnel();\n    const { stepNumber, stepNameSelector } = useFunnelStep();\n    const { subStepSelector, subStepNameSelector } = useFunnelSubStep();\n\n    useEffect(() => {\n      if (funnelInteractionId && visible && type === 'error' && funnelState.current !== 'complete') {\n        const stepName = getNameFromSelector(stepNameSelector);\n        const subStepName = getNameFromSelector(subStepNameSelector);\n\n        errorCount.current++;\n\n        // We don't want to report an error if it is hidden, e.g. inside an Expandable Section.\n        const errorIsVisible = (baseComponentProps.__internalRootRef.current?.getBoundingClientRect()?.width ?? 0) > 0;\n\n        if (errorIsVisible) {\n          if (subStepSelector) {\n            FunnelMetrics.funnelSubStepError({\n              funnelInteractionId,\n              subStepSelector,\n              subStepName,\n              subStepNameSelector,\n              stepNumber,\n              stepName,\n              stepNameSelector,\n              subStepAllSelector: getSubStepAllSelector(),\n            });\n          } else {\n            FunnelMetrics.funnelError({\n              funnelInteractionId,\n            });\n          }\n        }\n\n        return () => {\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          errorCount.current--;\n        };\n      }\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [funnelInteractionId, visible, submissionAttempt, errorCount]);\n\n    return <InternalAlert type={type} visible={visible} {...props} {...baseComponentProps} ref={ref} />;\n  }\n);\n\napplyDisplayName(Alert, 'Alert');\nexport default Alert;\n"]},"metadata":{},"sourceType":"module"}