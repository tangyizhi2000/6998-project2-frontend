{"ast":null,"code":"import { isDataSeries, isXThreshold, isYThreshold, matchesX } from './utils';\n/**\n * Creates a list of all bar (and mixed) groups in the series with their scaled positions.\n */\nexport default function makeScaledBarGroups(series, xScale, plotWidth, plotHeight, axis) {\n  if (!xScale.isCategorical()) {\n    return [];\n  }\n  return xScale.domain.map(function (x) {\n    var scaledX = xScale.d3Scale(x);\n    var isValid = typeof scaledX !== 'undefined' && isFinite(scaledX);\n    return {\n      x: x,\n      isValid: isValid,\n      hasData: series.some(function (_ref) {\n        var series = _ref.series;\n        // If there is a threshold series, every valid group will have a data point.\n        if (isYThreshold(series)) {\n          return true;\n        }\n        // X-thresholds do not have associated value.\n        if (isXThreshold(series)) {\n          return false;\n        }\n        if (isDataSeries(series)) {\n          return series.data.some(function (datum) {\n            return matchesX(datum.x, x);\n          });\n        }\n        return false;\n      }),\n      position: axis === 'x' ? {\n        x: 0,\n        y: isValid ? scaledX || 0 : 0,\n        width: plotWidth,\n        height: xScale.d3Scale.bandwidth()\n      } : {\n        x: isValid ? scaledX || 0 : 0,\n        y: 0,\n        width: xScale.d3Scale.bandwidth(),\n        height: plotHeight\n      }\n    };\n  });\n}","map":{"version":3,"mappings":"AAIA,SAASA,YAAY,EAAEC,YAAY,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,SAAS;AAc5E;;;AAGA,eAAc,SAAUC,mBAAmB,CACzCC,MAA6C,EAC7CC,MAAkB,EAClBC,SAAiB,EACjBC,UAAkB,EAClBC,IAAe;EAEf,IAAI,CAACH,MAAM,CAACI,aAAa,EAAE,EAAE;IAC3B,OAAO,EAAE;;EAGX,OAAQJ,MAAM,CAACK,MAA2B,CAACC,GAAG,CAAC,WAAC,EAAG;IACjD,IAAMC,OAAO,GAAGP,MAAM,CAACQ,OAAO,CAACC,CAAC,CAAC;IACjC,IAAMC,OAAO,GAAG,OAAOH,OAAO,KAAK,WAAW,IAAII,QAAQ,CAACJ,OAAO,CAAC;IAEnE,OAAO;MACLE,CAAC,EAADA,CAAC;MACDC,OAAO,EAAPA,OAAO;MACPE,OAAO,EAAEb,MAAM,CAACc,IAAI,CAAC,gBAAe;QAAA,IAAZd,MAAM,QAANA,MAAM;QAC5B;QACA,IAAIH,YAAY,CAACG,MAAM,CAAC,EAAE;UACxB,OAAO,IAAI;;QAEb;QACA,IAAIJ,YAAY,CAACI,MAAM,CAAC,EAAE;UACxB,OAAO,KAAK;;QAEd,IAAIL,YAAY,CAACK,MAAM,CAAC,EAAE;UACxB,OAAQA,MAAM,CAACe,IAAuD,CAACD,IAAI,CAAC,eAAK;YAAA,OAAIhB,QAAQ,CAACkB,KAAK,CAACN,CAAC,EAAEA,CAAC,CAAC;UAAA,EAAC;;QAE5G,OAAO,KAAK;MACd,CAAC,CAAC;MACFO,QAAQ,EACNb,IAAI,KAAK,GAAG,GACR;QACEM,CAAC,EAAE,CAAC;QACJQ,CAAC,EAAEP,OAAO,GAAGH,OAAO,IAAI,CAAC,GAAG,CAAC;QAC7BW,KAAK,EAAEjB,SAAS;QAChBkB,MAAM,EAAEnB,MAAM,CAACQ,OAAO,CAACY,SAAS;OACjC,GACD;QACEX,CAAC,EAAEC,OAAO,GAAGH,OAAO,IAAI,CAAC,GAAG,CAAC;QAC7BU,CAAC,EAAE,CAAC;QACJC,KAAK,EAAElB,MAAM,CAACQ,OAAO,CAACY,SAAS,EAAE;QACjCD,MAAM,EAAEjB;;KAEjB;EACH,CAAC,CAAC;AACJ","names":["isDataSeries","isXThreshold","isYThreshold","matchesX","makeScaledBarGroups","series","xScale","plotWidth","plotHeight","axis","isCategorical","domain","map","scaledX","d3Scale","x","isValid","isFinite","hasData","some","data","datum","position","y","width","height","bandwidth"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/mixed-line-bar-chart/lib/default/mixed-line-bar-chart/make-scaled-bar-groups.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ChartDataTypes, InternalChartSeries, MixedLineBarChartProps } from './interfaces';\nimport { ChartScale } from '../internal/components/cartesian-chart/scales';\nimport { isDataSeries, isXThreshold, isYThreshold, matchesX } from './utils';\n\nexport interface ScaledBarGroup<T> {\n  x: T;\n  hasData: boolean;\n  isValid: boolean;\n  position: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n}\n\n/**\n * Creates a list of all bar (and mixed) groups in the series with their scaled positions.\n */\nexport default function makeScaledBarGroups<T extends ChartDataTypes>(\n  series: ReadonlyArray<InternalChartSeries<T>>,\n  xScale: ChartScale,\n  plotWidth: number,\n  plotHeight: number,\n  axis: 'x' | 'y'\n): ScaledBarGroup<T>[] {\n  if (!xScale.isCategorical()) {\n    return [];\n  }\n\n  return (xScale.domain as ReadonlyArray<T>).map(x => {\n    const scaledX = xScale.d3Scale(x);\n    const isValid = typeof scaledX !== 'undefined' && isFinite(scaledX);\n\n    return {\n      x,\n      isValid,\n      hasData: series.some(({ series }) => {\n        // If there is a threshold series, every valid group will have a data point.\n        if (isYThreshold(series)) {\n          return true;\n        }\n        // X-thresholds do not have associated value.\n        if (isXThreshold(series)) {\n          return false;\n        }\n        if (isDataSeries(series)) {\n          return (series.data as ReadonlyArray<MixedLineBarChartProps.Datum<T>>).some(datum => matchesX(datum.x, x));\n        }\n        return false;\n      }),\n      position:\n        axis === 'x'\n          ? {\n              x: 0,\n              y: isValid ? scaledX || 0 : 0,\n              width: plotWidth,\n              height: xScale.d3Scale.bandwidth(),\n            }\n          : {\n              x: isValid ? scaledX || 0 : 0,\n              y: 0,\n              width: xScale.d3Scale.bandwidth(),\n              height: plotHeight,\n            },\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"module"}