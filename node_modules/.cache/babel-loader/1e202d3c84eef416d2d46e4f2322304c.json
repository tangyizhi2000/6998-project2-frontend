{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport styles from './styles.css.js';\nimport { getStickyClassNames } from '../utils';\nimport { useStickyCellStyles } from '../sticky-columns';\nimport { getTableCellRoleProps } from '../table-role';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs/index.js';\nexport const TableTdElement = React.forwardRef((_ref, ref) => {\n  let {\n    className,\n    style,\n    children,\n    wrapLines,\n    isRowHeader,\n    isFirstRow,\n    isLastRow,\n    isSelected,\n    isNextSelected,\n    isPrevSelected,\n    nativeAttributes,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    isEvenRow,\n    stripedRows,\n    isVisualRefresh,\n    hasSelection,\n    hasFooter,\n    columnId,\n    colIndex,\n    stickyState,\n    tableRole\n  } = _ref;\n  const Element = isRowHeader ? 'th' : 'td';\n  nativeAttributes = Object.assign(Object.assign({}, nativeAttributes), getTableCellRoleProps({\n    tableRole,\n    isRowHeader,\n    colIndex\n  }));\n  const stickyStyles = useStickyCellStyles({\n    stickyColumns: stickyState,\n    columnId,\n    getClassName: props => getStickyClassNames(styles, props)\n  });\n  const mergedRef = useMergeRefs(stickyStyles.ref, ref);\n  return React.createElement(Element, Object.assign({\n    style: Object.assign(Object.assign({}, style), stickyStyles.style),\n    className: clsx(className, styles['body-cell'], wrapLines && styles['body-cell-wrap'], isFirstRow && styles['body-cell-first-row'], isLastRow && styles['body-cell-last-row'], isSelected && styles['body-cell-selected'], isNextSelected && styles['body-cell-next-selected'], isPrevSelected && styles['body-cell-prev-selected'], !isEvenRow && stripedRows && styles['body-cell-shaded'], stripedRows && styles['has-striped-rows'], isVisualRefresh && styles['is-visual-refresh'], hasSelection && styles['has-selection'], hasFooter && styles['has-footer'], stickyStyles.className),\n    onClick: onClick,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    ref: mergedRef\n  }, nativeAttributes), children);\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,mBAAmB,QAAQ,UAAU;AAC9C,SAA6BC,mBAAmB,QAAQ,mBAAmB;AAC3E,SAAoBC,qBAAqB,QAAQ,eAAe;AAChE,SAASC,YAAY,QAAQ,8CAA8C;AA+B3E,OAAO,MAAMC,cAAc,GAAGN,KAAK,CAACO,UAAU,CAC5C,OA0BEC,GAAG,KACD;EAAA,IA1BF;IACEC,SAAS;IACTC,KAAK;IACLC,QAAQ;IACRC,SAAS;IACTC,WAAW;IACXC,UAAU;IACVC,SAAS;IACTC,UAAU;IACVC,cAAc;IACdC,cAAc;IACdC,gBAAgB;IAChBC,OAAO;IACPC,YAAY;IACZC,YAAY;IACZC,SAAS;IACTC,WAAW;IACXC,eAAe;IACfC,YAAY;IACZC,SAAS;IACTC,QAAQ;IACRC,QAAQ;IACRC,WAAW;IACXC;EAAS,CACV;EAGD,MAAMC,OAAO,GAAGnB,WAAW,GAAG,IAAI,GAAG,IAAI;EAEzCM,gBAAgB,mCAAQA,gBAAgB,GAAKf,qBAAqB,CAAC;IAAE2B,SAAS;IAAElB,WAAW;IAAEgB;EAAQ,CAAE,CAAC,CAAE;EAE1G,MAAMI,YAAY,GAAG9B,mBAAmB,CAAC;IACvC+B,aAAa,EAAEJ,WAAW;IAC1BF,QAAQ;IACRO,YAAY,EAAEC,KAAK,IAAIlC,mBAAmB,CAACD,MAAM,EAAEmC,KAAK;GACzD,CAAC;EAEF,MAAMC,SAAS,GAAGhC,YAAY,CAAC4B,YAAY,CAACzB,GAAG,EAAEA,GAAG,CAAC;EAErD,OACER,oBAACgC,OAAO;IACNtB,KAAK,kCAAOA,KAAK,GAAKuB,YAAY,CAACvB,KAAK;IACxCD,SAAS,EAAEV,IAAI,CACbU,SAAS,EACTR,MAAM,CAAC,WAAW,CAAC,EACnBW,SAAS,IAAIX,MAAM,CAAC,gBAAgB,CAAC,EACrCa,UAAU,IAAIb,MAAM,CAAC,qBAAqB,CAAC,EAC3Cc,SAAS,IAAId,MAAM,CAAC,oBAAoB,CAAC,EACzCe,UAAU,IAAIf,MAAM,CAAC,oBAAoB,CAAC,EAC1CgB,cAAc,IAAIhB,MAAM,CAAC,yBAAyB,CAAC,EACnDiB,cAAc,IAAIjB,MAAM,CAAC,yBAAyB,CAAC,EACnD,CAACsB,SAAS,IAAIC,WAAW,IAAIvB,MAAM,CAAC,kBAAkB,CAAC,EACvDuB,WAAW,IAAIvB,MAAM,CAAC,kBAAkB,CAAC,EACzCwB,eAAe,IAAIxB,MAAM,CAAC,mBAAmB,CAAC,EAC9CyB,YAAY,IAAIzB,MAAM,CAAC,eAAe,CAAC,EACvC0B,SAAS,IAAI1B,MAAM,CAAC,YAAY,CAAC,EACjCgC,YAAY,CAACxB,SAAS,CACvB;IACDW,OAAO,EAAEA,OAAO;IAChBC,YAAY,EAAEA,YAAY;IAC1BC,YAAY,EAAEA,YAAY;IAC1Bd,GAAG,EAAE6B;EAAS,GACVlB,gBAAgB,GAEnBR,QAAQ,CACD;AAEd,CAAC,CACF","names":["clsx","React","styles","getStickyClassNames","useStickyCellStyles","getTableCellRoleProps","useMergeRefs","TableTdElement","forwardRef","ref","className","style","children","wrapLines","isRowHeader","isFirstRow","isLastRow","isSelected","isNextSelected","isPrevSelected","nativeAttributes","onClick","onMouseEnter","onMouseLeave","isEvenRow","stripedRows","isVisualRefresh","hasSelection","hasFooter","columnId","colIndex","stickyState","tableRole","Element","stickyStyles","stickyColumns","getClassName","props","mergedRef"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/table/body-cell/lib/default/table/body-cell/td-element.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport styles from './styles.css.js';\nimport { getStickyClassNames } from '../utils';\nimport { StickyColumnsModel, useStickyCellStyles } from '../sticky-columns';\nimport { TableRole, getTableCellRoleProps } from '../table-role';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs/index.js';\n\nexport interface TableTdElementProps {\n  className?: string;\n  style?: React.CSSProperties;\n  wrapLines: boolean | undefined;\n  isRowHeader?: boolean;\n  isFirstRow: boolean;\n  isLastRow: boolean;\n  isSelected: boolean;\n  isNextSelected: boolean;\n  isPrevSelected: boolean;\n  nativeAttributes?: Omit<\n    React.TdHTMLAttributes<HTMLTableCellElement> | React.ThHTMLAttributes<HTMLTableCellElement>,\n    'style' | 'className' | 'onClick'\n  >;\n  onClick?: () => void;\n  onMouseEnter?: () => void;\n  onMouseLeave?: () => void;\n  children?: React.ReactNode;\n  isEvenRow?: boolean;\n  stripedRows?: boolean;\n  hasSelection?: boolean;\n  hasFooter?: boolean;\n  columnId: PropertyKey;\n  colIndex: number;\n  stickyState: StickyColumnsModel;\n  isVisualRefresh?: boolean;\n  tableRole: TableRole;\n}\n\nexport const TableTdElement = React.forwardRef<HTMLTableCellElement, TableTdElementProps>(\n  (\n    {\n      className,\n      style,\n      children,\n      wrapLines,\n      isRowHeader,\n      isFirstRow,\n      isLastRow,\n      isSelected,\n      isNextSelected,\n      isPrevSelected,\n      nativeAttributes,\n      onClick,\n      onMouseEnter,\n      onMouseLeave,\n      isEvenRow,\n      stripedRows,\n      isVisualRefresh,\n      hasSelection,\n      hasFooter,\n      columnId,\n      colIndex,\n      stickyState,\n      tableRole,\n    },\n    ref\n  ) => {\n    const Element = isRowHeader ? 'th' : 'td';\n\n    nativeAttributes = { ...nativeAttributes, ...getTableCellRoleProps({ tableRole, isRowHeader, colIndex }) };\n\n    const stickyStyles = useStickyCellStyles({\n      stickyColumns: stickyState,\n      columnId,\n      getClassName: props => getStickyClassNames(styles, props),\n    });\n\n    const mergedRef = useMergeRefs(stickyStyles.ref, ref);\n\n    return (\n      <Element\n        style={{ ...style, ...stickyStyles.style }}\n        className={clsx(\n          className,\n          styles['body-cell'],\n          wrapLines && styles['body-cell-wrap'],\n          isFirstRow && styles['body-cell-first-row'],\n          isLastRow && styles['body-cell-last-row'],\n          isSelected && styles['body-cell-selected'],\n          isNextSelected && styles['body-cell-next-selected'],\n          isPrevSelected && styles['body-cell-prev-selected'],\n          !isEvenRow && stripedRows && styles['body-cell-shaded'],\n          stripedRows && styles['has-striped-rows'],\n          isVisualRefresh && styles['is-visual-refresh'],\n          hasSelection && styles['has-selection'],\n          hasFooter && styles['has-footer'],\n          stickyStyles.className\n        )}\n        onClick={onClick}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        ref={mergedRef}\n        {...nativeAttributes}\n      >\n        {children}\n      </Element>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}