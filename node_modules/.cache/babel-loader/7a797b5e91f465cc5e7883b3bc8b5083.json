{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { fireCancelableEvent, isPlainLeftClick } from '../../../internal/events';\nimport { useUniqueId } from '../../../internal/hooks/use-unique-id';\nimport InternalIcon from '../../../icon/internal';\nimport { useNavigate } from './router';\nimport styles from '../../styles.css.js';\nvar ListItem = function ListItem(_ref) {\n  var children = _ref.children,\n    startIcon = _ref.startIcon,\n    endIcon = _ref.endIcon;\n  return React.createElement(React.Fragment, null, startIcon && React.createElement(\"span\", {\n    className: styles['overflow-menu-list-item-icon']\n  }, startIcon), React.createElement(\"span\", {\n    className: styles['overflow-menu-list-item-text']\n  }, children), endIcon && endIcon);\n};\nvar LinkItem = forwardRef(function (_ref2, ref) {\n  var children = _ref2.children,\n    external = _ref2.external,\n    href = _ref2.href,\n    target = _ref2.target,\n    rel = _ref2.rel,\n    startIcon = _ref2.startIcon,\n    endIcon = _ref2.endIcon,\n    onClick = _ref2.onClick,\n    context = _ref2.context,\n    testId = _ref2.testId;\n  var anchorTarget = target !== null && target !== void 0 ? target : external ? '_blank' : undefined;\n  var anchorRel = rel !== null && rel !== void 0 ? rel : anchorTarget === '_blank' ? 'noopener noreferrer' : undefined;\n  return React.createElement(\"a\", Object.assign({\n    ref: ref,\n    onClick: onClick,\n    className: clsx(styles['overflow-menu-control'], styles['overflow-menu-control-link'], context && styles[\"overflow-menu-control-\".concat(context)]),\n    href: href,\n    target: anchorTarget,\n    rel: anchorRel\n  }, testId ? {\n    'data-testid': testId\n  } : {}), React.createElement(ListItem, {\n    startIcon: startIcon,\n    endIcon: endIcon\n  }, children));\n});\nvar ButtonItem = forwardRef(function (_ref3, ref) {\n  var children = _ref3.children,\n    startIcon = _ref3.startIcon,\n    endIcon = _ref3.endIcon,\n    onClick = _ref3.onClick,\n    testId = _ref3.testId;\n  return React.createElement(\"button\", Object.assign({\n    ref: ref,\n    className: styles['overflow-menu-control'],\n    onClick: onClick\n  }, typeof testId === 'string' ? {\n    'data-testid': testId\n  } : {}), React.createElement(ListItem, {\n    startIcon: startIcon,\n    endIcon: endIcon\n  }, children));\n});\nvar NavigationItem = forwardRef(function (_a, ref) {\n  var startIcon = _a.startIcon,\n    children = _a.children,\n    index = _a.index,\n    testId = _a.testId,\n    definition = __rest(_a, [\"startIcon\", \"children\", \"index\", \"testId\"]);\n  var navigate = useNavigate();\n  return React.createElement(ButtonItem, {\n    ref: ref,\n    startIcon: startIcon,\n    endIcon: React.createElement(InternalIcon, {\n      name: \"angle-right\"\n    }),\n    testId: testId,\n    onClick: function onClick() {\n      return navigate('dropdown-menu', {\n        definition: definition,\n        headerText: definition.text || definition.title,\n        headerSecondaryText: definition.description,\n        utilityIndex: index\n      });\n    }\n  }, children);\n});\nvar ExpandableItem = function ExpandableItem(_a) {\n  var children = _a.children,\n    onItemClick = _a.onItemClick,\n    definition = __rest(_a, [\"children\", \"onItemClick\"]);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    expanded = _useState2[0],\n    setExpanded = _useState2[1];\n  var headerId = useUniqueId('overflow-menu-item');\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    className: clsx(styles['overflow-menu-control'], styles['overflow-menu-control-expandable-menu-trigger']),\n    onClick: function onClick() {\n      return setExpanded(function (value) {\n        return !value;\n      });\n    },\n    \"aria-expanded\": expanded\n  }, React.createElement(ListItem, {\n    endIcon: React.createElement(\"span\", {\n      className: clsx(styles.icon, expanded && styles.expanded)\n    }, React.createElement(InternalIcon, {\n      name: \"caret-up-filled\"\n    }))\n  }, React.createElement(\"span\", {\n    id: headerId\n  }, children))), expanded && React.createElement(\"ul\", {\n    className: clsx(styles['overflow-menu-list'], styles['overflow-menu-list-submenu']),\n    \"aria-labelledby\": headerId\n  }, definition.items.map(function (item, index) {\n    var isGroup = typeof item.items !== 'undefined';\n    return React.createElement(\"li\", {\n      key: index,\n      className: clsx(styles[\"overflow-menu-list-item\"], styles[\"overflow-menu-list-item-dropdown-menu\"])\n    }, dropdownComponentFactory(item, isGroup, onItemClick));\n  })));\n};\nfunction utilityComponentFactory(utility, index, ref) {\n  var label = utility.text || utility.title;\n  var hasIcon = !!utility.iconName || !!utility.iconUrl || !!utility.iconAlt || !!utility.iconSvg;\n  var startIcon = hasIcon && React.createElement(InternalIcon, {\n    name: utility.iconName,\n    url: utility.iconUrl,\n    alt: utility.iconAlt,\n    svg: utility.iconSvg\n  });\n  switch (utility.type) {\n    case 'button':\n      {\n        var handleClick = function handleClick(event) {\n          var _a;\n          if (Boolean(utility.href) && isPlainLeftClick(event)) {\n            fireCancelableEvent(utility.onFollow, {\n              href: utility.href,\n              target: utility.target\n            }, event);\n          }\n          fireCancelableEvent(utility.onClick, {}, event);\n          (_a = utility.onClose) === null || _a === void 0 ? void 0 : _a.call(utility);\n        };\n        var content = React.createElement(React.Fragment, null, label, utility.external && React.createElement(React.Fragment, null, ' ', React.createElement(\"span\", {\n          \"aria-label\": utility.externalIconAriaLabel,\n          role: utility.externalIconAriaLabel ? 'img' : undefined\n        }, React.createElement(InternalIcon, {\n          name: \"external\",\n          size: \"normal\"\n        }))));\n        if (!utility.href) {\n          return React.createElement(ButtonItem, {\n            ref: ref,\n            startIcon: startIcon,\n            onClick: handleClick,\n            testId: \"__\".concat(index)\n          }, content);\n        }\n        return React.createElement(LinkItem, {\n          ref: ref,\n          startIcon: startIcon,\n          href: utility.href,\n          external: utility.external,\n          target: utility.target,\n          rel: utility.rel,\n          testId: \"__\".concat(index),\n          onClick: handleClick\n        }, content);\n      }\n    case 'menu-dropdown':\n      {\n        return React.createElement(NavigationItem, Object.assign({\n          ref: ref,\n          startIcon: startIcon,\n          index: index\n        }, utility, {\n          testId: \"__\".concat(index)\n        }), label);\n      }\n  }\n}\nfunction dropdownComponentFactory(item, expandable, onItemClick) {\n  var label = item.text;\n  var hasIcon = !!item.iconName || !!item.iconUrl || !!item.iconAlt || !!item.iconSvg;\n  var startIcon = hasIcon && React.createElement(InternalIcon, {\n    name: item.iconName,\n    url: item.iconUrl,\n    alt: item.iconAlt,\n    svg: item.iconSvg\n  });\n  if (expandable) {\n    return React.createElement(ExpandableItem, Object.assign({}, item, {\n      onItemClick: onItemClick\n    }), label);\n  }\n  return React.createElement(LinkItem, {\n    startIcon: startIcon,\n    href: item.href,\n    external: item.external,\n    context: \"dropdown-menu\",\n    testId: item.id,\n    onClick: function onClick(event) {\n      return onItemClick(event, item);\n    }\n  }, label, item.external && React.createElement(React.Fragment, null, ' ', React.createElement(\"span\", {\n    \"aria-label\": item.externalIconAriaLabel,\n    role: item.externalIconAriaLabel ? 'img' : undefined\n  }, React.createElement(InternalIcon, {\n    name: \"external\",\n    size: \"normal\"\n  }))));\n}\nexport var UtilityMenuItem = forwardRef(function (_a, ref) {\n  var index = _a.index,\n    props = __rest(_a, [\"index\"]);\n  return React.createElement(\"li\", {\n    className: clsx(styles[\"overflow-menu-list-item\"], styles[\"overflow-menu-list-item-utility\"])\n  }, utilityComponentFactory(props, index, ref));\n});\nexport var SubmenuItem = function SubmenuItem(props) {\n  var expandable = typeof props.items !== 'undefined';\n  return React.createElement(\"li\", {\n    className: clsx(styles[\"overflow-menu-list-item\"], styles[\"overflow-menu-list-item-submenu\"], expandable && styles[\"overflow-menu-list-item-expandable\"])\n  }, dropdownComponentFactory(props, expandable, props.onClick));\n};","map":{"version":3,"mappings":"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","names":["React","forwardRef","useState","clsx","fireCancelableEvent","isPlainLeftClick","useUniqueId","InternalIcon","useNavigate","styles","ListItem","children","startIcon","endIcon","className","LinkItem","ref","external","href","target","rel","onClick","context","testId","anchorTarget","undefined","anchorRel","ButtonItem","NavigationItem","_a","index","definition","navigate","name","headerText","text","title","headerSecondaryText","description","utilityIndex","ExpandableItem","onItemClick","expanded","setExpanded","headerId","value","icon","id","items","map","item","isGroup","key","dropdownComponentFactory","utilityComponentFactory","utility","label","hasIcon","iconName","iconUrl","iconAlt","iconSvg","url","alt","svg","type","handleClick","event","Boolean","onFollow","onClose","content","externalIconAriaLabel","role","size","expandable","UtilityMenuItem","props","SubmenuItem"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/lib/default/top-navigation/parts/overflow-menu/menu-item.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { fireCancelableEvent, isPlainLeftClick } from '../../../internal/events';\nimport { useUniqueId } from '../../../internal/hooks/use-unique-id';\n\nimport { LinkProps } from '../../../link/interfaces';\nimport { ButtonDropdownProps } from '../../../button-dropdown/interfaces';\nimport InternalIcon from '../../../icon/internal';\n\nimport { useNavigate } from './router';\nimport { TopNavigationProps } from '../../interfaces';\nimport styles from '../../styles.css.js';\n\ninterface ListItemProps {\n  startIcon?: React.ReactNode;\n  endIcon?: React.ReactNode;\n  context?: 'dropdown-menu';\n  children?: React.ReactNode;\n  testId?: string;\n}\n\nconst ListItem = ({ children, startIcon, endIcon }: ListItemProps) => {\n  return (\n    <>\n      {startIcon && <span className={styles['overflow-menu-list-item-icon']}>{startIcon}</span>}\n      <span className={styles['overflow-menu-list-item-text']}>{children}</span>\n      {endIcon && endIcon}\n    </>\n  );\n};\n\ninterface LinkItemProps extends ButtonItemProps, Pick<LinkProps, 'href' | 'external' | 'target' | 'rel'> {}\n\nconst LinkItem = forwardRef(\n  (\n    { children, external, href, target, rel, startIcon, endIcon, onClick, context, testId }: LinkItemProps,\n    ref: React.Ref<HTMLAnchorElement & HTMLButtonElement>\n  ) => {\n    const anchorTarget = target ?? (external ? '_blank' : undefined);\n    const anchorRel = rel ?? (anchorTarget === '_blank' ? 'noopener noreferrer' : undefined);\n\n    return (\n      <a\n        ref={ref}\n        onClick={onClick}\n        className={clsx(\n          styles['overflow-menu-control'],\n          styles['overflow-menu-control-link'],\n          context && styles[`overflow-menu-control-${context}`]\n        )}\n        href={href}\n        target={anchorTarget}\n        rel={anchorRel}\n        {...(testId ? { 'data-testid': testId } : {})}\n      >\n        <ListItem startIcon={startIcon} endIcon={endIcon}>\n          {children}\n        </ListItem>\n      </a>\n    );\n  }\n);\n\ninterface ButtonItemProps extends ListItemProps {\n  onClick?: (event: React.MouseEvent) => void;\n}\n\nconst ButtonItem = forwardRef(\n  (\n    { children, startIcon, endIcon, onClick, testId }: ButtonItemProps & { testId?: string },\n    ref: React.Ref<HTMLButtonElement>\n  ) => {\n    return (\n      <button\n        ref={ref}\n        className={styles['overflow-menu-control']}\n        onClick={onClick}\n        {...(typeof testId === 'string' ? { 'data-testid': testId } : {})}\n      >\n        <ListItem startIcon={startIcon} endIcon={endIcon}>\n          {children}\n        </ListItem>\n      </button>\n    );\n  }\n);\n\nconst NavigationItem = forwardRef(\n  (\n    {\n      startIcon,\n      children,\n      index,\n      testId,\n      ...definition\n    }: ButtonItemProps & TopNavigationProps.MenuDropdownUtility & { index: number; testId?: string },\n    ref: React.Ref<HTMLButtonElement>\n  ) => {\n    const navigate = useNavigate();\n    return (\n      <ButtonItem\n        ref={ref}\n        startIcon={startIcon}\n        endIcon={<InternalIcon name=\"angle-right\" />}\n        testId={testId}\n        onClick={() =>\n          navigate('dropdown-menu', {\n            definition,\n            headerText: definition.text || definition.title,\n            headerSecondaryText: definition.description,\n            utilityIndex: index,\n          })\n        }\n      >\n        {children}\n      </ButtonItem>\n    );\n  }\n);\n\nconst ExpandableItem: React.FC<\n  ButtonItemProps &\n    ButtonDropdownProps.ItemGroup & { onItemClick: (event: React.MouseEvent, item: ButtonDropdownProps.Item) => void }\n> = ({ children, onItemClick, ...definition }) => {\n  const [expanded, setExpanded] = useState(false);\n  const headerId = useUniqueId('overflow-menu-item');\n\n  return (\n    <>\n      <button\n        className={clsx(styles['overflow-menu-control'], styles['overflow-menu-control-expandable-menu-trigger'])}\n        onClick={() => setExpanded(value => !value)}\n        aria-expanded={expanded}\n      >\n        <ListItem\n          endIcon={\n            <span className={clsx(styles.icon, expanded && styles.expanded)}>\n              <InternalIcon name=\"caret-up-filled\" />\n            </span>\n          }\n        >\n          <span id={headerId}>{children}</span>\n        </ListItem>\n      </button>\n      {expanded && (\n        <ul\n          className={clsx(styles['overflow-menu-list'], styles['overflow-menu-list-submenu'])}\n          aria-labelledby={headerId}\n        >\n          {definition.items.map((item, index) => {\n            const isGroup = typeof (item as ButtonDropdownProps.ItemGroup).items !== 'undefined';\n\n            return (\n              <li\n                key={index}\n                className={clsx(styles[`overflow-menu-list-item`], styles[`overflow-menu-list-item-dropdown-menu`])}\n              >\n                {dropdownComponentFactory(item, isGroup, onItemClick)}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nfunction utilityComponentFactory(\n  utility: TopNavigationProps.Utility & { onClose?: () => void },\n  index: number,\n  ref?: React.Ref<HTMLAnchorElement & HTMLButtonElement>\n) {\n  const label = utility.text || utility.title;\n  const hasIcon = !!utility.iconName || !!utility.iconUrl || !!utility.iconAlt || !!utility.iconSvg;\n  const startIcon = hasIcon && (\n    <InternalIcon name={utility.iconName} url={utility.iconUrl} alt={utility.iconAlt} svg={utility.iconSvg} />\n  );\n\n  switch (utility.type) {\n    case 'button': {\n      const handleClick = (event: React.MouseEvent) => {\n        if (Boolean(utility.href) && isPlainLeftClick(event)) {\n          fireCancelableEvent(utility.onFollow, { href: utility.href, target: utility.target }, event);\n        }\n\n        fireCancelableEvent(utility.onClick, {}, event);\n        utility.onClose?.();\n      };\n\n      const content = (\n        <>\n          {label}\n          {utility.external && (\n            <>\n              {' '}\n              <span aria-label={utility.externalIconAriaLabel} role={utility.externalIconAriaLabel ? 'img' : undefined}>\n                <InternalIcon name=\"external\" size=\"normal\" />\n              </span>\n            </>\n          )}\n        </>\n      );\n\n      if (!utility.href) {\n        return (\n          <ButtonItem ref={ref} startIcon={startIcon} onClick={handleClick} testId={`__${index}`}>\n            {content}\n          </ButtonItem>\n        );\n      }\n\n      return (\n        <LinkItem\n          ref={ref}\n          startIcon={startIcon}\n          href={utility.href}\n          external={utility.external}\n          target={utility.target}\n          rel={utility.rel}\n          testId={`__${index}`}\n          onClick={handleClick}\n        >\n          {content}\n        </LinkItem>\n      );\n    }\n    case 'menu-dropdown': {\n      return (\n        <NavigationItem\n          ref={ref}\n          startIcon={startIcon}\n          index={index}\n          {...(utility as TopNavigationProps.MenuDropdownUtility)}\n          testId={`__${index}`}\n        >\n          {label}\n        </NavigationItem>\n      );\n    }\n  }\n}\n\nfunction dropdownComponentFactory(\n  item: ButtonDropdownProps.ItemOrGroup,\n  expandable: boolean,\n  onItemClick: (event: React.MouseEvent, item: ButtonDropdownProps.Item) => void\n) {\n  const label = item.text;\n  const hasIcon = !!item.iconName || !!item.iconUrl || !!item.iconAlt || !!item.iconSvg;\n  const startIcon = hasIcon && (\n    <InternalIcon name={item.iconName} url={item.iconUrl} alt={item.iconAlt} svg={item.iconSvg} />\n  );\n\n  if (expandable) {\n    return (\n      <ExpandableItem {...(item as ButtonDropdownProps.ItemGroup)} onItemClick={onItemClick}>\n        {label}\n      </ExpandableItem>\n    );\n  }\n\n  return (\n    <LinkItem\n      startIcon={startIcon}\n      href={item.href}\n      external={item.external}\n      context=\"dropdown-menu\"\n      testId={item.id}\n      onClick={event => onItemClick(event, item as ButtonDropdownProps.Item)}\n    >\n      {label}\n      {item.external && (\n        <>\n          {' '}\n          <span aria-label={item.externalIconAriaLabel} role={item.externalIconAriaLabel ? 'img' : undefined}>\n            <InternalIcon name=\"external\" size=\"normal\" />\n          </span>\n        </>\n      )}\n    </LinkItem>\n  );\n}\n\ntype UtilityMenuItemProps = TopNavigationProps.Utility & { index: number; onClose?: () => void };\n\nexport const UtilityMenuItem = forwardRef(\n  ({ index, ...props }: UtilityMenuItemProps, ref: React.Ref<HTMLAnchorElement & HTMLButtonElement>) => {\n    return (\n      <li className={clsx(styles[`overflow-menu-list-item`], styles[`overflow-menu-list-item-utility`])}>\n        {utilityComponentFactory(props, index, ref)}\n      </li>\n    );\n  }\n);\n\ntype SubmenuItemProps = ButtonDropdownProps.ItemOrGroup & {\n  onClick: (event: React.MouseEvent, item: ButtonDropdownProps.Item) => void;\n};\n\nexport const SubmenuItem = (props: SubmenuItemProps) => {\n  const expandable = typeof (props as ButtonDropdownProps.ItemGroup).items !== 'undefined';\n\n  return (\n    <li\n      className={clsx(\n        styles[`overflow-menu-list-item`],\n        styles[`overflow-menu-list-item-submenu`],\n        expandable && styles[`overflow-menu-list-item-expandable`]\n      )}\n    >\n      {dropdownComponentFactory(props, expandable, props.onClick)}\n    </li>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}