{"ast":null,"code":"import _classCallCheck from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { subtract as getCoordinatesDelta, getOwnerDocument, getWindow, isKeyboardEvent } from '@dnd-kit/utilities';\nimport { defaultCoordinates } from '@dnd-kit/core';\nimport { applyScroll } from './utilities/scroll';\nimport { EventName } from './utilities/events';\nimport { Listeners } from './utilities/listeners';\nimport { defaultKeyboardCodes } from './defaults';\nimport { scrollElementIntoView } from '../../../internal/utils/scrollable-containers';\n// Slightly modified version of @dnd-kit's KeyboardSensor:\n// https://github.com/clauderic/dnd-kit/blob/master/packages/core/src/sensors/keyboard/KeyboardSensor.ts\n// The only difference is that here, reordering is deactivated on blur, as in\n// this PR: https://github.com/clauderic/dnd-kit/pull/1087.\n// If it is merged, then @dnd-kit's KeyboardSensor can be used instead\n// and all files under this directory (`keyboard-sensor`) can be removed.\n// Changes from mainstream are marked below as \"Customization\"\nexport var KeyboardSensor = /*#__PURE__*/function () {\n  function KeyboardSensor(props) {\n    _classCallCheck(this, KeyboardSensor);\n    this.props = props;\n    this.autoScrollEnabled = false;\n    var target = props.event.target;\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.attach();\n  }\n  _createClass(KeyboardSensor, [{\n    key: \"attach\",\n    value: function attach() {\n      var _this = this;\n      var _a;\n      this.handleStart();\n      this.windowListeners.add(EventName.Resize, this.handleCancel);\n      this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n      // Customization: deactivate reordering on blur event\n      (_a = this.props.event.target) === null || _a === void 0 ? void 0 : _a.addEventListener(EventName.Blur, this.handleCancel);\n      setTimeout(function () {\n        return _this.listeners.add(EventName.Keydown, _this.handleKeyDown);\n      });\n    }\n  }, {\n    key: \"handleStart\",\n    value: function handleStart() {\n      var _this$props = this.props,\n        activeNode = _this$props.activeNode,\n        onStart = _this$props.onStart;\n      var node = activeNode.node.current;\n      if (node) {\n        scrollElementIntoView(node);\n      }\n      onStart(defaultCoordinates);\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event) {\n      if (isKeyboardEvent(event)) {\n        var _this$props2 = this.props,\n          active = _this$props2.active,\n          context = _this$props2.context,\n          options = _this$props2.options;\n        var _options$keyboardCode = options.keyboardCodes,\n          keyboardCodes = _options$keyboardCode === void 0 ? defaultKeyboardCodes : _options$keyboardCode,\n          coordinateGetter = options.coordinateGetter;\n        var code = event.code;\n        if (keyboardCodes.end.indexOf(code) !== -1) {\n          this.handleEnd(event);\n          return;\n        }\n        if (keyboardCodes.cancel.indexOf(code) !== -1) {\n          this.handleCancel(event);\n          return;\n        }\n        var collisionRect = context.current.collisionRect;\n        var currentCoordinates = collisionRect ? {\n          x: collisionRect.left,\n          y: collisionRect.top\n        } : defaultCoordinates;\n        if (!this.referenceCoordinates) {\n          this.referenceCoordinates = currentCoordinates;\n        }\n        if (!coordinateGetter) {\n          return;\n        }\n        var newCoordinates = coordinateGetter(event, {\n          active: active,\n          context: context.current,\n          currentCoordinates: currentCoordinates\n        });\n        if (newCoordinates) {\n          var scrollableAncestors = context.current.scrollableAncestors;\n          var direction = event.code;\n          var scrolled = applyScroll({\n            currentCoordinates: currentCoordinates,\n            direction: direction,\n            newCoordinates: newCoordinates,\n            scrollableAncestors: scrollableAncestors\n          });\n          if (!scrolled) {\n            this.handleMove(event, getCoordinatesDelta(newCoordinates, this.referenceCoordinates));\n          }\n        }\n      }\n    }\n  }, {\n    key: \"handleMove\",\n    value: function handleMove(event, coordinates) {\n      var onMove = this.props.onMove;\n      event.preventDefault();\n      onMove(coordinates);\n    }\n  }, {\n    key: \"handleEnd\",\n    value: function handleEnd(event) {\n      var onEnd = this.props.onEnd;\n      event.preventDefault();\n      this.detach();\n      onEnd();\n    }\n  }, {\n    key: \"handleCancel\",\n    value: function handleCancel(event) {\n      var onCancel = this.props.onCancel;\n      // Customization: do not prevent browser from managing native focus\n      if (event.type !== EventName.Blur) {\n        event.preventDefault();\n      }\n      this.detach();\n      onCancel();\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      var _a;\n      // Customization: clean up listener for blur event\n      (_a = this.props.event.target) === null || _a === void 0 ? void 0 : _a.removeEventListener(EventName.Blur, this.handleCancel);\n      this.listeners.removeAll();\n      this.windowListeners.removeAll();\n    }\n  }]);\n  return KeyboardSensor;\n}();\nKeyboardSensor.activators = [{\n  eventName: 'onKeyDown',\n  handler: function handler(event, _ref, _ref2) {\n    var _ref$keyboardCodes = _ref.keyboardCodes,\n      keyboardCodes = _ref$keyboardCodes === void 0 ? defaultKeyboardCodes : _ref$keyboardCodes,\n      onActivation = _ref.onActivation;\n    var active = _ref2.active;\n    var code = event.nativeEvent.code;\n    if (keyboardCodes.start.indexOf(code) !== -1) {\n      var activator = active.activatorNode.current;\n      if (activator && event.target !== activator) {\n        return false;\n      }\n      event.preventDefault();\n      onActivation === null || onActivation === void 0 ? void 0 : onActivation({\n        event: event.nativeEvent\n      });\n      return true;\n    }\n    return false;\n  }\n}];","map":{"version":3,"mappings":"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","names":["subtract","getCoordinatesDelta","getOwnerDocument","getWindow","isKeyboardEvent","defaultCoordinates","applyScroll","EventName","Listeners","defaultKeyboardCodes","scrollElementIntoView","KeyboardSensor","props","target","event","listeners","windowListeners","handleKeyDown","bind","handleCancel","attach","handleStart","add","Resize","VisibilityChange","addEventListener","Blur","setTimeout","Keydown","activeNode","onStart","node","current","active","context","options","keyboardCodes","coordinateGetter","code","end","indexOf","handleEnd","cancel","collisionRect","currentCoordinates","x","left","y","top","referenceCoordinates","newCoordinates","scrollableAncestors","direction","scrolled","handleMove","coordinates","onMove","preventDefault","onEnd","detach","onCancel","type","removeEventListener","removeAll","eventName","handler","onActivation","nativeEvent","start","activator","activatorNode"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/collection-preferences/content-display/keyboard-sensor/lib/default/collection-preferences/content-display/keyboard-sensor/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport {\n  subtract as getCoordinatesDelta,\n  getOwnerDocument,\n  getWindow,\n  isKeyboardEvent,\n  Coordinates,\n} from '@dnd-kit/utilities';\n\nimport { defaultCoordinates } from '@dnd-kit/core';\nimport { applyScroll } from './utilities/scroll';\nimport { EventName } from './utilities/events';\nimport { Listeners } from './utilities/listeners';\nimport type { Activators, SensorInstance } from '@dnd-kit/core';\nimport { KeyboardSensorOptions, KeyboardSensorProps } from '@dnd-kit/core';\n\nimport { defaultKeyboardCodes } from './defaults';\nimport { scrollElementIntoView } from '../../../internal/utils/scrollable-containers';\n\n// Slightly modified version of @dnd-kit's KeyboardSensor:\n// https://github.com/clauderic/dnd-kit/blob/master/packages/core/src/sensors/keyboard/KeyboardSensor.ts\n\n// The only difference is that here, reordering is deactivated on blur, as in\n// this PR: https://github.com/clauderic/dnd-kit/pull/1087.\n// If it is merged, then @dnd-kit's KeyboardSensor can be used instead\n// and all files under this directory (`keyboard-sensor`) can be removed.\n\n// Changes from mainstream are marked below as \"Customization\"\n\nexport class KeyboardSensor implements SensorInstance {\n  public autoScrollEnabled = false;\n  private referenceCoordinates: Coordinates | undefined;\n  private listeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(private props: KeyboardSensorProps) {\n    const {\n      event: { target },\n    } = props;\n\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    this.handleStart();\n\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n\n    // Customization: deactivate reordering on blur event\n    this.props.event.target?.addEventListener(EventName.Blur, this.handleCancel);\n\n    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));\n  }\n\n  private handleStart() {\n    const { activeNode, onStart } = this.props;\n    const node = activeNode.node.current;\n\n    if (node) {\n      scrollElementIntoView(node);\n    }\n\n    onStart(defaultCoordinates);\n  }\n\n  private handleKeyDown(event: Event) {\n    if (isKeyboardEvent(event)) {\n      const { active, context, options } = this.props;\n      const { keyboardCodes = defaultKeyboardCodes, coordinateGetter } = options;\n      const { code } = event;\n\n      if (keyboardCodes.end.indexOf(code) !== -1) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.indexOf(code) !== -1) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const { collisionRect } = context.current;\n      const currentCoordinates = collisionRect ? { x: collisionRect.left, y: collisionRect.top } : defaultCoordinates;\n\n      if (!this.referenceCoordinates) {\n        this.referenceCoordinates = currentCoordinates;\n      }\n\n      if (!coordinateGetter) {\n        return;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates,\n      });\n\n      if (newCoordinates) {\n        const { scrollableAncestors } = context.current;\n        const direction = event.code;\n\n        const scrolled = applyScroll({ currentCoordinates, direction, newCoordinates, scrollableAncestors });\n\n        if (!scrolled) {\n          this.handleMove(event, getCoordinatesDelta(newCoordinates, this.referenceCoordinates));\n        }\n      }\n    }\n  }\n\n  private handleMove(event: Event, coordinates: Coordinates) {\n    const { onMove } = this.props;\n\n    event.preventDefault();\n    onMove(coordinates);\n  }\n\n  private handleEnd(event: Event) {\n    const { onEnd } = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel(event: Event) {\n    const { onCancel } = this.props;\n\n    // Customization: do not prevent browser from managing native focus\n    if (event.type !== EventName.Blur) {\n      event.preventDefault();\n    }\n    this.detach();\n    onCancel();\n  }\n\n  private detach() {\n    // Customization: clean up listener for blur event\n    this.props.event.target?.removeEventListener(EventName.Blur, this.handleCancel);\n\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n\n  static activators: Activators<KeyboardSensorOptions> = [\n    {\n      eventName: 'onKeyDown' as const,\n      handler: (event: React.KeyboardEvent, { keyboardCodes = defaultKeyboardCodes, onActivation }, { active }) => {\n        const { code } = event.nativeEvent;\n\n        if (keyboardCodes.start.indexOf(code) !== -1) {\n          const activator = active.activatorNode.current;\n\n          if (activator && event.target !== activator) {\n            return false;\n          }\n\n          event.preventDefault();\n\n          onActivation?.({ event: event.nativeEvent });\n\n          return true;\n        }\n\n        return false;\n      },\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}