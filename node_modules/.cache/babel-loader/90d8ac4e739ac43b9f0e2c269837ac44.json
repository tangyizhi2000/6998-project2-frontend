{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { findUpUntil } from '../../internal/utils/dom';\nimport selectionStyles from './styles.css.js';\nimport { SELECTION_ITEM } from './utils';\n// The hooks moves focus between multi-selection checkboxes.\n// Not eligible for tables with grid navigation.\nexport function useSelectionFocusMove(selectionType, totalItems) {\n  if (selectionType !== 'multi') {\n    return {};\n  }\n  function moveFocus(sourceElement, fromIndex, direction) {\n    var index = fromIndex;\n    var rootContainer = findRootContainer(sourceElement);\n    while (index >= -1 && index < totalItems) {\n      index += direction;\n      var control = findSelectionControlByIndex(rootContainer, index);\n      if (control && !control.disabled) {\n        control.focus();\n        break;\n      }\n    }\n  }\n  var _map = [1, -1].map(function (direction) {\n      return function (event) {\n        var target = event.currentTarget;\n        var itemNode = findUpUntil(target, function (node) {\n          return node.dataset.selectionItem === 'item';\n        });\n        var fromIndex = Array.prototype.indexOf.call(itemNode.parentElement.children, itemNode);\n        moveFocus(target, fromIndex, direction);\n      };\n    }),\n    _map2 = _slicedToArray(_map, 2),\n    moveFocusDown = _map2[0],\n    moveFocusUp = _map2[1];\n  return {\n    moveFocusDown: moveFocusDown,\n    moveFocusUp: moveFocusUp,\n    moveFocus: moveFocus\n  };\n}\nfunction findSelectionControlByIndex(rootContainer, index) {\n  if (index === -1) {\n    // find \"select all\" checkbox\n    return rootContainer.querySelector(\"[data-\".concat(SELECTION_ITEM, \"=\\\"all\\\"] .\").concat(selectionStyles.root, \" input\"));\n  }\n  return rootContainer.querySelectorAll(\"[data-\".concat(SELECTION_ITEM, \"=\\\"item\\\"] .\").concat(selectionStyles.root, \" input\"))[index];\n}\nfunction findRootContainer(element) {\n  return findUpUntil(element, function (node) {\n    return node.dataset.selectionRoot === 'true';\n  });\n}","map":{"version":3,"mappings":";AAGA,SAASA,WAAW,QAAQ,0BAA0B;AAEtD,OAAOC,eAAe,MAAM,iBAAiB;AAC7C,SAASC,cAAc,QAAQ,SAAS;AAExC;AACA;AACA,OAAM,SAAUC,qBAAqB,CAACC,aAA0C,EAAEC,UAAkB;EAClG,IAAID,aAAa,KAAK,OAAO,EAAE;IAC7B,OAAO,EAAE;;EAEX,SAASE,SAAS,CAACC,aAA0B,EAAEC,SAAiB,EAAEC,SAAiB;IACjF,IAAIC,KAAK,GAAGF,SAAS;IACrB,IAAMG,aAAa,GAAGC,iBAAiB,CAACL,aAAa,CAAC;IAEtD,OAAOG,KAAK,IAAI,CAAC,CAAC,IAAIA,KAAK,GAAGL,UAAU,EAAE;MACxCK,KAAK,IAAID,SAAS;MAClB,IAAMI,OAAO,GAAGC,2BAA2B,CAACH,aAAa,EAAED,KAAK,CAAC;MACjE,IAAIG,OAAO,IAAI,CAACA,OAAO,CAACE,QAAQ,EAAE;QAChCF,OAAO,CAACG,KAAK,EAAE;QACf;;;EAGN;EACA,WAAsC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAW,CAACC,GAAG,CAAC,mBAAS,EAAG;MACtE,OAAO,UAACC,KAAoB,EAAI;QAC9B,IAAMC,MAAM,GAAGD,KAAK,CAACE,aAA4B;QACjD,IAAMC,QAAQ,GAAGrB,WAAW,CAACmB,MAAM,EAAE,cAAI;UAAA,OAAIG,IAAI,CAACC,OAAO,CAACC,aAAa,KAAK,MAAM;QAAA,EAAE;QACpF,IAAMhB,SAAS,GAAGiB,KAAK,CAACC,SAAS,CAACC,OAAO,CAACC,IAAI,CAACP,QAAQ,CAACQ,aAAc,CAACC,QAAQ,EAAET,QAAQ,CAAC;QAC1Ff,SAAS,CAACa,MAAM,EAAEX,SAAS,EAAEC,SAAS,CAAC;MACzC,CAAC;IACH,CAAC,CAAC;IAAA;IAPKsB,aAAa;IAAEC,WAAW;EAQjC,OAAO;IACLD,aAAa,EAAbA,aAAa;IACbC,WAAW,EAAXA,WAAW;IACX1B,SAAS,EAATA;GACD;AACH;AAEA,SAASQ,2BAA2B,CAACH,aAA0B,EAAED,KAAa;EAC5E,IAAIA,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB;IACA,OAAOC,aAAa,CAACsB,aAAa,iBACvB/B,cAAc,wBAAYD,eAAe,CAACiC,IAAI,YACxD;;EAEH,OAAOvB,aAAa,CAACwB,gBAAgB,iBAC1BjC,cAAc,yBAAaD,eAAe,CAACiC,IAAI,YACzD,CAACxB,KAAK,CAAC;AACV;AAEA,SAASE,iBAAiB,CAACwB,OAAoB;EAC7C,OAAOpC,WAAW,CAACoC,OAAO,EAAE,cAAI;IAAA,OAAId,IAAI,CAACC,OAAO,CAACc,aAAa,KAAK,MAAM;EAAA,EAAE;AAC7E","names":["findUpUntil","selectionStyles","SELECTION_ITEM","useSelectionFocusMove","selectionType","totalItems","moveFocus","sourceElement","fromIndex","direction","index","rootContainer","findRootContainer","control","findSelectionControlByIndex","disabled","focus","map","event","target","currentTarget","itemNode","node","dataset","selectionItem","Array","prototype","indexOf","call","parentElement","children","moveFocusDown","moveFocusUp","querySelector","root","querySelectorAll","element","selectionRoot"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/table/selection/lib/default/table/selection/use-selection-focus-move.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { KeyboardEvent } from 'react';\nimport { findUpUntil } from '../../internal/utils/dom';\nimport { TableProps } from '../interfaces';\nimport selectionStyles from './styles.css.js';\nimport { SELECTION_ITEM } from './utils';\n\n// The hooks moves focus between multi-selection checkboxes.\n// Not eligible for tables with grid navigation.\nexport function useSelectionFocusMove(selectionType: TableProps['selectionType'], totalItems: number) {\n  if (selectionType !== 'multi') {\n    return {};\n  }\n  function moveFocus(sourceElement: HTMLElement, fromIndex: number, direction: -1 | 1) {\n    let index = fromIndex;\n    const rootContainer = findRootContainer(sourceElement);\n\n    while (index >= -1 && index < totalItems) {\n      index += direction;\n      const control = findSelectionControlByIndex(rootContainer, index);\n      if (control && !control.disabled) {\n        control.focus();\n        break;\n      }\n    }\n  }\n  const [moveFocusDown, moveFocusUp] = ([1, -1] as const).map(direction => {\n    return (event: KeyboardEvent) => {\n      const target = event.currentTarget as HTMLElement;\n      const itemNode = findUpUntil(target, node => node.dataset.selectionItem === 'item')!;\n      const fromIndex = Array.prototype.indexOf.call(itemNode.parentElement!.children, itemNode);\n      moveFocus(target, fromIndex, direction);\n    };\n  });\n  return {\n    moveFocusDown,\n    moveFocusUp,\n    moveFocus,\n  };\n}\n\nfunction findSelectionControlByIndex(rootContainer: HTMLElement, index: number) {\n  if (index === -1) {\n    // find \"select all\" checkbox\n    return rootContainer.querySelector<HTMLInputElement>(\n      `[data-${SELECTION_ITEM}=\"all\"] .${selectionStyles.root} input`\n    );\n  }\n  return rootContainer.querySelectorAll<HTMLInputElement>(\n    `[data-${SELECTION_ITEM}=\"item\"] .${selectionStyles.root} input`\n  )[index];\n}\n\nfunction findRootContainer(element: HTMLElement) {\n  return findUpUntil(element, node => node.dataset.selectionRoot === 'true')!;\n}\n"]},"metadata":{},"sourceType":"module"}