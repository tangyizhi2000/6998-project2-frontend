{"ast":null,"code":"function makeSlotId(prop, formFieldId, propName) {\n  if (!prop) {\n    return undefined;\n  }\n  return `${formFieldId}-${propName}`;\n}\nexport function getSlotIds(formFieldId, label, description, constraintText, errorText) {\n  const ids = {\n    label: makeSlotId(label, formFieldId, 'label'),\n    description: makeSlotId(description, formFieldId, 'description'),\n    constraint: makeSlotId(constraintText, formFieldId, 'constraint'),\n    error: makeSlotId(errorText, formFieldId, 'error')\n  };\n  return ids;\n}\nexport function getAriaDescribedBy(_ref) {\n  let {\n    error,\n    description,\n    constraint\n  } = _ref;\n  const describedByAttributes = [error, description, constraint].filter(e => !!e);\n  const describedBy = describedByAttributes.length ? describedByAttributes.join(' ') : undefined;\n  return describedBy;\n}\nexport function getGridDefinition(stretch, secondaryControlPresent, isRefresh) {\n  let columns;\n  if (stretch) {\n    columns = [{\n      colspan: 12\n    }, {\n      colspan: 12\n    }];\n  } else if (isRefresh) {\n    columns = [{\n      colspan: {\n        default: 12,\n        xs: 8\n      }\n    }, {\n      colspan: {\n        default: 12,\n        xs: 4\n      }\n    }];\n  } else {\n    columns = [{\n      colspan: {\n        default: 12,\n        xs: 9\n      }\n    }, {\n      colspan: {\n        default: 12,\n        xs: 3\n      }\n    }];\n  }\n  if (!secondaryControlPresent) {\n    return [columns[0]];\n  }\n  return columns;\n}","map":{"version":3,"mappings":"AAWA,SAASA,UAAU,CAACC,IAAqB,EAAEC,WAAmB,EAAEC,QAAgB;EAC9E,IAAI,CAACF,IAAI,EAAE;IACT,OAAOG,SAAS;;EAGlB,OAAO,GAAGF,WAAW,IAAIC,QAAQ,EAAE;AACrC;AAEA,OAAM,SAAUE,UAAU,CACxBH,WAAmB,EACnBI,KAAuB,EACvBC,WAA6B,EAC7BC,cAAgC,EAChCC,SAA2B;EAE3B,MAAMC,GAAG,GAAiB;IACxBJ,KAAK,EAAEN,UAAU,CAACM,KAAK,EAAEJ,WAAW,EAAE,OAAO,CAAC;IAC9CK,WAAW,EAAEP,UAAU,CAACO,WAAW,EAAEL,WAAW,EAAE,aAAa,CAAC;IAChES,UAAU,EAAEX,UAAU,CAACQ,cAAc,EAAEN,WAAW,EAAE,YAAY,CAAC;IACjEU,KAAK,EAAEZ,UAAU,CAACS,SAAS,EAAEP,WAAW,EAAE,OAAO;GAClD;EAED,OAAOQ,GAAG;AACZ;AAEA,OAAM,SAAUG,kBAAkB,OAAiD;EAAA,IAAhD;IAAED,KAAK;IAAEL,WAAW;IAAEI;EAAU,CAAgB;EACjF,MAAMG,qBAAqB,GAAG,CAACF,KAAK,EAAEL,WAAW,EAAEI,UAAU,CAAC,CAACI,MAAM,CAACC,CAAC,IAAI,CAAC,CAACA,CAAC,CAAC;EAC/E,MAAMC,WAAW,GAAGH,qBAAqB,CAACI,MAAM,GAAGJ,qBAAqB,CAACK,IAAI,CAAC,GAAG,CAAC,GAAGf,SAAS;EAC9F,OAAOa,WAAW;AACpB;AAEA,OAAM,SAAUG,iBAAiB,CAACC,OAAgB,EAAEC,uBAAgC,EAAEC,SAAkB;EACtG,IAAIC,OAAiE;EAErE,IAAIH,OAAO,EAAE;IACXG,OAAO,GAAG,CAAC;MAAEC,OAAO,EAAE;IAAE,CAAE,EAAE;MAAEA,OAAO,EAAE;IAAE,CAAE,CAAC;GAC7C,MAAM,IAAIF,SAAS,EAAE;IACpBC,OAAO,GAAG,CAAC;MAAEC,OAAO,EAAE;QAAEC,OAAO,EAAE,EAAE;QAAEC,EAAE,EAAE;MAAC;IAAE,CAAE,EAAE;MAAEF,OAAO,EAAE;QAAEC,OAAO,EAAE,EAAE;QAAEC,EAAE,EAAE;MAAC;IAAE,CAAE,CAAC;GACrF,MAAM;IACLH,OAAO,GAAG,CAAC;MAAEC,OAAO,EAAE;QAAEC,OAAO,EAAE,EAAE;QAAEC,EAAE,EAAE;MAAC;IAAE,CAAE,EAAE;MAAEF,OAAO,EAAE;QAAEC,OAAO,EAAE,EAAE;QAAEC,EAAE,EAAE;MAAC;IAAE,CAAE,CAAC;;EAGtF,IAAI,CAACL,uBAAuB,EAAE;IAC5B,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;;EAGrB,OAAOA,OAAO;AAChB","names":["makeSlotId","prop","formFieldId","propName","undefined","getSlotIds","label","description","constraintText","errorText","ids","constraint","error","getAriaDescribedBy","describedByAttributes","filter","e","describedBy","length","join","getGridDefinition","stretch","secondaryControlPresent","isRefresh","columns","colspan","default","xs"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/form-field/lib/default/form-field/util.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { GridProps } from '../grid/interfaces';\n\ninterface FormFieldIds {\n  label?: string;\n  description?: string;\n  constraint?: string;\n  error?: string;\n}\n\nfunction makeSlotId(prop: React.ReactNode, formFieldId: string, propName: string): string | undefined {\n  if (!prop) {\n    return undefined;\n  }\n\n  return `${formFieldId}-${propName}`;\n}\n\nexport function getSlotIds(\n  formFieldId: string,\n  label?: React.ReactNode,\n  description?: React.ReactNode,\n  constraintText?: React.ReactNode,\n  errorText?: React.ReactNode\n) {\n  const ids: FormFieldIds = {\n    label: makeSlotId(label, formFieldId, 'label'),\n    description: makeSlotId(description, formFieldId, 'description'),\n    constraint: makeSlotId(constraintText, formFieldId, 'constraint'),\n    error: makeSlotId(errorText, formFieldId, 'error'),\n  };\n\n  return ids;\n}\n\nexport function getAriaDescribedBy({ error, description, constraint }: FormFieldIds) {\n  const describedByAttributes = [error, description, constraint].filter(e => !!e);\n  const describedBy = describedByAttributes.length ? describedByAttributes.join(' ') : undefined;\n  return describedBy;\n}\n\nexport function getGridDefinition(stretch: boolean, secondaryControlPresent: boolean, isRefresh: boolean) {\n  let columns: Array<{ colspan: GridProps.BreakpointMapping | number }>;\n\n  if (stretch) {\n    columns = [{ colspan: 12 }, { colspan: 12 }];\n  } else if (isRefresh) {\n    columns = [{ colspan: { default: 12, xs: 8 } }, { colspan: { default: 12, xs: 4 } }];\n  } else {\n    columns = [{ colspan: { default: 12, xs: 9 } }, { colspan: { default: 12, xs: 3 } }];\n  }\n\n  if (!secondaryControlPresent) {\n    return [columns[0]];\n  }\n\n  return columns;\n}\n"]},"metadata":{},"sourceType":"module"}