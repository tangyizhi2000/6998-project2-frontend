{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo } from 'react';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport AreaSeries from './area-series';\nimport ThresholdSeries from './threshold-series';\nimport styles from '../styles.css.js';\nimport { useSelector } from '../async-store';\nexport default memo(DataSeries);\nfunction DataSeries(_ref) {\n  var model = _ref.model;\n  var chartAreaClipPath = useUniqueId('awsui-area-chart__chart-area-');\n  var highlightedX = useSelector(model.interactions, function (state) {\n    return state.highlightedX;\n  });\n  var highlightedSeries = useSelector(model.interactions, function (state) {\n    return state.highlightedSeries;\n  });\n  var useHighlightDimmed = !highlightedX;\n  // Iterating series in the reversed order so that SVG paths overlap correctly.\n  var seriesData = [];\n  for (var seriesIndex = model.series.length - 1; seriesIndex >= 0; seriesIndex--) {\n    if (model.computed.plot.sx[seriesIndex]) {\n      seriesData.push([model.series[seriesIndex], model.computed.plot.sx[seriesIndex] || []]);\n    }\n  }\n  return React.createElement(React.Fragment, null, React.createElement(\"defs\", {\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"clipPath\", {\n    id: chartAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: model.width,\n    height: model.height\n  }))), React.createElement(\"g\", {\n    role: \"group\"\n  }, seriesData.map(function (_ref2) {\n    var _clsx;\n    var _ref3 = _slicedToArray(_ref2, 2),\n      series = _ref3[0],\n      data = _ref3[1];\n    var isHighlighted = series === highlightedSeries;\n    var isDimmed = !!highlightedSeries && !isHighlighted;\n    return React.createElement(\"g\", {\n      key: series.title,\n      role: \"group\",\n      \"aria-label\": series.title,\n      className: clsx(styles.series, styles[\"series--\".concat(series.type)], (_clsx = {}, _defineProperty(_clsx, styles['series--highlighted'], isHighlighted), _defineProperty(_clsx, styles['series--dimmed'], useHighlightDimmed && isDimmed), _clsx))\n    }, series.type === 'area' ? React.createElement(AreaSeries, {\n      data: data,\n      color: model.getInternalSeries(series).color,\n      chartAreaClipPath: chartAreaClipPath\n    }) : React.createElement(ThresholdSeries, {\n      data: data,\n      xScale: model.computed.xScale,\n      color: model.getInternalSeries(series).color,\n      chartAreaClipPath: chartAreaClipPath\n    }));\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","memo","clsx","useUniqueId","AreaSeries","ThresholdSeries","styles","useSelector","DataSeries","model","chartAreaClipPath","highlightedX","interactions","state","highlightedSeries","useHighlightDimmed","seriesData","seriesIndex","series","length","computed","plot","sx","push","id","x","y","width","height","role","map","data","isHighlighted","isDimmed","key","title","className","type","color","getInternalSeries","xScale"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/area-chart/elements/lib/default/area-chart/elements/data-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport AreaSeries from './area-series';\nimport ThresholdSeries from './threshold-series';\nimport { AreaChartProps } from '../interfaces';\nimport { ChartModel } from '../model';\n\nimport styles from '../styles.css.js';\nimport { useSelector } from '../async-store';\n\nexport default memo(DataSeries) as typeof DataSeries;\n\nfunction DataSeries<T extends AreaChartProps.DataTypes>({ model }: { model: ChartModel<T> }) {\n  const chartAreaClipPath = useUniqueId('awsui-area-chart__chart-area-');\n\n  const highlightedX = useSelector(model.interactions, state => state.highlightedX);\n  const highlightedSeries = useSelector(model.interactions, state => state.highlightedSeries);\n  const useHighlightDimmed = !highlightedX;\n\n  // Iterating series in the reversed order so that SVG paths overlap correctly.\n  const seriesData: [AreaChartProps.Series<T>, ChartModel.PlotPoint<T>[]][] = [];\n  for (let seriesIndex = model.series.length - 1; seriesIndex >= 0; seriesIndex--) {\n    if (model.computed.plot.sx[seriesIndex]) {\n      seriesData.push([model.series[seriesIndex], model.computed.plot.sx[seriesIndex] || []]);\n    }\n  }\n\n  return (\n    <>\n      <defs aria-hidden=\"true\">\n        <clipPath id={chartAreaClipPath}>\n          <rect x={0} y={0} width={model.width} height={model.height} />\n        </clipPath>\n      </defs>\n      <g role=\"group\">\n        {seriesData.map(([series, data]) => {\n          const isHighlighted = series === highlightedSeries;\n          const isDimmed = !!highlightedSeries && !isHighlighted;\n\n          return (\n            <g\n              key={series.title}\n              role=\"group\"\n              aria-label={series.title}\n              className={clsx(styles.series, styles[`series--${series.type}`], {\n                [styles['series--highlighted']]: isHighlighted,\n                [styles['series--dimmed']]: useHighlightDimmed && isDimmed,\n              })}\n            >\n              {series.type === 'area' ? (\n                <AreaSeries\n                  data={data}\n                  color={model.getInternalSeries(series).color}\n                  chartAreaClipPath={chartAreaClipPath}\n                />\n              ) : (\n                <ThresholdSeries\n                  data={data}\n                  xScale={model.computed.xScale}\n                  color={model.getInternalSeries(series).color}\n                  chartAreaClipPath={chartAreaClipPath}\n                />\n              )}\n            </g>\n          );\n        })}\n      </g>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}