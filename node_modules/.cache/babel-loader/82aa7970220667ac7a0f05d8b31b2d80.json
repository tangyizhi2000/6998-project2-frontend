{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport { useAppLayoutInternals } from './context';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * The Tools component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the split panel, which exists only if there is a split panel in side position;\n * the tools, or drawer, that contains the hide tools form and the children passed through the API;\n * the show tools form that contains the triggers for both the drawer and the\n * split panel in large viewports;\n */\nexport default function Tools(_ref) {\n  var children = _ref.children;\n  var _useAppLayoutInternal = useAppLayoutInternals(),\n    ariaLabels = _useAppLayoutInternal.ariaLabels,\n    disableBodyScroll = _useAppLayoutInternal.disableBodyScroll,\n    drawers = _useAppLayoutInternal.drawers,\n    handleSplitPanelClick = _useAppLayoutInternal.handleSplitPanelClick,\n    handleToolsClick = _useAppLayoutInternal.handleToolsClick,\n    hasDefaultToolsWidth = _useAppLayoutInternal.hasDefaultToolsWidth,\n    hasDrawerViewportOverlay = _useAppLayoutInternal.hasDrawerViewportOverlay,\n    isMobile = _useAppLayoutInternal.isMobile,\n    isSplitPanelOpen = _useAppLayoutInternal.isSplitPanelOpen,\n    isToolsOpen = _useAppLayoutInternal.isToolsOpen,\n    loseToolsFocus = _useAppLayoutInternal.loseToolsFocus,\n    splitPanel = _useAppLayoutInternal.splitPanel,\n    splitPanelControlId = _useAppLayoutInternal.splitPanelControlId,\n    splitPanelDisplayed = _useAppLayoutInternal.splitPanelDisplayed,\n    splitPanelPosition = _useAppLayoutInternal.splitPanelPosition,\n    splitPanelRefs = _useAppLayoutInternal.splitPanelRefs,\n    splitPanelToggle = _useAppLayoutInternal.splitPanelToggle,\n    tools = _useAppLayoutInternal.tools,\n    toolsControlId = _useAppLayoutInternal.toolsControlId,\n    toolsHide = _useAppLayoutInternal.toolsHide,\n    toolsRefs = _useAppLayoutInternal.toolsRefs,\n    toolsWidth = _useAppLayoutInternal.toolsWidth;\n  var hasSplitPanel = !!splitPanel && getSplitPanelStatus(splitPanelDisplayed, splitPanelPosition);\n  var hasToolsForm = getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);\n  var hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);\n  var isUnfocusable = hasDrawerViewportOverlay && !isToolsOpen;\n  /**\n   * If the drawers property is defined the SplitPanel will be mounted and rendered\n   * by the Drawers component.\n   */\n  if (toolsHide && !hasSplitPanel || drawers) {\n    return null;\n  }\n  return React.createElement(Transition, {\n    in: isToolsOpen !== null && isToolsOpen !== void 0 ? isToolsOpen : false\n  }, function (state, transitionEventsRef) {\n    var _clsx, _style, _clsx2, _clsx3;\n    var _a, _b, _c;\n    return React.createElement(\"div\", {\n      className: clsx(styles['tools-container'], (_clsx = {}, _defineProperty(_clsx, styles['disable-body-scroll'], disableBodyScroll), _defineProperty(_clsx, styles.unfocusable, isUnfocusable), _defineProperty(_clsx, testutilStyles['drawer-closed'], !isToolsOpen), _clsx)),\n      style: (_style = {}, _defineProperty(_style, customCssProps.toolsAnimationStartingOpacity, \"\".concat(hasSplitPanel && isSplitPanelOpen ? 1 : 0)), _defineProperty(_style, customCssProps.toolsWidth, hasDefaultToolsWidth ? '' : \"\".concat(toolsWidth, \"px\")), _style),\n      onBlur: function onBlur(e) {\n        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n          loseToolsFocus();\n        }\n      }\n    }, children, !toolsHide && React.createElement(\"aside\", {\n      id: toolsControlId,\n      \"aria-hidden\": !isToolsOpen ? true : false,\n      \"aria-label\": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _a !== void 0 ? _a : undefined,\n      className: clsx(styles.tools, (_clsx2 = {}, _defineProperty(_clsx2, styles.animating, state === 'entering'), _defineProperty(_clsx2, styles['has-tools-form-persistence'], hasToolsFormPersistence), _defineProperty(_clsx2, styles['is-tools-open'], isToolsOpen), _clsx2), testutilStyles.tools),\n      ref: state !== 'exiting' ? transitionEventsRef : undefined\n    }, React.createElement(\"div\", {\n      className: clsx(styles['animated-content'])\n    }, React.createElement(\"div\", {\n      className: clsx(styles['hide-tools'])\n    }, React.createElement(InternalButton, {\n      ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose) !== null && _b !== void 0 ? _b : undefined,\n      iconName: isMobile ? 'close' : 'angle-right',\n      onClick: function onClick() {\n        return handleToolsClick(false);\n      },\n      variant: \"icon\",\n      formAction: \"none\",\n      className: testutilStyles['tools-close'],\n      ref: toolsRefs.close\n    })), tools)), !isMobile && React.createElement(\"aside\", {\n      \"aria-hidden\": !hasToolsForm ? true : false,\n      \"aria-label\": (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _c !== void 0 ? _c : undefined,\n      className: clsx(styles['show-tools'], (_clsx3 = {}, _defineProperty(_clsx3, styles.animating, state === 'exiting'), _defineProperty(_clsx3, styles['has-tools-form'], hasToolsForm), _defineProperty(_clsx3, styles['has-tools-form-persistence'], hasToolsFormPersistence), _clsx3)),\n      ref: state === 'exiting' ? transitionEventsRef : undefined,\n      \"data-testid\": \"side-split-panel-drawer\"\n    }, !toolsHide && React.createElement(TriggerButton, {\n      ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle,\n      ariaControls: toolsControlId,\n      ariaExpanded: isToolsOpen,\n      iconName: \"status-info\",\n      onClick: function onClick() {\n        return handleToolsClick(!isToolsOpen);\n      },\n      selected: hasSplitPanel && isToolsOpen,\n      className: testutilStyles['tools-toggle'],\n      ref: toolsRefs.toggle\n    }), hasSplitPanel && splitPanelToggle.displayed && React.createElement(TriggerButton, {\n      ariaLabel: splitPanelToggle.ariaLabel,\n      ariaControls: splitPanelControlId,\n      ariaExpanded: !!isSplitPanelOpen,\n      iconName: \"view-vertical\",\n      onClick: function onClick() {\n        return handleSplitPanelClick();\n      },\n      selected: hasSplitPanel && isSplitPanelOpen,\n      className: splitPanelStyles['open-button'],\n      ref: splitPanelRefs.toggle\n    })));\n  });\n}\n/**\n * This simple function returns the presence of the split panel as a child of the\n * Tools component. It must exist and be in side position.\n */\nfunction getSplitPanelStatus(splitPanelDisplayed, splitPanelPosition) {\n  return splitPanelDisplayed && splitPanelPosition === 'side' ? true : false;\n}\n/**\n * By default the Tools form is styled as display: none; This behavior should\n * be unchanged in mobile viewports where the Tools form is always suppressed.\n * In large viewports, however the Tools form and its corresponding buttons\n * should be present in the UI under the below circumstances.\n */\nfunction getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide) {\n  var hasToolsForm = false;\n  if (!isMobile) {\n    // Both the Split Panel and Tools button are needed\n    if (hasSplitPanel && !toolsHide) {\n      hasToolsForm = true;\n    }\n    // The Split Panel button is needed\n    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {\n      hasToolsForm = true;\n    }\n    // The Tools button is needed\n    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {\n      hasToolsForm = true;\n    }\n  }\n  return hasToolsForm;\n}\n/**\n * Under two scenarios the Tools form that contains the triggers\n * for the Tools content and the Split Panel may be persistent\n * in the UI (as opposed to disappearing when one of the drawers\n * is open). This will also add a white background as opposed to the\n * default transparent background. The buttons will present and in a\n * selected / not selected state.\n */\nfunction getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide) {\n  var hasToolsFormPersistence = false;\n  // Both Tools and Split Panel exist and one or both is open\n  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {\n    hasToolsFormPersistence = true;\n  }\n  return hasToolsFormPersistence;\n}","map":{"version":3,"mappings":"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","names":["React","clsx","InternalButton","useAppLayoutInternals","TriggerButton","styles","splitPanelStyles","testutilStyles","Transition","customCssProps","Tools","children","ariaLabels","disableBodyScroll","drawers","handleSplitPanelClick","handleToolsClick","hasDefaultToolsWidth","hasDrawerViewportOverlay","isMobile","isSplitPanelOpen","isToolsOpen","loseToolsFocus","splitPanel","splitPanelControlId","splitPanelDisplayed","splitPanelPosition","splitPanelRefs","splitPanelToggle","tools","toolsControlId","toolsHide","toolsRefs","toolsWidth","hasSplitPanel","getSplitPanelStatus","hasToolsForm","getToolsFormStatus","hasToolsFormPersistence","getToolsFormPersistence","isUnfocusable","in","state","transitionEventsRef","className","unfocusable","style","toolsAnimationStartingOpacity","onBlur","e","relatedTarget","currentTarget","contains","id","undefined","animating","ref","ariaLabel","toolsClose","iconName","onClick","variant","formAction","close","toolsToggle","ariaControls","ariaExpanded","selected","toggle","displayed"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh/lib/default/app-layout/visual-refresh/tools.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport { useAppLayoutInternals } from './context';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\ninterface ToolsProps {\n  children: React.ReactNode;\n}\n\n/**\n * The Tools component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the split panel, which exists only if there is a split panel in side position;\n * the tools, or drawer, that contains the hide tools form and the children passed through the API;\n * the show tools form that contains the triggers for both the drawer and the\n * split panel in large viewports;\n */\nexport default function Tools({ children }: ToolsProps) {\n  const {\n    ariaLabels,\n    disableBodyScroll,\n    drawers,\n    handleSplitPanelClick,\n    handleToolsClick,\n    hasDefaultToolsWidth,\n    hasDrawerViewportOverlay,\n    isMobile,\n    isSplitPanelOpen,\n    isToolsOpen,\n    loseToolsFocus,\n    splitPanel,\n    splitPanelControlId,\n    splitPanelDisplayed,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelToggle,\n    tools,\n    toolsControlId,\n    toolsHide,\n    toolsRefs,\n    toolsWidth,\n  } = useAppLayoutInternals();\n\n  const hasSplitPanel = !!splitPanel && getSplitPanelStatus(splitPanelDisplayed, splitPanelPosition);\n  const hasToolsForm = getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);\n  const hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);\n  const isUnfocusable = hasDrawerViewportOverlay && !isToolsOpen;\n\n  /**\n   * If the drawers property is defined the SplitPanel will be mounted and rendered\n   * by the Drawers component.\n   */\n  if ((toolsHide && !hasSplitPanel) || drawers) {\n    return null;\n  }\n\n  return (\n    <Transition in={isToolsOpen ?? false}>\n      {(state, transitionEventsRef) => (\n        <div\n          className={clsx(styles['tools-container'], {\n            [styles['disable-body-scroll']]: disableBodyScroll,\n            [styles.unfocusable]: isUnfocusable,\n            [testutilStyles['drawer-closed']]: !isToolsOpen,\n          })}\n          style={{\n            [customCssProps.toolsAnimationStartingOpacity]: `${hasSplitPanel && isSplitPanelOpen ? 1 : 0}`,\n            // Overwrite the default tools width (depends on breakpoints) only when the `toolsWidth` property has been set.\n            [customCssProps.toolsWidth]: hasDefaultToolsWidth ? '' : `${toolsWidth}px`,\n          }}\n          onBlur={e => {\n            if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n              loseToolsFocus();\n            }\n          }}\n        >\n          {children}\n\n          {!toolsHide && (\n            <aside\n              id={toolsControlId}\n              aria-hidden={!isToolsOpen ? true : false}\n              aria-label={ariaLabels?.tools ?? undefined}\n              className={clsx(\n                styles.tools,\n                {\n                  [styles.animating]: state === 'entering',\n                  [styles['has-tools-form-persistence']]: hasToolsFormPersistence,\n                  [styles['is-tools-open']]: isToolsOpen,\n                },\n                testutilStyles.tools\n              )}\n              ref={state !== 'exiting' ? transitionEventsRef : undefined}\n            >\n              <div className={clsx(styles['animated-content'])}>\n                <div className={clsx(styles['hide-tools'])}>\n                  <InternalButton\n                    ariaLabel={ariaLabels?.toolsClose ?? undefined}\n                    iconName={isMobile ? 'close' : 'angle-right'}\n                    onClick={() => handleToolsClick(false)}\n                    variant=\"icon\"\n                    formAction=\"none\"\n                    className={testutilStyles['tools-close']}\n                    ref={toolsRefs.close}\n                  />\n                </div>\n\n                {tools}\n              </div>\n            </aside>\n          )}\n\n          {!isMobile && (\n            <aside\n              aria-hidden={!hasToolsForm ? true : false}\n              aria-label={ariaLabels?.tools ?? undefined}\n              className={clsx(styles['show-tools'], {\n                [styles.animating]: state === 'exiting',\n                [styles['has-tools-form']]: hasToolsForm,\n                [styles['has-tools-form-persistence']]: hasToolsFormPersistence,\n              })}\n              ref={state === 'exiting' ? transitionEventsRef : undefined}\n              data-testid=\"side-split-panel-drawer\"\n            >\n              {!toolsHide && (\n                <TriggerButton\n                  ariaLabel={ariaLabels?.toolsToggle}\n                  ariaControls={toolsControlId}\n                  ariaExpanded={isToolsOpen}\n                  iconName=\"status-info\"\n                  onClick={() => handleToolsClick(!isToolsOpen)}\n                  selected={hasSplitPanel && isToolsOpen}\n                  className={testutilStyles['tools-toggle']}\n                  ref={toolsRefs.toggle}\n                />\n              )}\n\n              {hasSplitPanel && splitPanelToggle.displayed && (\n                <TriggerButton\n                  ariaLabel={splitPanelToggle.ariaLabel}\n                  ariaControls={splitPanelControlId}\n                  ariaExpanded={!!isSplitPanelOpen}\n                  iconName=\"view-vertical\"\n                  onClick={() => handleSplitPanelClick()}\n                  selected={hasSplitPanel && isSplitPanelOpen}\n                  className={splitPanelStyles['open-button']}\n                  ref={splitPanelRefs.toggle}\n                />\n              )}\n            </aside>\n          )}\n        </div>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * This simple function returns the presence of the split panel as a child of the\n * Tools component. It must exist and be in side position.\n */\nfunction getSplitPanelStatus(splitPanelDisplayed: boolean, splitPanelPosition: string) {\n  return splitPanelDisplayed && splitPanelPosition === 'side' ? true : false;\n}\n\n/**\n * By default the Tools form is styled as display: none; This behavior should\n * be unchanged in mobile viewports where the Tools form is always suppressed.\n * In large viewports, however the Tools form and its corresponding buttons\n * should be present in the UI under the below circumstances.\n */\nfunction getToolsFormStatus(\n  hasSplitPanel: boolean,\n  isMobile: boolean,\n  isSplitPanelOpen?: boolean,\n  isToolsOpen?: boolean,\n  toolsHide?: boolean\n) {\n  let hasToolsForm = false;\n\n  if (!isMobile) {\n    // Both the Split Panel and Tools button are needed\n    if (hasSplitPanel && !toolsHide) {\n      hasToolsForm = true;\n    }\n\n    // The Split Panel button is needed\n    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {\n      hasToolsForm = true;\n    }\n\n    // The Tools button is needed\n    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {\n      hasToolsForm = true;\n    }\n  }\n\n  return hasToolsForm;\n}\n\n/**\n * Under two scenarios the Tools form that contains the triggers\n * for the Tools content and the Split Panel may be persistent\n * in the UI (as opposed to disappearing when one of the drawers\n * is open). This will also add a white background as opposed to the\n * default transparent background. The buttons will present and in a\n * selected / not selected state.\n */\nfunction getToolsFormPersistence(\n  hasSplitPanel: boolean,\n  isSplitPanelOpen?: boolean,\n  isToolsOpen?: boolean,\n  toolsHide?: boolean\n) {\n  let hasToolsFormPersistence = false;\n\n  // Both Tools and Split Panel exist and one or both is open\n  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {\n    hasToolsFormPersistence = true;\n  }\n\n  return hasToolsFormPersistence;\n}\n"]},"metadata":{},"sourceType":"module"}