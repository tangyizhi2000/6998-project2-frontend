{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { InternalButton } from '../button/internal';\nimport { AdditionalInfo } from './additional-info';\nimport { Row } from './row';\nimport styles from './styles.css.js';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport InternalBox from '../box/internal';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport LiveRegion from '../internal/components/live-region';\nvar InternalAttributeEditor = React.forwardRef(function (_a, ref) {\n  var additionalInfo = _a.additionalInfo,\n    disableAddButton = _a.disableAddButton,\n    definition = _a.definition,\n    items = _a.items,\n    _a$isItemRemovable = _a.isItemRemovable,\n    isItemRemovable = _a$isItemRemovable === void 0 ? function () {\n      return true;\n    } : _a$isItemRemovable,\n    empty = _a.empty,\n    addButtonText = _a.addButtonText,\n    removeButtonText = _a.removeButtonText,\n    removeButtonAriaLabel = _a.removeButtonAriaLabel,\n    i18nStrings = _a.i18nStrings,\n    onAddButtonClick = _a.onAddButtonClick,\n    onRemoveButtonClick = _a.onRemoveButtonClick,\n    _a$__internalRootRef = _a.__internalRootRef,\n    __internalRootRef = _a$__internalRootRef === void 0 ? null : _a$__internalRootRef,\n    props = __rest(_a, [\"additionalInfo\", \"disableAddButton\", \"definition\", \"items\", \"isItemRemovable\", \"empty\", \"addButtonText\", \"removeButtonText\", \"removeButtonAriaLabel\", \"i18nStrings\", \"onAddButtonClick\", \"onRemoveButtonClick\", \"__internalRootRef\"]);\n  var _useContainerBreakpoi = useContainerBreakpoints(['default', 'xxs', 'xs']),\n    _useContainerBreakpoi2 = _slicedToArray(_useContainerBreakpoi, 2),\n    breakpoint = _useContainerBreakpoi2[0],\n    breakpointRef = _useContainerBreakpoi2[1];\n  var removeButtonRefs = useRef([]);\n  var addButtonRef = useRef(null);\n  var wasNonEmpty = useRef(false);\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    removalAnnouncement = _useState2[0],\n    setRemovalAnnouncement = _useState2[1];\n  var baseProps = getBaseProps(props);\n  var isEmpty = items && items.length === 0;\n  wasNonEmpty.current = wasNonEmpty.current || !isEmpty;\n  useImperativeHandle(ref, function () {\n    return {\n      focusRemoveButton: function focusRemoveButton(rowIndex) {\n        var _a;\n        (_a = removeButtonRefs.current[rowIndex]) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      focusAddButton: function focusAddButton() {\n        var _a;\n        (_a = addButtonRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      }\n    };\n  });\n  var mergedRef = useMergeRefs(breakpointRef, __internalRootRef);\n  var additionalInfoId = useUniqueId('attribute-editor-info');\n  var infoAriaDescribedBy = additionalInfo ? additionalInfoId : undefined;\n  var prevItemsLength = usePrevious(items.length);\n  React.useEffect(function () {\n    if (prevItemsLength && prevItemsLength > items.length && (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.itemRemovedAriaLive)) {\n      setRemovalAnnouncement(i18nStrings.itemRemovedAriaLive);\n    } else {\n      setRemovalAnnouncement('');\n    }\n    // we only want to announce when the number of items decreases (i.e. when an item is removed)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [items, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.itemRemovedAriaLive]);\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    ref: mergedRef,\n    className: clsx(baseProps.className, styles.root)\n  }), React.createElement(InternalBox, {\n    margin: {\n      bottom: 'l'\n    }\n  }, isEmpty && React.createElement(\"div\", {\n    className: clsx(styles.empty, wasNonEmpty.current && styles['empty-appear'])\n  }, empty), items.map(function (item, index) {\n    return React.createElement(Row, {\n      key: index,\n      index: index,\n      breakpoint: breakpoint,\n      item: item,\n      definition: definition,\n      i18nStrings: i18nStrings,\n      removable: isItemRemovable(item),\n      removeButtonText: removeButtonText,\n      removeButtonRefs: removeButtonRefs.current,\n      onRemoveButtonClick: onRemoveButtonClick,\n      removeButtonAriaLabel: removeButtonAriaLabel\n    });\n  })), React.createElement(InternalButton, {\n    className: styles['add-button'],\n    disabled: disableAddButton,\n    onClick: onAddButtonClick,\n    formAction: \"none\",\n    ref: addButtonRef,\n    ariaDescribedby: infoAriaDescribedBy\n  }, addButtonText), React.createElement(LiveRegion, {\n    \"data-testid\": \"removal-announcement\",\n    delay: 5,\n    key: items.length\n  }, removalAnnouncement), !!additionalInfo && React.createElement(AdditionalInfo, {\n    id: infoAriaDescribedBy\n  }, additionalInfo));\n});\nexport default InternalAttributeEditor;","map":{"version":3,"mappings":"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","names":["React","useImperativeHandle","useRef","useState","clsx","getBaseProps","InternalButton","AdditionalInfo","Row","styles","useContainerBreakpoints","InternalBox","useMergeRefs","useUniqueId","usePrevious","LiveRegion","InternalAttributeEditor","forwardRef","_a","ref","additionalInfo","disableAddButton","definition","items","isItemRemovable","empty","addButtonText","removeButtonText","removeButtonAriaLabel","i18nStrings","onAddButtonClick","onRemoveButtonClick","__internalRootRef","props","breakpoint","breakpointRef","removeButtonRefs","addButtonRef","wasNonEmpty","removalAnnouncement","setRemovalAnnouncement","baseProps","isEmpty","length","current","focusRemoveButton","rowIndex","focus","focusAddButton","mergedRef","additionalInfoId","infoAriaDescribedBy","undefined","prevItemsLength","useEffect","itemRemovedAriaLive","className","root","margin","bottom","map","item","index","key","removable","disabled","onClick","formAction","ariaDescribedby","delay","id"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/attribute-editor/lib/default/attribute-editor/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { getBaseProps } from '../internal/base-component';\n\nimport { ButtonProps } from '../button/interfaces';\nimport { InternalButton } from '../button/internal';\n\nimport { AttributeEditorForwardRefType, AttributeEditorProps } from './interfaces';\nimport { AdditionalInfo } from './additional-info';\nimport { Row } from './row';\n\nimport styles from './styles.css.js';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport InternalBox from '../box/internal';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { SomeRequired } from '../internal/types';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport LiveRegion from '../internal/components/live-region';\n\ntype InternalAttributeEditorProps<T> = SomeRequired<AttributeEditorProps<T>, 'items'> & InternalBaseComponentProps;\n\nconst InternalAttributeEditor = React.forwardRef(\n  <T,>(\n    {\n      additionalInfo,\n      disableAddButton,\n      definition,\n      items,\n      isItemRemovable = () => true,\n      empty,\n      addButtonText,\n      removeButtonText,\n      removeButtonAriaLabel,\n      i18nStrings,\n      onAddButtonClick,\n      onRemoveButtonClick,\n      __internalRootRef = null,\n      ...props\n    }: InternalAttributeEditorProps<T>,\n    ref: React.Ref<AttributeEditorProps.Ref>\n  ) => {\n    const [breakpoint, breakpointRef] = useContainerBreakpoints(['default', 'xxs', 'xs']);\n    const removeButtonRefs = useRef<Array<ButtonProps.Ref | undefined>>([]);\n    const addButtonRef = useRef<ButtonProps.Ref>(null);\n    const wasNonEmpty = useRef<boolean>(false);\n    const [removalAnnouncement, setRemovalAnnouncement] = useState<string>('');\n\n    const baseProps = getBaseProps(props);\n    const isEmpty = items && items.length === 0;\n\n    wasNonEmpty.current = wasNonEmpty.current || !isEmpty;\n\n    useImperativeHandle(ref, () => ({\n      focusRemoveButton(rowIndex: number) {\n        removeButtonRefs.current[rowIndex]?.focus();\n      },\n      focusAddButton() {\n        addButtonRef.current?.focus();\n      },\n    }));\n\n    const mergedRef = useMergeRefs(breakpointRef, __internalRootRef);\n\n    const additionalInfoId = useUniqueId('attribute-editor-info');\n    const infoAriaDescribedBy = additionalInfo ? additionalInfoId : undefined;\n\n    const prevItemsLength = usePrevious(items.length);\n\n    React.useEffect(() => {\n      if (prevItemsLength && prevItemsLength > items.length && i18nStrings?.itemRemovedAriaLive) {\n        setRemovalAnnouncement(i18nStrings.itemRemovedAriaLive);\n      } else {\n        setRemovalAnnouncement('');\n      }\n      // we only want to announce when the number of items decreases (i.e. when an item is removed)\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [items, i18nStrings?.itemRemovedAriaLive]);\n\n    return (\n      <div {...baseProps} ref={mergedRef} className={clsx(baseProps.className, styles.root)}>\n        <InternalBox margin={{ bottom: 'l' }}>\n          {isEmpty && <div className={clsx(styles.empty, wasNonEmpty.current && styles['empty-appear'])}>{empty}</div>}\n          {items.map((item, index) => (\n            <Row<T>\n              key={index}\n              index={index}\n              breakpoint={breakpoint}\n              item={item}\n              definition={definition}\n              i18nStrings={i18nStrings}\n              removable={isItemRemovable(item)}\n              removeButtonText={removeButtonText}\n              removeButtonRefs={removeButtonRefs.current}\n              onRemoveButtonClick={onRemoveButtonClick}\n              removeButtonAriaLabel={removeButtonAriaLabel}\n            />\n          ))}\n        </InternalBox>\n\n        <InternalButton\n          className={styles['add-button']}\n          disabled={disableAddButton}\n          onClick={onAddButtonClick}\n          formAction=\"none\"\n          ref={addButtonRef}\n          ariaDescribedby={infoAriaDescribedBy}\n        >\n          {addButtonText}\n        </InternalButton>\n        <LiveRegion data-testid=\"removal-announcement\" delay={5} key={items.length}>\n          {removalAnnouncement}\n        </LiveRegion>\n        {!!additionalInfo && <AdditionalInfo id={infoAriaDescribedBy}>{additionalInfo}</AdditionalInfo>}\n      </div>\n    );\n  }\n) as AttributeEditorForwardRefType;\n\nexport default InternalAttributeEditor;\n"]},"metadata":{},"sourceType":"module"}