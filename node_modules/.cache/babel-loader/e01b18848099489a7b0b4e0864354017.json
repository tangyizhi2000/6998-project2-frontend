{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { usePointerEvents } from '../utils/use-pointer-events';\nimport { useKeyboardEvents } from '../utils/use-keyboard-events';\nimport { Drawer } from './index';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport ResizeHandler from '../../split-panel/icons/resize-handler';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport styles from './styles.css.js';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\nexport const ResizableDrawer = _a => {\n  var _b, _c, _d, _e;\n  var {\n      onResize,\n      size,\n      getMaxWidth,\n      refs,\n      activeDrawer,\n      toolsContent\n    } = _a,\n    props = __rest(_a, [\"onResize\", \"size\", \"getMaxWidth\", \"refs\", \"activeDrawer\", \"toolsContent\"]);\n  const {\n    isOpen,\n    children,\n    isMobile\n  } = props;\n  const MIN_WIDTH = (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) && activeDrawer.defaultSize < 280 ? activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize : 280;\n  const [relativeSize, setRelativeSize] = useState(0);\n  useEffect(() => {\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    const handle = requestAnimationFrame(() => {\n      const maxSize = getMaxWidth();\n      setRelativeSize(size / maxSize * 100);\n    });\n    return () => cancelAnimationFrame(handle);\n  }, [size, getMaxWidth]);\n  const setSidePanelWidth = width => {\n    const maxWidth = getMaxWidth();\n    const size = getLimitedValue(MIN_WIDTH, width, maxWidth);\n    const id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;\n    if (isOpen && id && maxWidth >= MIN_WIDTH) {\n      onResize({\n        size,\n        id\n      });\n    }\n  };\n  const drawerRefObject = useRef(null);\n  const sizeControlProps = {\n    position: 'side',\n    panelRef: drawerRefObject,\n    handleRef: refs.slider,\n    onResize: setSidePanelWidth\n  };\n  const onSliderPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n  const resizeHandle = React.createElement(\"div\", {\n    ref: refs.slider,\n    role: \"slider\",\n    tabIndex: 0,\n    \"aria-label\": (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.resizeHandle,\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": relativeSize,\n    className: clsx(splitPanelStyles.slider, splitPanelStyles[`slider-side`], testutilStyles['drawers-slider']),\n    onKeyDown: onKeyDown,\n    onPointerDown: onSliderPointerDown\n  }, React.createElement(ResizeHandler, {\n    className: clsx(splitPanelStyles['slider-icon'], splitPanelStyles[`slider-icon-side`])\n  }));\n  return React.createElement(Drawer, Object.assign({}, props, {\n    ref: drawerRefObject,\n    isHidden: !activeDrawer,\n    resizeHandle: !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && React.createElement(\"div\", {\n      className: splitPanelStyles['slider-wrapper-side']\n    }, resizeHandle),\n    drawersAriaLabels: {\n      openLabel: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.triggerButton,\n      mainLabel: (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _d === void 0 ? void 0 : _d.content,\n      closeLabel: (_e = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _e === void 0 ? void 0 : _e.closeButton\n    }\n  }), toolsContent && React.createElement(\"div\", {\n    className: clsx((activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== TOOLS_DRAWER_ID && styles.hide)\n  }, toolsContent), (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== TOOLS_DRAWER_ID ? children : null);\n};","map":{"version":3,"mappings":"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","names":["clsx","React","useEffect","useState","useRef","getLimitedValue","usePointerEvents","useKeyboardEvents","Drawer","testutilStyles","ResizeHandler","splitPanelStyles","styles","TOOLS_DRAWER_ID","ResizableDrawer","_a","onResize","size","getMaxWidth","refs","activeDrawer","toolsContent","props","isOpen","children","isMobile","MIN_WIDTH","defaultSize","relativeSize","setRelativeSize","handle","requestAnimationFrame","maxSize","cancelAnimationFrame","setSidePanelWidth","width","maxWidth","id","drawerRefObject","sizeControlProps","position","panelRef","handleRef","slider","onSliderPointerDown","onKeyDown","resizeHandle","ref","role","tabIndex","ariaLabels","className","onPointerDown","isHidden","resizable","drawersAriaLabels","openLabel","triggerButton","mainLabel","content","closeLabel","closeButton","hide"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/app-layout/drawer/lib/default/app-layout/drawer/resizable-drawer.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect, useState, useRef } from 'react';\n\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { usePointerEvents } from '../utils/use-pointer-events';\nimport { useKeyboardEvents } from '../utils/use-keyboard-events';\nimport { SizeControlProps } from '../utils/interfaces';\nimport { Drawer } from './index';\nimport testutilStyles from '../test-classes/styles.css.js';\n\nimport ResizeHandler from '../../split-panel/icons/resize-handler';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport styles from './styles.css.js';\nimport { ResizableDrawerProps } from './interfaces';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\n\nexport const ResizableDrawer = ({\n  onResize,\n  size,\n  getMaxWidth,\n  refs,\n  activeDrawer,\n  toolsContent,\n  ...props\n}: ResizableDrawerProps) => {\n  const { isOpen, children, isMobile } = props;\n\n  const MIN_WIDTH = activeDrawer?.defaultSize && activeDrawer.defaultSize < 280 ? activeDrawer?.defaultSize : 280;\n  const [relativeSize, setRelativeSize] = useState(0);\n\n  useEffect(() => {\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    const handle = requestAnimationFrame(() => {\n      const maxSize = getMaxWidth();\n      setRelativeSize((size / maxSize) * 100);\n    });\n    return () => cancelAnimationFrame(handle);\n  }, [size, getMaxWidth]);\n\n  const setSidePanelWidth = (width: number) => {\n    const maxWidth = getMaxWidth();\n    const size = getLimitedValue(MIN_WIDTH, width, maxWidth);\n    const id = activeDrawer?.id;\n\n    if (isOpen && id && maxWidth >= MIN_WIDTH) {\n      onResize({ size, id });\n    }\n  };\n\n  const drawerRefObject = useRef<HTMLDivElement>(null);\n\n  const sizeControlProps: SizeControlProps = {\n    position: 'side',\n    panelRef: drawerRefObject,\n    handleRef: refs.slider,\n    onResize: setSidePanelWidth,\n  };\n\n  const onSliderPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n\n  const resizeHandle = (\n    <div\n      ref={refs.slider}\n      role=\"slider\"\n      tabIndex={0}\n      aria-label={activeDrawer?.ariaLabels?.resizeHandle}\n      aria-valuemax={100}\n      aria-valuemin={0}\n      aria-valuenow={relativeSize}\n      className={clsx(splitPanelStyles.slider, splitPanelStyles[`slider-side`], testutilStyles['drawers-slider'])}\n      onKeyDown={onKeyDown}\n      onPointerDown={onSliderPointerDown}\n    >\n      <ResizeHandler className={clsx(splitPanelStyles['slider-icon'], splitPanelStyles[`slider-icon-side`])} />\n    </div>\n  );\n\n  return (\n    <Drawer\n      {...props}\n      ref={drawerRefObject}\n      isHidden={!activeDrawer}\n      resizeHandle={\n        !isMobile &&\n        activeDrawer?.resizable && <div className={splitPanelStyles['slider-wrapper-side']}>{resizeHandle}</div>\n      }\n      drawersAriaLabels={{\n        openLabel: activeDrawer?.ariaLabels?.triggerButton,\n        mainLabel: activeDrawer?.ariaLabels?.content,\n        closeLabel: activeDrawer?.ariaLabels?.closeButton,\n      }}\n    >\n      {toolsContent && <div className={clsx(activeDrawer?.id !== TOOLS_DRAWER_ID && styles.hide)}>{toolsContent}</div>}\n      {activeDrawer?.id !== TOOLS_DRAWER_ID ? children : null}\n    </Drawer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}