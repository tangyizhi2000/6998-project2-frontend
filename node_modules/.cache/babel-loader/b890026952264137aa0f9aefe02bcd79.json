{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport { InternalButton } from '../../button/internal';\nimport SplitPanel from './split-panel';\nimport TriggerButton from './trigger-button';\nimport { useAppLayoutInternals } from './context';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport OverflowMenu from '../drawer/overflow-menu';\nimport { splitItems } from '../drawer/drawers-helpers';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\n/**\n * The Drawers root component is mounted in the AppLayout index file. It will only\n * render if the drawers are defined, and it will take over the mounting of and\n * rendering of the Tools and SplitPanel (side position) if they exist. If drawers\n * do not exist then the Tools and SplitPanel will be handled by the Tools component.\n */\nexport default function Drawers() {\n  const {\n    disableBodyScroll,\n    drawers,\n    drawersTriggerCount,\n    hasDrawerViewportOverlay,\n    hasOpenDrawer,\n    isNavigationOpen,\n    navigationHide,\n    isMobile\n  } = useAppLayoutInternals();\n  const isUnfocusable = hasDrawerViewportOverlay && isNavigationOpen && !navigationHide;\n  if (!drawers || drawersTriggerCount === 0) {\n    return null;\n  }\n  return React.createElement(\"div\", {\n    className: clsx(styles['drawers-container'], {\n      [styles['disable-body-scroll']]: disableBodyScroll,\n      [styles['has-open-drawer']]: hasOpenDrawer,\n      [styles.unfocusable]: isUnfocusable\n    })\n  }, React.createElement(SplitPanel.Side, null), React.createElement(ActiveDrawer, null), !isMobile && React.createElement(DesktopTriggers, null));\n}\nfunction ActiveDrawer() {\n  var _a, _b, _c, _d;\n  const {\n    activeDrawerId,\n    ariaLabels,\n    drawers,\n    drawersRefs,\n    handleDrawersClick,\n    handleToolsClick,\n    hasDrawerViewportOverlay,\n    isMobile,\n    isNavigationOpen,\n    navigationHide,\n    loseDrawersFocus,\n    resizeHandle,\n    drawerSize,\n    drawersMaxWidth,\n    drawerRef\n  } = useAppLayoutInternals();\n  const activeDrawer = (_a = drawers === null || drawers === void 0 ? void 0 : drawers.find(item => item.id === activeDrawerId)) !== null && _a !== void 0 ? _a : null;\n  const MIN_WIDTH = 290;\n  const computedAriaLabels = {\n    closeButton: activeDrawerId ? (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,\n    content: activeDrawerId ? (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.content : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools\n  };\n  const isHidden = !activeDrawerId;\n  const isUnfocusable = isHidden || hasDrawerViewportOverlay && isNavigationOpen && !navigationHide;\n  const isToolsDrawer = activeDrawerId === TOOLS_DRAWER_ID;\n  const toolsContent = (_d = drawers === null || drawers === void 0 ? void 0 : drawers.find(drawer => drawer.id === TOOLS_DRAWER_ID)) === null || _d === void 0 ? void 0 : _d.content;\n  const size = Math.max(Math.min(drawersMaxWidth, drawerSize), MIN_WIDTH);\n  return React.createElement(\"aside\", {\n    id: activeDrawerId,\n    \"aria-hidden\": isHidden,\n    \"aria-label\": computedAriaLabels.content,\n    className: clsx(styles.drawer, {\n      [styles['is-drawer-open']]: activeDrawerId,\n      [styles.unfocusable]: isUnfocusable,\n      [testutilStyles['active-drawer']]: activeDrawerId,\n      [testutilStyles.tools]: isToolsDrawer\n    }),\n    style: Object.assign({}, !isMobile && drawerSize && {\n      [customCssProps.drawerSize]: `${size}px`\n    }),\n    ref: drawerRef,\n    onBlur: e => {\n      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n        loseDrawersFocus();\n      }\n    }\n  }, !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && resizeHandle, React.createElement(\"div\", {\n    className: styles['drawer-content-container']\n  }, React.createElement(\"div\", {\n    className: clsx(styles['drawer-close-button'])\n  }, React.createElement(InternalButton, {\n    ariaLabel: computedAriaLabels.closeButton,\n    className: clsx({\n      [testutilStyles['active-drawer-close-button']]: activeDrawerId,\n      [testutilStyles['tools-close']]: isToolsDrawer\n    }),\n    formAction: \"none\",\n    iconName: isMobile ? 'close' : 'angle-right',\n    onClick: () => {\n      handleDrawersClick(activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : undefined);\n      handleToolsClick(false);\n    },\n    ref: drawersRefs.close,\n    variant: \"icon\"\n  })), toolsContent && React.createElement(\"div\", {\n    className: clsx(styles['drawer-content'], activeDrawerId !== TOOLS_DRAWER_ID && styles['drawer-content-hidden'])\n  }, toolsContent), activeDrawerId !== TOOLS_DRAWER_ID && React.createElement(\"div\", {\n    className: styles['drawer-content']\n  }, activeDrawerId && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content))));\n}\n/**\n * The DesktopTriggers will render the trigger buttons for Tools, Drawers, and the\n * SplitPanel in non mobile viewports. Changes to the activeDrawerId need to be\n * tracked by the previousActiveDrawerId property in order to appropriately apply\n * the ref required to manage focus control.\n */\nfunction DesktopTriggers() {\n  const {\n    activeDrawerId,\n    drawers,\n    drawersAriaLabel,\n    drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel,\n    drawersRefs,\n    drawersTriggerCount,\n    handleDrawersClick,\n    handleSplitPanelClick,\n    hasOpenDrawer,\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelControlId,\n    splitPanelDisplayed,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelToggle,\n    splitPanelReportedHeaderHeight,\n    splitPanelReportedSize\n  } = useAppLayoutInternals();\n  const hasMultipleTriggers = drawersTriggerCount > 1;\n  const hasSplitPanel = splitPanel && splitPanelDisplayed && splitPanelPosition === 'side';\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  const [containerHeight, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxHeight);\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n  const splitPanelHeight = isSplitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : splitPanelReportedHeaderHeight;\n  const getIndexOfOverflowItem = () => {\n    if (containerHeight) {\n      const ITEM_HEIGHT = 48;\n      const overflowSpot = activeDrawerId && isSplitPanelOpen ? (containerHeight - splitPanelReportedHeaderHeight) / 1.5 : (containerHeight - splitPanelHeight) / 1.5;\n      const index = Math.floor(overflowSpot / ITEM_HEIGHT);\n      let splitPanelItem = 0;\n      if (hasSplitPanel && splitPanelToggle.displayed) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n    return 0;\n  };\n  const {\n    visibleItems,\n    overflowItems\n  } = splitItems(drawers !== null && drawers !== void 0 ? drawers : undefined, getIndexOfOverflowItem(), activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  return React.createElement(\"aside\", {\n    className: clsx(styles['drawers-desktop-triggers-container'], {\n      [styles['has-multiple-triggers']]: hasMultipleTriggers,\n      [styles['has-open-drawer']]: hasOpenDrawer\n    }),\n    \"aria-label\": drawersAriaLabel,\n    ref: triggersContainerRef,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles['drawers-trigger-content'], {\n      [styles['has-multiple-triggers']]: hasMultipleTriggers,\n      [styles['has-open-drawer']]: hasOpenDrawer\n    }),\n    role: \"toolbar\",\n    \"aria-orientation\": \"vertical\"\n  }, visibleItems.map(item => {\n    var _a;\n    return React.createElement(TriggerButton, {\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      ariaExpanded: item.id === activeDrawerId,\n      ariaControls: activeDrawerId === item.id ? item.id : undefined,\n      className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']),\n      iconName: item.trigger.iconName,\n      iconSvg: item.trigger.iconSvg,\n      key: item.id,\n      onClick: () => handleDrawersClick(item.id),\n      ref: item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined,\n      selected: item.id === activeDrawerId,\n      badge: item.badge,\n      testId: `awsui-app-layout-trigger-${item.id}`\n    });\n  }), overflowItems.length > 0 && React.createElement(OverflowMenu, {\n    items: overflowItems,\n    ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel,\n    customTriggerBuilder: _ref => {\n      let {\n        onClick,\n        triggerRef,\n        ariaLabel,\n        ariaExpanded,\n        testUtilsClass\n      } = _ref;\n      return React.createElement(TriggerButton, {\n        ref: triggerRef,\n        ariaLabel: ariaLabel,\n        ariaExpanded: ariaExpanded,\n        badge: overflowMenuHasBadge,\n        className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testUtilsClass),\n        iconName: \"ellipsis\",\n        onClick: onClick\n      });\n    },\n    onItemClick: _ref2 => {\n      let {\n        detail\n      } = _ref2;\n      handleDrawersClick(detail.id);\n    }\n  }), hasSplitPanel && splitPanelToggle.displayed && React.createElement(TriggerButton, {\n    ariaLabel: splitPanelToggle.ariaLabel,\n    ariaControls: splitPanelControlId,\n    ariaExpanded: !!isSplitPanelOpen,\n    className: clsx(styles['drawers-trigger'], splitPanelStyles['open-button']),\n    iconName: \"view-vertical\",\n    onClick: () => handleSplitPanelClick(),\n    selected: hasSplitPanel && isSplitPanelOpen,\n    ref: splitPanelRefs.toggle\n  })));\n}\n/**\n * The MobileTriggers will be mounted inside of the AppBar component and\n * only rendered when Drawers are defined in mobile viewports. The same logic\n * will in the AppBar component will suppress the rendering of the legacy\n * trigger button for the Tools drawer.\n */\nexport function MobileTriggers() {\n  const {\n    activeDrawerId,\n    drawers,\n    drawersAriaLabel,\n    drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel,\n    drawersRefs,\n    handleDrawersClick,\n    hasDrawerViewportOverlay\n  } = useAppLayoutInternals();\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  if (!drawers) {\n    return null;\n  }\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n  const {\n    visibleItems,\n    overflowItems\n  } = splitItems(drawers, 2, activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  return React.createElement(\"aside\", {\n    \"aria-hidden\": hasDrawerViewportOverlay,\n    className: clsx({\n      [styles.unfocusable]: hasDrawerViewportOverlay\n    }),\n    \"aria-label\": drawersAriaLabel,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles['drawers-mobile-triggers-container']),\n    role: \"toolbar\",\n    \"aria-orientation\": \"horizontal\"\n  }, visibleItems.map(item => {\n    var _a;\n    return React.createElement(InternalButton, {\n      ariaExpanded: item.id === activeDrawerId,\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']),\n      disabled: hasDrawerViewportOverlay,\n      ref: item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined,\n      formAction: \"none\",\n      iconName: item.trigger.iconName,\n      iconSvg: item.trigger.iconSvg,\n      badge: item.badge,\n      key: item.id,\n      onClick: () => handleDrawersClick(item.id),\n      variant: \"icon\",\n      __nativeAttributes: {\n        'aria-haspopup': true,\n        'data-testid': `awsui-app-layout-trigger-${item.id}`\n      }\n    });\n  }), overflowItems.length > 0 && React.createElement(OverflowMenu, {\n    items: overflowItems,\n    ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel,\n    onItemClick: _ref3 => {\n      let {\n        detail\n      } = _ref3;\n      return handleDrawersClick(detail.id);\n    }\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","useRef","clsx","customCssProps","InternalButton","SplitPanel","TriggerButton","useAppLayoutInternals","splitPanelStyles","styles","testutilStyles","useContainerQuery","OverflowMenu","splitItems","TOOLS_DRAWER_ID","Drawers","disableBodyScroll","drawers","drawersTriggerCount","hasDrawerViewportOverlay","hasOpenDrawer","isNavigationOpen","navigationHide","isMobile","isUnfocusable","className","unfocusable","Side","ActiveDrawer","DesktopTriggers","activeDrawerId","ariaLabels","drawersRefs","handleDrawersClick","handleToolsClick","loseDrawersFocus","resizeHandle","drawerSize","drawersMaxWidth","drawerRef","activeDrawer","find","item","id","MIN_WIDTH","computedAriaLabels","closeButton","toolsClose","content","tools","isHidden","isToolsDrawer","toolsContent","drawer","size","Math","max","min","style","ref","onBlur","e","relatedTarget","currentTarget","contains","resizable","ariaLabel","formAction","iconName","onClick","undefined","close","variant","drawersAriaLabel","drawersOverflowAriaLabel","drawersOverflowWithBadgeAriaLabel","handleSplitPanelClick","isSplitPanelOpen","splitPanel","splitPanelControlId","splitPanelDisplayed","splitPanelPosition","splitPanelRefs","splitPanelToggle","splitPanelReportedHeaderHeight","splitPanelReportedSize","hasMultipleTriggers","hasSplitPanel","previousActiveDrawerId","containerHeight","triggersContainerRef","rect","contentBoxHeight","current","splitPanelHeight","getIndexOfOverflowItem","ITEM_HEIGHT","overflowSpot","index","floor","splitPanelItem","displayed","visibleItems","overflowItems","overflowMenuHasBadge","badge","role","map","triggerButton","ariaExpanded","ariaControls","trigger","iconSvg","key","toggle","selected","testId","length","items","customTriggerBuilder","triggerRef","testUtilsClass","onItemClick","detail","MobileTriggers","disabled","__nativeAttributes"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh/lib/default/app-layout/visual-refresh/drawers.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport { InternalButton } from '../../button/internal';\nimport SplitPanel from './split-panel';\nimport TriggerButton from './trigger-button';\nimport { useAppLayoutInternals } from './context';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport OverflowMenu from '../drawer/overflow-menu';\nimport { splitItems } from '../drawer/drawers-helpers';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\n\n/**\n * The Drawers root component is mounted in the AppLayout index file. It will only\n * render if the drawers are defined, and it will take over the mounting of and\n * rendering of the Tools and SplitPanel (side position) if they exist. If drawers\n * do not exist then the Tools and SplitPanel will be handled by the Tools component.\n */\nexport default function Drawers() {\n  const {\n    disableBodyScroll,\n    drawers,\n    drawersTriggerCount,\n    hasDrawerViewportOverlay,\n    hasOpenDrawer,\n    isNavigationOpen,\n    navigationHide,\n    isMobile,\n  } = useAppLayoutInternals();\n\n  const isUnfocusable = hasDrawerViewportOverlay && isNavigationOpen && !navigationHide;\n\n  if (!drawers || drawersTriggerCount === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className={clsx(styles['drawers-container'], {\n        [styles['disable-body-scroll']]: disableBodyScroll,\n        [styles['has-open-drawer']]: hasOpenDrawer,\n        [styles.unfocusable]: isUnfocusable,\n      })}\n    >\n      <SplitPanel.Side />\n      <ActiveDrawer />\n      {!isMobile && <DesktopTriggers />}\n    </div>\n  );\n}\n\nfunction ActiveDrawer() {\n  const {\n    activeDrawerId,\n    ariaLabels,\n    drawers,\n    drawersRefs,\n    handleDrawersClick,\n    handleToolsClick,\n    hasDrawerViewportOverlay,\n    isMobile,\n    isNavigationOpen,\n    navigationHide,\n    loseDrawersFocus,\n    resizeHandle,\n    drawerSize,\n    drawersMaxWidth,\n    drawerRef,\n  } = useAppLayoutInternals();\n\n  const activeDrawer = drawers?.find(item => item.id === activeDrawerId) ?? null;\n  const MIN_WIDTH = 290;\n\n  const computedAriaLabels = {\n    closeButton: activeDrawerId ? activeDrawer?.ariaLabels?.closeButton : ariaLabels?.toolsClose,\n    content: activeDrawerId ? activeDrawer?.ariaLabels?.content : ariaLabels?.tools,\n  };\n\n  const isHidden = !activeDrawerId;\n  const isUnfocusable = isHidden || (hasDrawerViewportOverlay && isNavigationOpen && !navigationHide);\n  const isToolsDrawer = activeDrawerId === TOOLS_DRAWER_ID;\n  const toolsContent = drawers?.find(drawer => drawer.id === TOOLS_DRAWER_ID)?.content;\n\n  const size = Math.max(Math.min(drawersMaxWidth, drawerSize), MIN_WIDTH);\n\n  return (\n    <aside\n      id={activeDrawerId}\n      aria-hidden={isHidden}\n      aria-label={computedAriaLabels.content}\n      className={clsx(styles.drawer, {\n        [styles['is-drawer-open']]: activeDrawerId,\n        [styles.unfocusable]: isUnfocusable,\n        [testutilStyles['active-drawer']]: activeDrawerId,\n        [testutilStyles.tools]: isToolsDrawer,\n      })}\n      style={{\n        ...(!isMobile && drawerSize && { [customCssProps.drawerSize]: `${size}px` }),\n      }}\n      ref={drawerRef}\n      onBlur={e => {\n        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n          loseDrawersFocus();\n        }\n      }}\n    >\n      {!isMobile && activeDrawer?.resizable && resizeHandle}\n      <div className={styles['drawer-content-container']}>\n        <div className={clsx(styles['drawer-close-button'])}>\n          <InternalButton\n            ariaLabel={computedAriaLabels.closeButton}\n            className={clsx({\n              [testutilStyles['active-drawer-close-button']]: activeDrawerId,\n              [testutilStyles['tools-close']]: isToolsDrawer,\n            })}\n            formAction=\"none\"\n            iconName={isMobile ? 'close' : 'angle-right'}\n            onClick={() => {\n              handleDrawersClick(activeDrawerId ?? undefined);\n              handleToolsClick(false);\n            }}\n            ref={drawersRefs.close}\n            variant=\"icon\"\n          />\n        </div>\n        {toolsContent && (\n          <div\n            className={clsx(\n              styles['drawer-content'],\n              activeDrawerId !== TOOLS_DRAWER_ID && styles['drawer-content-hidden']\n            )}\n          >\n            {toolsContent}\n          </div>\n        )}\n        {activeDrawerId !== TOOLS_DRAWER_ID && (\n          <div className={styles['drawer-content']}>{activeDrawerId && activeDrawer?.content}</div>\n        )}\n      </div>\n    </aside>\n  );\n}\n\n/**\n * The DesktopTriggers will render the trigger buttons for Tools, Drawers, and the\n * SplitPanel in non mobile viewports. Changes to the activeDrawerId need to be\n * tracked by the previousActiveDrawerId property in order to appropriately apply\n * the ref required to manage focus control.\n */\nfunction DesktopTriggers() {\n  const {\n    activeDrawerId,\n    drawers,\n    drawersAriaLabel,\n    drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel,\n    drawersRefs,\n    drawersTriggerCount,\n    handleDrawersClick,\n    handleSplitPanelClick,\n    hasOpenDrawer,\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelControlId,\n    splitPanelDisplayed,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelToggle,\n    splitPanelReportedHeaderHeight,\n    splitPanelReportedSize,\n  } = useAppLayoutInternals();\n\n  const hasMultipleTriggers = drawersTriggerCount > 1;\n  const hasSplitPanel = splitPanel && splitPanelDisplayed && splitPanelPosition === 'side';\n\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  const [containerHeight, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxHeight);\n\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n\n  const splitPanelHeight =\n    isSplitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : splitPanelReportedHeaderHeight;\n\n  const getIndexOfOverflowItem = () => {\n    if (containerHeight) {\n      const ITEM_HEIGHT = 48;\n      const overflowSpot =\n        activeDrawerId && isSplitPanelOpen\n          ? (containerHeight - splitPanelReportedHeaderHeight) / 1.5\n          : (containerHeight - splitPanelHeight) / 1.5;\n\n      const index = Math.floor(overflowSpot / ITEM_HEIGHT);\n\n      let splitPanelItem = 0;\n      if (hasSplitPanel && splitPanelToggle.displayed) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n\n    return 0;\n  };\n\n  const { visibleItems, overflowItems } = splitItems(drawers ?? undefined, getIndexOfOverflowItem(), activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <aside\n      className={clsx(styles['drawers-desktop-triggers-container'], {\n        [styles['has-multiple-triggers']]: hasMultipleTriggers,\n        [styles['has-open-drawer']]: hasOpenDrawer,\n      })}\n      aria-label={drawersAriaLabel}\n      ref={triggersContainerRef}\n      role=\"region\"\n    >\n      <div\n        className={clsx(styles['drawers-trigger-content'], {\n          [styles['has-multiple-triggers']]: hasMultipleTriggers,\n          [styles['has-open-drawer']]: hasOpenDrawer,\n        })}\n        role=\"toolbar\"\n        aria-orientation=\"vertical\"\n      >\n        {visibleItems.map(item => {\n          return (\n            <TriggerButton\n              ariaLabel={item.ariaLabels?.triggerButton}\n              ariaExpanded={item.id === activeDrawerId}\n              ariaControls={activeDrawerId === item.id ? item.id : undefined}\n              className={clsx(\n                styles['drawers-trigger'],\n                testutilStyles['drawers-trigger'],\n                item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n              )}\n              iconName={item.trigger.iconName}\n              iconSvg={item.trigger.iconSvg}\n              key={item.id}\n              onClick={() => handleDrawersClick(item.id)}\n              ref={item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined}\n              selected={item.id === activeDrawerId}\n              badge={item.badge}\n              testId={`awsui-app-layout-trigger-${item.id}`}\n            />\n          );\n        })}\n\n        {overflowItems.length > 0 && (\n          <OverflowMenu\n            items={overflowItems}\n            ariaLabel={overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel}\n            customTriggerBuilder={({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => (\n              <TriggerButton\n                ref={triggerRef}\n                ariaLabel={ariaLabel}\n                ariaExpanded={ariaExpanded}\n                badge={overflowMenuHasBadge}\n                className={clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testUtilsClass)}\n                iconName=\"ellipsis\"\n                onClick={onClick}\n              />\n            )}\n            onItemClick={({ detail }) => {\n              handleDrawersClick(detail.id);\n            }}\n          />\n        )}\n        {hasSplitPanel && splitPanelToggle.displayed && (\n          <TriggerButton\n            ariaLabel={splitPanelToggle.ariaLabel}\n            ariaControls={splitPanelControlId}\n            ariaExpanded={!!isSplitPanelOpen}\n            className={clsx(styles['drawers-trigger'], splitPanelStyles['open-button'])}\n            iconName=\"view-vertical\"\n            onClick={() => handleSplitPanelClick()}\n            selected={hasSplitPanel && isSplitPanelOpen}\n            ref={splitPanelRefs.toggle}\n          />\n        )}\n      </div>\n    </aside>\n  );\n}\n\n/**\n * The MobileTriggers will be mounted inside of the AppBar component and\n * only rendered when Drawers are defined in mobile viewports. The same logic\n * will in the AppBar component will suppress the rendering of the legacy\n * trigger button for the Tools drawer.\n */\nexport function MobileTriggers() {\n  const {\n    activeDrawerId,\n    drawers,\n    drawersAriaLabel,\n    drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel,\n    drawersRefs,\n    handleDrawersClick,\n    hasDrawerViewportOverlay,\n  } = useAppLayoutInternals();\n\n  const previousActiveDrawerId = useRef(activeDrawerId);\n\n  if (!drawers) {\n    return null;\n  }\n\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n\n  const { visibleItems, overflowItems } = splitItems(drawers, 2, activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <aside\n      aria-hidden={hasDrawerViewportOverlay}\n      className={clsx({\n        [styles.unfocusable]: hasDrawerViewportOverlay,\n      })}\n      aria-label={drawersAriaLabel}\n      role=\"region\"\n    >\n      <div className={clsx(styles['drawers-mobile-triggers-container'])} role=\"toolbar\" aria-orientation=\"horizontal\">\n        {visibleItems.map(item => (\n          <InternalButton\n            ariaExpanded={item.id === activeDrawerId}\n            ariaLabel={item.ariaLabels?.triggerButton}\n            className={clsx(\n              styles['drawers-trigger'],\n              testutilStyles['drawers-trigger'],\n              item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n            )}\n            disabled={hasDrawerViewportOverlay}\n            ref={item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined}\n            formAction=\"none\"\n            iconName={item.trigger.iconName}\n            iconSvg={item.trigger.iconSvg}\n            badge={item.badge}\n            key={item.id}\n            onClick={() => handleDrawersClick(item.id)}\n            variant=\"icon\"\n            __nativeAttributes={{ 'aria-haspopup': true, 'data-testid': `awsui-app-layout-trigger-${item.id}` }}\n          />\n        ))}\n        {overflowItems.length > 0 && (\n          <OverflowMenu\n            items={overflowItems}\n            ariaLabel={overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel}\n            onItemClick={({ detail }) => handleDrawersClick(detail.id)}\n          />\n        )}\n      </div>\n    </aside>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}