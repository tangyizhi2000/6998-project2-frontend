{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContext, useLayoutEffect } from 'react';\nimport { DynamicOverlapContext } from '../../context/dynamic-overlap-context';\nimport { useRef, useCallback } from 'react';\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\n/**\n * Observes the height of an element referenced by the returning ref and sets the value as overlapping\n * height for the surrounding AppLayout component.\n * @param props.disabled disables hook if not applicable\n * @returns ref to be measured as overlapping height\n */\nexport function useDynamicOverlap(props) {\n  var _a;\n  const disabled = (_a = props === null || props === void 0 ? void 0 : props.disabled) !== null && _a !== void 0 ? _a : false;\n  const setDynamicOverlapHeight = useContext(DynamicOverlapContext);\n  const overlapElementRef = useRef(null);\n  const getElement = useCallback(() => overlapElementRef.current, [overlapElementRef]);\n  const updateState = useCallback(entry => {\n    if (!disabled) {\n      setDynamicOverlapHeight(entry.contentBoxHeight);\n    }\n  }, [disabled, setDynamicOverlapHeight]);\n  useResizeObserver(getElement, updateState);\n  useLayoutEffect(function handleDynamicOverlapHeight() {\n    // Set overlap height back to 0 when unmounting\n    return () => {\n      if (!disabled) {\n        setDynamicOverlapHeight(0);\n      }\n    };\n  }, [disabled, setDynamicOverlapHeight]);\n  return overlapElementRef;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,UAAU,EAAEC,eAAe,QAAQ,OAAO;AAEnD,SAASC,qBAAqB,QAAQ,uCAAuC;AAC7E,SAASC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAE3C,SAASC,iBAAiB,QAAQ,+CAA+C;AASjF;;;;;;AAMA,OAAM,SAAUC,iBAAiB,CAACC,KAA8B;;EAC9D,MAAMC,QAAQ,GAAG,WAAK,aAALD,KAAK,uBAALA,KAAK,CAAEC,QAAQ,mCAAI,KAAK;EACzC,MAAMC,uBAAuB,GAAGT,UAAU,CAACE,qBAAqB,CAAC;EACjE,MAAMQ,iBAAiB,GAAGP,MAAM,CAAC,IAAI,CAAC;EAEtC,MAAMQ,UAAU,GAAGP,WAAW,CAAC,MAAMM,iBAAiB,CAACE,OAAO,EAAE,CAACF,iBAAiB,CAAC,CAAC;EACpF,MAAMG,WAAW,GAAGT,WAAW,CAC5BU,KAA0B,IAAI;IAC7B,IAAI,CAACN,QAAQ,EAAE;MACbC,uBAAuB,CAACK,KAAK,CAACC,gBAAgB,CAAC;;EAEnD,CAAC,EACD,CAACP,QAAQ,EAAEC,uBAAuB,CAAC,CACpC;EAEDJ,iBAAiB,CAACM,UAAU,EAAEE,WAAW,CAAC;EAE1CZ,eAAe,CACb,SAASe,0BAA0B;IACjC;IACA,OAAO,MAAK;MACV,IAAI,CAACR,QAAQ,EAAE;QACbC,uBAAuB,CAAC,CAAC,CAAC;;IAE9B,CAAC;EACH,CAAC,EACD,CAACD,QAAQ,EAAEC,uBAAuB,CAAC,CACpC;EAED,OAAOC,iBAAiB;AAC1B","names":["useContext","useLayoutEffect","DynamicOverlapContext","useRef","useCallback","useResizeObserver","useDynamicOverlap","props","disabled","setDynamicOverlapHeight","overlapElementRef","getElement","current","updateState","entry","contentBoxHeight","handleDynamicOverlapHeight"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/hooks/use-dynamic-overlap/lib/default/internal/hooks/use-dynamic-overlap/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContext, useLayoutEffect } from 'react';\n\nimport { DynamicOverlapContext } from '../../context/dynamic-overlap-context';\nimport { useRef, useCallback } from 'react';\nimport { ContainerQueryEntry } from '@cloudscape-design/component-toolkit';\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\n\nexport interface UseDynamicOverlapProps {\n  /**\n   * Disables hook if not needed. By default, `false`.\n   */\n  disabled?: boolean;\n}\n\n/**\n * Observes the height of an element referenced by the returning ref and sets the value as overlapping\n * height for the surrounding AppLayout component.\n * @param props.disabled disables hook if not applicable\n * @returns ref to be measured as overlapping height\n */\nexport function useDynamicOverlap(props?: UseDynamicOverlapProps) {\n  const disabled = props?.disabled ?? false;\n  const setDynamicOverlapHeight = useContext(DynamicOverlapContext);\n  const overlapElementRef = useRef(null);\n\n  const getElement = useCallback(() => overlapElementRef.current, [overlapElementRef]);\n  const updateState = useCallback(\n    (entry: ContainerQueryEntry) => {\n      if (!disabled) {\n        setDynamicOverlapHeight(entry.contentBoxHeight);\n      }\n    },\n    [disabled, setDynamicOverlapHeight]\n  );\n\n  useResizeObserver(getElement, updateState);\n\n  useLayoutEffect(\n    function handleDynamicOverlapHeight() {\n      // Set overlap height back to 0 when unmounting\n      return () => {\n        if (!disabled) {\n          setDynamicOverlapHeight(0);\n        }\n      };\n    },\n    [disabled, setDynamicOverlapHeight]\n  );\n\n  return overlapElementRef;\n}\n"]},"metadata":{},"sourceType":"module"}