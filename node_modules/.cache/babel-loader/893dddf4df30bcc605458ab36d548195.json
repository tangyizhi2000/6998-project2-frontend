{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport { useEffect, useState } from 'react';\nimport styles from './styles.css.js';\nimport { getContainingBlock, supportsStickyPosition } from '../../internal/utils/dom';\nimport { getOverflowParents } from '../../internal/utils/scrollable-containers';\nimport { browserScrollbarSize } from '../../internal/utils/browser-scrollbar-size';\nexport const updatePosition = (tableEl, wrapperEl, scrollbarEl, scrollbarContentEl, hasContainingBlock, consideredFooterHeight) => {\n  if (!tableEl || !scrollbarEl || !wrapperEl) {\n    return;\n  }\n  const {\n    width: tableWidth\n  } = tableEl.getBoundingClientRect();\n  const {\n    width: wrapperWidth\n  } = wrapperEl.getBoundingClientRect();\n  // using 15 px as a height of transparent scrollbar on mac\n  const scrollbarHeight = browserScrollbarSize().height;\n  const areaIsScrollable = tableWidth > wrapperWidth;\n  if (!areaIsScrollable) {\n    scrollbarEl.classList.remove(styles['sticky-scrollbar-visible']);\n  } else {\n    // when scrollbar is not displayed scrollLeft property cannot be set by useScrollSync\n    // that's why syncing it separately\n    if (!scrollbarEl.classList.contains(styles['sticky-scrollbar-visible'])) {\n      requestAnimationFrame(() => {\n        scrollbarEl.scrollLeft = wrapperEl.scrollLeft;\n      });\n    }\n    scrollbarEl.classList.add(styles['sticky-scrollbar-visible']);\n    if (!scrollbarHeight) {\n      /* istanbul ignore next: covered by screenshot tests */\n      scrollbarEl.classList.add(styles['sticky-scrollbar-native-invisible']);\n    }\n  }\n  if (scrollbarHeight && scrollbarEl && scrollbarContentEl) {\n    scrollbarEl.style.height = `${scrollbarHeight}px`;\n    scrollbarContentEl.style.height = `${scrollbarHeight}px`;\n  }\n  if (tableEl && wrapperEl && scrollbarContentEl && scrollbarEl) {\n    const wrapperElRect = wrapperEl.getBoundingClientRect();\n    const tableElRect = tableEl.getBoundingClientRect();\n    scrollbarEl.style.width = `${wrapperElRect.width}px`;\n    scrollbarContentEl.style.width = `${tableElRect.width}px`;\n    // when using sticky scrollbars in containers\n    // we agreed to ignore dynamic bottom calculations for footer overlap\n    scrollbarEl.style.bottom = hasContainingBlock ? '0px' : `${consideredFooterHeight}px`;\n  }\n};\nexport function useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, footerHeight, offsetScrollbar) {\n  // We don't take into account containing-block calculations because that would\n  // unnecessarily overcomplicate the position logic. For now, we assume that a\n  // containing block, if present, is below the app layout and above the overflow\n  // parent, which is a pretty safe assumption.\n  const [hasContainingBlock, setHasContainingBlock] = useState(false);\n  // We don't take into account footer height when the overflow parent is child of document body.\n  // Because in this case, we think the footer is outside the overflow parent.\n  const [hasOverflowParent, setHasOverflowParent] = useState(false);\n  const consideredFooterHeight = hasContainingBlock || hasOverflowParent ? 0 : footerHeight;\n  const wrapperEl = wrapperRef.current;\n  useEffect(() => {\n    if (wrapperEl && supportsStickyPosition()) {\n      setHasContainingBlock(!!getContainingBlock(wrapperEl));\n      setHasOverflowParent(!!getOverflowParents(wrapperEl)[0]);\n    }\n  }, [wrapperEl]);\n  // Update scrollbar position wrapper or table size change.\n  useEffect(() => {\n    if (supportsStickyPosition() && wrapperRef.current && tableRef.current) {\n      const observer = new ResizeObserver(() => {\n        if (scrollbarContentRef.current) {\n          updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, hasContainingBlock, consideredFooterHeight);\n        }\n      });\n      // Scrollbar width must be in sync with wrapper width.\n      observer.observe(wrapperRef.current);\n      // Scrollbar content width must be in sync with table width.\n      observer.observe(tableRef.current);\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [scrollbarContentRef, scrollbarRef, tableRef, wrapperRef, consideredFooterHeight, hasContainingBlock, offsetScrollbar]);\n  // Update scrollbar position when window resizes (vertically).\n  useEffect(() => {\n    if (supportsStickyPosition()) {\n      const resizeHandler = () => {\n        updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, hasContainingBlock, consideredFooterHeight);\n      };\n      resizeHandler();\n      window.addEventListener('resize', resizeHandler);\n      return () => {\n        window.removeEventListener('resize', resizeHandler);\n      };\n    }\n  }, [tableRef, wrapperRef, scrollbarRef, scrollbarContentRef, hasContainingBlock, consideredFooterHeight]);\n}","map":{"version":3,"mappings":"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","names":["ResizeObserver","useEffect","useState","styles","getContainingBlock","supportsStickyPosition","getOverflowParents","browserScrollbarSize","updatePosition","tableEl","wrapperEl","scrollbarEl","scrollbarContentEl","hasContainingBlock","consideredFooterHeight","width","tableWidth","getBoundingClientRect","wrapperWidth","scrollbarHeight","height","areaIsScrollable","classList","remove","contains","requestAnimationFrame","scrollLeft","add","style","wrapperElRect","tableElRect","bottom","useStickyScrollbar","scrollbarRef","scrollbarContentRef","tableRef","wrapperRef","footerHeight","offsetScrollbar","setHasContainingBlock","hasOverflowParent","setHasOverflowParent","current","observer","observe","disconnect","resizeHandler","window","addEventListener","removeEventListener"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/table/sticky-scrollbar/lib/default/table/sticky-scrollbar/use-sticky-scrollbar.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport { RefObject, useEffect, useState } from 'react';\nimport styles from './styles.css.js';\nimport { getContainingBlock, supportsStickyPosition } from '../../internal/utils/dom';\nimport { getOverflowParents } from '../../internal/utils/scrollable-containers';\nimport { browserScrollbarSize } from '../../internal/utils/browser-scrollbar-size';\n\nexport const updatePosition = (\n  tableEl: HTMLElement | null,\n  wrapperEl: HTMLElement | null,\n  scrollbarEl: HTMLElement | null,\n  scrollbarContentEl: HTMLElement | null,\n  hasContainingBlock: boolean,\n  consideredFooterHeight: number\n) => {\n  if (!tableEl || !scrollbarEl || !wrapperEl) {\n    return;\n  }\n\n  const { width: tableWidth } = tableEl.getBoundingClientRect();\n  const { width: wrapperWidth } = wrapperEl.getBoundingClientRect();\n\n  // using 15 px as a height of transparent scrollbar on mac\n  const scrollbarHeight = browserScrollbarSize().height;\n  const areaIsScrollable = tableWidth > wrapperWidth;\n\n  if (!areaIsScrollable) {\n    scrollbarEl.classList.remove(styles['sticky-scrollbar-visible']);\n  } else {\n    // when scrollbar is not displayed scrollLeft property cannot be set by useScrollSync\n    // that's why syncing it separately\n    if (!scrollbarEl.classList.contains(styles['sticky-scrollbar-visible'])) {\n      requestAnimationFrame(() => {\n        scrollbarEl.scrollLeft = wrapperEl.scrollLeft;\n      });\n    }\n\n    scrollbarEl.classList.add(styles['sticky-scrollbar-visible']);\n    if (!scrollbarHeight) {\n      /* istanbul ignore next: covered by screenshot tests */\n      scrollbarEl.classList.add(styles['sticky-scrollbar-native-invisible']);\n    }\n  }\n\n  if (scrollbarHeight && scrollbarEl && scrollbarContentEl) {\n    scrollbarEl.style.height = `${scrollbarHeight}px`;\n    scrollbarContentEl.style.height = `${scrollbarHeight}px`;\n  }\n\n  if (tableEl && wrapperEl && scrollbarContentEl && scrollbarEl) {\n    const wrapperElRect = wrapperEl.getBoundingClientRect();\n    const tableElRect = tableEl.getBoundingClientRect();\n    scrollbarEl.style.width = `${wrapperElRect.width}px`;\n    scrollbarContentEl.style.width = `${tableElRect.width}px`;\n\n    // when using sticky scrollbars in containers\n    // we agreed to ignore dynamic bottom calculations for footer overlap\n    scrollbarEl.style.bottom = hasContainingBlock ? '0px' : `${consideredFooterHeight}px`;\n  }\n};\n\nexport function useStickyScrollbar(\n  scrollbarRef: RefObject<HTMLDivElement>,\n  scrollbarContentRef: RefObject<HTMLDivElement>,\n  tableRef: RefObject<HTMLTableElement>,\n  wrapperRef: RefObject<HTMLDivElement>,\n  footerHeight: number,\n  offsetScrollbar: boolean\n) {\n  // We don't take into account containing-block calculations because that would\n  // unnecessarily overcomplicate the position logic. For now, we assume that a\n  // containing block, if present, is below the app layout and above the overflow\n  // parent, which is a pretty safe assumption.\n  const [hasContainingBlock, setHasContainingBlock] = useState(false);\n  // We don't take into account footer height when the overflow parent is child of document body.\n  // Because in this case, we think the footer is outside the overflow parent.\n  const [hasOverflowParent, setHasOverflowParent] = useState(false);\n  const consideredFooterHeight = hasContainingBlock || hasOverflowParent ? 0 : footerHeight;\n\n  const wrapperEl = wrapperRef.current;\n  useEffect(() => {\n    if (wrapperEl && supportsStickyPosition()) {\n      setHasContainingBlock(!!getContainingBlock(wrapperEl));\n      setHasOverflowParent(!!getOverflowParents(wrapperEl)[0]);\n    }\n  }, [wrapperEl]);\n\n  // Update scrollbar position wrapper or table size change.\n  useEffect(() => {\n    if (supportsStickyPosition() && wrapperRef.current && tableRef.current) {\n      const observer = new ResizeObserver(() => {\n        if (scrollbarContentRef.current) {\n          updatePosition(\n            tableRef.current,\n            wrapperRef.current,\n            scrollbarRef.current,\n            scrollbarContentRef.current,\n            hasContainingBlock,\n            consideredFooterHeight\n          );\n        }\n      });\n      // Scrollbar width must be in sync with wrapper width.\n      observer.observe(wrapperRef.current);\n      // Scrollbar content width must be in sync with table width.\n      observer.observe(tableRef.current);\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [\n    scrollbarContentRef,\n    scrollbarRef,\n    tableRef,\n    wrapperRef,\n    consideredFooterHeight,\n    hasContainingBlock,\n    offsetScrollbar,\n  ]);\n\n  // Update scrollbar position when window resizes (vertically).\n  useEffect(() => {\n    if (supportsStickyPosition()) {\n      const resizeHandler = () => {\n        updatePosition(\n          tableRef.current,\n          wrapperRef.current,\n          scrollbarRef.current,\n          scrollbarContentRef.current,\n          hasContainingBlock,\n          consideredFooterHeight\n        );\n      };\n      resizeHandler();\n      window.addEventListener('resize', resizeHandler);\n      return () => {\n        window.removeEventListener('resize', resizeHandler);\n      };\n    }\n  }, [tableRef, wrapperRef, scrollbarRef, scrollbarContentRef, hasContainingBlock, consideredFooterHeight]);\n}\n"]},"metadata":{},"sourceType":"module"}