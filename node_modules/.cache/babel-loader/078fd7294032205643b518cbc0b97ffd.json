{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { checkItemsIntersection } from \"./utils\";\nexport class ReadonlyLayoutEngineGrid {\n  static clone(grid) {\n    const clone = new LayoutEngineGrid([], 0);\n    clone._width = grid._width;\n    clone._height = grid._height;\n    for (const item of grid._items) {\n      const itemClone = {\n        ...item\n      };\n      clone._itemsMap.set(itemClone.id, itemClone);\n      clone._items.push(itemClone);\n    }\n    return clone;\n  }\n  constructor(items, columns) {\n    this._items = new Array();\n    this._itemsMap = new Map();\n    this._width = columns;\n    this._height = 0;\n    for (const item of items) {\n      if (item.x < 0 || item.y < 0 || item.x + item.width > this._width) {\n        throw new Error(\"Invalid grid: items outside the boundaries.\");\n      }\n      if (item.width < 1 || item.height < 1) {\n        throw new Error(\"Invalid grid: items of invalid size.\");\n      }\n      for (const gridItem of this._items) {\n        if (checkItemsIntersection(gridItem, item)) {\n          throw new Error(\"Invalid grid: items overlap.\");\n        }\n      }\n      const itemClone = {\n        ...item\n      };\n      this._itemsMap.set(itemClone.id, itemClone);\n      this._items.push(itemClone);\n      this._height = Math.max(this.height, itemClone.y + itemClone.height);\n    }\n  }\n  get width() {\n    return this._width;\n  }\n  get height() {\n    return this._height;\n  }\n  get items() {\n    return this._items;\n  }\n  getItem(itemId) {\n    const item = this._itemsMap.get(itemId);\n    if (!item) {\n      throw new Error(`Item with id \"${itemId}\" not found in the grid.`);\n    }\n    return item;\n  }\n  getOverlaps(item) {\n    return this._items.filter(gridItem => checkItemsIntersection(gridItem, item));\n  }\n}\nexport class LayoutEngineGrid extends ReadonlyLayoutEngineGrid {\n  move(itemId, x, y) {\n    const item = this.getItem(itemId);\n    item.x = x;\n    item.y = y;\n    this._height = Math.max(this.height, item.y + item.height);\n  }\n  resize(itemId, width, height) {\n    const item = this.getItem(itemId);\n    item.width = width;\n    item.height = height;\n    this._height = Math.max(this.height, item.y + item.height);\n  }\n  insert(item) {\n    if (item.x < 0 || item.y < 0 || item.x + item.width > this._width) {\n      throw new Error(\"Inserting item is outside the boundaries.\");\n    }\n    if (item.width < 1 || item.height < 1) {\n      throw new Error(\"Inserting item has invalid size.\");\n    }\n    const itemClone = {\n      ...item\n    };\n    this._itemsMap.set(itemClone.id, itemClone);\n    this._items.push(itemClone);\n    this._height = Math.max(this.height, item.y + item.height);\n  }\n  remove(itemId) {\n    this._itemsMap.delete(itemId);\n    this._items = this._items.filter(item => item.id !== itemId);\n  }\n}","map":{"version":3,"names":["checkItemsIntersection","ReadonlyLayoutEngineGrid","clone","grid","LayoutEngineGrid","_width","_height","item","_items","itemClone","_itemsMap","set","id","push","constructor","items","columns","Array","Map","x","y","width","Error","height","gridItem","Math","max","getItem","itemId","get","getOverlaps","filter","move","resize","insert","remove","delete"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/board-components/internal/layout-engine/grid.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { checkItemsIntersection } from \"./utils\";\nexport class ReadonlyLayoutEngineGrid {\n    static clone(grid) {\n        const clone = new LayoutEngineGrid([], 0);\n        clone._width = grid._width;\n        clone._height = grid._height;\n        for (const item of grid._items) {\n            const itemClone = { ...item };\n            clone._itemsMap.set(itemClone.id, itemClone);\n            clone._items.push(itemClone);\n        }\n        return clone;\n    }\n    constructor(items, columns) {\n        this._items = new Array();\n        this._itemsMap = new Map();\n        this._width = columns;\n        this._height = 0;\n        for (const item of items) {\n            if (item.x < 0 || item.y < 0 || item.x + item.width > this._width) {\n                throw new Error(\"Invalid grid: items outside the boundaries.\");\n            }\n            if (item.width < 1 || item.height < 1) {\n                throw new Error(\"Invalid grid: items of invalid size.\");\n            }\n            for (const gridItem of this._items) {\n                if (checkItemsIntersection(gridItem, item)) {\n                    throw new Error(\"Invalid grid: items overlap.\");\n                }\n            }\n            const itemClone = { ...item };\n            this._itemsMap.set(itemClone.id, itemClone);\n            this._items.push(itemClone);\n            this._height = Math.max(this.height, itemClone.y + itemClone.height);\n        }\n    }\n    get width() {\n        return this._width;\n    }\n    get height() {\n        return this._height;\n    }\n    get items() {\n        return this._items;\n    }\n    getItem(itemId) {\n        const item = this._itemsMap.get(itemId);\n        if (!item) {\n            throw new Error(`Item with id \"${itemId}\" not found in the grid.`);\n        }\n        return item;\n    }\n    getOverlaps(item) {\n        return this._items.filter((gridItem) => checkItemsIntersection(gridItem, item));\n    }\n}\nexport class LayoutEngineGrid extends ReadonlyLayoutEngineGrid {\n    move(itemId, x, y) {\n        const item = this.getItem(itemId);\n        item.x = x;\n        item.y = y;\n        this._height = Math.max(this.height, item.y + item.height);\n    }\n    resize(itemId, width, height) {\n        const item = this.getItem(itemId);\n        item.width = width;\n        item.height = height;\n        this._height = Math.max(this.height, item.y + item.height);\n    }\n    insert(item) {\n        if (item.x < 0 || item.y < 0 || item.x + item.width > this._width) {\n            throw new Error(\"Inserting item is outside the boundaries.\");\n        }\n        if (item.width < 1 || item.height < 1) {\n            throw new Error(\"Inserting item has invalid size.\");\n        }\n        const itemClone = { ...item };\n        this._itemsMap.set(itemClone.id, itemClone);\n        this._items.push(itemClone);\n        this._height = Math.max(this.height, item.y + item.height);\n    }\n    remove(itemId) {\n        this._itemsMap.delete(itemId);\n        this._items = this._items.filter((item) => item.id !== itemId);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}