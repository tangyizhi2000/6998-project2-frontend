{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalBox from '../box/internal';\nimport { InternalButton } from '../button/internal';\nimport InternalModal from '../modal/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport { copyPreferences, mergePreferences, ModalContentLayout, PageSizePreference, WrapLinesPreference, StripedRowsPreference, ContentDensityPreference, StickyColumnsPreference, CustomPreference } from './utils';\nimport VisibleContentPreference from './visible-content';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport ContentDisplayPreference from './content-display';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { useInternalI18n } from '../i18n/context';\nvar componentName = 'CollectionPreferences';\nexport default function CollectionPreferences(_a) {\n  var title = _a.title,\n    confirmLabel = _a.confirmLabel,\n    cancelLabel = _a.cancelLabel,\n    _a$disabled = _a.disabled,\n    disabled = _a$disabled === void 0 ? false : _a$disabled,\n    onConfirm = _a.onConfirm,\n    onCancel = _a.onCancel,\n    visibleContentPreference = _a.visibleContentPreference,\n    contentDisplayPreference = _a.contentDisplayPreference,\n    pageSizePreference = _a.pageSizePreference,\n    wrapLinesPreference = _a.wrapLinesPreference,\n    stripedRowsPreference = _a.stripedRowsPreference,\n    contentDensityPreference = _a.contentDensityPreference,\n    stickyColumnsPreference = _a.stickyColumnsPreference,\n    preferences = _a.preferences,\n    customPreference = _a.customPreference,\n    rest = __rest(_a, [\"title\", \"confirmLabel\", \"cancelLabel\", \"disabled\", \"onConfirm\", \"onCancel\", \"visibleContentPreference\", \"contentDisplayPreference\", \"pageSizePreference\", \"wrapLinesPreference\", \"stripedRowsPreference\", \"contentDensityPreference\", \"stickyColumnsPreference\", \"preferences\", \"customPreference\"]);\n  var _useBaseComponent = useBaseComponent('CollectionPreferences'),\n    __internalRootRef = _useBaseComponent.__internalRootRef;\n  checkControlled('CollectionPreferences', 'preferences', preferences, 'onConfirm', onConfirm);\n  var i18n = useInternalI18n('collection-preferences');\n  var baseProps = getBaseProps(rest);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    modalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  var _useState3 = useState(copyPreferences(preferences || {})),\n    _useState4 = _slicedToArray(_useState3, 2),\n    temporaryPreferences = _useState4[0],\n    setTemporaryPreferences = _useState4[1];\n  var triggerRef = useRef(null);\n  var dialogPreviouslyOpen = useRef(false);\n  useEffect(function () {\n    if (!modalVisible) {\n      dialogPreviouslyOpen.current && triggerRef.current && triggerRef.current.focus();\n    } else {\n      dialogPreviouslyOpen.current = true;\n    }\n  }, [modalVisible]);\n  var onConfirmListener = function onConfirmListener() {\n    setModalVisible(false);\n    fireNonCancelableEvent(onConfirm, temporaryPreferences);\n  };\n  var onCancelListener = function onCancelListener() {\n    fireNonCancelableEvent(onCancel, {});\n    setModalVisible(false);\n    setTemporaryPreferences(copyPreferences(preferences || {}));\n  };\n  var hasContentOnTheLeft = !!(pageSizePreference || wrapLinesPreference || stripedRowsPreference || contentDensityPreference || stickyColumnsPreference || customPreference);\n  var hasContentOnTheRight = !!(visibleContentPreference || contentDisplayPreference);\n  var _onChange = function onChange(changedPreferences) {\n    return setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences));\n  };\n  if (visibleContentPreference && contentDisplayPreference) {\n    warnOnce(componentName, 'You provided both `visibleContentPreference` and `contentDisplayPreference` props. `visibleContentPreference` will be ignored and only `contentDisplayPreference` will be rendered.');\n  }\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: __internalRootRef\n  }), React.createElement(InternalButton, {\n    ref: triggerRef,\n    className: styles['trigger-button'],\n    disabled: disabled,\n    ariaLabel: i18n('title', title),\n    onClick: function onClick() {\n      setTemporaryPreferences(copyPreferences(preferences || {}));\n      setModalVisible(true);\n    },\n    variant: \"icon\",\n    iconName: \"settings\",\n    formAction: \"none\"\n  }), !disabled && modalVisible && React.createElement(InternalModal, {\n    className: styles['modal-root'],\n    visible: true,\n    header: i18n('title', title),\n    footer: React.createElement(InternalBox, {\n      float: \"right\"\n    }, React.createElement(InternalSpaceBetween, {\n      direction: \"horizontal\",\n      size: \"xs\"\n    }, React.createElement(InternalButton, {\n      className: styles['cancel-button'],\n      variant: \"link\",\n      formAction: \"none\",\n      onClick: onCancelListener\n    }, i18n('cancelLabel', cancelLabel)), React.createElement(InternalButton, {\n      className: styles['confirm-button'],\n      variant: \"primary\",\n      formAction: \"none\",\n      onClick: onConfirmListener\n    }, i18n('confirmLabel', confirmLabel)))),\n    closeAriaLabel: cancelLabel,\n    size: hasContentOnTheLeft && hasContentOnTheRight ? 'large' : 'medium',\n    onDismiss: onCancelListener\n  }, React.createElement(ModalContentLayout, {\n    left: hasContentOnTheLeft && React.createElement(InternalSpaceBetween, {\n      size: \"l\"\n    }, pageSizePreference && React.createElement(PageSizePreference, Object.assign({\n      value: temporaryPreferences.pageSize\n    }, pageSizePreference, {\n      onChange: function onChange(pageSize) {\n        return _onChange({\n          pageSize: pageSize\n        });\n      }\n    })), wrapLinesPreference && React.createElement(WrapLinesPreference, Object.assign({\n      value: temporaryPreferences.wrapLines\n    }, wrapLinesPreference, {\n      onChange: function onChange(wrapLines) {\n        return _onChange({\n          wrapLines: wrapLines\n        });\n      }\n    })), stripedRowsPreference && React.createElement(StripedRowsPreference, Object.assign({\n      value: temporaryPreferences.stripedRows\n    }, stripedRowsPreference, {\n      onChange: function onChange(stripedRows) {\n        return _onChange({\n          stripedRows: stripedRows\n        });\n      }\n    })), contentDensityPreference && React.createElement(ContentDensityPreference, Object.assign({\n      value: temporaryPreferences.contentDensity\n    }, contentDensityPreference, {\n      onChange: function onChange(contentDensity) {\n        return _onChange({\n          contentDensity: contentDensity\n        });\n      }\n    })), stickyColumnsPreference && React.createElement(StickyColumnsPreference, Object.assign({\n      value: temporaryPreferences.stickyColumns\n    }, stickyColumnsPreference, {\n      onChange: function onChange(stickyColumns) {\n        return _onChange({\n          stickyColumns: stickyColumns\n        });\n      }\n    })), customPreference && React.createElement(CustomPreference, {\n      value: temporaryPreferences.custom,\n      customPreference: customPreference,\n      onChange: function onChange(custom) {\n        return _onChange({\n          custom: custom\n        });\n      }\n    })),\n    right: contentDisplayPreference ? React.createElement(ContentDisplayPreference, Object.assign({}, contentDisplayPreference, {\n      value: temporaryPreferences.contentDisplay,\n      onChange: function onChange(contentDisplay) {\n        return _onChange({\n          contentDisplay: contentDisplay\n        });\n      }\n    })) : visibleContentPreference && React.createElement(VisibleContentPreference, Object.assign({\n      value: temporaryPreferences.visibleContent\n    }, visibleContentPreference, {\n      onChange: function onChange(visibleItems) {\n        return _onChange({\n          visibleContent: visibleItems\n        });\n      }\n    }))\n  })));\n}\napplyDisplayName(CollectionPreferences, componentName);","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","useState","clsx","fireNonCancelableEvent","getBaseProps","InternalBox","InternalButton","InternalModal","InternalSpaceBetween","copyPreferences","mergePreferences","ModalContentLayout","PageSizePreference","WrapLinesPreference","StripedRowsPreference","ContentDensityPreference","StickyColumnsPreference","CustomPreference","VisibleContentPreference","checkControlled","styles","applyDisplayName","useBaseComponent","ContentDisplayPreference","warnOnce","useInternalI18n","componentName","CollectionPreferences","_a","title","confirmLabel","cancelLabel","disabled","onConfirm","onCancel","visibleContentPreference","contentDisplayPreference","pageSizePreference","wrapLinesPreference","stripedRowsPreference","contentDensityPreference","stickyColumnsPreference","preferences","customPreference","rest","__internalRootRef","i18n","baseProps","modalVisible","setModalVisible","temporaryPreferences","setTemporaryPreferences","triggerRef","dialogPreviouslyOpen","current","focus","onConfirmListener","onCancelListener","hasContentOnTheLeft","hasContentOnTheRight","onChange","changedPreferences","className","root","ref","ariaLabel","onClick","variant","iconName","formAction","visible","header","footer","float","direction","size","closeAriaLabel","onDismiss","left","value","pageSize","wrapLines","stripedRows","contentDensity","stickyColumns","custom","right","contentDisplay","visibleContent","visibleItems"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/collection-preferences/lib/default/collection-preferences/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalBox from '../box/internal';\nimport { ButtonProps } from '../button/interfaces';\nimport { InternalButton } from '../button/internal';\nimport InternalModal from '../modal/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport {\n  copyPreferences,\n  mergePreferences,\n  ModalContentLayout,\n  PageSizePreference,\n  WrapLinesPreference,\n  StripedRowsPreference,\n  ContentDensityPreference,\n  StickyColumnsPreference,\n  CustomPreference,\n} from './utils';\nimport VisibleContentPreference from './visible-content';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport { CollectionPreferencesProps } from './interfaces';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport ContentDisplayPreference from './content-display';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { useInternalI18n } from '../i18n/context';\n\nexport { CollectionPreferencesProps };\n\nconst componentName = 'CollectionPreferences';\n\nexport default function CollectionPreferences({\n  title,\n  confirmLabel,\n  cancelLabel,\n  disabled = false,\n  onConfirm,\n  onCancel,\n  visibleContentPreference,\n  contentDisplayPreference,\n  pageSizePreference,\n  wrapLinesPreference,\n  stripedRowsPreference,\n  contentDensityPreference,\n  stickyColumnsPreference,\n\n  preferences,\n  customPreference,\n  ...rest\n}: CollectionPreferencesProps) {\n  const { __internalRootRef } = useBaseComponent('CollectionPreferences');\n  checkControlled('CollectionPreferences', 'preferences', preferences, 'onConfirm', onConfirm);\n\n  const i18n = useInternalI18n('collection-preferences');\n  const baseProps = getBaseProps(rest);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [temporaryPreferences, setTemporaryPreferences] = useState(copyPreferences(preferences || {}));\n  const triggerRef = useRef<ButtonProps.Ref>(null);\n  const dialogPreviouslyOpen = useRef(false);\n\n  useEffect(() => {\n    if (!modalVisible) {\n      dialogPreviouslyOpen.current && triggerRef.current && triggerRef.current.focus();\n    } else {\n      dialogPreviouslyOpen.current = true;\n    }\n  }, [modalVisible]);\n\n  const onConfirmListener = () => {\n    setModalVisible(false);\n    fireNonCancelableEvent(onConfirm, temporaryPreferences);\n  };\n\n  const onCancelListener = () => {\n    fireNonCancelableEvent(onCancel, {});\n    setModalVisible(false);\n    setTemporaryPreferences(copyPreferences(preferences || {}));\n  };\n\n  const hasContentOnTheLeft = !!(\n    pageSizePreference ||\n    wrapLinesPreference ||\n    stripedRowsPreference ||\n    contentDensityPreference ||\n    stickyColumnsPreference ||\n    customPreference\n  );\n  const hasContentOnTheRight = !!(visibleContentPreference || contentDisplayPreference);\n\n  const onChange = (changedPreferences: CollectionPreferencesProps.Preferences) =>\n    setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences));\n\n  if (visibleContentPreference && contentDisplayPreference) {\n    warnOnce(\n      componentName,\n      'You provided both `visibleContentPreference` and `contentDisplayPreference` props. `visibleContentPreference` will be ignored and only `contentDisplayPreference` will be rendered.'\n    );\n  }\n\n  return (\n    <div {...baseProps} className={clsx(baseProps.className, styles.root)} ref={__internalRootRef}>\n      <InternalButton\n        ref={triggerRef}\n        className={styles['trigger-button']}\n        disabled={disabled}\n        ariaLabel={i18n('title', title)}\n        onClick={() => {\n          setTemporaryPreferences(copyPreferences(preferences || {}));\n          setModalVisible(true);\n        }}\n        variant=\"icon\"\n        iconName=\"settings\"\n        formAction=\"none\"\n      />\n      {!disabled && modalVisible && (\n        <InternalModal\n          className={styles['modal-root']}\n          visible={true}\n          header={i18n('title', title)}\n          footer={\n            <InternalBox float=\"right\">\n              <InternalSpaceBetween direction=\"horizontal\" size=\"xs\">\n                <InternalButton\n                  className={styles['cancel-button']}\n                  variant=\"link\"\n                  formAction=\"none\"\n                  onClick={onCancelListener}\n                >\n                  {i18n('cancelLabel', cancelLabel)}\n                </InternalButton>\n                <InternalButton\n                  className={styles['confirm-button']}\n                  variant=\"primary\"\n                  formAction=\"none\"\n                  onClick={onConfirmListener}\n                >\n                  {i18n('confirmLabel', confirmLabel)}\n                </InternalButton>\n              </InternalSpaceBetween>\n            </InternalBox>\n          }\n          closeAriaLabel={cancelLabel}\n          size={hasContentOnTheLeft && hasContentOnTheRight ? 'large' : 'medium'}\n          onDismiss={onCancelListener}\n        >\n          <ModalContentLayout\n            left={\n              hasContentOnTheLeft && (\n                <InternalSpaceBetween size=\"l\">\n                  {pageSizePreference && (\n                    <PageSizePreference\n                      value={temporaryPreferences.pageSize}\n                      {...pageSizePreference}\n                      onChange={pageSize => onChange({ pageSize })}\n                    />\n                  )}\n                  {wrapLinesPreference && (\n                    <WrapLinesPreference\n                      value={temporaryPreferences.wrapLines}\n                      {...wrapLinesPreference}\n                      onChange={wrapLines => onChange({ wrapLines })}\n                    />\n                  )}\n                  {stripedRowsPreference && (\n                    <StripedRowsPreference\n                      value={temporaryPreferences.stripedRows}\n                      {...stripedRowsPreference}\n                      onChange={stripedRows => onChange({ stripedRows })}\n                    />\n                  )}\n                  {contentDensityPreference && (\n                    <ContentDensityPreference\n                      value={temporaryPreferences.contentDensity}\n                      {...contentDensityPreference}\n                      onChange={contentDensity => onChange({ contentDensity })}\n                    />\n                  )}\n                  {stickyColumnsPreference && (\n                    <StickyColumnsPreference\n                      value={temporaryPreferences.stickyColumns}\n                      {...stickyColumnsPreference}\n                      onChange={stickyColumns => onChange({ stickyColumns })}\n                    />\n                  )}\n                  {customPreference && (\n                    <CustomPreference\n                      value={temporaryPreferences.custom}\n                      customPreference={customPreference}\n                      onChange={custom => onChange({ custom })}\n                    />\n                  )}\n                </InternalSpaceBetween>\n              )\n            }\n            right={\n              contentDisplayPreference ? (\n                <ContentDisplayPreference\n                  {...contentDisplayPreference}\n                  value={temporaryPreferences.contentDisplay}\n                  onChange={contentDisplay => onChange({ contentDisplay })}\n                />\n              ) : (\n                visibleContentPreference && (\n                  <VisibleContentPreference\n                    value={temporaryPreferences.visibleContent}\n                    {...visibleContentPreference}\n                    onChange={visibleItems => onChange({ visibleContent: visibleItems })}\n                  />\n                )\n              )\n            }\n          />\n        </InternalModal>\n      )}\n    </div>\n  );\n}\n\napplyDisplayName(CollectionPreferences, componentName);\n"]},"metadata":{},"sourceType":"module"}