{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport clsx from 'clsx';\nimport ButtonTrigger from '../../internal/components/button-trigger';\nimport styles from './styles.css.js';\nimport Option from '../../internal/components/option';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { joinStrings } from '../../internal/utils/strings';\nimport { useVisualRefresh } from '../../internal/hooks/use-visual-mode';\nvar Trigger = React.forwardRef(function (_ref, ref) {\n  var ariaLabelledby = _ref.ariaLabelledby,\n    ariaDescribedby = _ref.ariaDescribedby,\n    controlId = _ref.controlId,\n    invalid = _ref.invalid,\n    triggerProps = _ref.triggerProps,\n    selectedOption = _ref.selectedOption,\n    selectedOptions = _ref.selectedOptions,\n    triggerVariant = _ref.triggerVariant,\n    inFilteringToken = _ref.inFilteringToken,\n    isOpen = _ref.isOpen,\n    placeholder = _ref.placeholder,\n    disabled = _ref.disabled;\n  var isVisualRefresh = useVisualRefresh();\n  var generatedId = useUniqueId();\n  var id = controlId !== null && controlId !== void 0 ? controlId : generatedId;\n  var triggerContentId = useUniqueId('trigger-content-');\n  var ariaLabelledbyIds = joinStrings(ariaLabelledby, triggerContentId);\n  var triggerContent = null;\n  if (triggerVariant === 'tokens') {\n    if (selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.length) {\n      triggerContent = React.createElement(\"span\", {\n        className: clsx(styles['inline-token-trigger'], disabled && styles['inline-token-trigger--disabled'], isVisualRefresh && styles['visual-refresh'])\n      }, React.createElement(\"span\", {\n        className: styles['inline-token-list']\n      }, selectedOptions.map(function (_ref2, i) {\n        var label = _ref2.label;\n        return React.createElement(\"span\", {\n          key: i,\n          className: styles['inline-token']\n        }, label);\n      })), React.createElement(\"span\", {\n        className: styles['inline-token-counter'],\n        id: triggerContentId\n      }, React.createElement(\"span\", {\n        className: styles['inline-token-hidden-placeholder']\n      }, placeholder), React.createElement(\"span\", null, \"(\", selectedOptions.length, \")\")));\n      ariaLabelledbyIds = ariaLabelledby;\n    } else {\n      triggerContent = React.createElement(\"span\", {\n        \"aria-disabled\": \"true\",\n        className: clsx(styles.placeholder, styles.trigger),\n        id: triggerContentId\n      }, placeholder);\n    }\n  } else if (!selectedOption) {\n    triggerContent = React.createElement(\"span\", {\n      \"aria-disabled\": \"true\",\n      className: clsx(styles.placeholder, styles.trigger),\n      id: triggerContentId\n    }, placeholder);\n  } else if (triggerVariant === 'option') {\n    triggerContent = React.createElement(Option, {\n      id: triggerContentId,\n      option: Object.assign(Object.assign({}, selectedOption), {\n        disabled: disabled\n      }),\n      triggerVariant: true\n    });\n  } else {\n    triggerContent = React.createElement(\"span\", {\n      id: triggerContentId,\n      className: styles.trigger\n    }, selectedOption.label || selectedOption.value);\n  }\n  var mergedRef = useMergeRefs(triggerProps.ref, ref);\n  return React.createElement(ButtonTrigger, Object.assign({}, triggerProps, {\n    id: id,\n    ref: mergedRef,\n    pressed: isOpen,\n    disabled: disabled,\n    invalid: invalid,\n    inFilteringToken: inFilteringToken,\n    inlineTokens: triggerVariant === 'tokens',\n    ariaDescribedby: ariaDescribedby,\n    ariaLabelledby: ariaLabelledbyIds\n  }), triggerContent);\n});\nexport default Trigger;","map":{"version":3,"mappings":"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","names":["React","useMergeRefs","clsx","ButtonTrigger","styles","Option","useUniqueId","joinStrings","useVisualRefresh","Trigger","forwardRef","ref","ariaLabelledby","ariaDescribedby","controlId","invalid","triggerProps","selectedOption","selectedOptions","triggerVariant","inFilteringToken","isOpen","placeholder","disabled","isVisualRefresh","generatedId","id","triggerContentId","ariaLabelledbyIds","triggerContent","length","className","map","i","label","key","trigger","option","value","mergedRef","pressed","inlineTokens"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/select/parts/lib/default/select/parts/trigger.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport clsx from 'clsx';\nimport ButtonTrigger from '../../internal/components/button-trigger';\nimport { SelectProps } from '../interfaces';\nimport { MultiselectProps } from '../../multiselect/interfaces';\nimport styles from './styles.css.js';\nimport { OptionDefinition } from '../../internal/components/option/interfaces';\nimport { FormFieldValidationControlProps } from '../../internal/context/form-field-context';\nimport Option from '../../internal/components/option';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { SelectTriggerProps } from '../utils/use-select';\nimport { joinStrings } from '../../internal/utils/strings';\nimport { useVisualRefresh } from '../../internal/hooks/use-visual-mode';\n\nexport interface TriggerProps extends FormFieldValidationControlProps {\n  placeholder: string | undefined;\n  disabled: boolean | undefined;\n  triggerProps: SelectTriggerProps;\n  selectedOption: OptionDefinition | null;\n  isOpen?: boolean;\n  triggerVariant?: SelectProps.TriggerVariant | MultiselectProps.TriggerVariant;\n  inFilteringToken?: boolean;\n  selectedOptions?: ReadonlyArray<OptionDefinition>;\n}\n\nconst Trigger = React.forwardRef(\n  (\n    {\n      ariaLabelledby,\n      ariaDescribedby,\n      controlId,\n      invalid,\n      triggerProps,\n      selectedOption,\n      selectedOptions,\n      triggerVariant,\n      inFilteringToken,\n      isOpen,\n      placeholder,\n      disabled,\n    }: TriggerProps,\n    ref: React.Ref<HTMLButtonElement>\n  ) => {\n    const isVisualRefresh = useVisualRefresh();\n    const generatedId = useUniqueId();\n    const id = controlId ?? generatedId;\n    const triggerContentId = useUniqueId('trigger-content-');\n\n    let ariaLabelledbyIds = joinStrings(ariaLabelledby, triggerContentId);\n\n    let triggerContent = null;\n    if (triggerVariant === 'tokens') {\n      if (selectedOptions?.length) {\n        triggerContent = (\n          <span\n            className={clsx(\n              styles['inline-token-trigger'],\n              disabled && styles['inline-token-trigger--disabled'],\n              isVisualRefresh && styles['visual-refresh']\n            )}\n          >\n            <span className={styles['inline-token-list']}>\n              {selectedOptions.map(({ label }, i) => (\n                <span key={i} className={styles['inline-token']}>\n                  {label}\n                </span>\n              ))}\n            </span>\n            <span className={styles['inline-token-counter']} id={triggerContentId}>\n              <span className={styles['inline-token-hidden-placeholder']}>{placeholder}</span>\n              <span>({selectedOptions.length})</span>\n            </span>\n          </span>\n        );\n        ariaLabelledbyIds = ariaLabelledby;\n      } else {\n        triggerContent = (\n          <span aria-disabled=\"true\" className={clsx(styles.placeholder, styles.trigger)} id={triggerContentId}>\n            {placeholder}\n          </span>\n        );\n      }\n    } else if (!selectedOption) {\n      triggerContent = (\n        <span aria-disabled=\"true\" className={clsx(styles.placeholder, styles.trigger)} id={triggerContentId}>\n          {placeholder}\n        </span>\n      );\n    } else if (triggerVariant === 'option') {\n      triggerContent = <Option id={triggerContentId} option={{ ...selectedOption, disabled }} triggerVariant={true} />;\n    } else {\n      triggerContent = (\n        <span id={triggerContentId} className={styles.trigger}>\n          {selectedOption.label || selectedOption.value}\n        </span>\n      );\n    }\n\n    const mergedRef = useMergeRefs(triggerProps.ref, ref);\n\n    return (\n      <ButtonTrigger\n        {...triggerProps}\n        id={id}\n        ref={mergedRef}\n        pressed={isOpen}\n        disabled={disabled}\n        invalid={invalid}\n        inFilteringToken={inFilteringToken}\n        inlineTokens={triggerVariant === 'tokens'}\n        ariaDescribedby={ariaDescribedby}\n        ariaLabelledby={ariaLabelledbyIds}\n      >\n        {triggerContent}\n      </ButtonTrigger>\n    );\n  }\n);\n\nexport default Trigger;\n"]},"metadata":{},"sourceType":"module"}