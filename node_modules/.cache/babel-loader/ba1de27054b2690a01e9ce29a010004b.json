{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/toArray.js\";\n// https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html\nvar SCHEME = 's3://';\nvar BUCKET_FIRST_CHAR = /^[a-z0-9]{1}/;\nvar CAPITAL_LETTER = /[A-Z]/;\nvar DNS_NAME = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)*([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;\nfunction checkBucketNameLength(bucketName) {\n  return 3 <= bucketName.length && bucketName.length <= 63;\n}\nexport function extractBucketName(uri) {\n  var _uri$replace$split = uri.replace(SCHEME, '').split('/'),\n    _uri$replace$split2 = _toArray(_uri$replace$split),\n    bucketName = _uri$replace$split2[0],\n    rest = _uri$replace$split2.slice(1);\n  return [bucketName, rest.join('/')];\n}\nexport function validate(uri) {\n  if (uri === '') {\n    return undefined;\n  }\n  if (uri.slice(0, SCHEME.length) !== SCHEME) {\n    return 'validationPathMustBegin';\n  }\n  var _extractBucketName = extractBucketName(uri),\n    _extractBucketName2 = _slicedToArray(_extractBucketName, 1),\n    bucketName = _extractBucketName2[0];\n  if (!BUCKET_FIRST_CHAR.test(bucketName)) {\n    return 'validationBucketLowerCase';\n  }\n  if (CAPITAL_LETTER.test(bucketName)) {\n    return 'validationBucketMustNotContain';\n  }\n  if (!checkBucketNameLength(bucketName)) {\n    return 'validationBucketLength';\n  }\n  if (!DNS_NAME.test(bucketName)) {\n    return 'validationBucketMustComplyDns';\n  }\n  return undefined;\n}\nexport function getErrorText(i18n, i18nStrings, errorCode) {\n  return errorCode ? i18n(\"i18nStrings.\".concat(errorCode), i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings[errorCode]) : undefined;\n}","map":{"version":3,"mappings":";;AAKA;AACA,IAAMA,MAAM,GAAG,OAAO;AACtB,IAAMC,iBAAiB,GAAG,cAAc;AACxC,IAAMC,cAAc,GAAG,OAAO;AAC9B,IAAMC,QAAQ,GAAG,mFAAmF;AAEpG,SAASC,qBAAqB,CAACC,UAAkB;EAC/C,OAAO,CAAC,IAAIA,UAAU,CAACC,MAAM,IAAID,UAAU,CAACC,MAAM,IAAI,EAAE;AAC1D;AAEA,OAAM,SAAUC,iBAAiB,CAACC,GAAW;EAC3C,yBAA8BA,GAAG,CAACC,OAAO,CAACT,MAAM,EAAE,EAAE,CAAC,CAACU,KAAK,CAAC,GAAG,CAAC;IAAA;IAAzDL,UAAU;IAAKM,IAAI;EAC1B,OAAO,CAACN,UAAU,EAAEM,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrC;AAEA,OAAM,SAAUC,QAAQ,CAACL,GAAW;EAClC,IAAIA,GAAG,KAAK,EAAE,EAAE;IACd,OAAOM,SAAS;;EAElB,IAAIN,GAAG,CAACO,KAAK,CAAC,CAAC,EAAEf,MAAM,CAACM,MAAM,CAAC,KAAKN,MAAM,EAAE;IAC1C,OAAO,yBAAkC;;EAE3C,yBAAqBO,iBAAiB,CAACC,GAAG,CAAC;IAAA;IAApCH,UAAU;EACjB,IAAI,CAACJ,iBAAiB,CAACe,IAAI,CAACX,UAAU,CAAC,EAAE;IACvC,OAAO,2BAAoC;;EAE7C,IAAIH,cAAc,CAACc,IAAI,CAACX,UAAU,CAAC,EAAE;IACnC,OAAO,gCAAyC;;EAElD,IAAI,CAACD,qBAAqB,CAACC,UAAU,CAAC,EAAE;IACtC,OAAO,wBAAiC;;EAE1C,IAAI,CAACF,QAAQ,CAACa,IAAI,CAACX,UAAU,CAAC,EAAE;IAC9B,OAAO,+BAAwC;;EAEjD,OAAOS,SAAS;AAClB;AAEA,OAAM,SAAUG,YAAY,CAC1BC,IAAqD,EACrDC,WAA4D,EAC5DC,SAAsC;EAEtC,OAAOA,SAAS,GAAGF,IAAI,uBAAgBE,SAAS,GAAID,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAGC,SAAS,CAAC,CAAC,GAAGN,SAAS;AAC3F","names":["SCHEME","BUCKET_FIRST_CHAR","CAPITAL_LETTER","DNS_NAME","checkBucketNameLength","bucketName","length","extractBucketName","uri","replace","split","rest","join","validate","undefined","slice","test","getErrorText","i18n","i18nStrings","errorCode"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/lib/default/s3-resource-selector/s3-in-context/validation.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ComponentFormatFunction } from '../../i18n/context';\nimport { S3ResourceSelectorProps } from '../interfaces';\n\n// https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html\nconst SCHEME = 's3://';\nconst BUCKET_FIRST_CHAR = /^[a-z0-9]{1}/;\nconst CAPITAL_LETTER = /[A-Z]/;\nconst DNS_NAME = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)*([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;\n\nfunction checkBucketNameLength(bucketName: string) {\n  return 3 <= bucketName.length && bucketName.length <= 63;\n}\n\nexport function extractBucketName(uri: string) {\n  const [bucketName, ...rest] = uri.replace(SCHEME, '').split('/');\n  return [bucketName, rest.join('/')];\n}\n\nexport function validate(uri: string) {\n  if (uri === '') {\n    return undefined;\n  }\n  if (uri.slice(0, SCHEME.length) !== SCHEME) {\n    return 'validationPathMustBegin' as const;\n  }\n  const [bucketName] = extractBucketName(uri);\n  if (!BUCKET_FIRST_CHAR.test(bucketName)) {\n    return 'validationBucketLowerCase' as const;\n  }\n  if (CAPITAL_LETTER.test(bucketName)) {\n    return 'validationBucketMustNotContain' as const;\n  }\n  if (!checkBucketNameLength(bucketName)) {\n    return 'validationBucketLength' as const;\n  }\n  if (!DNS_NAME.test(bucketName)) {\n    return 'validationBucketMustComplyDns' as const;\n  }\n  return undefined;\n}\n\nexport function getErrorText(\n  i18n: ComponentFormatFunction<'s3-resource-selector'>,\n  i18nStrings: S3ResourceSelectorProps.I18nStrings | undefined,\n  errorCode: ReturnType<typeof validate>\n) {\n  return errorCode ? i18n(`i18nStrings.${errorCode}`, i18nStrings?.[errorCode]) : undefined;\n}\n"]},"metadata":{},"sourceType":"module"}