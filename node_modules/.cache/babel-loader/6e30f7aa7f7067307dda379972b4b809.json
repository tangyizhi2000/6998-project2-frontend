{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useLayoutEffect, useCallback } from 'react';\nimport stickyScrolling, { calculateScrollingOffset, scrollUpBy } from './sticky-scrolling';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\nfunction syncSizes(from, to) {\n  var fromCells = Array.prototype.slice.apply(from.children);\n  var toCells = Array.prototype.slice.apply(to.children);\n  for (var i = 0; i < fromCells.length; i++) {\n    var width = fromCells[i].style.width;\n    // use auto if it is set by resizable columns or real size otherwise\n    if (width !== 'auto') {\n      width = \"\".concat(fromCells[i].offsetWidth, \"px\");\n    }\n    toCells[i].style.width = width;\n  }\n}\nexport var useStickyHeader = function useStickyHeader(tableRef, theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef) {\n  var isMobile = useMobile();\n  // Sync the sizes of the column header copies in the sticky header with the originals\n  var syncColumnHeaderWidths = useCallback(function () {\n    if (tableRef.current && theadRef.current && secondaryTheadRef.current && secondaryTableRef.current && tableWrapperRef.current) {\n      syncSizes(theadRef.current, secondaryTheadRef.current);\n      // Using the tableRef offsetWidth instead of the theadRef because in VR\n      // the tableRef adds extra padding to the table and by default the theadRef will have a width\n      // without the padding and will make the sticky header width incorrect.\n      secondaryTableRef.current.style.width = \"\".concat(tableRef.current.offsetWidth, \"px\");\n      tableWrapperRef.current.style.marginTop = \"-\".concat(theadRef.current.offsetHeight, \"px\");\n    }\n  }, [theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef, tableRef]);\n  useLayoutEffect(function () {\n    syncColumnHeaderWidths();\n  });\n  useResizeObserver(theadRef, syncColumnHeaderWidths);\n  var scrollToTop = function scrollToTop() {\n    if (!isMobile && theadRef.current && secondaryTheadRef.current && tableWrapperRef.current) {\n      var scrollDist = calculateScrollingOffset(theadRef.current, secondaryTheadRef.current);\n      if (scrollDist > 0) {\n        scrollUpBy(scrollDist, tableWrapperRef.current);\n      }\n    }\n  };\n  var _stickyScrolling = stickyScrolling(tableWrapperRef, secondaryTheadRef),\n    scrollToItem = _stickyScrolling.scrollToItem;\n  var scrollToRow = function scrollToRow(itemNode) {\n    if (!isMobile) {\n      scrollToItem(itemNode);\n    }\n  };\n  return {\n    scrollToRow: scrollToRow,\n    scrollToTop: scrollToTop\n  };\n};","map":{"version":3,"mappings":"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","names":["useLayoutEffect","useCallback","stickyScrolling","calculateScrollingOffset","scrollUpBy","useMobile","useResizeObserver","syncSizes","from","to","fromCells","Array","prototype","slice","apply","children","toCells","i","length","width","style","offsetWidth","useStickyHeader","tableRef","theadRef","secondaryTheadRef","secondaryTableRef","tableWrapperRef","isMobile","syncColumnHeaderWidths","current","marginTop","offsetHeight","scrollToTop","scrollDist","scrollToItem","scrollToRow","itemNode"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/table/lib/default/table/use-sticky-header.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useLayoutEffect, RefObject, useCallback } from 'react';\nimport stickyScrolling, { calculateScrollingOffset, scrollUpBy } from './sticky-scrolling';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\n\nfunction syncSizes(from: HTMLElement, to: HTMLElement) {\n  const fromCells = Array.prototype.slice.apply(from.children);\n  const toCells = Array.prototype.slice.apply(to.children);\n  for (let i = 0; i < fromCells.length; i++) {\n    let width = fromCells[i].style.width;\n    // use auto if it is set by resizable columns or real size otherwise\n    if (width !== 'auto') {\n      width = `${fromCells[i].offsetWidth}px`;\n    }\n    toCells[i].style.width = width;\n  }\n}\n\nexport const useStickyHeader = (\n  tableRef: RefObject<HTMLElement>,\n  theadRef: RefObject<HTMLElement>,\n  secondaryTheadRef: RefObject<HTMLElement>,\n  secondaryTableRef: RefObject<HTMLElement>,\n  tableWrapperRef: RefObject<HTMLElement>\n) => {\n  const isMobile = useMobile();\n  // Sync the sizes of the column header copies in the sticky header with the originals\n  const syncColumnHeaderWidths = useCallback(() => {\n    if (\n      tableRef.current &&\n      theadRef.current &&\n      secondaryTheadRef.current &&\n      secondaryTableRef.current &&\n      tableWrapperRef.current\n    ) {\n      syncSizes(theadRef.current, secondaryTheadRef.current);\n\n      // Using the tableRef offsetWidth instead of the theadRef because in VR\n      // the tableRef adds extra padding to the table and by default the theadRef will have a width\n      // without the padding and will make the sticky header width incorrect.\n      secondaryTableRef.current.style.width = `${tableRef.current.offsetWidth}px`;\n\n      tableWrapperRef.current.style.marginTop = `-${theadRef.current.offsetHeight}px`;\n    }\n  }, [theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef, tableRef]);\n  useLayoutEffect(() => {\n    syncColumnHeaderWidths();\n  });\n  useResizeObserver(theadRef, syncColumnHeaderWidths);\n  const scrollToTop = () => {\n    if (!isMobile && theadRef.current && secondaryTheadRef.current && tableWrapperRef.current) {\n      const scrollDist = calculateScrollingOffset(theadRef.current, secondaryTheadRef.current);\n      if (scrollDist > 0) {\n        scrollUpBy(scrollDist, tableWrapperRef.current);\n      }\n    }\n  };\n  const { scrollToItem } = stickyScrolling(tableWrapperRef, secondaryTheadRef);\n  const scrollToRow = (itemNode: HTMLElement | null) => {\n    if (!isMobile) {\n      scrollToItem(itemNode);\n    }\n  };\n  return { scrollToRow, scrollToTop };\n};\n"]},"metadata":{},"sourceType":"module"}