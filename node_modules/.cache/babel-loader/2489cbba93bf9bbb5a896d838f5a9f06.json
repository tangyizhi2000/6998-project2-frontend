{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef, useState, useCallback } from 'react';\nimport { useResizeObserver } from '../internal/container-queries/use-resize-observer';\n/**\n * Attaches resize-observer to the referenced element and keeps last observation in state.\n * The hook allows to limit the amount of re-renders to only when the observed value changes.\n *\n * @example\n * Switching display mode under a given condition (only re-renders when mode changes):\n * ```\n * const [smallMode, ref] = useContainerQuery(entry => entry.contentBoxHeight <= smallModeHeight, [smallModeHeight])\n * ```\n *\n * @example\n * Obtaining observer entry (re-renders with each observation):\n * ```\n * const [entry, ref] = useContainerQuery(entry => entry)\n * ```\n *\n * @example\n * Using previous state to avoid unnecessary re-renders:\n * ```\n * const [value, ref] = useContainerQuery((entry, prev) => shouldUpdate(entry) ? getValue(entry) : prev)\n * ```\n *\n * @typeParam ObservedState State obtained from the last observation\n * @param mapFn Function to convert ContainerQueryEntry to ObservedState\n * @param deps Dependency list to indicate when the mapFn changes\n * @returns A tuple of the observed state and a reference to be attached to the target element\n */\nexport default function useContainerQuery(mapFn, deps) {\n  if (deps === void 0) {\n    deps = [];\n  }\n  var elementRef = useRef(null);\n  var _a = useState(null),\n    state = _a[0],\n    setState = _a[1];\n  // Update getElement when deps change to trigger new observation.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  var getElement = useCallback(function () {\n    return elementRef.current;\n  }, deps);\n  useResizeObserver(getElement, function (entry) {\n    return setState(function (prevState) {\n      return mapFn(entry, prevState);\n    });\n  });\n  return [state, elementRef];\n}","map":{"version":3,"names":["useRef","useState","useCallback","useResizeObserver","useContainerQuery","mapFn","deps","elementRef","_a","state","setState","getElement","current","entry","prevState"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/component-toolkit/lib/container-queries/use-container-query.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef, useState, useCallback } from 'react';\nimport { useResizeObserver } from '../internal/container-queries/use-resize-observer';\n/**\n * Attaches resize-observer to the referenced element and keeps last observation in state.\n * The hook allows to limit the amount of re-renders to only when the observed value changes.\n *\n * @example\n * Switching display mode under a given condition (only re-renders when mode changes):\n * ```\n * const [smallMode, ref] = useContainerQuery(entry => entry.contentBoxHeight <= smallModeHeight, [smallModeHeight])\n * ```\n *\n * @example\n * Obtaining observer entry (re-renders with each observation):\n * ```\n * const [entry, ref] = useContainerQuery(entry => entry)\n * ```\n *\n * @example\n * Using previous state to avoid unnecessary re-renders:\n * ```\n * const [value, ref] = useContainerQuery((entry, prev) => shouldUpdate(entry) ? getValue(entry) : prev)\n * ```\n *\n * @typeParam ObservedState State obtained from the last observation\n * @param mapFn Function to convert ContainerQueryEntry to ObservedState\n * @param deps Dependency list to indicate when the mapFn changes\n * @returns A tuple of the observed state and a reference to be attached to the target element\n */\nexport default function useContainerQuery(mapFn, deps) {\n    if (deps === void 0) { deps = []; }\n    var elementRef = useRef(null);\n    var _a = useState(null), state = _a[0], setState = _a[1];\n    // Update getElement when deps change to trigger new observation.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    var getElement = useCallback(function () { return elementRef.current; }, deps);\n    useResizeObserver(getElement, function (entry) { return setState(function (prevState) { return mapFn(entry, prevState); }); });\n    return [state, elementRef];\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACrD,SAASC,iBAAiB,QAAQ,mDAAmD;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,iBAAiB,CAACC,KAAK,EAAEC,IAAI,EAAE;EACnD,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;IAAEA,IAAI,GAAG,EAAE;EAAE;EAClC,IAAIC,UAAU,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC7B,IAAIQ,EAAE,GAAGP,QAAQ,CAAC,IAAI,CAAC;IAAEQ,KAAK,GAAGD,EAAE,CAAC,CAAC,CAAC;IAAEE,QAAQ,GAAGF,EAAE,CAAC,CAAC,CAAC;EACxD;EACA;EACA,IAAIG,UAAU,GAAGT,WAAW,CAAC,YAAY;IAAE,OAAOK,UAAU,CAACK,OAAO;EAAE,CAAC,EAAEN,IAAI,CAAC;EAC9EH,iBAAiB,CAACQ,UAAU,EAAE,UAAUE,KAAK,EAAE;IAAE,OAAOH,QAAQ,CAAC,UAAUI,SAAS,EAAE;MAAE,OAAOT,KAAK,CAACQ,KAAK,EAAEC,SAAS,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,CAAC;EAC9H,OAAO,CAACL,KAAK,EAAEF,UAAU,CAAC;AAC9B"},"metadata":{},"sourceType":"module"}