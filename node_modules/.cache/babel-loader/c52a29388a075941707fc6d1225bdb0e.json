{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef, useCallback } from 'react';\nexport function useDrawerFocusControl(dependencies, isOpen) {\n  let restoreFocus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const refs = {\n    toggle: useRef(null),\n    close: useRef(null),\n    slider: useRef(null)\n  };\n  const previousFocusedElement = useRef();\n  const shouldFocus = useRef(false);\n  const lastInteraction = useRef(null);\n  useEffect(() => {\n    var _a, _b, _c, _d;\n    switch ((_a = lastInteraction.current) === null || _a === void 0 ? void 0 : _a.type) {\n      case 'open':\n        if (refs.slider.current) {\n          (_b = refs.slider.current) === null || _b === void 0 ? void 0 : _b.focus();\n        } else {\n          (_c = refs.close.current) === null || _c === void 0 ? void 0 : _c.focus();\n        }\n        break;\n      case 'close':\n        (_d = refs.toggle.current) === null || _d === void 0 ? void 0 : _d.focus();\n        break;\n    }\n    lastInteraction.current = null;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n  const doFocus = () => {\n    var _a, _b;\n    if (!shouldFocus.current) {\n      return;\n    }\n    if (isOpen) {\n      previousFocusedElement.current = document.activeElement !== document.body ? document.activeElement : undefined;\n      (_a = refs.close.current) === null || _a === void 0 ? void 0 : _a.focus();\n    } else {\n      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {\n        previousFocusedElement.current.focus();\n        previousFocusedElement.current = undefined;\n      } else {\n        (_b = refs.toggle.current) === null || _b === void 0 ? void 0 : _b.focus();\n      }\n    }\n    shouldFocus.current = false;\n  };\n  // We explictly want this effect to run when only `isOpen` changes\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(doFocus, [isOpen]);\n  const loseFocus = useCallback(() => {\n    previousFocusedElement.current = undefined;\n  }, []);\n  return {\n    refs,\n    setFocus: force => {\n      shouldFocus.current = true;\n      if (force && isOpen) {\n        doFocus();\n      }\n    },\n    loseFocus,\n    setLastInteraction: interaction => lastInteraction.current = interaction\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAAoCA,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAkBjF,OAAM,SAAUC,qBAAqB,CACnCC,YAA4B,EAC5BC,MAAe,EACK;EAAA,IAApBC,YAAY,uEAAG,KAAK;EAEpB,MAAMC,IAAI,GAAG;IACXC,MAAM,EAAEP,MAAM,CAAkB,IAAI,CAAC;IACrCQ,KAAK,EAAER,MAAM,CAAkB,IAAI,CAAC;IACpCS,MAAM,EAAET,MAAM,CAAiB,IAAI;GACpC;EACD,MAAMU,sBAAsB,GAAGV,MAAM,EAAe;EACpD,MAAMW,WAAW,GAAGX,MAAM,CAAC,KAAK,CAAC;EACjC,MAAMY,eAAe,GAAGZ,MAAM,CAA+B,IAAI,CAAC;EAElED,SAAS,CAAC,MAAK;;IACb,QAAQ,qBAAe,CAACc,OAAO,0CAAEC,IAAI;MACnC,KAAK,MAAM;QACT,IAAIR,IAAI,CAACG,MAAM,CAACI,OAAO,EAAE;UACvB,UAAI,CAACJ,MAAM,CAACI,OAAO,0CAAEE,KAAK,EAAE;SAC7B,MAAM;UACL,UAAI,CAACP,KAAK,CAACK,OAAO,0CAAEE,KAAK,EAAE;;QAE7B;MACF,KAAK,OAAO;QACV,UAAI,CAACR,MAAM,CAACM,OAAO,0CAAEE,KAAK,EAAE;QAC5B;IAAM;IAEVH,eAAe,CAACC,OAAO,GAAG,IAAI;IAC9B;EACF,CAAC,EAAEV,YAAY,CAAC;EAEhB,MAAMa,OAAO,GAAG,MAAK;;IACnB,IAAI,CAACL,WAAW,CAACE,OAAO,EAAE;MACxB;;IAEF,IAAIT,MAAM,EAAE;MACVM,sBAAsB,CAACG,OAAO,GAC5BI,QAAQ,CAACC,aAAa,KAAKD,QAAQ,CAACE,IAAI,GAAIF,QAAQ,CAACC,aAA6B,GAAGE,SAAS;MAChG,UAAI,CAACZ,KAAK,CAACK,OAAO,0CAAEE,KAAK,EAAE;KAC5B,MAAM;MACL,IAAIV,YAAY,IAAIK,sBAAsB,CAACG,OAAO,IAAII,QAAQ,CAACI,QAAQ,CAACX,sBAAsB,CAACG,OAAO,CAAC,EAAE;QACvGH,sBAAsB,CAACG,OAAO,CAACE,KAAK,EAAE;QACtCL,sBAAsB,CAACG,OAAO,GAAGO,SAAS;OAC3C,MAAM;QACL,UAAI,CAACb,MAAM,CAACM,OAAO,0CAAEE,KAAK,EAAE;;;IAGhCJ,WAAW,CAACE,OAAO,GAAG,KAAK;EAC7B,CAAC;EAED;EACA;EACAd,SAAS,CAACiB,OAAO,EAAE,CAACZ,MAAM,CAAC,CAAC;EAE5B,MAAMkB,SAAS,GAAGrB,WAAW,CAAC,MAAK;IACjCS,sBAAsB,CAACG,OAAO,GAAGO,SAAS;EAC5C,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLd,IAAI;IACJiB,QAAQ,EAAEC,KAAK,IAAG;MAChBb,WAAW,CAACE,OAAO,GAAG,IAAI;MAC1B,IAAIW,KAAK,IAAIpB,MAAM,EAAE;QACnBY,OAAO,EAAE;;IAEb,CAAC;IACDM,SAAS;IACTG,kBAAkB,EAAGC,WAAkC,IAAMd,eAAe,CAACC,OAAO,GAAGa;GACxF;AACH","names":["useEffect","useRef","useCallback","useDrawerFocusControl","dependencies","isOpen","restoreFocus","refs","toggle","close","slider","previousFocusedElement","shouldFocus","lastInteraction","current","type","focus","doFocus","document","activeElement","body","undefined","contains","loseFocus","setFocus","force","setLastInteraction","interaction"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/app-layout/utils/lib/default/app-layout/utils/use-drawer-focus-control.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { DependencyList, RefObject, useEffect, useRef, useCallback } from 'react';\nimport { ButtonProps } from '../../button/interfaces';\n\nexport type DrawerLastInteraction = { type: 'open' } | { type: 'close' };\n\nexport interface DrawerFocusControlRefs {\n  toggle: RefObject<ButtonProps.Ref>;\n  close: RefObject<ButtonProps.Ref>;\n  slider: RefObject<HTMLDivElement>;\n}\n\ninterface FocusControlState {\n  refs: DrawerFocusControlRefs;\n  setFocus: (force?: boolean) => void;\n  loseFocus: () => void;\n  setLastInteraction: (interaction: DrawerLastInteraction) => void;\n}\n\nexport function useDrawerFocusControl(\n  dependencies: DependencyList,\n  isOpen: boolean,\n  restoreFocus = false\n): FocusControlState {\n  const refs = {\n    toggle: useRef<ButtonProps.Ref>(null),\n    close: useRef<ButtonProps.Ref>(null),\n    slider: useRef<HTMLDivElement>(null),\n  };\n  const previousFocusedElement = useRef<HTMLElement>();\n  const shouldFocus = useRef(false);\n  const lastInteraction = useRef<DrawerLastInteraction | null>(null);\n\n  useEffect(() => {\n    switch (lastInteraction.current?.type) {\n      case 'open':\n        if (refs.slider.current) {\n          refs.slider.current?.focus();\n        } else {\n          refs.close.current?.focus();\n        }\n        break;\n      case 'close':\n        refs.toggle.current?.focus();\n        break;\n    }\n    lastInteraction.current = null;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n\n  const doFocus = () => {\n    if (!shouldFocus.current) {\n      return;\n    }\n    if (isOpen) {\n      previousFocusedElement.current =\n        document.activeElement !== document.body ? (document.activeElement as HTMLElement) : undefined;\n      refs.close.current?.focus();\n    } else {\n      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {\n        previousFocusedElement.current.focus();\n        previousFocusedElement.current = undefined;\n      } else {\n        refs.toggle.current?.focus();\n      }\n    }\n    shouldFocus.current = false;\n  };\n\n  // We explictly want this effect to run when only `isOpen` changes\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(doFocus, [isOpen]);\n\n  const loseFocus = useCallback(() => {\n    previousFocusedElement.current = undefined;\n  }, []);\n\n  return {\n    refs,\n    setFocus: force => {\n      shouldFocus.current = true;\n      if (force && isOpen) {\n        doFocus();\n      }\n    },\n    loseFocus,\n    setLastInteraction: (interaction: DrawerLastInteraction) => (lastInteraction.current = interaction),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}