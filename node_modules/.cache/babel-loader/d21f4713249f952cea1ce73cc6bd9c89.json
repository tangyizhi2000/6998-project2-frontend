{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useMemo, useState } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { getBaseProps } from '../internal/base-component';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { Progress, ResultState, SmallText } from './internal';\nimport { joinStrings } from '../internal/utils/strings';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { throttle } from '../internal/utils/throttle';\nimport LiveRegion from '../internal/components/live-region';\nconst ASSERTION_FREQUENCY = 5000; // interval in ms between progress announcements\nexport default function ProgressBar(_a) {\n  var {\n      value = 0,\n      status = 'in-progress',\n      variant = 'standalone',\n      resultButtonText,\n      label,\n      ariaLabel,\n      ariaLabelledby,\n      description,\n      additionalInfo,\n      resultText,\n      onResultButtonClick\n    } = _a,\n    rest = __rest(_a, [\"value\", \"status\", \"variant\", \"resultButtonText\", \"label\", \"ariaLabel\", \"ariaLabelledby\", \"description\", \"additionalInfo\", \"resultText\", \"onResultButtonClick\"]);\n  const {\n    __internalRootRef\n  } = useBaseComponent('ProgressBar');\n  const baseProps = getBaseProps(rest);\n  const generatedName = useUniqueId('awsui-progress-bar-');\n  const labelId = `${generatedName}-label`;\n  const isInFlash = variant === 'flash';\n  const isInProgressState = status === 'in-progress';\n  const [announcedValue, setAnnouncedValue] = useState('');\n  const throttledAssertion = useMemo(() => {\n    return throttle(value => {\n      setAnnouncedValue(`${value}%`);\n    }, ASSERTION_FREQUENCY);\n  }, []);\n  useEffect(() => {\n    throttledAssertion(value);\n  }, [throttledAssertion, value]);\n  if (isInFlash && resultButtonText) {\n    warnOnce('ProgressBar', 'The `resultButtonText` is ignored if you set `variant=\"flash\"`, and the result button is not displayed. Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item in which the progress bar component is embedded.');\n  }\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root, variant && styles[variant]),\n    ref: __internalRootRef\n  }), React.createElement(\"div\", {\n    className: isInFlash ? styles['flash-container'] : undefined\n  }, React.createElement(\"div\", {\n    className: clsx(styles['word-wrap'], styles[`label-${variant}`]),\n    id: labelId\n  }, label), description && React.createElement(SmallText, {\n    color: isInFlash ? 'inherit' : undefined\n  }, description), React.createElement(\"div\", null, isInProgressState ? React.createElement(React.Fragment, null, React.createElement(Progress, {\n    value: value,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: joinStrings(labelId, ariaLabelledby),\n    isInFlash: isInFlash\n  }), React.createElement(LiveRegion, {\n    delay: 0\n  }, label, label ? ': ' : null, announcedValue)) : React.createElement(ResultState, {\n    resultText: resultText,\n    isInFlash: isInFlash,\n    resultButtonText: resultButtonText,\n    status: status,\n    onClick: () => {\n      fireNonCancelableEvent(onResultButtonClick);\n    }\n  }))), additionalInfo && React.createElement(SmallText, {\n    color: isInFlash ? 'inherit' : undefined\n  }, additionalInfo));\n}\napplyDisplayName(ProgressBar, 'ProgressBar');","map":{"version":3,"mappings":"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","names":["React","useEffect","useMemo","useState","clsx","styles","getBaseProps","warnOnce","fireNonCancelableEvent","useUniqueId","Progress","ResultState","SmallText","joinStrings","applyDisplayName","useBaseComponent","throttle","LiveRegion","ASSERTION_FREQUENCY","ProgressBar","_a","value","status","variant","resultButtonText","label","ariaLabel","ariaLabelledby","description","additionalInfo","resultText","onResultButtonClick","rest","__internalRootRef","baseProps","generatedName","labelId","isInFlash","isInProgressState","announcedValue","setAnnouncedValue","throttledAssertion","className","root","ref","undefined","id","color","delay","onClick"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/progress-bar/lib/default/progress-bar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useMemo, useState } from 'react';\nimport clsx from 'clsx';\n\nimport styles from './styles.css.js';\nimport { getBaseProps } from '../internal/base-component';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { ProgressBarProps } from './interfaces';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { Progress, ResultState, SmallText } from './internal';\nimport { joinStrings } from '../internal/utils/strings';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { throttle } from '../internal/utils/throttle';\nimport LiveRegion from '../internal/components/live-region';\n\nconst ASSERTION_FREQUENCY = 5000; // interval in ms between progress announcements\n\nexport { ProgressBarProps };\n\nexport default function ProgressBar({\n  value = 0,\n  status = 'in-progress',\n  variant = 'standalone',\n  resultButtonText,\n  label,\n  ariaLabel,\n  ariaLabelledby,\n  description,\n  additionalInfo,\n  resultText,\n  onResultButtonClick,\n  ...rest\n}: ProgressBarProps) {\n  const { __internalRootRef } = useBaseComponent('ProgressBar');\n  const baseProps = getBaseProps(rest);\n  const generatedName = useUniqueId('awsui-progress-bar-');\n\n  const labelId = `${generatedName}-label`;\n  const isInFlash = variant === 'flash';\n  const isInProgressState = status === 'in-progress';\n\n  const [announcedValue, setAnnouncedValue] = useState('');\n  const throttledAssertion = useMemo(() => {\n    return throttle((value: ProgressBarProps['value']) => {\n      setAnnouncedValue(`${value}%`);\n    }, ASSERTION_FREQUENCY);\n  }, []);\n\n  useEffect(() => {\n    throttledAssertion(value);\n  }, [throttledAssertion, value]);\n\n  if (isInFlash && resultButtonText) {\n    warnOnce(\n      'ProgressBar',\n      'The `resultButtonText` is ignored if you set `variant=\"flash\"`, and the result button is not displayed. Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item in which the progress bar component is embedded.'\n    );\n  }\n\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.root, variant && styles[variant])}\n      ref={__internalRootRef}\n    >\n      <div className={isInFlash ? styles['flash-container'] : undefined}>\n        <div className={clsx(styles['word-wrap'], styles[`label-${variant}`])} id={labelId}>\n          {label}\n        </div>\n        {description && <SmallText color={isInFlash ? 'inherit' : undefined}>{description}</SmallText>}\n        <div>\n          {isInProgressState ? (\n            <>\n              <Progress\n                value={value}\n                ariaLabel={ariaLabel}\n                ariaLabelledby={joinStrings(labelId, ariaLabelledby)}\n                isInFlash={isInFlash}\n              />\n              <LiveRegion delay={0}>\n                {label}\n                {label ? ': ' : null}\n                {announcedValue}\n              </LiveRegion>\n            </>\n          ) : (\n            <ResultState\n              resultText={resultText}\n              isInFlash={isInFlash}\n              resultButtonText={resultButtonText}\n              status={status}\n              onClick={() => {\n                fireNonCancelableEvent(onResultButtonClick);\n              }}\n            />\n          )}\n        </div>\n      </div>\n      {additionalInfo && <SmallText color={isInFlash ? 'inherit' : undefined}>{additionalInfo}</SmallText>}\n    </div>\n  );\n}\n\napplyDisplayName(ProgressBar, 'ProgressBar');\n"]},"metadata":{},"sourceType":"module"}