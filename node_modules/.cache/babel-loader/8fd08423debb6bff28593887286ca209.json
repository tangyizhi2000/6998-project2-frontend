{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { scaleLinear, scaleLog, scaleTime, scaleBand } from '../../vendor/d3-scale';\nfunction isNumericDomain(domain) {\n  return domain.length > 0 && typeof domain[0] === 'number';\n}\nfunction isDateDomain(domain) {\n  return domain.length > 0 && domain[0] instanceof Date;\n}\nfunction createNumericScale(type, domain) {\n  let scale;\n  switch (type) {\n    case 'log':\n      scale = scaleLog();\n      break;\n    default:\n      scale = scaleLinear();\n  }\n  if (isNumericDomain(domain)) {\n    scale.domain(domain);\n  }\n  return scale;\n}\nfunction createTimeScale(domain) {\n  const scale = scaleTime();\n  if (isDateDomain(domain)) {\n    scale.domain(domain);\n  }\n  return scale;\n}\nfunction createBandScale(domain) {\n  const scale = scaleBand().padding(0.1);\n  scale.domain(domain);\n  return scale;\n}\nexport function createScale(type, domain, range) {\n  switch (type) {\n    case 'linear':\n    case 'log':\n      return {\n        type: 'numeric',\n        scale: createNumericScale(type, domain).range(range)\n      };\n    case 'time':\n      return {\n        type: 'time',\n        scale: createTimeScale(domain).range(range)\n      };\n    case 'categorical':\n      return {\n        type: 'categorical',\n        scale: createBandScale(domain).range(range)\n      };\n  }\n}\nexport class ChartScale {\n  constructor(scaleType, domain, range) {\n    let noCategoricalOuterPadding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    this.scaleType = scaleType;\n    this.domain = domain;\n    this.range = range;\n    this.scale = createScale(this.scaleType, this.domain, this.range);\n    this.d3Scale = this.scale.scale;\n    if (this.isCategorical()) {\n      if (noCategoricalOuterPadding) {\n        // Categorical charts with only line (or threshold) series don't need as much out padding\n        // compared to a bar series. Increasing the inner padding to push more data points to the outside.\n        this.d3Scale.paddingInner(0.7);\n        this.d3Scale.paddingOuter(0);\n      } else {\n        this.d3Scale.paddingInner(0.2);\n        this.d3Scale.paddingOuter(0.05);\n      }\n    }\n  }\n  cloneScale(newScaleType, newDomain, newRange) {\n    return new ChartScale(newScaleType || this.scaleType, newDomain || this.domain, newRange || this.range);\n  }\n  isNumeric() {\n    return this.scale.type === 'numeric';\n  }\n  isTime() {\n    return this.scale.type === 'time';\n  }\n  isCategorical() {\n    return this.scale.type === 'categorical';\n  }\n}\nexport class NumericChartScale {\n  constructor(scaleType, domain, range, adjustDomain) {\n    this.scaleType = scaleType;\n    const scale = createNumericScale(scaleType, domain).range(range);\n    if (adjustDomain !== null) {\n      scale.nice(adjustDomain);\n    }\n    this.scale = {\n      type: 'numeric',\n      scale\n    };\n    this.d3Scale = this.scale.scale;\n  }\n  isCategorical() {\n    return false;\n  }\n}","map":{"version":3,"mappings":"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","names":["scaleLinear","scaleLog","scaleTime","scaleBand","isNumericDomain","domain","length","isDateDomain","Date","createNumericScale","type","scale","createTimeScale","createBandScale","padding","createScale","range","ChartScale","constructor","scaleType","noCategoricalOuterPadding","d3Scale","isCategorical","paddingInner","paddingOuter","cloneScale","newScaleType","newDomain","newRange","isNumeric","isTime","NumericChartScale","adjustDomain","nice"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/internal/components/cartesian-chart/lib/default/internal/components/cartesian-chart/scales.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport {\n  scaleLinear,\n  scaleLog,\n  scaleTime,\n  scaleBand,\n  ScaleContinuousNumeric,\n  ScaleTime,\n  ScaleBand,\n} from '../../vendor/d3-scale';\n\nimport { ChartDataTypes, ChartDomain, ScaleType, ScaleRange } from './interfaces';\n\nexport interface NumericD3Scale {\n  type: 'numeric';\n  scale: ScaleContinuousNumeric<number, number>;\n}\n\nexport interface TimeD3Scale {\n  type: 'time';\n  scale: ScaleTime<number, number>;\n}\n\nexport interface CategoricalD3Scale {\n  type: 'categorical';\n  scale: ScaleBand<ChartDataTypes>;\n}\n\nexport type D3Scale = NumericD3Scale | TimeD3Scale | CategoricalD3Scale;\n\ntype InternalScale = ScaleContinuousNumeric<number, number> | ScaleBand<ChartDataTypes> | ScaleTime<number, number>;\n\nfunction isNumericDomain(domain: ChartDomain<ChartDataTypes>): domain is number[] {\n  return domain.length > 0 && typeof domain[0] === 'number';\n}\n\nfunction isDateDomain(domain: ChartDomain<ChartDataTypes>): domain is Date[] {\n  return domain.length > 0 && domain[0] instanceof Date;\n}\n\nfunction createNumericScale(type: ScaleType, domain: ChartDomain<ChartDataTypes>) {\n  let scale: ScaleContinuousNumeric<number, number>;\n  switch (type) {\n    case 'log':\n      scale = scaleLog();\n      break;\n    default:\n      scale = scaleLinear();\n  }\n\n  if (isNumericDomain(domain)) {\n    scale.domain(domain);\n  }\n\n  return scale;\n}\n\nfunction createTimeScale(domain: ChartDomain<ChartDataTypes>) {\n  const scale = scaleTime();\n  if (isDateDomain(domain)) {\n    scale.domain(domain);\n  }\n  return scale;\n}\n\nfunction createBandScale(domain: ChartDomain<ChartDataTypes>) {\n  const scale = scaleBand<ChartDataTypes>().padding(0.1);\n  scale.domain(domain);\n  return scale;\n}\n\nexport function createScale(type: ScaleType, domain: ChartDomain<ChartDataTypes>, range: ScaleRange): D3Scale {\n  switch (type) {\n    case 'linear':\n    case 'log':\n      return { type: 'numeric', scale: createNumericScale(type, domain).range(range) };\n\n    case 'time':\n      return { type: 'time', scale: createTimeScale(domain).range(range) };\n\n    case 'categorical':\n      return { type: 'categorical', scale: createBandScale(domain).range(range) };\n  }\n}\n\nexport class ChartScale {\n  public readonly scale: D3Scale;\n  public readonly d3Scale: InternalScale;\n\n  constructor(\n    public readonly scaleType: ScaleType,\n    public readonly domain: ChartDomain<ChartDataTypes>,\n    public readonly range: ScaleRange,\n    noCategoricalOuterPadding = false\n  ) {\n    this.scale = createScale(this.scaleType, this.domain, this.range);\n    this.d3Scale = this.scale.scale;\n\n    if (this.isCategorical()) {\n      if (noCategoricalOuterPadding) {\n        // Categorical charts with only line (or threshold) series don't need as much out padding\n        // compared to a bar series. Increasing the inner padding to push more data points to the outside.\n        this.d3Scale.paddingInner(0.7);\n        this.d3Scale.paddingOuter(0);\n      } else {\n        this.d3Scale.paddingInner(0.2);\n        this.d3Scale.paddingOuter(0.05);\n      }\n    }\n  }\n\n  cloneScale(newScaleType?: ScaleType, newDomain?: ChartDomain<ChartDataTypes>, newRange?: ScaleRange) {\n    return new ChartScale(newScaleType || this.scaleType, newDomain || this.domain, newRange || this.range);\n  }\n\n  isNumeric(): this is { d3Scale: ScaleContinuousNumeric<number, number>; domain: ChartDomain<number> } {\n    return this.scale.type === 'numeric';\n  }\n\n  isTime(): this is { d3Scale: ScaleTime<number, number>; domain: ChartDomain<Date> } {\n    return this.scale.type === 'time';\n  }\n\n  isCategorical(): this is { d3Scale: ScaleBand<ChartDataTypes>; domain: ChartDomain<string> } {\n    return this.scale.type === 'categorical';\n  }\n}\n\nexport class NumericChartScale {\n  public readonly scale: NumericD3Scale;\n  public readonly d3Scale: ScaleContinuousNumeric<number, number>;\n\n  constructor(\n    public readonly scaleType: 'linear' | 'log',\n    domain: ChartDomain<number>,\n    range: ScaleRange,\n    adjustDomain: null | number\n  ) {\n    const scale = createNumericScale(scaleType, domain).range(range);\n    if (adjustDomain !== null) {\n      scale.nice(adjustDomain);\n    }\n    this.scale = { type: 'numeric', scale };\n    this.d3Scale = this.scale.scale;\n  }\n\n  isCategorical() {\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}