{"ast":null,"code":"import { KeyCode } from '../../keycode';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { isCommand, isDigit } from './utils/keys';\nimport { backspaceHandler, keyHandler, enterHandler } from './keyboard-handler';\nvar onAutoComplete = function onAutoComplete(value, onChange, maskFormat) {\n  // Do not autocomplete if input is empty\n  if (!value) {\n    return;\n  }\n  var autoCompletedValue = maskFormat.autoComplete(value);\n  if (autoCompletedValue !== value) {\n    onChange(autoCompletedValue);\n  }\n};\nvar preventDefault = function preventDefault(event, result) {\n  return result && event.preventDefault();\n};\nvar useMask = function useMask(_ref) {\n  var _ref$value = _ref.value,\n    value = _ref$value === void 0 ? '' : _ref$value,\n    _onBlur = _ref.onBlur,\n    onChange = _ref.onChange,\n    _onKeyDown = _ref.onKeyDown,\n    format = _ref.format,\n    inputRef = _ref.inputRef,\n    _ref$autofix = _ref.autofix,\n    autofix = _ref$autofix === void 0 ? false : _ref$autofix,\n    _ref$disableAutocompl = _ref.disableAutocompleteOnBlur,\n    disableAutocompleteOnBlur = _ref$disableAutocompl === void 0 ? false : _ref$disableAutocompl,\n    setPosition = _ref.setPosition;\n  if (!format.isValid(value)) {\n    warnOnce('useMask', \"Invalid string \\\"\".concat(value, \"\\\" provided\"));\n  }\n  var onMaskChange = function onMaskChange(updatedValue) {\n    var autofixedUpdatedValue = autofix ? format.correctMinMaxValues(updatedValue) : updatedValue;\n    if (autofixedUpdatedValue === value || !format.isValid(autofixedUpdatedValue)) {\n      return;\n    }\n    onChange(autofixedUpdatedValue);\n  };\n  var initialValue = autofix ? format.correctMinMaxValues(value) : value;\n  var maskedValue = format.getValidValue(initialValue);\n  return {\n    value: maskedValue,\n    onKeyDown: function onKeyDown(event) {\n      var _a, _b;\n      var selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;\n      var selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;\n      var result;\n      var _event$detail = event.detail,\n        keyCode = _event$detail.keyCode,\n        key = _event$detail.key,\n        ctrlKey = _event$detail.ctrlKey,\n        metaKey = _event$detail.metaKey;\n      if (isDigit(key) || format.isSeparator(key)) {\n        result = keyHandler(maskedValue, key, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.backspace) {\n        result = backspaceHandler(maskedValue, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.enter) {\n        result = enterHandler(maskedValue, format);\n      } else if (!isCommand(keyCode, ctrlKey, metaKey)) {\n        event.preventDefault();\n      }\n      if (result) {\n        var _result = result,\n          _value = _result.value,\n          position = _result.position;\n        onMaskChange(_value);\n        setPosition(position);\n      }\n      // Proxy original event\n      _onKeyDown && _onKeyDown(event);\n    },\n    onChange: function onChange(_ref2) {\n      var detail = _ref2.detail;\n      return onMaskChange(detail.value);\n    },\n    onBlur: function onBlur() {\n      if (!disableAutocompleteOnBlur) {\n        onAutoComplete(maskedValue, onChange, format);\n      }\n      _onBlur && _onBlur();\n    },\n    onPaste: function onPaste(event) {\n      var _a, _b;\n      var text = (event.clipboardData || window.clipboardData).getData('text');\n      var selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;\n      var selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;\n      var formattedText = format.formatPastedText(text, maskedValue, selectionStart, selectionEnd);\n      onMaskChange(formattedText);\n    }\n  };\n};\nexport default useMask;","map":{"version":3,"mappings":"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","names":["KeyCode","warnOnce","isCommand","isDigit","backspaceHandler","keyHandler","enterHandler","onAutoComplete","value","onChange","maskFormat","autoCompletedValue","autoComplete","preventDefault","event","result","useMask","onBlur","onKeyDown","format","inputRef","autofix","disableAutocompleteOnBlur","setPosition","isValid","onMaskChange","updatedValue","autofixedUpdatedValue","correctMinMaxValues","initialValue","maskedValue","getValidValue","selectionStart","current","selectionEnd","detail","keyCode","key","ctrlKey","metaKey","isSeparator","backspace","enter","position","onPaste","text","clipboardData","window","getData","formattedText","formatPastedText"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/components/masked-input/lib/default/internal/components/masked-input/use-mask.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { RefObject } from 'react';\nimport { InputProps } from '../../../input/interfaces';\nimport { NonCancelableEventHandler, CancelableEventHandler } from '../../events';\nimport { KeyCode } from '../../keycode';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { isCommand, isDigit } from './utils/keys';\n\nimport MaskFormat from './utils/mask-format';\nimport { backspaceHandler, HandlerResult, keyHandler, enterHandler } from './keyboard-handler';\n\ninterface UseMaskHook {\n  value: string;\n  onChange: NonCancelableEventHandler<InputProps.ChangeDetail>;\n  onKeyDown: CancelableEventHandler<InputProps.KeyDetail>;\n  onBlur: NonCancelableEventHandler<null>;\n  onPaste: (event: ClipboardEvent) => void;\n}\n\ninterface UseMaskProps {\n  value: string;\n  onChange: (value: string) => void;\n  onKeyDown?: (event: CustomEvent) => void;\n  onBlur?: () => void;\n  format: MaskFormat;\n  autofix?: boolean;\n  inputRef: RefObject<HTMLInputElement>;\n  disableAutocompleteOnBlur?: boolean;\n  setPosition: (position: number | null) => void;\n}\n\nconst onAutoComplete = (value: string, onChange: UseMaskProps['onChange'], maskFormat: MaskFormat) => {\n  // Do not autocomplete if input is empty\n  if (!value) {\n    return;\n  }\n\n  const autoCompletedValue = maskFormat.autoComplete(value);\n  if (autoCompletedValue !== value) {\n    onChange(autoCompletedValue);\n  }\n};\n\nconst preventDefault = (event: CustomEvent, result?: HandlerResult | null) => result && event.preventDefault();\n\nconst useMask = ({\n  value = '',\n  onBlur,\n  onChange,\n  onKeyDown,\n  format,\n  inputRef,\n  autofix = false,\n  disableAutocompleteOnBlur = false,\n  setPosition,\n}: UseMaskProps): UseMaskHook => {\n  if (!format.isValid(value)) {\n    warnOnce('useMask', `Invalid string \"${value}\" provided`);\n  }\n\n  const onMaskChange = (updatedValue: string) => {\n    const autofixedUpdatedValue = autofix ? format.correctMinMaxValues(updatedValue) : updatedValue;\n    if (autofixedUpdatedValue === value || !format.isValid(autofixedUpdatedValue)) {\n      return;\n    }\n\n    onChange(autofixedUpdatedValue);\n  };\n\n  const initialValue = autofix ? format.correctMinMaxValues(value) : value;\n  const maskedValue = format.getValidValue(initialValue);\n\n  return {\n    value: maskedValue,\n    onKeyDown: (event: CustomEvent) => {\n      const selectionStart = inputRef.current?.selectionStart || 0;\n      const selectionEnd = inputRef.current?.selectionEnd || 0;\n\n      let result: HandlerResult | undefined;\n      const { keyCode, key, ctrlKey, metaKey } = event.detail;\n      if (isDigit(key) || format.isSeparator(key)) {\n        result = keyHandler(maskedValue, key, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.backspace) {\n        result = backspaceHandler(maskedValue, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.enter) {\n        result = enterHandler(maskedValue, format);\n      } else if (!isCommand(keyCode, ctrlKey, metaKey)) {\n        event.preventDefault();\n      }\n\n      if (result) {\n        const { value, position } = result;\n\n        onMaskChange(value);\n        setPosition(position);\n      }\n\n      // Proxy original event\n      onKeyDown && onKeyDown(event);\n    },\n    onChange: ({ detail }) => onMaskChange(detail.value),\n    onBlur: () => {\n      if (!disableAutocompleteOnBlur) {\n        onAutoComplete(maskedValue, onChange, format);\n      }\n\n      onBlur && onBlur();\n    },\n    onPaste: (event: ClipboardEvent) => {\n      const text = (event.clipboardData || (window as any).clipboardData).getData('text');\n\n      const selectionStart = inputRef.current?.selectionStart || 0;\n      const selectionEnd = inputRef.current?.selectionEnd || 0;\n\n      const formattedText = format.formatPastedText(text, maskedValue, selectionStart, selectionEnd);\n      onMaskChange(formattedText);\n    },\n  };\n};\n\nexport default useMask;\n"]},"metadata":{},"sourceType":"module"}