{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __rest } from \"tslib\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { isSameMonth } from 'date-fns';\nimport styles from './styles.css.js';\nimport CalendarHeader from './header';\nimport Grid from './grid';\nimport { normalizeLocale, normalizeStartOfWeek } from '../internal/utils/locale';\nimport { formatDate, parseDate } from '../internal/utils/date-time';\nimport { fireNonCancelableEvent } from '../internal/events/index.js';\nimport checkControlled from '../internal/hooks/check-controlled/index.js';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { getBaseDate } from './utils/navigation';\nimport { useDateCache } from '../internal/hooks/use-date-cache/index.js';\nimport { useUniqueId } from '../internal/hooks/use-unique-id/index.js';\nimport { useInternalI18n } from '../i18n/context.js';\nexport default function Calendar(_a) {\n  var {\n      value,\n      locale = '',\n      startOfWeek,\n      isDateEnabled = () => true,\n      ariaLabel,\n      ariaLabelledby,\n      ariaDescribedby,\n      onChange,\n      __internalRootRef\n    } = _a,\n    rest = __rest(_a, [\"value\", \"locale\", \"startOfWeek\", \"isDateEnabled\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescribedby\", \"onChange\", \"__internalRootRef\"]);\n  checkControlled('Calendar', 'value', value, 'onChange', onChange);\n  const baseProps = getBaseProps(rest);\n  const normalizedLocale = normalizeLocale('Calendar', locale);\n  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, normalizedLocale);\n  const gridWrapperRef = useRef(null);\n  const [focusedDate, setFocusedDate] = useState(null);\n  const valueDateCache = useDateCache();\n  const focusedDateCache = useDateCache();\n  // Set displayed date to value if defined or to current date otherwise.\n  const parsedValue = value && value.length >= 4 ? parseDate(value) : null;\n  const memoizedValue = parsedValue ? valueDateCache(parsedValue) : null;\n  const defaultDisplayedDate = memoizedValue !== null && memoizedValue !== void 0 ? memoizedValue : new Date();\n  const [displayedDate, setDisplayedDate] = useState(defaultDisplayedDate);\n  const headingId = useUniqueId('calendar-heading');\n  const i18n = useInternalI18n('calendar');\n  const nextMonthAriaLabel = i18n('nextMonthAriaLabel', rest.nextMonthAriaLabel);\n  const previousMonthAriaLabel = i18n('previousMonthAriaLabel', rest.previousMonthAriaLabel);\n  const todayAriaLabel = i18n('todayAriaLabel', rest.todayAriaLabel);\n  // Update displayed date if value changes.\n  useEffect(() => {\n    memoizedValue && setDisplayedDate(prev => prev.getTime() !== memoizedValue.getTime() ? memoizedValue : prev);\n  }, [memoizedValue]);\n  const selectFocusedDate = (selected, baseDate) => {\n    if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {\n      return selected;\n    }\n    const today = new Date();\n    if (isDateEnabled(today) && isSameMonth(today, baseDate)) {\n      return today;\n    }\n    if (isDateEnabled(baseDate)) {\n      return baseDate;\n    }\n    return null;\n  };\n  const baseDate = getBaseDate(displayedDate, isDateEnabled);\n  const focusableDate = focusedDate || selectFocusedDate(memoizedValue, baseDate);\n  const onHeaderChangeMonthHandler = date => {\n    setDisplayedDate(date);\n    setFocusedDate(null);\n  };\n  const onGridChangeMonthHandler = newMonth => {\n    setDisplayedDate(newMonth);\n    setFocusedDate(null);\n  };\n  const onGridFocusDateHandler = date => {\n    if (date) {\n      setFocusedDate(date ? focusedDateCache(date) : null);\n    }\n  };\n  const onGridSelectDateHandler = date => {\n    fireNonCancelableEvent(onChange, {\n      value: formatDate(date)\n    });\n    setFocusedDate(null);\n  };\n  const onGridBlur = event => {\n    var _a;\n    const newFocusTargetIsInGrid = event.relatedTarget && ((_a = gridWrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget));\n    if (!newFocusTargetIsInGrid) {\n      setFocusedDate(null);\n    }\n  };\n  return React.createElement(\"div\", Object.assign({\n    ref: __internalRootRef\n  }, baseProps, {\n    role: \"group\",\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby,\n    className: clsx(styles.root, styles.calendar, baseProps.className)\n  }), React.createElement(\"div\", {\n    className: styles['calendar-inner']\n  }, React.createElement(CalendarHeader, {\n    baseDate: baseDate,\n    locale: normalizedLocale,\n    onChangeMonth: onHeaderChangeMonthHandler,\n    previousMonthLabel: previousMonthAriaLabel,\n    nextMonthLabel: nextMonthAriaLabel,\n    headingId: headingId\n  }), React.createElement(\"div\", {\n    onBlur: onGridBlur,\n    ref: gridWrapperRef\n  }, React.createElement(Grid, {\n    locale: normalizedLocale,\n    baseDate: baseDate,\n    isDateEnabled: isDateEnabled,\n    focusedDate: focusedDate,\n    focusableDate: focusableDate,\n    onSelectDate: onGridSelectDateHandler,\n    onFocusDate: onGridFocusDateHandler,\n    onChangeMonth: onGridChangeMonthHandler,\n    startOfWeek: normalizedStartOfWeek,\n    todayAriaLabel: todayAriaLabel,\n    selectedDate: memoizedValue,\n    ariaLabelledby: headingId\n  }))));\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","useState","isSameMonth","styles","CalendarHeader","Grid","normalizeLocale","normalizeStartOfWeek","formatDate","parseDate","fireNonCancelableEvent","checkControlled","clsx","getBaseProps","getBaseDate","useDateCache","useUniqueId","useInternalI18n","Calendar","_a","value","locale","startOfWeek","isDateEnabled","ariaLabel","ariaLabelledby","ariaDescribedby","onChange","__internalRootRef","rest","baseProps","normalizedLocale","normalizedStartOfWeek","gridWrapperRef","focusedDate","setFocusedDate","valueDateCache","focusedDateCache","parsedValue","length","memoizedValue","defaultDisplayedDate","Date","displayedDate","setDisplayedDate","headingId","i18n","nextMonthAriaLabel","previousMonthAriaLabel","todayAriaLabel","prev","getTime","selectFocusedDate","selected","baseDate","today","focusableDate","onHeaderChangeMonthHandler","date","onGridChangeMonthHandler","newMonth","onGridFocusDateHandler","onGridSelectDateHandler","onGridBlur","event","newFocusTargetIsInGrid","relatedTarget","current","contains","ref","role","className","root","calendar","onChangeMonth","previousMonthLabel","nextMonthLabel","onBlur","onSelectDate","onFocusDate","selectedDate"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/calendar/lib/default/calendar/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { isSameMonth } from 'date-fns';\nimport styles from './styles.css.js';\nimport CalendarHeader from './header';\nimport Grid from './grid';\nimport { normalizeLocale, normalizeStartOfWeek } from '../internal/utils/locale';\nimport { formatDate, parseDate } from '../internal/utils/date-time';\nimport { fireNonCancelableEvent } from '../internal/events/index.js';\nimport checkControlled from '../internal/hooks/check-controlled/index.js';\nimport clsx from 'clsx';\nimport { CalendarProps } from './interfaces.js';\nimport { getBaseProps } from '../internal/base-component';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component/index.js';\nimport { getBaseDate } from './utils/navigation';\nimport { useDateCache } from '../internal/hooks/use-date-cache/index.js';\nimport { useUniqueId } from '../internal/hooks/use-unique-id/index.js';\nimport { useInternalI18n } from '../i18n/context.js';\n\nexport type DayIndex = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport default function Calendar({\n  value,\n  locale = '',\n  startOfWeek,\n  isDateEnabled = () => true,\n  ariaLabel,\n  ariaLabelledby,\n  ariaDescribedby,\n  onChange,\n  __internalRootRef,\n  ...rest\n}: CalendarProps & InternalBaseComponentProps) {\n  checkControlled('Calendar', 'value', value, 'onChange', onChange);\n\n  const baseProps = getBaseProps(rest);\n  const normalizedLocale = normalizeLocale('Calendar', locale);\n  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, normalizedLocale);\n  const gridWrapperRef = useRef<HTMLDivElement>(null);\n  const [focusedDate, setFocusedDate] = useState<Date | null>(null);\n\n  const valueDateCache = useDateCache();\n  const focusedDateCache = useDateCache();\n\n  // Set displayed date to value if defined or to current date otherwise.\n  const parsedValue = value && value.length >= 4 ? parseDate(value) : null;\n  const memoizedValue = parsedValue ? valueDateCache(parsedValue) : null;\n  const defaultDisplayedDate = memoizedValue ?? new Date();\n  const [displayedDate, setDisplayedDate] = useState(defaultDisplayedDate);\n\n  const headingId = useUniqueId('calendar-heading');\n\n  const i18n = useInternalI18n('calendar');\n  const nextMonthAriaLabel = i18n('nextMonthAriaLabel', rest.nextMonthAriaLabel);\n  const previousMonthAriaLabel = i18n('previousMonthAriaLabel', rest.previousMonthAriaLabel);\n  const todayAriaLabel = i18n('todayAriaLabel', rest.todayAriaLabel);\n\n  // Update displayed date if value changes.\n  useEffect(() => {\n    memoizedValue && setDisplayedDate(prev => (prev.getTime() !== memoizedValue.getTime() ? memoizedValue : prev));\n  }, [memoizedValue]);\n\n  const selectFocusedDate = (selected: Date | null, baseDate: Date): Date | null => {\n    if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {\n      return selected;\n    }\n    const today = new Date();\n    if (isDateEnabled(today) && isSameMonth(today, baseDate)) {\n      return today;\n    }\n    if (isDateEnabled(baseDate)) {\n      return baseDate;\n    }\n    return null;\n  };\n\n  const baseDate = getBaseDate(displayedDate, isDateEnabled);\n  const focusableDate = focusedDate || selectFocusedDate(memoizedValue, baseDate);\n\n  const onHeaderChangeMonthHandler = (date: Date) => {\n    setDisplayedDate(date);\n    setFocusedDate(null);\n  };\n\n  const onGridChangeMonthHandler = (newMonth: Date) => {\n    setDisplayedDate(newMonth);\n    setFocusedDate(null);\n  };\n\n  const onGridFocusDateHandler = (date: null | Date) => {\n    if (date) {\n      setFocusedDate(date ? focusedDateCache(date) : null);\n    }\n  };\n\n  const onGridSelectDateHandler = (date: Date) => {\n    fireNonCancelableEvent(onChange, { value: formatDate(date) });\n    setFocusedDate(null);\n  };\n\n  const onGridBlur = (event: React.FocusEvent) => {\n    const newFocusTargetIsInGrid = event.relatedTarget && gridWrapperRef.current?.contains(event.relatedTarget as Node);\n    if (!newFocusTargetIsInGrid) {\n      setFocusedDate(null);\n    }\n  };\n\n  return (\n    <div\n      ref={__internalRootRef}\n      {...baseProps}\n      role=\"group\"\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledby}\n      aria-describedby={ariaDescribedby}\n      className={clsx(styles.root, styles.calendar, baseProps.className)}\n    >\n      <div className={styles['calendar-inner']}>\n        <CalendarHeader\n          baseDate={baseDate}\n          locale={normalizedLocale}\n          onChangeMonth={onHeaderChangeMonthHandler}\n          previousMonthLabel={previousMonthAriaLabel}\n          nextMonthLabel={nextMonthAriaLabel}\n          headingId={headingId}\n        />\n        <div onBlur={onGridBlur} ref={gridWrapperRef}>\n          <Grid\n            locale={normalizedLocale}\n            baseDate={baseDate}\n            isDateEnabled={isDateEnabled}\n            focusedDate={focusedDate}\n            focusableDate={focusableDate}\n            onSelectDate={onGridSelectDateHandler}\n            onFocusDate={onGridFocusDateHandler}\n            onChangeMonth={onGridChangeMonthHandler}\n            startOfWeek={normalizedStartOfWeek}\n            todayAriaLabel={todayAriaLabel}\n            selectedDate={memoizedValue}\n            ariaLabelledby={headingId}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}