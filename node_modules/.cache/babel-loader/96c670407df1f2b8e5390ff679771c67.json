{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseIsoDate } from './parse-iso-date.js';\n/**\n * Compares dates up to a day.\n * @param date - item value as Date.\n * @param dateToCompare - token value as ISO8601 date string.\n * @returns diff in milliseconds between date and dateToCompare with a step of one day.\n */\nexport function compareDates(date, dateToCompare) {\n  if (date instanceof Date && typeof dateToCompare === 'string') {\n    return startOfDay(date).getTime() - startOfDay(parseIsoDate(dateToCompare)).getTime();\n  }\n  return NaN;\n}\n/**\n * Compares dates up to a millisecond.\n * @param date - item value as Date.\n * @param dateToCompare - token value as ISO8601 date string.\n * @returns diff in milliseconds between date and dateToCompare with a step of one millisecond.\n */\nexport function compareTimestamps(date, dateToCompare) {\n  if (date instanceof Date && typeof dateToCompare === 'string') {\n    return date.getTime() - parseIsoDate(dateToCompare).getTime();\n  }\n  return NaN;\n}\nfunction startOfDay(date) {\n  var copy = new Date(date.getTime());\n  copy.setHours(0, 0, 0, 0);\n  return copy;\n}","map":{"version":3,"names":["parseIsoDate","compareDates","date","dateToCompare","Date","startOfDay","getTime","NaN","compareTimestamps","copy","setHours"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/collection-hooks/dist/mjs/date-utils/compare-dates.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseIsoDate } from './parse-iso-date.js';\n/**\n * Compares dates up to a day.\n * @param date - item value as Date.\n * @param dateToCompare - token value as ISO8601 date string.\n * @returns diff in milliseconds between date and dateToCompare with a step of one day.\n */\nexport function compareDates(date, dateToCompare) {\n    if (date instanceof Date && typeof dateToCompare === 'string') {\n        return startOfDay(date).getTime() - startOfDay(parseIsoDate(dateToCompare)).getTime();\n    }\n    return NaN;\n}\n/**\n * Compares dates up to a millisecond.\n * @param date - item value as Date.\n * @param dateToCompare - token value as ISO8601 date string.\n * @returns diff in milliseconds between date and dateToCompare with a step of one millisecond.\n */\nexport function compareTimestamps(date, dateToCompare) {\n    if (date instanceof Date && typeof dateToCompare === 'string') {\n        return date.getTime() - parseIsoDate(dateToCompare).getTime();\n    }\n    return NaN;\n}\nfunction startOfDay(date) {\n    var copy = new Date(date.getTime());\n    copy.setHours(0, 0, 0, 0);\n    return copy;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,YAAY,QAAQ,qBAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAY,CAACC,IAAI,EAAEC,aAAa,EAAE;EAC9C,IAAID,IAAI,YAAYE,IAAI,IAAI,OAAOD,aAAa,KAAK,QAAQ,EAAE;IAC3D,OAAOE,UAAU,CAACH,IAAI,CAAC,CAACI,OAAO,EAAE,GAAGD,UAAU,CAACL,YAAY,CAACG,aAAa,CAAC,CAAC,CAACG,OAAO,EAAE;EACzF;EACA,OAAOC,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiB,CAACN,IAAI,EAAEC,aAAa,EAAE;EACnD,IAAID,IAAI,YAAYE,IAAI,IAAI,OAAOD,aAAa,KAAK,QAAQ,EAAE;IAC3D,OAAOD,IAAI,CAACI,OAAO,EAAE,GAAGN,YAAY,CAACG,aAAa,CAAC,CAACG,OAAO,EAAE;EACjE;EACA,OAAOC,GAAG;AACd;AACA,SAASF,UAAU,CAACH,IAAI,EAAE;EACtB,IAAIO,IAAI,GAAG,IAAIL,IAAI,CAACF,IAAI,CAACI,OAAO,EAAE,CAAC;EACnCG,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACzB,OAAOD,IAAI;AACf"},"metadata":{},"sourceType":"module"}