{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport styles from './styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nconst isOdd = value => value % 2 !== 0;\nexport function calculcateCssColumnCount(columns, minColumnWidth, containerWidth) {\n  if (!containerWidth) {\n    return columns;\n  }\n  // First, calculate how many columns we can have based on the current container width and minColumnWidth.\n  const targetColumnCount = Math.min(columns, Math.floor(containerWidth / minColumnWidth));\n  // When we start wrapping into fewer columns than desired, we want to keep the number of columns even.\n  return Math.max(1, targetColumnCount < columns && isOdd(targetColumnCount) ? targetColumnCount - 1 : targetColumnCount);\n}\nexport default function FlexibleColumnLayout(_ref) {\n  let {\n    columns = 1,\n    minColumnWidth = 0,\n    disableGutters,\n    variant,\n    children\n  } = _ref;\n  const [containerWidth, containerRef] = useContainerQuery(rect => rect.contentBoxWidth);\n  const columnCount = calculcateCssColumnCount(columns, minColumnWidth, containerWidth);\n  const shouldDisableGutters = variant !== 'text-grid' && disableGutters;\n  // Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n  const flattenedChildren = flattenChildren(children);\n  return React.createElement(\"div\", {\n    ref: containerRef,\n    className: clsx(styles['css-grid'], styles[`grid-variant-${variant}`], shouldDisableGutters && [styles['grid-no-gutters']]),\n    style: {\n      gridTemplateColumns: `repeat(${columnCount}, 1fr)`\n    }\n  }, flattenedChildren.map((child, i) => {\n    // If this react child is a primitive value, the key will be undefined\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const key = child.key;\n    return React.createElement(\"div\", {\n      key: key,\n      className: clsx(styles.item, {\n        [styles['first-column']]: i % columnCount === 0\n      })\n    }, child);\n  }));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,eAAe,MAAM,8BAA8B;AAE1D,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,iBAAiB,QAAQ,sCAAsC;AAExE,MAAMC,KAAK,GAAIC,KAAa,IAAcA,KAAK,GAAG,CAAC,KAAK,CAAC;AAEzD,OAAM,SAAUC,wBAAwB,CACtCC,OAAe,EACfC,cAAsB,EACtBC,cAA6B;EAE7B,IAAI,CAACA,cAAc,EAAE;IACnB,OAAOF,OAAO;;EAGhB;EACA,MAAMG,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAACL,OAAO,EAAEI,IAAI,CAACE,KAAK,CAACJ,cAAc,GAAGD,cAAc,CAAC,CAAC;EAExF;EACA,OAAOG,IAAI,CAACG,GAAG,CACb,CAAC,EACDJ,iBAAiB,GAAGH,OAAO,IAAIH,KAAK,CAACM,iBAAiB,CAAC,GAAGA,iBAAiB,GAAG,CAAC,GAAGA,iBAAiB,CACpG;AACH;AAOA,eAAc,SAAUK,oBAAoB,OAMhB;EAAA,IANiB;IAC3CR,OAAO,GAAG,CAAC;IACXC,cAAc,GAAG,CAAC;IAClBQ,cAAc;IACdC,OAAO;IACPC;EAAQ,CACkB;EAC1B,MAAM,CAACT,cAAc,EAAEU,YAAY,CAAC,GAAGhB,iBAAiB,CAACiB,IAAI,IAAIA,IAAI,CAACC,eAAe,CAAC;EAEtF,MAAMC,WAAW,GAAGhB,wBAAwB,CAACC,OAAO,EAAEC,cAAc,EAAEC,cAAc,CAAC;EACrF,MAAMc,oBAAoB,GAAGN,OAAO,KAAK,WAAW,IAAID,cAAc;EAEtE;EACA,MAAMQ,iBAAiB,GAAGvB,eAAe,CAACiB,QAAQ,CAAC;EAEnD,OACEnB;IACE0B,GAAG,EAAEN,YAAY;IACjBO,SAAS,EAAE1B,IAAI,CACbE,MAAM,CAAC,UAAU,CAAC,EAClBA,MAAM,CAAC,gBAAgBe,OAAO,EAAE,CAAC,EACjCM,oBAAoB,IAAI,CAACrB,MAAM,CAAC,iBAAiB,CAAC,CAAC,CACpD;IACDyB,KAAK,EAAE;MAAEC,mBAAmB,EAAE,UAAUN,WAAW;IAAQ;EAAE,GAE5DE,iBAAiB,CAACK,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,KAAI;IAClC;IACA;IACA,MAAMC,GAAG,GAAIF,KAAa,CAACE,GAAG;IAE9B,OACEjC;MACEiC,GAAG,EAAEA,GAAG;MACRN,SAAS,EAAE1B,IAAI,CAACE,MAAM,CAAC+B,IAAI,EAAE;QAC3B,CAAC/B,MAAM,CAAC,cAAc,CAAC,GAAG6B,CAAC,GAAGT,WAAW,KAAK;OAC/C;IAAC,GAEDQ,KAAK,CACF;EAEV,CAAC,CAAC,CACE;AAEV","names":["React","clsx","flattenChildren","styles","useContainerQuery","isOdd","value","calculcateCssColumnCount","columns","minColumnWidth","containerWidth","targetColumnCount","Math","min","floor","max","FlexibleColumnLayout","disableGutters","variant","children","containerRef","rect","contentBoxWidth","columnCount","shouldDisableGutters","flattenedChildren","ref","className","style","gridTemplateColumns","map","child","i","key","item"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/lib/default/column-layout/flexible-column-layout/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { InternalColumnLayoutProps } from '../interfaces';\nimport styles from './styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nconst isOdd = (value: number): boolean => value % 2 !== 0;\n\nexport function calculcateCssColumnCount(\n  columns: number,\n  minColumnWidth: number,\n  containerWidth: number | null\n): number {\n  if (!containerWidth) {\n    return columns;\n  }\n\n  // First, calculate how many columns we can have based on the current container width and minColumnWidth.\n  const targetColumnCount = Math.min(columns, Math.floor(containerWidth / minColumnWidth));\n\n  // When we start wrapping into fewer columns than desired, we want to keep the number of columns even.\n  return Math.max(\n    1,\n    targetColumnCount < columns && isOdd(targetColumnCount) ? targetColumnCount - 1 : targetColumnCount\n  );\n}\n\ninterface FlexibleColumnLayoutProps\n  extends Pick<InternalColumnLayoutProps, 'minColumnWidth' | 'columns' | 'variant' | 'borders' | 'disableGutters'> {\n  children: React.ReactNode;\n}\n\nexport default function FlexibleColumnLayout({\n  columns = 1,\n  minColumnWidth = 0,\n  disableGutters,\n  variant,\n  children,\n}: FlexibleColumnLayoutProps) {\n  const [containerWidth, containerRef] = useContainerQuery(rect => rect.contentBoxWidth);\n\n  const columnCount = calculcateCssColumnCount(columns, minColumnWidth, containerWidth);\n  const shouldDisableGutters = variant !== 'text-grid' && disableGutters;\n\n  // Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n  const flattenedChildren = flattenChildren(children);\n\n  return (\n    <div\n      ref={containerRef}\n      className={clsx(\n        styles['css-grid'],\n        styles[`grid-variant-${variant}`],\n        shouldDisableGutters && [styles['grid-no-gutters']]\n      )}\n      style={{ gridTemplateColumns: `repeat(${columnCount}, 1fr)` }}\n    >\n      {flattenedChildren.map((child, i) => {\n        // If this react child is a primitive value, the key will be undefined\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const key = (child as any).key;\n\n        return (\n          <div\n            key={key}\n            className={clsx(styles.item, {\n              [styles['first-column']]: i % columnCount === 0,\n            })}\n          >\n            {child}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}