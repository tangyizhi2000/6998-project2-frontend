{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback } from 'react';\nexport var useSearchProps = function useSearchProps(type, disabled, readOnly, value, inputRef, onChange) {\n  var searchProps = {};\n  var handleIconClick = useCallback(function () {\n    var _a;\n    (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    onChange('');\n  }, [inputRef, onChange]);\n  if (type === 'search' || type === 'visualSearch') {\n    searchProps.__leftIcon = 'search';\n    if (!disabled && !readOnly && value) {\n      searchProps.__rightIcon = 'close';\n      searchProps.__onRightIconClick = handleIconClick;\n    }\n  }\n  return searchProps;\n};\n/**\n * Converts the boolean or string value of the `autoComplete` property to the correct `autocomplete` attribute value.\n */\nexport var convertAutoComplete = function convertAutoComplete() {\n  var propertyValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  if (propertyValue === true) {\n    return 'on';\n  }\n  return propertyValue || 'off';\n};","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,WAAW,QAAmB,OAAO;AAG9C,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CACzBC,IAAY,EACZC,QAA6B,EAC7BC,QAA6B,EAC7BC,KAAa,EACbC,QAAqC,EACrCC,QAAiC,EAC/B;EACF,IAAMC,WAAW,GAAgC,EAAE;EACnD,IAAMC,eAAe,GAAGT,WAAW,CAAC,YAAK;;IACvC,cAAQ,CAACU,OAAO,0CAAEC,KAAK,EAAE;IACzBJ,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC,EAAE,CAACD,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EACxB,IAAIL,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,cAAc,EAAE;IAChDM,WAAW,CAACI,UAAU,GAAG,QAAQ;IAEjC,IAAI,CAACT,QAAQ,IAAI,CAACC,QAAQ,IAAIC,KAAK,EAAE;MACnCG,WAAW,CAACK,WAAW,GAAG,OAAO;MACjCL,WAAW,CAACM,kBAAkB,GAAGL,eAAe;;;EAGpD,OAAOD,WAAW;AACpB,CAAC;AAED;;;AAGA,OAAO,IAAMO,mBAAmB,GAAG,SAAtBA,mBAAmB,GAAuD;EAAA,IAAnDC,oFAAkC,KAAK;EACzE,IAAIA,aAAa,KAAK,IAAI,EAAE;IAC1B,OAAO,IAAI;;EAEb,OAAOA,aAAa,IAAI,KAAK;AAC/B,CAAC","names":["useCallback","useSearchProps","type","disabled","readOnly","value","inputRef","onChange","searchProps","handleIconClick","current","focus","__leftIcon","__rightIcon","__onRightIconClick","convertAutoComplete","propertyValue"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/input/lib/default/input/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, RefObject } from 'react';\nimport { InternalInputProps } from './internal';\n\nexport const useSearchProps = (\n  type: string,\n  disabled: boolean | undefined,\n  readOnly: boolean | undefined,\n  value: string,\n  inputRef: RefObject<HTMLInputElement>,\n  onChange: (value: string) => void\n) => {\n  const searchProps: Partial<InternalInputProps> = {};\n  const handleIconClick = useCallback(() => {\n    inputRef.current?.focus();\n    onChange('');\n  }, [inputRef, onChange]);\n  if (type === 'search' || type === 'visualSearch') {\n    searchProps.__leftIcon = 'search';\n\n    if (!disabled && !readOnly && value) {\n      searchProps.__rightIcon = 'close';\n      searchProps.__onRightIconClick = handleIconClick;\n    }\n  }\n  return searchProps;\n};\n\n/**\n * Converts the boolean or string value of the `autoComplete` property to the correct `autocomplete` attribute value.\n */\nexport const convertAutoComplete = (propertyValue: boolean | string = false): string => {\n  if (propertyValue === true) {\n    return 'on';\n  }\n  return propertyValue || 'off';\n};\n"]},"metadata":{},"sourceType":"module"}