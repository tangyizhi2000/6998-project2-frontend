{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useState } from 'react';\nexport function useHighlightedOption(_ref) {\n  let {\n    options,\n    isHighlightable\n  } = _ref;\n  const [highlightedIndex, setHighlightedIndexState] = useState(-1);\n  const [highlightType, setHighlightType] = useState('keyboard');\n  const setHighlightedIndex = useCallback((index, highlightType) => {\n    setHighlightedIndexState(index);\n    setHighlightType(highlightType);\n  }, []);\n  const highlightedOption = options[highlightedIndex] && isHighlightable(options[highlightedIndex]) ? options[highlightedIndex] : undefined;\n  const moveHighlightFrom = function (direction) {\n    let startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : highlightedIndex;\n    let highlightType = arguments.length > 2 ? arguments[2] : undefined;\n    let newIndex = startIndex;\n    do {\n      newIndex += direction;\n    } while (options[newIndex] && !isHighlightable(options[newIndex]));\n    if (options[newIndex]) {\n      setHighlightedIndex(newIndex, highlightType);\n    }\n  };\n  const moveHighlight = (direction, highlightType) => moveHighlightFrom(direction, highlightedIndex, highlightType);\n  const highlightOption = useCallback((option, highlightType) => {\n    const index = options.indexOf(option);\n    setHighlightedIndex(index, highlightType);\n  }, [options, setHighlightedIndex]);\n  return [{\n    highlightType,\n    highlightedIndex,\n    highlightedOption\n  }, {\n    setHighlightedIndexWithMouse: index => setHighlightedIndex(index, 'mouse'),\n    moveHighlightWithKeyboard: direction => moveHighlight(direction, 'keyboard'),\n    highlightOptionWithKeyboard: option => highlightOption(option, 'keyboard'),\n    resetHighlightWithKeyboard: () => setHighlightedIndex(-1, 'keyboard'),\n    goHomeWithKeyboard: () => moveHighlightFrom(1, -1, 'keyboard'),\n    goEndWithKeyboard: () => moveHighlightFrom(-1, options.length, 'keyboard')\n  }];\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AA0B7C,OAAM,SAAUC,oBAAoB,OAGC;EAAA,IAHY;IAC/CC,OAAO;IACPC;EAAe,CACoB;EACnC,MAAM,CAACC,gBAAgB,EAAEC,wBAAwB,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC;EACjE,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAgB,UAAU,CAAC;EAC7E,MAAMQ,mBAAmB,GAAGT,WAAW,CAAC,CAACU,KAAa,EAAEH,aAA4B,KAAI;IACtFD,wBAAwB,CAACI,KAAK,CAAC;IAC/BF,gBAAgB,CAACD,aAAa,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,iBAAiB,GACrBR,OAAO,CAACE,gBAAgB,CAAC,IAAID,eAAe,CAACD,OAAO,CAACE,gBAAgB,CAAC,CAAC,GAAGF,OAAO,CAACE,gBAAgB,CAAC,GAAGO,SAAS;EAEjH,MAAMC,iBAAiB,GAAG,UAACC,SAAiB,EAAiE;IAAA,IAA/DC,UAAU,uEAAGV,gBAAgB;IAAA,IAAEE,aAA4B;IACvG,IAAIS,QAAQ,GAAGD,UAAU;IACzB,GAAG;MACDC,QAAQ,IAAIF,SAAS;KACtB,QAAQX,OAAO,CAACa,QAAQ,CAAC,IAAI,CAACZ,eAAe,CAACD,OAAO,CAACa,QAAQ,CAAC,CAAC;IAEjE,IAAIb,OAAO,CAACa,QAAQ,CAAC,EAAE;MACrBP,mBAAmB,CAACO,QAAQ,EAAET,aAAa,CAAC;;EAEhD,CAAC;EAED,MAAMU,aAAa,GAAG,CAACH,SAAiB,EAAEP,aAA4B,KACpEM,iBAAiB,CAACC,SAAS,EAAET,gBAAgB,EAAEE,aAAa,CAAC;EAE/D,MAAMW,eAAe,GAAGlB,WAAW,CACjC,CAACmB,MAAkB,EAAEZ,aAA4B,KAAI;IACnD,MAAMG,KAAK,GAAGP,OAAO,CAACiB,OAAO,CAACD,MAAM,CAAC;IACrCV,mBAAmB,CAACC,KAAK,EAAEH,aAAa,CAAC;EAC3C,CAAC,EACD,CAACJ,OAAO,EAAEM,mBAAmB,CAAC,CAC/B;EAED,OAAO,CACL;IAAEF,aAAa;IAAEF,gBAAgB;IAAEM;EAAiB,CAAE,EACtD;IACEU,4BAA4B,EAAGX,KAAa,IAAKD,mBAAmB,CAACC,KAAK,EAAE,OAAO,CAAC;IACpFY,yBAAyB,EAAGR,SAAiB,IAAKG,aAAa,CAACH,SAAS,EAAE,UAAU,CAAC;IACtFS,2BAA2B,EAAGJ,MAAkB,IAAKD,eAAe,CAACC,MAAM,EAAE,UAAU,CAAC;IACxFK,0BAA0B,EAAE,MAAMf,mBAAmB,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC;IACrEgB,kBAAkB,EAAE,MAAMZ,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC;IAC9Da,iBAAiB,EAAE,MAAMb,iBAAiB,CAAC,CAAC,CAAC,EAAEV,OAAO,CAACwB,MAAM,EAAE,UAAU;GAC1E,CACF;AACH","names":["useCallback","useState","useHighlightedOption","options","isHighlightable","highlightedIndex","setHighlightedIndexState","highlightType","setHighlightType","setHighlightedIndex","index","highlightedOption","undefined","moveHighlightFrom","direction","startIndex","newIndex","moveHighlight","highlightOption","option","indexOf","setHighlightedIndexWithMouse","moveHighlightWithKeyboard","highlightOptionWithKeyboard","resetHighlightWithKeyboard","goHomeWithKeyboard","goEndWithKeyboard","length"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/internal/components/options-list/utils/lib/default/internal/components/options-list/utils/use-highlight-option.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useState } from 'react';\n\nexport type HighlightType = 'keyboard' | 'mouse';\n\nexport interface HighlightedOptionProps<OptionType> {\n  options: readonly OptionType[];\n  isHighlightable: (option: OptionType) => boolean;\n}\n\nexport interface HighlightedOptionState<OptionType> {\n  highlightType: HighlightType;\n  highlightedIndex: number;\n  highlightedOption?: OptionType;\n}\n\nexport interface HighlightedOptionHandlers<OptionType> {\n  // Mouse handlers\n  setHighlightedIndexWithMouse(index: number): void;\n  // Keyboard handlers\n  moveHighlightWithKeyboard(direction: -1 | 1): void;\n  highlightOptionWithKeyboard(option: OptionType): void;\n  resetHighlightWithKeyboard(): void;\n  goHomeWithKeyboard(): void;\n  goEndWithKeyboard(): void;\n}\n\nexport function useHighlightedOption<OptionType>({\n  options,\n  isHighlightable,\n}: HighlightedOptionProps<OptionType>): [HighlightedOptionState<OptionType>, HighlightedOptionHandlers<OptionType>] {\n  const [highlightedIndex, setHighlightedIndexState] = useState(-1);\n  const [highlightType, setHighlightType] = useState<HighlightType>('keyboard');\n  const setHighlightedIndex = useCallback((index: number, highlightType: HighlightType) => {\n    setHighlightedIndexState(index);\n    setHighlightType(highlightType);\n  }, []);\n\n  const highlightedOption =\n    options[highlightedIndex] && isHighlightable(options[highlightedIndex]) ? options[highlightedIndex] : undefined;\n\n  const moveHighlightFrom = (direction: -1 | 1, startIndex = highlightedIndex, highlightType: HighlightType) => {\n    let newIndex = startIndex;\n    do {\n      newIndex += direction;\n    } while (options[newIndex] && !isHighlightable(options[newIndex]));\n\n    if (options[newIndex]) {\n      setHighlightedIndex(newIndex, highlightType);\n    }\n  };\n\n  const moveHighlight = (direction: -1 | 1, highlightType: HighlightType) =>\n    moveHighlightFrom(direction, highlightedIndex, highlightType);\n\n  const highlightOption = useCallback(\n    (option: OptionType, highlightType: HighlightType) => {\n      const index = options.indexOf(option);\n      setHighlightedIndex(index, highlightType);\n    },\n    [options, setHighlightedIndex]\n  );\n\n  return [\n    { highlightType, highlightedIndex, highlightedOption },\n    {\n      setHighlightedIndexWithMouse: (index: number) => setHighlightedIndex(index, 'mouse'),\n      moveHighlightWithKeyboard: (direction: -1 | 1) => moveHighlight(direction, 'keyboard'),\n      highlightOptionWithKeyboard: (option: OptionType) => highlightOption(option, 'keyboard'),\n      resetHighlightWithKeyboard: () => setHighlightedIndex(-1, 'keyboard'),\n      goHomeWithKeyboard: () => moveHighlightFrom(1, -1, 'keyboard'),\n      goEndWithKeyboard: () => moveHighlightFrom(-1, options.length, 'keyboard'),\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}