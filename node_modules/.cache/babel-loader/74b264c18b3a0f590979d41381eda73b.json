{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport InternalPopover from './internal';\nimport { getExternalProps } from '../internal/utils/external-props';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nexport default function Popover(_a) {\n  var _a$position = _a.position,\n    position = _a$position === void 0 ? 'right' : _a$position,\n    _a$size = _a.size,\n    size = _a$size === void 0 ? 'medium' : _a$size,\n    _a$fixedWidth = _a.fixedWidth,\n    fixedWidth = _a$fixedWidth === void 0 ? false : _a$fixedWidth,\n    _a$triggerType = _a.triggerType,\n    triggerType = _a$triggerType === void 0 ? 'text' : _a$triggerType,\n    _a$dismissButton = _a.dismissButton,\n    dismissButton = _a$dismissButton === void 0 ? true : _a$dismissButton,\n    _a$renderWithPortal = _a.renderWithPortal,\n    renderWithPortal = _a$renderWithPortal === void 0 ? false : _a$renderWithPortal,\n    header = _a.header,\n    rest = __rest(_a, [\"position\", \"size\", \"fixedWidth\", \"triggerType\", \"dismissButton\", \"renderWithPortal\", \"header\"]);\n  if (isDevelopment) {\n    if (dismissButton && !header) {\n      warnOnce('Popover', \"You should provide a `header` when `dismissButton` is true.\");\n    }\n  }\n  var baseComponentProps = useBaseComponent('Popover');\n  var externalProps = getExternalProps(rest);\n  return React.createElement(InternalPopover, Object.assign({\n    header: header,\n    position: position,\n    size: size,\n    fixedWidth: fixedWidth,\n    triggerType: triggerType,\n    dismissButton: dismissButton,\n    renderWithPortal: renderWithPortal\n  }, externalProps, baseComponentProps));\n}\napplyDisplayName(Popover, 'Popover');","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,YAAY;AACxC,SAASC,gBAAgB,QAAQ,kCAAkC;AACnE,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,OAAOC,gBAAgB,MAAM,sCAAsC;AACnE,SAASC,aAAa,QAAQ,4BAA4B;AAC1D,SAASC,QAAQ,QAAQ,+CAA+C;AAKxE,eAAc,SAAUC,OAAO,CAACC,EASjB;oBAFPA,EAEO,CARbC,QAAQ;IAARA,QAAQ,4BAAG,OAAO;IAAA,UAMZD,EAEO,CAPbE,IAAI;IAAJA,IAAI,wBAAG,QAAQ;IAAA,gBAKTF,EAEO,CANbG,UAAU;IAAVA,UAAU,8BAAG,KAAK;IAAA,iBAIZH,EAEO,CALbI,WAAW;IAAXA,WAAW,+BAAG,MAAM;IAAA,mBAGdJ,EAEO,CAJbK,aAAa;IAAbA,aAAa,iCAAG,IAAI;IAAA,sBAEdL,EAEO,CAHbM,gBAAgB;IAAhBA,gBAAgB,oCAAG,KAAK;IACxBC,MAAM,KAEO,CAFbA,MAAM;IACHC,IAAI,cARuB,gGAS/B,CADQ;EAEP,IAAIX,aAAa,EAAE;IACjB,IAAIQ,aAAa,IAAI,CAACE,MAAM,EAAE;MAC5BT,QAAQ,CAAC,SAAS,gEAAoE;;;EAI1F,IAAMW,kBAAkB,GAAGb,gBAAgB,CAAC,SAAS,CAAC;EACtD,IAAMc,aAAa,GAAGhB,gBAAgB,CAACc,IAAI,CAAC;EAC5C,OACEhB,oBAACC,eAAe;IACdc,MAAM,EAAEA,MAAM;IACdN,QAAQ,EAAEA,QAAQ;IAClBC,IAAI,EAAEA,IAAI;IACVC,UAAU,EAAEA,UAAU;IACtBC,WAAW,EAAEA,WAAW;IACxBC,aAAa,EAAEA,aAAa;IAC5BC,gBAAgB,EAAEA;EAAgB,GAC9BI,aAAa,EACbD,kBAAkB,EACtB;AAEN;AAEAd,gBAAgB,CAACI,OAAO,EAAE,SAAS,CAAC","names":["React","InternalPopover","getExternalProps","applyDisplayName","useBaseComponent","isDevelopment","warnOnce","Popover","_a","position","size","fixedWidth","triggerType","dismissButton","renderWithPortal","header","rest","baseComponentProps","externalProps"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/popover/lib/default/popover/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport InternalPopover from './internal';\nimport { getExternalProps } from '../internal/utils/external-props';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { PopoverProps } from './interfaces';\n\nexport { PopoverProps };\n\nexport default function Popover({\n  position = 'right',\n  size = 'medium',\n  fixedWidth = false,\n  triggerType = 'text',\n  dismissButton = true,\n  renderWithPortal = false,\n  header,\n  ...rest\n}: PopoverProps) {\n  if (isDevelopment) {\n    if (dismissButton && !header) {\n      warnOnce('Popover', `You should provide a \\`header\\` when \\`dismissButton\\` is true.`);\n    }\n  }\n\n  const baseComponentProps = useBaseComponent('Popover');\n  const externalProps = getExternalProps(rest);\n  return (\n    <InternalPopover\n      header={header}\n      position={position}\n      size={size}\n      fixedWidth={fixedWidth}\n      triggerType={triggerType}\n      dismissButton={dismissButton}\n      renderWithPortal={renderWithPortal}\n      {...externalProps}\n      {...baseComponentProps}\n    />\n  );\n}\n\napplyDisplayName(Popover, 'Popover');\n"]},"metadata":{},"sourceType":"module"}