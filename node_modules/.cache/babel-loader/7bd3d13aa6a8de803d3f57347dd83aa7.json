{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport styles from './styles.css.js';\nimport InternalIcon from '../icon/internal';\nimport InternalSpinner from '../spinner/internal';\nvar typeToIcon = function typeToIcon(size) {\n  return {\n    error: React.createElement(InternalIcon, {\n      name: \"status-negative\",\n      size: size\n    }),\n    warning: React.createElement(InternalIcon, {\n      name: \"status-warning\",\n      size: size\n    }),\n    success: React.createElement(InternalIcon, {\n      name: \"status-positive\",\n      size: size\n    }),\n    info: React.createElement(InternalIcon, {\n      name: \"status-info\",\n      size: size\n    }),\n    stopped: React.createElement(InternalIcon, {\n      name: \"status-stopped\",\n      size: size\n    }),\n    pending: React.createElement(InternalIcon, {\n      name: \"status-pending\",\n      size: size\n    }),\n    'in-progress': React.createElement(InternalIcon, {\n      name: \"status-in-progress\",\n      size: size\n    }),\n    loading: React.createElement(InternalSpinner, null)\n  };\n};\nexport default function StatusIndicator(_a) {\n  var type = _a.type,\n    children = _a.children,\n    iconAriaLabel = _a.iconAriaLabel,\n    colorOverride = _a.colorOverride,\n    _a$wrapText = _a.wrapText,\n    wrapText = _a$wrapText === void 0 ? true : _a$wrapText,\n    _a$__animate = _a.__animate,\n    __animate = _a$__animate === void 0 ? false : _a$__animate,\n    __internalRootRef = _a.__internalRootRef,\n    _a$__size = _a.__size,\n    __size = _a$__size === void 0 ? 'normal' : _a$__size,\n    _a$__display = _a.__display,\n    __display = _a$__display === void 0 ? 'inline-block' : _a$__display,\n    rest = __rest(_a, [\"type\", \"children\", \"iconAriaLabel\", \"colorOverride\", \"wrapText\", \"__animate\", \"__internalRootRef\", \"__size\", \"__display\"]);\n  var baseProps = getBaseProps(rest);\n  return React.createElement(\"span\", Object.assign({}, baseProps, {\n    className: clsx(styles.root, styles[\"status-\".concat(type)], _defineProperty({}, styles[\"color-override-\".concat(colorOverride)], colorOverride), baseProps.className),\n    ref: __internalRootRef\n  }), React.createElement(\"span\", {\n    className: clsx(styles.container, styles[\"display-\".concat(__display)], wrapText === false && styles['overflow-ellipsis'], __animate && styles['container-fade-in'])\n  }, React.createElement(\"span\", {\n    className: clsx(styles.icon, __animate && styles['icon-shake']),\n    \"aria-label\": iconAriaLabel,\n    role: iconAriaLabel ? 'img' : undefined\n  }, typeToIcon(__size)[type], __display === 'inline' && React.createElement(React.Fragment, null, \"\\xA0\")), children));\n}","map":{"version":3,"mappings":";;AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AACvB,SAA6BC,YAAY,QAAQ,4BAA4B;AAC7E,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,eAAe,MAAM,qBAAqB;AAKjD,IAAMC,UAAU,GAA6E,SAAvFA,UAAU,CAA6EC,IAAI;EAAA,OAAK;IACpGC,KAAK,EAAER,oBAACI,YAAY;MAACK,IAAI,EAAC,iBAAiB;MAACF,IAAI,EAAEA;IAAI,EAAI;IAC1DG,OAAO,EAAEV,oBAACI,YAAY;MAACK,IAAI,EAAC,gBAAgB;MAACF,IAAI,EAAEA;IAAI,EAAI;IAC3DI,OAAO,EAAEX,oBAACI,YAAY;MAACK,IAAI,EAAC,iBAAiB;MAACF,IAAI,EAAEA;IAAI,EAAI;IAC5DK,IAAI,EAAEZ,oBAACI,YAAY;MAACK,IAAI,EAAC,aAAa;MAACF,IAAI,EAAEA;IAAI,EAAI;IACrDM,OAAO,EAAEb,oBAACI,YAAY;MAACK,IAAI,EAAC,gBAAgB;MAACF,IAAI,EAAEA;IAAI,EAAI;IAC3DO,OAAO,EAAEd,oBAACI,YAAY;MAACK,IAAI,EAAC,gBAAgB;MAACF,IAAI,EAAEA;IAAI,EAAI;IAC3D,aAAa,EAAEP,oBAACI,YAAY;MAACK,IAAI,EAAC,oBAAoB;MAACF,IAAI,EAAEA;IAAI,EAAI;IACrEQ,OAAO,EAAEf,oBAACK,eAAe;GAC1B;AAAA,CAAC;AAqDF,eAAc,SAAUW,eAAe,CAACC,EAWT;MAV7BC,IAAI,GAQsBD,EAEG,CAV7BC,IAAI;IACJC,QAAQ,GAOkBF,EAEG,CAT7BE,QAAQ;IACRC,aAAa,GAMaH,EAEG,CAR7BG,aAAa;IACbC,aAAa,GAKaJ,EAEG,CAP7BI,aAAa;IAAA,cAKaJ,EAEG,CAN7BK,QAAQ;IAARA,QAAQ,4BAAG,IAAI;IAAA,eAIWL,EAEG,CAL7BM,SAAS;IAATA,SAAS,6BAAG,KAAK;IACjBC,iBAAiB,GAESP,EAEG,CAJ7BO,iBAAiB;IAAA,YAESP,EAEG,CAH7BQ,MAAM;IAANA,MAAM,0BAAG,QAAQ;IAAA,eACSR,EAEG,CAF7BS,SAAS;IAATA,SAAS,6BAAG,cAAc;IACvBC,IAAI,cAV+B,2HAWvC,CADQ;EAEP,IAAMC,SAAS,GAAG1B,YAAY,CAACyB,IAAI,CAAC;EACpC,OACE3B,8CACM4B,SAAS;IACbC,SAAS,EAAE5B,IAAI,CACbE,MAAM,CAAC2B,IAAI,EACX3B,MAAM,kBAAWe,IAAI,EAAG,sBAErBf,MAAM,0BAAmBkB,aAAa,EAAG,EAAGA,aAAa,GAE5DO,SAAS,CAACC,SAAS,CACpB;IACDE,GAAG,EAAEP;EAAiB,IAEtBxB;IACE6B,SAAS,EAAE5B,IAAI,CACbE,MAAM,CAAC6B,SAAS,EAChB7B,MAAM,mBAAYuB,SAAS,EAAG,EAC9BJ,QAAQ,KAAK,KAAK,IAAInB,MAAM,CAAC,mBAAmB,CAAC,EACjDoB,SAAS,IAAIpB,MAAM,CAAC,mBAAmB,CAAC;EACzC,GAEDH;IACE6B,SAAS,EAAE5B,IAAI,CAACE,MAAM,CAAC8B,IAAI,EAAEV,SAAS,IAAIpB,MAAM,CAAC,YAAY,CAAC,CAAC;IAAA,cACnDiB,aAAa;IACzBc,IAAI,EAAEd,aAAa,GAAG,KAAK,GAAGe;EAAS,GAEtC7B,UAAU,CAACmB,MAAM,CAAC,CAACP,IAAI,CAAC,EACxBQ,SAAS,KAAK,QAAQ,IAAI1B,iDAAW,CACjC,EACNmB,QAAQ,CACJ,CACF;AAEX","names":["React","clsx","getBaseProps","styles","InternalIcon","InternalSpinner","typeToIcon","size","error","name","warning","success","info","stopped","pending","loading","StatusIndicator","_a","type","children","iconAriaLabel","colorOverride","wrapText","__animate","__internalRootRef","__size","__display","rest","baseProps","className","root","ref","container","icon","role","undefined"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/status-indicator/lib/default/status-indicator/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { BaseComponentProps, getBaseProps } from '../internal/base-component';\nimport styles from './styles.css.js';\nimport InternalIcon from '../icon/internal';\nimport InternalSpinner from '../spinner/internal';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { IconProps } from '../icon/interfaces';\nimport { SomeRequired } from '../internal/types';\n\nconst typeToIcon: (size: IconProps.Size) => Record<StatusIndicatorProps.Type, JSX.Element> = size => ({\n  error: <InternalIcon name=\"status-negative\" size={size} />,\n  warning: <InternalIcon name=\"status-warning\" size={size} />,\n  success: <InternalIcon name=\"status-positive\" size={size} />,\n  info: <InternalIcon name=\"status-info\" size={size} />,\n  stopped: <InternalIcon name=\"status-stopped\" size={size} />,\n  pending: <InternalIcon name=\"status-pending\" size={size} />,\n  'in-progress': <InternalIcon name=\"status-in-progress\" size={size} />,\n  loading: <InternalSpinner />,\n});\n\nexport interface StatusIndicatorProps extends BaseComponentProps {\n  /**\n   * Specifies the status type.\n   */\n  type?: StatusIndicatorProps.Type;\n  /**\n   * A text fragment that communicates the status.\n   */\n  children?: React.ReactNode;\n  /**\n   * Specifies an `aria-label` for the icon. If the status text alone does not fully describe the status,\n   * use this to communicate additional context.\n   */\n  iconAriaLabel?: string;\n  /**\n   * Specifies an override for the status indicator color.\n   */\n  colorOverride?: StatusIndicatorProps.Color;\n  /**\n   * Specifies if the text content should wrap. If you set it to false, it prevents the text from wrapping\n   * and truncates it with an ellipsis.\n   */\n  wrapText?: boolean;\n}\n\nexport interface InternalStatusIndicatorProps\n  extends SomeRequired<StatusIndicatorProps, 'type'>,\n    InternalBaseComponentProps {\n  /**\n   * Play an animation on the error icon when first rendered\n   */\n  __animate?: boolean;\n\n  /**\n   * Size of icon.\n   */\n  __size?: IconProps.Size;\n\n  /**\n   * The CSS behavior of the status indicator container element.\n   */\n  __display?: 'inline' | 'inline-block';\n}\n\nexport namespace StatusIndicatorProps {\n  // Why not enums? Explained there\n  // https://stackoverflow.com/questions/52393730/typescript-string-literal-union-type-from-enum\n  export type Type = 'error' | 'warning' | 'success' | 'info' | 'stopped' | 'pending' | 'in-progress' | 'loading';\n  export type Color = 'blue' | 'grey' | 'green' | 'red' | 'yellow';\n}\n\nexport default function StatusIndicator({\n  type,\n  children,\n  iconAriaLabel,\n  colorOverride,\n  wrapText = true,\n  __animate = false,\n  __internalRootRef,\n  __size = 'normal',\n  __display = 'inline-block',\n  ...rest\n}: InternalStatusIndicatorProps) {\n  const baseProps = getBaseProps(rest);\n  return (\n    <span\n      {...baseProps}\n      className={clsx(\n        styles.root,\n        styles[`status-${type}`],\n        {\n          [styles[`color-override-${colorOverride}`]]: colorOverride,\n        },\n        baseProps.className\n      )}\n      ref={__internalRootRef}\n    >\n      <span\n        className={clsx(\n          styles.container,\n          styles[`display-${__display}`],\n          wrapText === false && styles['overflow-ellipsis'],\n          __animate && styles['container-fade-in']\n        )}\n      >\n        <span\n          className={clsx(styles.icon, __animate && styles['icon-shake'])}\n          aria-label={iconAriaLabel}\n          role={iconAriaLabel ? 'img' : undefined}\n        >\n          {typeToIcon(__size)[type]}\n          {__display === 'inline' && <>&nbsp;</>}\n        </span>\n        {children}\n      </span>\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}