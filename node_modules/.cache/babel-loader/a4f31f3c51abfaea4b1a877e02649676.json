{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\nimport { useCallback, useState } from 'react';\n/**\n * Conditional resize observer for border box height used in charts.\n */\nexport function useHeightMeasure(getMeasure) {\n  let skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let deps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  const [measuredHeight, setHeight] = useState(0);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const stableGetMeasure = useCallback(getMeasure, [...deps, skip]);\n  useResizeObserver(stableGetMeasure, entry => !skip && setHeight(entry.borderBoxHeight));\n  return !skip ? measuredHeight : undefined;\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,iBAAiB,QAAQ,+CAA+C;AACjF,SAASC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAE7C;;;AAGA,OAAM,SAAUC,gBAAgB,CAC9BC,UAAiD,EAElB;EAAA,IAD/BC,IAAI,uEAAG,KAAK;EAAA,IACZC,2EAA6B,EAAE;EAE/B,MAAM,CAACC,cAAc,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAC/C;EACA,MAAMO,gBAAgB,GAAGR,WAAW,CAACG,UAAU,EAAE,CAAC,GAAGE,IAAI,EAAED,IAAI,CAAC,CAAC;EACjEL,iBAAiB,CAACS,gBAAgB,EAAEC,KAAK,IAAI,CAACL,IAAI,IAAIG,SAAS,CAACE,KAAK,CAACC,eAAe,CAAC,CAAC;EACvF,OAAO,CAACN,IAAI,GAAGE,cAAc,GAAGK,SAAS;AAC3C","names":["useResizeObserver","useCallback","useState","useHeightMeasure","getMeasure","skip","deps","measuredHeight","setHeight","stableGetMeasure","entry","borderBoxHeight","undefined"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/internal/hooks/container-queries/lib/default/internal/hooks/container-queries/use-height-measure.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\nimport { useCallback, useState } from 'react';\n\n/**\n * Conditional resize observer for border box height used in charts.\n */\nexport function useHeightMeasure(\n  getMeasure: () => null | HTMLElement | SVGElement,\n  skip = false,\n  deps: React.DependencyList = []\n) {\n  const [measuredHeight, setHeight] = useState(0);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const stableGetMeasure = useCallback(getMeasure, [...deps, skip]);\n  useResizeObserver(stableGetMeasure, entry => !skip && setHeight(entry.borderBoxHeight));\n  return !skip ? measuredHeight : undefined;\n}\n"]},"metadata":{},"sourceType":"module"}