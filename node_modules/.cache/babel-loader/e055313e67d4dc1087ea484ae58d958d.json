{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport InternalButton from '../button/internal';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nexport function SplitPanelContentSide(_ref) {\n  var baseProps = _ref.baseProps,\n    splitPanelRef = _ref.splitPanelRef,\n    toggleRef = _ref.toggleRef,\n    header = _ref.header,\n    children = _ref.children,\n    resizeHandle = _ref.resizeHandle,\n    isOpen = _ref.isOpen,\n    cappedSize = _ref.cappedSize,\n    openButtonAriaLabel = _ref.openButtonAriaLabel,\n    panelHeaderId = _ref.panelHeaderId,\n    onToggle = _ref.onToggle;\n  var _useSplitPanelContext = useSplitPanelContext(),\n    topOffset = _useSplitPanelContext.topOffset,\n    bottomOffset = _useSplitPanelContext.bottomOffset;\n  var isRefresh = useVisualRefresh();\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.drawer, styles.root, styles['position-side'], _defineProperty({}, styles['drawer-closed'], !isOpen)),\n    style: {\n      width: isOpen && isRefresh ? cappedSize : undefined,\n      maxWidth: isRefresh ? '100%' : undefined\n    },\n    ref: splitPanelRef\n  }), React.createElement(\"div\", {\n    className: clsx(styles['drawer-content-side'], _defineProperty({}, styles.refresh, isRefresh)),\n    style: {\n      top: topOffset,\n      bottom: bottomOffset\n    },\n    onClick: function onClick() {\n      return !isOpen && onToggle();\n    },\n    \"aria-labelledby\": panelHeaderId,\n    role: \"region\"\n  }, isOpen ? React.createElement(\"div\", {\n    className: styles['slider-wrapper-side']\n  }, resizeHandle) : React.createElement(InternalButton, {\n    className: clsx(styles['open-button'], styles['open-button-side']),\n    iconName: \"angle-left\",\n    variant: \"icon\",\n    formAction: \"none\",\n    ariaLabel: openButtonAriaLabel,\n    ariaExpanded: isOpen,\n    ref: isRefresh ? null : toggleRef\n  }), React.createElement(\"div\", {\n    className: styles['content-side'],\n    \"aria-hidden\": !isOpen\n  }, React.createElement(\"div\", {\n    className: clsx(styles['pane-header-wrapper-side'])\n  }, header), React.createElement(\"div\", {\n    className: clsx(styles['pane-content-wrapper-side'])\n  }, children))));\n}","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AAEvB,OAAOC,cAAc,MAAM,oBAAoB;AAC/C,SAASC,gBAAgB,QAAQ,mCAAmC;AAEpE,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,oBAAoB,QAAQ,yCAAyC;AAO9E,OAAM,SAAUC,qBAAqB,OAYR;EAAA,IAX3BC,SAAS,QAATA,SAAS;IACTC,aAAa,QAAbA,aAAa;IACbC,SAAS,QAATA,SAAS;IACTC,MAAM,QAANA,MAAM;IACNC,QAAQ,QAARA,QAAQ;IACRC,YAAY,QAAZA,YAAY;IACZC,MAAM,QAANA,MAAM;IACNC,UAAU,QAAVA,UAAU;IACVC,mBAAmB,QAAnBA,mBAAmB;IACnBC,aAAa,QAAbA,aAAa;IACbC,QAAQ,QAARA,QAAQ;EAER,4BAAoCZ,oBAAoB,EAAE;IAAlDa,SAAS,yBAATA,SAAS;IAAEC,YAAY,yBAAZA,YAAY;EAC/B,IAAMC,SAAS,GAAGjB,gBAAgB,EAAE;EACpC,OACEH,6CACMO,SAAS;IACbc,SAAS,EAAEpB,IAAI,CAACM,SAAS,CAACc,SAAS,EAAEjB,MAAM,CAACkB,MAAM,EAAElB,MAAM,CAACmB,IAAI,EAAEnB,MAAM,CAAC,eAAe,CAAC,sBACrFA,MAAM,CAAC,eAAe,CAAC,EAAG,CAACS,MAAM,EAClC;IACFW,KAAK,EAAE;MACLC,KAAK,EAAEZ,MAAM,IAAIO,SAAS,GAAGN,UAAU,GAAGY,SAAS;MACnDC,QAAQ,EAAEP,SAAS,GAAG,MAAM,GAAGM;KAChC;IACDE,GAAG,EAAEpB;EAAa,IAElBR;IACEqB,SAAS,EAAEpB,IAAI,CAACG,MAAM,CAAC,qBAAqB,CAAC,sBAC1CA,MAAM,CAACyB,OAAO,EAAGT,SAAS,EAC3B;IACFI,KAAK,EAAE;MACLM,GAAG,EAAEZ,SAAS;MACda,MAAM,EAAEZ;KACT;IACDa,OAAO,EAAE;MAAA,OAAM,CAACnB,MAAM,IAAII,QAAQ,EAAE;IAAA;IAAA,mBACnBD,aAAa;IAC9BiB,IAAI,EAAC;EAAQ,GAEZpB,MAAM,GACLb;IAAKqB,SAAS,EAAEjB,MAAM,CAAC,qBAAqB;EAAC,GAAGQ,YAAY,CAAO,GAEnEZ,oBAACE,cAAc;IACbmB,SAAS,EAAEpB,IAAI,CAACG,MAAM,CAAC,aAAa,CAAC,EAAEA,MAAM,CAAC,kBAAkB,CAAC,CAAC;IAClE8B,QAAQ,EAAC,YAAY;IACrBC,OAAO,EAAC,MAAM;IACdC,UAAU,EAAC,MAAM;IACjBC,SAAS,EAAEtB,mBAAmB;IAC9BuB,YAAY,EAAEzB,MAAM;IACpBe,GAAG,EAAER,SAAS,GAAG,IAAI,GAAGX;EAAS,EAEpC,EACDT;IAAKqB,SAAS,EAAEjB,MAAM,CAAC,cAAc,CAAC;IAAA,eAAe,CAACS;EAAM,GAC1Db;IAAKqB,SAAS,EAAEpB,IAAI,CAACG,MAAM,CAAC,0BAA0B,CAAC;EAAC,GAAGM,MAAM,CAAO,EACxEV;IAAKqB,SAAS,EAAEpB,IAAI,CAACG,MAAM,CAAC,2BAA2B,CAAC;EAAC,GAAGO,QAAQ,CAAO,CACvE,CACF,CACF;AAEV","names":["React","clsx","InternalButton","useVisualRefresh","styles","useSplitPanelContext","SplitPanelContentSide","baseProps","splitPanelRef","toggleRef","header","children","resizeHandle","isOpen","cappedSize","openButtonAriaLabel","panelHeaderId","onToggle","topOffset","bottomOffset","isRefresh","className","drawer","root","style","width","undefined","maxWidth","ref","refresh","top","bottom","onClick","role","iconName","variant","formAction","ariaLabel","ariaExpanded"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/split-panel/lib/default/split-panel/side.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { ButtonProps } from '../button/interfaces';\nimport InternalButton from '../button/internal';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { SplitPanelContentProps } from './interfaces';\nimport styles from './styles.css.js';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\n\ninterface SplitPanelContentSideProps extends SplitPanelContentProps {\n  openButtonAriaLabel?: string;\n  toggleRef: React.RefObject<ButtonProps.Ref>;\n}\n\nexport function SplitPanelContentSide({\n  baseProps,\n  splitPanelRef,\n  toggleRef,\n  header,\n  children,\n  resizeHandle,\n  isOpen,\n  cappedSize,\n  openButtonAriaLabel,\n  panelHeaderId,\n  onToggle,\n}: SplitPanelContentSideProps) {\n  const { topOffset, bottomOffset } = useSplitPanelContext();\n  const isRefresh = useVisualRefresh();\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.drawer, styles.root, styles['position-side'], {\n        [styles['drawer-closed']]: !isOpen,\n      })}\n      style={{\n        width: isOpen && isRefresh ? cappedSize : undefined,\n        maxWidth: isRefresh ? '100%' : undefined,\n      }}\n      ref={splitPanelRef}\n    >\n      <div\n        className={clsx(styles['drawer-content-side'], {\n          [styles.refresh]: isRefresh,\n        })}\n        style={{\n          top: topOffset,\n          bottom: bottomOffset,\n        }}\n        onClick={() => !isOpen && onToggle()}\n        aria-labelledby={panelHeaderId}\n        role=\"region\"\n      >\n        {isOpen ? (\n          <div className={styles['slider-wrapper-side']}>{resizeHandle}</div>\n        ) : (\n          <InternalButton\n            className={clsx(styles['open-button'], styles['open-button-side'])}\n            iconName=\"angle-left\"\n            variant=\"icon\"\n            formAction=\"none\"\n            ariaLabel={openButtonAriaLabel}\n            ariaExpanded={isOpen}\n            ref={isRefresh ? null : toggleRef}\n          />\n        )}\n        <div className={styles['content-side']} aria-hidden={!isOpen}>\n          <div className={clsx(styles['pane-header-wrapper-side'])}>{header}</div>\n          <div className={clsx(styles['pane-content-wrapper-side'])}>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}