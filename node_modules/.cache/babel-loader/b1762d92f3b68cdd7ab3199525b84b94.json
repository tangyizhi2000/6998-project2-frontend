{"ast":null,"code":"import _defineProperty from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireKeyboardEvent, fireNonCancelableEvent } from '../internal/events';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { convertAutoComplete } from '../input/utils';\nvar Textarea = React.forwardRef(function (_a, ref) {\n  var _clsx;\n  var value = _a.value,\n    _a$autoComplete = _a.autoComplete,\n    autoComplete = _a$autoComplete === void 0 ? true : _a$autoComplete,\n    disabled = _a.disabled,\n    readOnly = _a.readOnly,\n    disableBrowserAutocorrect = _a.disableBrowserAutocorrect,\n    disableBrowserSpellcheck = _a.disableBrowserSpellcheck,\n    spellcheck = _a.spellcheck,\n    onKeyDown = _a.onKeyDown,\n    onKeyUp = _a.onKeyUp,\n    onChange = _a.onChange,\n    onBlur = _a.onBlur,\n    onFocus = _a.onFocus,\n    ariaRequired = _a.ariaRequired,\n    name = _a.name,\n    rows = _a.rows,\n    placeholder = _a.placeholder,\n    autoFocus = _a.autoFocus,\n    ariaLabel = _a.ariaLabel,\n    rest = __rest(_a, [\"value\", \"autoComplete\", \"disabled\", \"readOnly\", \"disableBrowserAutocorrect\", \"disableBrowserSpellcheck\", \"spellcheck\", \"onKeyDown\", \"onKeyUp\", \"onChange\", \"onBlur\", \"onFocus\", \"ariaRequired\", \"name\", \"rows\", \"placeholder\", \"autoFocus\", \"ariaLabel\"]);\n  var _useBaseComponent = useBaseComponent('Textarea'),\n    __internalRootRef = _useBaseComponent.__internalRootRef;\n  var _useFormFieldContext = useFormFieldContext(rest),\n    ariaLabelledby = _useFormFieldContext.ariaLabelledby,\n    ariaDescribedby = _useFormFieldContext.ariaDescribedby,\n    controlId = _useFormFieldContext.controlId,\n    invalid = _useFormFieldContext.invalid;\n  var baseProps = getBaseProps(rest);\n  var textareaRef = useRef(null);\n  useForwardFocus(ref, textareaRef);\n  var attributes = {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-required': ariaRequired ? 'true' : undefined,\n    'aria-invalid': invalid ? 'true' : undefined,\n    name: name,\n    placeholder: placeholder,\n    autoFocus: autoFocus,\n    className: clsx(styles.textarea, (_clsx = {}, _defineProperty(_clsx, styles['textarea-readonly'], readOnly), _defineProperty(_clsx, styles['textarea-invalid'], invalid), _clsx)),\n    autoComplete: convertAutoComplete(autoComplete),\n    spellCheck: spellcheck,\n    disabled: disabled,\n    readOnly: readOnly ? true : undefined,\n    rows: rows || 3,\n    onKeyDown: onKeyDown && function (event) {\n      return fireKeyboardEvent(onKeyDown, event);\n    },\n    onKeyUp: onKeyUp && function (event) {\n      return fireKeyboardEvent(onKeyUp, event);\n    },\n    // We set a default value on the component in order to force it into the controlled mode.\n    value: value || '',\n    onChange: onChange && function (event) {\n      return fireNonCancelableEvent(onChange, {\n        value: event.target.value\n      });\n    },\n    onBlur: onBlur && function () {\n      return fireNonCancelableEvent(onBlur);\n    },\n    onFocus: onFocus && function () {\n      return fireNonCancelableEvent(onFocus);\n    }\n  };\n  if (disableBrowserAutocorrect) {\n    attributes.autoCorrect = 'off';\n    attributes.autoCapitalize = 'off';\n  }\n  if (disableBrowserSpellcheck) {\n    attributes.spellCheck = 'false';\n  }\n  return React.createElement(\"span\", Object.assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: __internalRootRef\n  }), React.createElement(\"textarea\", Object.assign({\n    ref: textareaRef,\n    id: controlId\n  }, attributes)));\n});\napplyDisplayName(Textarea, 'Textarea');\nexport default Textarea;","map":{"version":3,"mappings":"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","names":["React","useRef","getBaseProps","fireKeyboardEvent","fireNonCancelableEvent","useFormFieldContext","useForwardFocus","clsx","styles","applyDisplayName","useBaseComponent","convertAutoComplete","Textarea","forwardRef","_a","ref","value","autoComplete","disabled","readOnly","disableBrowserAutocorrect","disableBrowserSpellcheck","spellcheck","onKeyDown","onKeyUp","onChange","onBlur","onFocus","ariaRequired","name","rows","placeholder","autoFocus","ariaLabel","rest","__internalRootRef","ariaLabelledby","ariaDescribedby","controlId","invalid","baseProps","textareaRef","attributes","undefined","className","textarea","spellCheck","event","target","autoCorrect","autoCapitalize","root","id"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/textarea/lib/default/textarea/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Ref, useRef } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireKeyboardEvent, fireNonCancelableEvent } from '../internal/events';\nimport { TextareaProps } from './interfaces';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { convertAutoComplete } from '../input/utils';\n\nexport { TextareaProps };\n\nconst Textarea = React.forwardRef(\n  (\n    {\n      value,\n      autoComplete = true,\n      disabled,\n      readOnly,\n      disableBrowserAutocorrect,\n      disableBrowserSpellcheck,\n      spellcheck,\n      onKeyDown,\n      onKeyUp,\n      onChange,\n      onBlur,\n      onFocus,\n      ariaRequired,\n      name,\n      rows,\n      placeholder,\n      autoFocus,\n      ariaLabel,\n      ...rest\n    }: TextareaProps,\n    ref: Ref<TextareaProps.Ref>\n  ) => {\n    const { __internalRootRef } = useBaseComponent('Textarea');\n    const { ariaLabelledby, ariaDescribedby, controlId, invalid } = useFormFieldContext(rest);\n    const baseProps = getBaseProps(rest);\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    useForwardFocus(ref, textareaRef);\n\n    const attributes: React.TextareaHTMLAttributes<HTMLTextAreaElement> = {\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      'aria-describedby': ariaDescribedby,\n      'aria-required': ariaRequired ? 'true' : undefined,\n      'aria-invalid': invalid ? 'true' : undefined,\n      name,\n      placeholder,\n      autoFocus,\n      className: clsx(styles.textarea, {\n        [styles['textarea-readonly']]: readOnly,\n        [styles['textarea-invalid']]: invalid,\n      }),\n      autoComplete: convertAutoComplete(autoComplete),\n      spellCheck: spellcheck,\n      disabled,\n      readOnly: readOnly ? true : undefined,\n      rows: rows || 3,\n      onKeyDown: onKeyDown && (event => fireKeyboardEvent(onKeyDown, event)),\n      onKeyUp: onKeyUp && (event => fireKeyboardEvent(onKeyUp, event)),\n      // We set a default value on the component in order to force it into the controlled mode.\n      value: value || '',\n      onChange: onChange && (event => fireNonCancelableEvent(onChange, { value: event.target.value })),\n      onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),\n      onFocus: onFocus && (() => fireNonCancelableEvent(onFocus)),\n    };\n\n    if (disableBrowserAutocorrect) {\n      attributes.autoCorrect = 'off';\n      attributes.autoCapitalize = 'off';\n    }\n\n    if (disableBrowserSpellcheck) {\n      attributes.spellCheck = 'false';\n    }\n\n    return (\n      <span {...baseProps} className={clsx(styles.root, baseProps.className)} ref={__internalRootRef}>\n        <textarea ref={textareaRef} id={controlId} {...attributes} />\n      </span>\n    );\n  }\n);\n\napplyDisplayName(Textarea, 'Textarea');\nexport default Textarea;\n"]},"metadata":{},"sourceType":"module"}