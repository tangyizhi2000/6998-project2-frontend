{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nexport default function InternalBox(_a) {\n  var {\n      variant = 'div',\n      tagOverride,\n      margin = {},\n      padding = {},\n      display,\n      textAlign,\n      float,\n      fontSize,\n      fontWeight,\n      color,\n      children,\n      __internalRootRef = null\n    } = _a,\n    props = __rest(_a, [\"variant\", \"tagOverride\", \"margin\", \"padding\", \"display\", \"textAlign\", \"float\", \"fontSize\", \"fontWeight\", \"color\", \"children\", \"__internalRootRef\"]);\n  const baseProps = getBaseProps(props);\n  const marginsClassNamesSuffices = getClassNamesSuffixes(margin);\n  const paddingsClassNamesSuffices = getClassNamesSuffixes(padding);\n  // This can be any arbitrary string if passed into tagOverride.\n  // We appease the compiler with an incorrect type.\n  const Tag = getTag(variant, tagOverride);\n  const className = clsx(baseProps.className, styles.root, styles.box, styles[`${variant.replace(/^awsui-/, '')}-variant`], marginsClassNamesSuffices.map(suffix => styles[`m-${suffix}`]), paddingsClassNamesSuffices.map(suffix => styles[`p-${suffix}`]), styles[`d-${display}`], styles[`f-${float}`], styles[`color-${color || 'default'}`], styles[`font-size-${fontSize || 'default'}`], styles[`font-weight-${fontWeight || 'default'}`], styles[`t-${textAlign}`]);\n  return React.createElement(Tag, Object.assign({}, baseProps, {\n    className: className,\n    ref: __internalRootRef\n  }), children);\n}\nconst getClassNamesSuffixes = value => {\n  if (typeof value === 'string') {\n    return [value];\n  }\n  const sides = ['top', 'right', 'bottom', 'left', 'horizontal', 'vertical'];\n  return sides.filter(side => !!value[side]).map(side => `${side}-${value[side]}`);\n};\nconst getTag = (variant, tagOverride) => {\n  if (tagOverride) {\n    return tagOverride;\n  }\n  if (variant === 'awsui-value-large') {\n    return 'span';\n  }\n  if (variant === 'awsui-key-label') {\n    return 'div';\n  }\n  return variant;\n};","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,iBAAiB;AAMpC,eAAc,SAAUC,WAAW,CAACC,EAcjB;MAdiB;MAClCC,OAAO,GAAG,KAAK;MACfC,WAAW;MACXC,MAAM,GAAG,EAAE;MACXC,OAAO,GAAG,EAAE;MACZC,OAAO;MACPC,SAAS;MACTC,KAAK;MACLC,QAAQ;MACRC,UAAU;MACVC,KAAK;MACLC,QAAQ;MACRC,iBAAiB,GAAG;IAAI,MAEP;IADdC,KAAK,cAb0B,oJAcnC,CADS;EAER,MAAMC,SAAS,GAAGlB,YAAY,CAACiB,KAAK,CAAC;EACrC,MAAME,yBAAyB,GAAGC,qBAAqB,CAACb,MAAM,CAAC;EAC/D,MAAMc,0BAA0B,GAAGD,qBAAqB,CAACZ,OAAO,CAAC;EACjE;EACA;EACA,MAAMc,GAAG,GAAGC,MAAM,CAAClB,OAAO,EAAEC,WAAW,CAAU;EAEjD,MAAMkB,SAAS,GAAGvB,IAAI,CACpBiB,SAAS,CAACM,SAAS,EACnBtB,MAAM,CAACuB,IAAI,EACXvB,MAAM,CAACwB,GAAG,EACVxB,MAAM,CAAC,GAAGG,OAAO,CAACsB,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,UAAU,CAAC,EACnDR,yBAAyB,CAACS,GAAG,CAACC,MAAM,IAAI3B,MAAM,CAAC,KAAK2B,MAAM,EAAE,CAAC,CAAC,EAC9DR,0BAA0B,CAACO,GAAG,CAACC,MAAM,IAAI3B,MAAM,CAAC,KAAK2B,MAAM,EAAE,CAAC,CAAC,EAC/D3B,MAAM,CAAC,KAAKO,OAAO,EAAE,CAAC,EACtBP,MAAM,CAAC,KAAKS,KAAK,EAAE,CAAC,EACpBT,MAAM,CAAC,SAASY,KAAK,IAAI,SAAS,EAAE,CAAC,EACrCZ,MAAM,CAAC,aAAaU,QAAQ,IAAI,SAAS,EAAE,CAAC,EAC5CV,MAAM,CAAC,eAAeW,UAAU,IAAI,SAAS,EAAE,CAAC,EAChDX,MAAM,CAAC,KAAKQ,SAAS,EAAE,CAAC,CACzB;EAED,OACEX,oBAACuB,GAAG,oBAAKJ,SAAS;IAAEM,SAAS,EAAEA,SAAS;IAAEM,GAAG,EAAEd;EAAiB,IAC7DD,QAAQ,CACL;AAEV;AAEA,MAAMK,qBAAqB,GAAIW,KAA8C,IAAI;EAC/E,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAO,CAACA,KAAK,CAAC;;EAEhB,MAAMC,KAAK,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,YAAY,EAAE,UAAU,CAAU;EACnF,OAAOA,KAAK,CAACC,MAAM,CAACC,IAAI,IAAI,CAAC,CAACH,KAAK,CAACG,IAAI,CAAC,CAAC,CAACN,GAAG,CAACM,IAAI,IAAI,GAAGA,IAAI,IAAIH,KAAK,CAACG,IAAI,CAAC,EAAE,CAAC;AAClF,CAAC;AAED,MAAMX,MAAM,GAAG,CAAClB,OAAyB,EAAEC,WAAoC,KAAI;EACjF,IAAIA,WAAW,EAAE;IACf,OAAOA,WAAW;;EAGpB,IAAID,OAAO,KAAK,mBAAmB,EAAE;IACnC,OAAO,MAAM;;EAGf,IAAIA,OAAO,KAAK,iBAAiB,EAAE;IACjC,OAAO,KAAK;;EAGd,OAAOA,OAAO;AAChB,CAAC","names":["React","getBaseProps","clsx","styles","InternalBox","_a","variant","tagOverride","margin","padding","display","textAlign","float","fontSize","fontWeight","color","children","__internalRootRef","props","baseProps","marginsClassNamesSuffices","getClassNamesSuffixes","paddingsClassNamesSuffices","Tag","getTag","className","root","box","replace","map","suffix","ref","value","sides","filter","side"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/box/lib/default/box/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { BoxProps } from './interfaces';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\n\ntype InternalBoxProps = BoxProps & InternalBaseComponentProps;\n\nexport default function InternalBox({\n  variant = 'div',\n  tagOverride,\n  margin = {},\n  padding = {},\n  display,\n  textAlign,\n  float,\n  fontSize,\n  fontWeight,\n  color,\n  children,\n  __internalRootRef = null,\n  ...props\n}: InternalBoxProps) {\n  const baseProps = getBaseProps(props);\n  const marginsClassNamesSuffices = getClassNamesSuffixes(margin);\n  const paddingsClassNamesSuffices = getClassNamesSuffixes(padding);\n  // This can be any arbitrary string if passed into tagOverride.\n  // We appease the compiler with an incorrect type.\n  const Tag = getTag(variant, tagOverride) as 'div';\n\n  const className = clsx(\n    baseProps.className,\n    styles.root,\n    styles.box,\n    styles[`${variant.replace(/^awsui-/, '')}-variant`],\n    marginsClassNamesSuffices.map(suffix => styles[`m-${suffix}`]),\n    paddingsClassNamesSuffices.map(suffix => styles[`p-${suffix}`]),\n    styles[`d-${display}`],\n    styles[`f-${float}`],\n    styles[`color-${color || 'default'}`],\n    styles[`font-size-${fontSize || 'default'}`],\n    styles[`font-weight-${fontWeight || 'default'}`],\n    styles[`t-${textAlign}`]\n  );\n\n  return (\n    <Tag {...baseProps} className={className} ref={__internalRootRef}>\n      {children}\n    </Tag>\n  );\n}\n\nconst getClassNamesSuffixes = (value: BoxProps.SpacingSize | BoxProps.Spacing) => {\n  if (typeof value === 'string') {\n    return [value];\n  }\n  const sides = ['top', 'right', 'bottom', 'left', 'horizontal', 'vertical'] as const;\n  return sides.filter(side => !!value[side]).map(side => `${side}-${value[side]}`);\n};\n\nconst getTag = (variant: BoxProps.Variant, tagOverride: BoxProps['tagOverride']) => {\n  if (tagOverride) {\n    return tagOverride;\n  }\n\n  if (variant === 'awsui-value-large') {\n    return 'span';\n  }\n\n  if (variant === 'awsui-key-label') {\n    return 'div';\n  }\n\n  return variant;\n};\n"]},"metadata":{},"sourceType":"module"}