{"ast":null,"code":"import _slicedToArray from \"/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport React, { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport OptionsList from '../../internal/components/options-list';\nimport { renderOptions } from '../utils/render-options';\nimport styles from './styles.css.js';\nimport { useVirtual } from '../../internal/hooks/use-virtual';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nvar VirtualList = function VirtualList(props, ref) {\n  return props.menuProps.open ? React.createElement(VirtualListOpen, Object.assign({}, props, {\n    ref: ref\n  })) : React.createElement(VirtualListClosed, Object.assign({}, props, {\n    ref: ref\n  }));\n};\nvar VirtualListOpen = forwardRef(function (_ref, ref) {\n  var menuProps = _ref.menuProps,\n    getOptionProps = _ref.getOptionProps,\n    filteredOptions = _ref.filteredOptions,\n    filteringValue = _ref.filteringValue,\n    highlightType = _ref.highlightType,\n    checkboxes = _ref.checkboxes,\n    hasDropdownStatus = _ref.hasDropdownStatus,\n    listBottom = _ref.listBottom,\n    useInteractiveGroups = _ref.useInteractiveGroups,\n    screenReaderContent = _ref.screenReaderContent;\n  // update component, when it gets wider or narrower to reposition items\n  var _useContainerQuery = useContainerQuery(function (rect) {\n      return rect.contentBoxWidth;\n    }, []),\n    _useContainerQuery2 = _slicedToArray(_useContainerQuery, 2),\n    width = _useContainerQuery2[0],\n    menuMeasureRef = _useContainerQuery2[1];\n  var menuRefObject = useRef(null);\n  var menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);\n  var _useVirtual = useVirtual({\n      items: filteredOptions,\n      parentRef: menuRefObject,\n      // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n      // when the height of any option could have changed:\n      // 1: because the component got resized (width property got updated)\n      // 2: because the option changed its content (filteringValue property controls the highlight and the visibility of hidden tags)\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      estimateSize: useCallback(function () {\n        return 31;\n      }, [width, filteringValue])\n    }),\n    virtualItems = _useVirtual.virtualItems,\n    totalSize = _useVirtual.totalSize,\n    scrollToIndex = _useVirtual.scrollToIndex;\n  useImperativeHandle(ref, function () {\n    return function (index) {\n      if (highlightType === 'keyboard') {\n        scrollToIndex(index);\n      }\n    };\n  }, [highlightType, scrollToIndex]);\n  var finalOptions = renderOptions({\n    options: virtualItems.map(function (_ref2) {\n      var index = _ref2.index;\n      return filteredOptions[index];\n    }),\n    getOptionProps: getOptionProps,\n    filteringValue: filteringValue,\n    highlightType: highlightType,\n    checkboxes: checkboxes,\n    hasDropdownStatus: hasDropdownStatus,\n    virtualItems: virtualItems,\n    useInteractiveGroups: useInteractiveGroups,\n    screenReaderContent: screenReaderContent,\n    ariaSetsize: filteredOptions.length\n  });\n  return React.createElement(OptionsList, Object.assign({}, menuProps, {\n    ref: menuRef\n  }), React.createElement(\"div\", {\n    \"aria-hidden\": \"true\",\n    key: \"total-size\",\n    className: styles['layout-strut'],\n    style: {\n      height: totalSize\n    }\n  }), finalOptions, listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n});\nvar VirtualListClosed = forwardRef(function (_ref3, ref) {\n  var menuProps = _ref3.menuProps,\n    listBottom = _ref3.listBottom;\n  useImperativeHandle(ref, function () {\n    return function () {};\n  }, []);\n  return React.createElement(OptionsList, Object.assign({}, menuProps, {\n    ref: menuProps.ref\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n});\nexport default forwardRef(VirtualList);","map":{"version":3,"mappings":"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","names":["useMergeRefs","React","forwardRef","useCallback","useImperativeHandle","useRef","OptionsList","renderOptions","styles","useVirtual","useContainerQuery","VirtualList","props","ref","menuProps","open","VirtualListOpen","VirtualListClosed","getOptionProps","filteredOptions","filteringValue","highlightType","checkboxes","hasDropdownStatus","listBottom","useInteractiveGroups","screenReaderContent","rect","contentBoxWidth","width","menuMeasureRef","menuRefObject","menuRef","items","parentRef","estimateSize","virtualItems","totalSize","scrollToIndex","index","finalOptions","options","map","ariaSetsize","length","key","className","style","height","role"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/select/parts/lib/default/select/parts/virtual-list.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport React, { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport OptionsList from '../../internal/components/options-list';\nimport { renderOptions } from '../utils/render-options';\nimport { SelectListProps } from './plain-list';\n\nimport styles from './styles.css.js';\nimport { useVirtual } from '../../internal/hooks/use-virtual';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nconst VirtualList = (props: SelectListProps, ref: React.Ref<SelectListProps.SelectListRef>) => {\n  return props.menuProps.open ? <VirtualListOpen {...props} ref={ref} /> : <VirtualListClosed {...props} ref={ref} />;\n};\n\nconst VirtualListOpen = forwardRef(\n  (\n    {\n      menuProps,\n      getOptionProps,\n      filteredOptions,\n      filteringValue,\n      highlightType,\n      checkboxes,\n      hasDropdownStatus,\n      listBottom,\n      useInteractiveGroups,\n      screenReaderContent,\n    }: SelectListProps,\n    ref: React.Ref<SelectListProps.SelectListRef>\n  ) => {\n    // update component, when it gets wider or narrower to reposition items\n    const [width, menuMeasureRef] = useContainerQuery(rect => rect.contentBoxWidth, []);\n    const menuRefObject = useRef(null);\n    const menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);\n\n    const { virtualItems, totalSize, scrollToIndex } = useVirtual({\n      items: filteredOptions,\n      parentRef: menuRefObject,\n      // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n      // when the height of any option could have changed:\n      // 1: because the component got resized (width property got updated)\n      // 2: because the option changed its content (filteringValue property controls the highlight and the visibility of hidden tags)\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      estimateSize: useCallback(() => 31, [width, filteringValue]),\n    });\n\n    useImperativeHandle(\n      ref,\n      () => (index: number) => {\n        if (highlightType === 'keyboard') {\n          scrollToIndex(index);\n        }\n      },\n      [highlightType, scrollToIndex]\n    );\n    const finalOptions = renderOptions({\n      options: virtualItems.map(({ index }) => filteredOptions[index]),\n      getOptionProps,\n      filteringValue,\n      highlightType,\n      checkboxes,\n      hasDropdownStatus,\n      virtualItems,\n      useInteractiveGroups,\n      screenReaderContent,\n      ariaSetsize: filteredOptions.length,\n    });\n\n    return (\n      <OptionsList {...menuProps} ref={menuRef}>\n        <div aria-hidden=\"true\" key=\"total-size\" className={styles['layout-strut']} style={{ height: totalSize }} />\n        {finalOptions}\n        {listBottom ? (\n          <li role=\"option\" className={styles['list-bottom']}>\n            {listBottom}\n          </li>\n        ) : null}\n      </OptionsList>\n    );\n  }\n);\n\nconst VirtualListClosed = forwardRef(\n  ({ menuProps, listBottom }: SelectListProps, ref: React.Ref<SelectListProps.SelectListRef>) => {\n    useImperativeHandle(ref, () => () => {}, []);\n    return (\n      <OptionsList {...menuProps} ref={menuProps.ref}>\n        {listBottom ? (\n          <li role=\"option\" className={styles['list-bottom']}>\n            {listBottom}\n          </li>\n        ) : null}\n      </OptionsList>\n    );\n  }\n);\n\nexport default forwardRef(VirtualList);\n"]},"metadata":{},"sourceType":"module"}