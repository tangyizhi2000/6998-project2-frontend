{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { KeyCode } from '../../internal/keycode';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalCheckbox from '../../checkbox/internal';\nimport RadioButton from '../../radio-group/radio-button';\nimport styles from './styles.css.js';\nexport function SelectionControl(_a) {\n  var selectionType = _a.selectionType,\n    _a$indeterminate = _a.indeterminate,\n    indeterminate = _a$indeterminate === void 0 ? false : _a$indeterminate,\n    onShiftToggle = _a.onShiftToggle,\n    onFocusUp = _a.onFocusUp,\n    onFocusDown = _a.onFocusDown,\n    name = _a.name,\n    ariaLabel = _a.ariaLabel,\n    focusedComponent = _a.focusedComponent,\n    sharedProps = __rest(_a, [\"selectionType\", \"indeterminate\", \"onShiftToggle\", \"onFocusUp\", \"onFocusDown\", \"name\", \"ariaLabel\", \"focusedComponent\"]);\n  var controlId = useUniqueId();\n  var isMultiSelection = selectionType === 'multi';\n  var setShiftState = function setShiftState(event) {\n    if (isMultiSelection) {\n      onShiftToggle && onShiftToggle(event.shiftKey);\n    }\n  };\n  var onMouseDownHandler = function onMouseDownHandler(event) {\n    setShiftState(event);\n    if (isMultiSelection) {\n      // To overcome an issue\n      // If you shift+click or ctrl+click on a label for a checkbox, checkbox is not checked.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=559506\n      event.preventDefault();\n    }\n  };\n  // native checkboxes do not have focus move via keyboard, we implement it here programmatically\n  var handleKeyDown = function handleKeyDown(event) {\n    setShiftState(event);\n    if (isMultiSelection) {\n      if (event.keyCode === KeyCode.up) {\n        event.preventDefault();\n        onFocusUp && onFocusUp(event);\n      }\n      if (event.keyCode === KeyCode.down) {\n        event.preventDefault();\n        onFocusDown && onFocusDown(event);\n      }\n    }\n  };\n  var handleClick = function handleClick(event) {\n    var target = event.currentTarget;\n    var nativeInput = target.tagName === 'INPUT' ? target : target.querySelector('input');\n    // Clicking on input, does not focus it on Firefox (AWSUI-11345)\n    nativeInput === null || nativeInput === void 0 ? void 0 : nativeInput.focus();\n  };\n  var selector = isMultiSelection ? React.createElement(InternalCheckbox, Object.assign({}, sharedProps, {\n    showOutline: focusedComponent === 'selection-control',\n    controlId: controlId,\n    \"data-focus-id\": \"selection-control\",\n    indeterminate: indeterminate\n  })) : React.createElement(RadioButton, Object.assign({}, sharedProps, {\n    controlId: controlId,\n    name: name,\n    value: '',\n    label: ''\n  }));\n  return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    onKeyDown: handleKeyDown,\n    onKeyUp: setShiftState,\n    onMouseDown: onMouseDownHandler,\n    onMouseUp: setShiftState,\n    onClick: handleClick,\n    htmlFor: controlId,\n    className: clsx(styles.label, styles.root),\n    \"aria-label\": ariaLabel,\n    title: ariaLabel\n  }, selector), React.createElement(\"span\", {\n    className: clsx(styles.stud),\n    \"aria-hidden\": true\n  }, \"\\xA0\"));\n}","map":{"version":3,"mappings":"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","names":["clsx","React","KeyCode","useUniqueId","InternalCheckbox","RadioButton","styles","SelectionControl","_a","selectionType","indeterminate","onShiftToggle","onFocusUp","onFocusDown","name","ariaLabel","focusedComponent","sharedProps","controlId","isMultiSelection","setShiftState","event","shiftKey","onMouseDownHandler","preventDefault","handleKeyDown","keyCode","up","down","handleClick","target","currentTarget","nativeInput","tagName","querySelector","focus","selector","showOutline","value","label","onKeyDown","onKeyUp","onMouseDown","onMouseUp","onClick","htmlFor","className","root","title","stud"],"sources":["/Users/tangyizhi/Desktop/Assignment2/frontend/node_modules/@cloudscape-design/components/table/selection/lib/default/table/selection/selection-control.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { KeyboardEvent, KeyboardEventHandler, MouseEvent } from 'react';\nimport { KeyCode } from '../../internal/keycode';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalCheckbox from '../../checkbox/internal';\nimport RadioButton from '../../radio-group/radio-button';\n\nimport styles from './styles.css.js';\nimport { SelectionProps } from './interfaces';\n\nexport interface SelectionControlProps extends SelectionProps {\n  onShiftToggle?(shiftPressed: boolean): void;\n  onFocusUp?: KeyboardEventHandler;\n  onFocusDown?: KeyboardEventHandler;\n  ariaLabel?: string;\n  tabIndex?: -1;\n  focusedComponent?: null | string;\n}\n\nexport function SelectionControl({\n  selectionType,\n  indeterminate = false,\n  onShiftToggle,\n  onFocusUp,\n  onFocusDown,\n  name,\n  ariaLabel,\n  focusedComponent,\n  ...sharedProps\n}: SelectionControlProps) {\n  const controlId = useUniqueId();\n  const isMultiSelection = selectionType === 'multi';\n\n  const setShiftState = (event: KeyboardEvent | MouseEvent) => {\n    if (isMultiSelection) {\n      onShiftToggle && onShiftToggle(event.shiftKey);\n    }\n  };\n\n  const onMouseDownHandler = (event: MouseEvent) => {\n    setShiftState(event);\n    if (isMultiSelection) {\n      // To overcome an issue\n      // If you shift+click or ctrl+click on a label for a checkbox, checkbox is not checked.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=559506\n      event.preventDefault();\n    }\n  };\n\n  // native checkboxes do not have focus move via keyboard, we implement it here programmatically\n  const handleKeyDown = (event: KeyboardEvent) => {\n    setShiftState(event);\n    if (isMultiSelection) {\n      if (event.keyCode === KeyCode.up) {\n        event.preventDefault();\n        onFocusUp && onFocusUp(event);\n      }\n      if (event.keyCode === KeyCode.down) {\n        event.preventDefault();\n        onFocusDown && onFocusDown(event);\n      }\n    }\n  };\n\n  const handleClick = (event: MouseEvent) => {\n    const target = event.currentTarget;\n    const nativeInput = (target.tagName === 'INPUT' ? target : target.querySelector('input')) as HTMLInputElement;\n    // Clicking on input, does not focus it on Firefox (AWSUI-11345)\n    nativeInput?.focus();\n  };\n\n  const selector = isMultiSelection ? (\n    <InternalCheckbox\n      {...sharedProps}\n      showOutline={focusedComponent === 'selection-control'}\n      controlId={controlId}\n      data-focus-id=\"selection-control\"\n      indeterminate={indeterminate}\n    />\n  ) : (\n    <RadioButton {...sharedProps} controlId={controlId} name={name} value={''} label={''} />\n  );\n\n  return (\n    <>\n      <label\n        onKeyDown={handleKeyDown}\n        onKeyUp={setShiftState}\n        onMouseDown={onMouseDownHandler}\n        onMouseUp={setShiftState}\n        onClick={handleClick}\n        htmlFor={controlId}\n        className={clsx(styles.label, styles.root)}\n        aria-label={ariaLabel}\n        title={ariaLabel}\n      >\n        {selector}\n      </label>\n      {/* HACK: IE11 collapses td's height to 0, if it contains only an absolutely positioned label */}\n      <span className={clsx(styles.stud)} aria-hidden={true}>\n        &nbsp;\n      </span>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}