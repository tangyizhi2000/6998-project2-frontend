{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport styles from './styles.css.js';\nimport { isSameMonth, isAfter, isBefore, isSameDay, addWeeks, addDays, isLastDayOfMonth, getDaysInMonth, isToday } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport { getDateLabel, renderDayName } from '../../../calendar/utils/intl';\nimport clsx from 'clsx';\nimport { formatDate } from '../../../internal/utils/date-time';\nimport ScreenreaderOnly from '../../../internal/components/screenreader-only/index.js';\nexport function Grid(_ref) {\n  let {\n    baseDate,\n    selectedStartDate,\n    selectedEndDate,\n    rangeStartDate,\n    rangeEndDate,\n    focusedDate,\n    focusedDateRef,\n    onSelectDate,\n    onGridKeyDownHandler,\n    onFocusedDateChange,\n    isDateEnabled,\n    locale,\n    startOfWeek,\n    todayAriaLabel,\n    ariaLabelledby,\n    className\n  } = _ref;\n  const baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime();\n  // `baseDateTime` is used as a more stable replacement for baseDate\n  const weeks = useMemo(() => getCalendarMonth(baseDate, {\n    firstDayOfWeek: startOfWeek\n  }),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [baseDateTime, startOfWeek]);\n  const weekdays = weeks[0].map(date => date.getDay());\n  return React.createElement(\"table\", {\n    role: \"grid\",\n    \"aria-labelledby\": ariaLabelledby,\n    className: clsx(styles.grid, className)\n  }, React.createElement(\"thead\", null, React.createElement(\"tr\", null, weekdays.map(dayIndex => React.createElement(\"th\", {\n    key: dayIndex,\n    scope: \"col\",\n    className: clsx(styles['grid-cell'], styles['day-header'])\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, renderDayName(locale, dayIndex, 'short')), React.createElement(ScreenreaderOnly, null, renderDayName(locale, dayIndex, 'long')))))), React.createElement(\"tbody\", {\n    onKeyDown: onGridKeyDownHandler\n  }, weeks.map((week, weekIndex) => {\n    return React.createElement(\"tr\", {\n      key: weekIndex,\n      className: styles.week\n    }, week.map((date, dateIndex) => {\n      const isStartDate = !!selectedStartDate && isSameDay(date, selectedStartDate);\n      const isEndDate = !!selectedEndDate && isSameDay(date, selectedEndDate);\n      const isSelected = isStartDate || isEndDate;\n      const isRangeStartDate = !!rangeStartDate && isSameDay(date, rangeStartDate);\n      const isRangeEndDate = !!rangeEndDate && isSameDay(date, rangeEndDate);\n      const isFocused = !!focusedDate && isSameDay(date, focusedDate) && isSameMonth(date, baseDate);\n      const dateIsInRange = isStartDate || isEndDate || isInRange(date, rangeStartDate, rangeEndDate);\n      const inRangeStartWeek = rangeStartDate && isInRange(date, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));\n      const inRangeEndWeek = rangeEndDate && isInRange(date, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));\n      const onlyOneSelected = !!rangeStartDate && !!rangeEndDate ? isSameDay(rangeStartDate, rangeEndDate) : !selectedStartDate || !selectedEndDate;\n      const isEnabled = !isDateEnabled || isDateEnabled(date);\n      const isFocusable = isFocused && isEnabled;\n      const baseClasses = {\n        [styles.day]: true,\n        [styles['grid-cell']]: true,\n        [styles['in-first-row']]: weekIndex === 0,\n        [styles['in-first-column']]: dateIndex === 0\n      };\n      if (!isSameMonth(date, baseDate)) {\n        return React.createElement(\"td\", {\n          key: `${weekIndex}:${dateIndex}`,\n          ref: isFocused ? focusedDateRef : undefined,\n          className: clsx(baseClasses, {\n            [styles['in-previous-month']]: isBefore(date, baseDate),\n            [styles['last-day-of-month']]: isLastDayOfMonth(date),\n            [styles['in-next-month']]: isAfter(date, baseDate)\n          })\n        });\n      }\n      const handlers = {};\n      if (isEnabled) {\n        handlers.onClick = () => onSelectDate(date);\n        handlers.onFocus = () => onFocusedDateChange(date);\n      }\n      // Can't be focused.\n      let tabIndex = undefined;\n      if (isFocusable && isEnabled) {\n        // Next focus target.\n        tabIndex = 0;\n      } else if (isEnabled) {\n        // Can be focused programmatically.\n        tabIndex = -1;\n      }\n      // Screen-reader announcement for the focused day.\n      let dayAnnouncement = getDateLabel(locale, date, 'short');\n      if (isToday(date)) {\n        dayAnnouncement += '. ' + todayAriaLabel;\n      }\n      return React.createElement(\"td\", Object.assign({\n        ref: isFocused ? focusedDateRef : undefined,\n        key: `${weekIndex}:${dateIndex}`,\n        className: clsx(baseClasses, {\n          [styles['in-current-month']]: isSameMonth(date, baseDate),\n          [styles.enabled]: isEnabled,\n          [styles.selected]: isSelected,\n          [styles['start-date']]: isStartDate,\n          [styles['end-date']]: isEndDate,\n          [styles['range-start-date']]: isRangeStartDate,\n          [styles['range-end-date']]: isRangeEndDate,\n          [styles['no-range']]: isSelected && onlyOneSelected,\n          [styles['in-range']]: dateIsInRange,\n          [styles['in-range-border-top']]: !!inRangeStartWeek || date.getDate() <= 7,\n          [styles['in-range-border-bottom']]: !!inRangeEndWeek || date.getDate() > getDaysInMonth(date) - 7,\n          [styles['in-range-border-left']]: dateIndex === 0 || date.getDate() === 1 || isRangeStartDate,\n          [styles['in-range-border-right']]: dateIndex === week.length - 1 || isLastDayOfMonth(date) || isRangeEndDate,\n          [styles.today]: isToday(date)\n        }),\n        \"aria-selected\": isEnabled ? isSelected || dateIsInRange : undefined,\n        \"aria-current\": isToday(date) ? 'date' : undefined,\n        \"data-date\": formatDate(date),\n        \"aria-disabled\": !isEnabled,\n        tabIndex: tabIndex\n      }, handlers), React.createElement(\"span\", {\n        className: styles['day-inner'],\n        \"aria-hidden\": \"true\"\n      }, date.getDate()), React.createElement(ScreenreaderOnly, null, dayAnnouncement));\n    }));\n  })));\n}\nfunction isInRange(date, dateOne, dateTwo) {\n  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n    return false;\n  }\n  const inRange = isAfter(date, dateOne) && isBefore(date, dateTwo) || isAfter(date, dateTwo) && isBefore(date, dateOne);\n  return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}","map":{"version":3,"mappings":"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","names":["React","useMemo","styles","isSameMonth","isAfter","isBefore","isSameDay","addWeeks","addDays","isLastDayOfMonth","getDaysInMonth","isToday","getCalendarMonth","getDateLabel","renderDayName","clsx","formatDate","ScreenreaderOnly","Grid","baseDate","selectedStartDate","selectedEndDate","rangeStartDate","rangeEndDate","focusedDate","focusedDateRef","onSelectDate","onGridKeyDownHandler","onFocusedDateChange","isDateEnabled","locale","startOfWeek","todayAriaLabel","ariaLabelledby","className","baseDateTime","getTime","weeks","firstDayOfWeek","weekdays","map","date","getDay","role","grid","dayIndex","key","scope","onKeyDown","week","weekIndex","dateIndex","isStartDate","isEndDate","isSelected","isRangeStartDate","isRangeEndDate","isFocused","dateIsInRange","isInRange","inRangeStartWeek","inRangeEndWeek","onlyOneSelected","isEnabled","isFocusable","baseClasses","day","ref","undefined","handlers","onClick","onFocus","tabIndex","dayAnnouncement","enabled","selected","getDate","length","today","dateOne","dateTwo","inRange"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/lib/default/date-range-picker/calendar/grids/grid.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport styles from './styles.css.js';\nimport {\n  isSameMonth,\n  isAfter,\n  isBefore,\n  isSameDay,\n  addWeeks,\n  addDays,\n  isLastDayOfMonth,\n  getDaysInMonth,\n  isToday,\n} from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport { DateRangePickerProps, DayIndex } from '../../interfaces';\nimport { getDateLabel, renderDayName } from '../../../calendar/utils/intl';\nimport clsx from 'clsx';\nimport { formatDate } from '../../../internal/utils/date-time';\nimport ScreenreaderOnly from '../../../internal/components/screenreader-only/index.js';\n\n/**\n * Calendar grid supports two mechanisms of keyboard navigation:\n * - Native screen-reader table navigation (semantic table markup);\n * - Keyboard arrow-keys navigation (a custom key-down handler).\n *\n * The implementation largely follows the w3 example (https://www.w3.org/WAI/ARIA/apg/example-index/dialog-modal/datepicker-dialog) and shares the following issues:\n * - (table navigation) Chrome+VO - weekday is announced twice when navigating to the calendar's header;\n * - (table navigation) Safari+VO - \"dimmed\" state is announced twice;\n * - (table navigation) Firefox/Chrome+NVDA - cannot use table navigation if any cell has a focus;\n * - (keyboard navigation) Firefox+NVDA - every day is announced as \"not selected\";\n * - (keyboard navigation) Safari/Chrome+VO - weekdays are not announced;\n * - (keyboard navigation) Safari/Chrome+VO - days are not announced as interactive (clickable or selectable);\n * - (keyboard navigation) Safari/Chrome+VO - day announcements are not interruptive and can be missed if navigating fast.\n */\n\nexport interface GridProps {\n  baseDate: Date;\n  selectedStartDate: Date | null;\n  selectedEndDate: Date | null;\n\n  rangeStartDate: Date | null;\n  rangeEndDate: Date | null;\n\n  focusedDate: Date | null;\n  focusedDateRef: React.RefObject<HTMLTableCellElement>;\n\n  onSelectDate: (date: Date) => void;\n  onGridKeyDownHandler: (e: React.KeyboardEvent) => void;\n  onFocusedDateChange: React.Dispatch<React.SetStateAction<Date | null>>;\n\n  isDateEnabled: DateRangePickerProps.IsDateEnabledFunction;\n\n  locale: string;\n  startOfWeek: DayIndex;\n  todayAriaLabel?: string;\n  ariaLabelledby: string;\n\n  className?: string;\n}\n\nexport function Grid({\n  baseDate,\n  selectedStartDate,\n  selectedEndDate,\n  rangeStartDate,\n  rangeEndDate,\n  focusedDate,\n\n  focusedDateRef,\n\n  onSelectDate,\n  onGridKeyDownHandler,\n  onFocusedDateChange,\n\n  isDateEnabled,\n\n  locale,\n  startOfWeek,\n  todayAriaLabel,\n  ariaLabelledby,\n\n  className,\n}: GridProps) {\n  const baseDateTime = baseDate?.getTime();\n  // `baseDateTime` is used as a more stable replacement for baseDate\n  const weeks = useMemo<Date[][]>(\n    () => getCalendarMonth(baseDate, { firstDayOfWeek: startOfWeek }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [baseDateTime, startOfWeek]\n  );\n  const weekdays = weeks[0].map(date => date.getDay());\n\n  return (\n    <table role=\"grid\" aria-labelledby={ariaLabelledby} className={clsx(styles.grid, className)}>\n      <thead>\n        <tr>\n          {weekdays.map(dayIndex => (\n            <th key={dayIndex} scope=\"col\" className={clsx(styles['grid-cell'], styles['day-header'])}>\n              <span aria-hidden=\"true\">{renderDayName(locale, dayIndex, 'short')}</span>\n              <ScreenreaderOnly>{renderDayName(locale, dayIndex, 'long')}</ScreenreaderOnly>\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody onKeyDown={onGridKeyDownHandler}>\n        {weeks.map((week, weekIndex) => {\n          return (\n            <tr key={weekIndex} className={styles.week}>\n              {week.map((date, dateIndex) => {\n                const isStartDate = !!selectedStartDate && isSameDay(date, selectedStartDate);\n                const isEndDate = !!selectedEndDate && isSameDay(date, selectedEndDate);\n                const isSelected = isStartDate || isEndDate;\n                const isRangeStartDate = !!rangeStartDate && isSameDay(date, rangeStartDate);\n                const isRangeEndDate = !!rangeEndDate && isSameDay(date, rangeEndDate);\n\n                const isFocused = !!focusedDate && isSameDay(date, focusedDate) && isSameMonth(date, baseDate);\n\n                const dateIsInRange = isStartDate || isEndDate || isInRange(date, rangeStartDate, rangeEndDate);\n                const inRangeStartWeek =\n                  rangeStartDate && isInRange(date, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));\n                const inRangeEndWeek =\n                  rangeEndDate && isInRange(date, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));\n                const onlyOneSelected =\n                  !!rangeStartDate && !!rangeEndDate\n                    ? isSameDay(rangeStartDate, rangeEndDate)\n                    : !selectedStartDate || !selectedEndDate;\n\n                const isEnabled = !isDateEnabled || isDateEnabled(date);\n                const isFocusable = isFocused && isEnabled;\n\n                const baseClasses = {\n                  [styles.day]: true,\n                  [styles['grid-cell']]: true,\n                  [styles['in-first-row']]: weekIndex === 0,\n                  [styles['in-first-column']]: dateIndex === 0,\n                };\n\n                if (!isSameMonth(date, baseDate)) {\n                  return (\n                    <td\n                      key={`${weekIndex}:${dateIndex}`}\n                      ref={isFocused ? focusedDateRef : undefined}\n                      className={clsx(baseClasses, {\n                        [styles['in-previous-month']]: isBefore(date, baseDate),\n                        [styles['last-day-of-month']]: isLastDayOfMonth(date),\n                        [styles['in-next-month']]: isAfter(date, baseDate),\n                      })}\n                    ></td>\n                  );\n                }\n\n                const handlers: React.HTMLAttributes<HTMLDivElement> = {};\n                if (isEnabled) {\n                  handlers.onClick = () => onSelectDate(date);\n                  handlers.onFocus = () => onFocusedDateChange(date);\n                }\n\n                // Can't be focused.\n                let tabIndex = undefined;\n                if (isFocusable && isEnabled) {\n                  // Next focus target.\n                  tabIndex = 0;\n                } else if (isEnabled) {\n                  // Can be focused programmatically.\n                  tabIndex = -1;\n                }\n\n                // Screen-reader announcement for the focused day.\n                let dayAnnouncement = getDateLabel(locale, date, 'short');\n                if (isToday(date)) {\n                  dayAnnouncement += '. ' + todayAriaLabel;\n                }\n\n                return (\n                  <td\n                    ref={isFocused ? focusedDateRef : undefined}\n                    key={`${weekIndex}:${dateIndex}`}\n                    className={clsx(baseClasses, {\n                      [styles['in-current-month']]: isSameMonth(date, baseDate),\n                      [styles.enabled]: isEnabled,\n                      [styles.selected]: isSelected,\n                      [styles['start-date']]: isStartDate,\n                      [styles['end-date']]: isEndDate,\n                      [styles['range-start-date']]: isRangeStartDate,\n                      [styles['range-end-date']]: isRangeEndDate,\n                      [styles['no-range']]: isSelected && onlyOneSelected,\n                      [styles['in-range']]: dateIsInRange,\n                      [styles['in-range-border-top']]: !!inRangeStartWeek || date.getDate() <= 7,\n                      [styles['in-range-border-bottom']]: !!inRangeEndWeek || date.getDate() > getDaysInMonth(date) - 7,\n                      [styles['in-range-border-left']]: dateIndex === 0 || date.getDate() === 1 || isRangeStartDate,\n                      [styles['in-range-border-right']]:\n                        dateIndex === week.length - 1 || isLastDayOfMonth(date) || isRangeEndDate,\n                      [styles.today]: isToday(date),\n                    })}\n                    aria-selected={isEnabled ? isSelected || dateIsInRange : undefined}\n                    aria-current={isToday(date) ? 'date' : undefined}\n                    data-date={formatDate(date)}\n                    aria-disabled={!isEnabled}\n                    tabIndex={tabIndex}\n                    {...handlers}\n                  >\n                    <span className={styles['day-inner']} aria-hidden=\"true\">\n                      {date.getDate()}\n                    </span>\n                    <ScreenreaderOnly>{dayAnnouncement}</ScreenreaderOnly>\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nfunction isInRange(date: Date, dateOne: Date | null, dateTwo: Date | null) {\n  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n    return false;\n  }\n\n  const inRange =\n    (isAfter(date, dateOne) && isBefore(date, dateTwo)) || (isAfter(date, dateTwo) && isBefore(date, dateOne));\n\n  return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}\n"]},"metadata":{},"sourceType":"module"}