{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useRef } from 'react';\nimport clsx from 'clsx';\nimport { TICK_LENGTH, TICK_MARGIN } from './constants';\nimport styles from './styles.css.js';\nimport { formatTicks, getVisibleTicks } from './label-utils';\nimport { useInternalI18n } from '../../../i18n/context';\nconst OFFSET_PX = 12;\nexport default memo(LeftLabels);\n// Renders the visible tick labels on the left axis, as well as their grid lines.\nfunction LeftLabels(_ref) {\n  let {\n    axis = 'y',\n    width,\n    height,\n    scale,\n    ticks,\n    tickFormatter,\n    title,\n    ariaRoleDescription\n  } = _ref;\n  const i18n = useInternalI18n('[charts]');\n  const virtualTextRef = useRef(null);\n  const yOffset = axis === 'x' && scale.isCategorical() ? Math.max(0, scale.d3Scale.bandwidth() - 1) / 2 : 0;\n  const cacheRef = useRef({});\n  const getLabelSpace = label => {\n    if (cacheRef.current[label] !== undefined) {\n      return cacheRef.current[label];\n    }\n    if (virtualTextRef.current && virtualTextRef.current.getBBox) {\n      virtualTextRef.current.textContent = label;\n      cacheRef.current[label] = virtualTextRef.current.getBBox().height;\n      return cacheRef.current[label];\n    }\n    return 0;\n  };\n  const formattedTicks = formatTicks({\n    ticks,\n    scale,\n    getLabelSpace,\n    tickFormatter\n  });\n  if (virtualTextRef.current) {\n    virtualTextRef.current.textContent = '';\n  }\n  const from = 0 - OFFSET_PX - yOffset;\n  const until = height + OFFSET_PX - yOffset;\n  const visibleTicks = getVisibleTicks(formattedTicks, from, until);\n  return React.createElement(\"g\", {\n    className: clsx(styles['labels-left']),\n    \"aria-label\": title,\n    role: \"list\",\n    \"aria-roledescription\": i18n('i18nStrings.chartAriaRoleDescription', ariaRoleDescription),\n    \"aria-hidden\": true\n  }, visibleTicks.map((_ref2, index) => {\n    let {\n      position,\n      lines\n    } = _ref2;\n    return isFinite(position) && React.createElement(\"g\", {\n      key: index,\n      role: \"listitem\",\n      transform: `translate(0,${position + yOffset})`,\n      className: clsx(styles.ticks, axis === 'x' ? styles['ticks--x'] : styles['ticks--y'])\n    }, axis === 'y' && React.createElement(\"line\", {\n      className: clsx(styles.grid, styles.ticks_line),\n      x1: -TICK_LENGTH,\n      y1: 0,\n      x2: width,\n      y2: 0,\n      \"aria-hidden\": \"true\"\n    }), React.createElement(\"text\", {\n      className: styles.ticks__text,\n      x: -(TICK_LENGTH + TICK_MARGIN),\n      y: 0\n    }, lines.join(' ')));\n  }), React.createElement(\"text\", {\n    ref: virtualTextRef,\n    x: 0,\n    y: 0,\n    style: {\n      visibility: 'hidden'\n    },\n    \"aria-hidden\": \"true\"\n  }));\n}","map":{"version":3,"mappings":"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","names":["React","memo","useRef","clsx","TICK_LENGTH","TICK_MARGIN","styles","formatTicks","getVisibleTicks","useInternalI18n","OFFSET_PX","LeftLabels","axis","width","height","scale","ticks","tickFormatter","title","ariaRoleDescription","i18n","virtualTextRef","yOffset","isCategorical","Math","max","d3Scale","bandwidth","cacheRef","getLabelSpace","label","current","undefined","getBBox","textContent","formattedTicks","from","until","visibleTicks","className","role","map","index","position","lines","isFinite","key","transform","grid","ticks_line","x1","y1","x2","y2","ticks__text","x","y","join","ref","style","visibility"],"sources":["/Users/tangyizhi/Desktop/Assignment 2/frontend/node_modules/@cloudscape-design/components/internal/components/cartesian-chart/lib/default/internal/components/cartesian-chart/left-labels.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { ChartScale, NumericChartScale } from './scales';\nimport { TICK_LENGTH, TICK_MARGIN } from './constants';\n\nimport styles from './styles.css.js';\nimport { formatTicks, getVisibleTicks } from './label-utils';\nimport { ChartDataTypes } from '../../../mixed-line-bar-chart/interfaces';\nimport { useInternalI18n } from '../../../i18n/context';\n\nconst OFFSET_PX = 12;\n\ninterface LeftLabelsProps {\n  axis?: 'x' | 'y';\n  width: number;\n  height: number;\n  scale: ChartScale | NumericChartScale;\n  ticks: readonly ChartDataTypes[];\n  tickFormatter?: (value: number) => string;\n  title?: string;\n  ariaRoleDescription?: string;\n}\n\nexport default memo(LeftLabels) as typeof LeftLabels;\n\n// Renders the visible tick labels on the left axis, as well as their grid lines.\nfunction LeftLabels({\n  axis = 'y',\n  width,\n  height,\n  scale,\n  ticks,\n  tickFormatter,\n  title,\n  ariaRoleDescription,\n}: LeftLabelsProps) {\n  const i18n = useInternalI18n('[charts]');\n  const virtualTextRef = useRef<SVGTextElement>(null);\n\n  const yOffset = axis === 'x' && scale.isCategorical() ? Math.max(0, scale.d3Scale.bandwidth() - 1) / 2 : 0;\n\n  const cacheRef = useRef<{ [label: string]: number }>({});\n  const getLabelSpace = (label: string) => {\n    if (cacheRef.current[label] !== undefined) {\n      return cacheRef.current[label];\n    }\n    if (virtualTextRef.current && virtualTextRef.current.getBBox) {\n      virtualTextRef.current.textContent = label;\n      cacheRef.current[label] = virtualTextRef.current.getBBox().height;\n      return cacheRef.current[label];\n    }\n    return 0;\n  };\n\n  const formattedTicks = formatTicks({ ticks, scale, getLabelSpace, tickFormatter });\n\n  if (virtualTextRef.current) {\n    virtualTextRef.current.textContent = '';\n  }\n\n  const from = 0 - OFFSET_PX - yOffset;\n  const until = height + OFFSET_PX - yOffset;\n  const visibleTicks = getVisibleTicks(formattedTicks, from, until);\n\n  return (\n    <g\n      className={clsx(styles['labels-left'])}\n      aria-label={title}\n      role=\"list\"\n      aria-roledescription={i18n('i18nStrings.chartAriaRoleDescription', ariaRoleDescription)}\n      aria-hidden={true}\n    >\n      {visibleTicks.map(\n        ({ position, lines }, index) =>\n          isFinite(position) && (\n            <g\n              key={index}\n              role=\"listitem\"\n              transform={`translate(0,${position + yOffset})`}\n              className={clsx(styles.ticks, axis === 'x' ? styles['ticks--x'] : styles['ticks--y'])}\n            >\n              {axis === 'y' && (\n                <line\n                  className={clsx(styles.grid, styles.ticks_line)}\n                  x1={-TICK_LENGTH}\n                  y1={0}\n                  x2={width}\n                  y2={0}\n                  aria-hidden=\"true\"\n                />\n              )}\n              <text className={styles.ticks__text} x={-(TICK_LENGTH + TICK_MARGIN)} y={0}>\n                {lines.join(' ')}\n              </text>\n            </g>\n          )\n      )}\n\n      <text ref={virtualTextRef} x={0} y={0} style={{ visibility: 'hidden' }} aria-hidden=\"true\"></text>\n    </g>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}