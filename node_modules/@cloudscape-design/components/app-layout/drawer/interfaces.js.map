{"version":3,"file":"interfaces.js","sourceRoot":"lib/default/","sources":["app-layout/drawer/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { togglesConfig } from '../toggles';\nimport { AppLayoutProps } from '../interfaces';\nimport { IconProps } from '../../icon/interfaces';\nimport { NonCancelableEventHandler } from '../../internal/events';\n\nimport { DrawerFocusControlRefs } from '../utils/use-drawer-focus-control';\n\nexport interface DesktopDrawerProps {\n  contentClassName: string;\n  toggleClassName: string;\n  closeClassName: string;\n  toggleRefs: {\n    toggle: React.Ref<{ focus(): void }>;\n    close: React.Ref<{ focus(): void }>;\n  };\n  width: number;\n  topOffset: number | undefined;\n  bottomOffset: number | undefined;\n  ariaLabels: AppLayoutProps.Labels | undefined;\n  drawersAriaLabels?: { mainLabel: string | undefined; closeLabel: string | undefined; openLabel: string | undefined };\n  children: React.ReactNode;\n  type: keyof typeof togglesConfig;\n  isMobile: boolean;\n  isOpen: boolean;\n  isHidden?: boolean;\n  onToggle: (isOpen: boolean) => void;\n  onClick?: (event: React.MouseEvent) => void;\n  onLoseFocus?: (event: React.FocusEvent) => void;\n  drawers?: {\n    items: Array<DrawerItem>;\n    activeDrawerId: string | undefined;\n    onChange: (changeDetail: { activeDrawerId: string | undefined }) => void;\n  };\n  resizeHandle?: React.ReactNode;\n}\n\nexport interface ResizableDrawerProps extends DesktopDrawerProps {\n  activeDrawer?: DrawerItem;\n  onResize: (resizeDetail: { size: number; id: string }) => void;\n  size: number;\n  getMaxWidth: () => number;\n  refs: DrawerFocusControlRefs;\n  toolsContent?: React.ReactNode;\n}\n\nexport interface DrawerTriggersBarProps {\n  topOffset: number | undefined;\n  bottomOffset: number | undefined;\n  isMobile: boolean;\n  drawers?: {\n    items: Array<DrawerItem>;\n    activeDrawerId?: string;\n    onChange: (changeDetail: { activeDrawerId: string | undefined }) => void;\n    ariaLabel?: string;\n    overflowAriaLabel?: string;\n    overflowWithBadgeAriaLabel?: string;\n  };\n}\n\nexport interface DrawerItemAriaLabels {\n  content?: string;\n  closeButton?: string;\n  triggerButton?: string;\n  resizeHandle?: string;\n}\n\nexport interface DrawerItem {\n  id: string;\n  content: React.ReactNode;\n  trigger: {\n    iconName?: IconProps.Name;\n    iconSvg?: React.ReactNode;\n  };\n  ariaLabels: DrawerItemAriaLabels;\n  resizable?: boolean;\n  defaultSize?: number;\n  onResize?: NonCancelableEventHandler<{ size: number; id: string }>;\n  badge?: boolean;\n}\n\nexport interface InternalDrawerProps {\n  drawers?: {\n    items: Array<DrawerItem>;\n    activeDrawerId?: string;\n    onChange?: NonCancelableEventHandler<string>;\n    onResize?: NonCancelableEventHandler<{ size: number; id: string }>;\n    ariaLabel?: string;\n    overflowAriaLabel?: string;\n    overflowWithBadgeAriaLabel?: string;\n  };\n}\n"]}