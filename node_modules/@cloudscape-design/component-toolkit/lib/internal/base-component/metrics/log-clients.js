// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { __assign } from "tslib";
/**
 * Console Platform's client logging JS API client.
 */
var CLogClient = /** @class */ (function () {
    function CLogClient() {
    }
    /**
     * Sends metric but only if Console Platform client logging JS API is present in the page.
     */
    CLogClient.prototype.sendMetric = function (metricName, value, detail) {
        if (!metricName || !/^[a-zA-Z0-9_-]{1,32}$/.test(metricName)) {
            console.error("Invalid metric name: ".concat(metricName));
            return;
        }
        if (detail && detail.length > 200) {
            console.error("Detail for metric ".concat(metricName, " is too long: ").concat(detail));
            return;
        }
        var AWSC = this.findAWSC(window);
        if (typeof AWSC === 'object' && typeof AWSC.Clog === 'object' && typeof AWSC.Clog.log === 'function') {
            AWSC.Clog.log(metricName, value, detail);
        }
    };
    CLogClient.prototype.findAWSC = function (currentWindow) {
        try {
            if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC) === 'object') {
                return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC;
            }
            if (!currentWindow || currentWindow.parent === currentWindow) {
                // When the window has no more parents, it references itself
                return undefined;
            }
            return this.findAWSC(currentWindow.parent);
        }
        catch (ex) {
            // Most likely a cross-origin access error
            return undefined;
        }
    };
    return CLogClient;
}());
export { CLogClient };
/**
 * Console Platform's client v2 logging JS API client.
 */
var PanoramaClient = /** @class */ (function () {
    function PanoramaClient() {
    }
    /**
     * Sends metric but only if Console Platform client v2 logging JS API is present in the page.
     */
    PanoramaClient.prototype.sendMetric = function (metric) {
        if (typeof metric.eventDetail === 'object') {
            metric.eventDetail = JSON.stringify(metric.eventDetail);
        }
        if (metric.eventDetail && metric.eventDetail.length > 200) {
            console.error("Detail for metric is too long: ".concat(metric.eventDetail));
            return;
        }
        if (typeof metric.eventValue === 'object') {
            metric.eventValue = JSON.stringify(metric.eventValue);
        }
        var panorama = this.findPanorama(window);
        if (typeof panorama === 'function') {
            panorama('trackCustomEvent', __assign(__assign({}, metric), { timestamp: Date.now() }));
        }
    };
    PanoramaClient.prototype.findPanorama = function (currentWindow) {
        try {
            if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.panorama) === 'function') {
                return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.panorama;
            }
            if (!currentWindow || currentWindow.parent === currentWindow) {
                // When the window has no more parents, it references itself
                return undefined;
            }
            return this.findPanorama(currentWindow.parent);
        }
        catch (ex) {
            // Most likely a cross-origin access error
            return undefined;
        }
    };
    return PanoramaClient;
}());
export { PanoramaClient };
